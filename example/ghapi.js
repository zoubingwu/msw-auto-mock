/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
import { setupWorker, rest } from 'msw';
import { faker } from '@faker-js/faker';

faker.seed(1);

const baseURL = '';
const MAX_ARRAY_LENGTH = 20;

let i = 0;
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
};

export const handlers = [
  rest.get(`${baseURL}/`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          current_user_url: faker.internet.url(),
          current_user_authorizations_html_url: faker.internet.url(),
          authorizations_url: faker.internet.url(),
          code_search_url: faker.internet.url(),
          commit_search_url: faker.internet.url(),
          emails_url: faker.internet.url(),
          emojis_url: faker.internet.url(),
          events_url: faker.internet.url(),
          feeds_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          hub_url: faker.internet.url(),
          issue_search_url: faker.internet.url(),
          issues_url: faker.internet.url(),
          keys_url: faker.internet.url(),
          label_search_url: faker.internet.url(),
          notifications_url: faker.internet.url(),
          organization_url: faker.internet.url(),
          organization_repositories_url: faker.internet.url(),
          organization_teams_url: faker.internet.url(),
          public_gists_url: faker.internet.url(),
          rate_limit_url: faker.internet.url(),
          repository_url: faker.internet.url(),
          repository_search_url: faker.internet.url(),
          current_user_repositories_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          starred_gists_url: faker.internet.url(),
          topic_search_url: faker.internet.url(),
          user_url: faker.internet.url(),
          user_organizations_url: faker.internet.url(),
          user_repositories_url: faker.internet.url(),
          user_search_url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/admin/hooks`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            type: faker.lorem.slug(1),
            id: faker.datatype.number(),
            name: faker.name.findName(),
            active: faker.datatype.boolean(),
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            config: {
              url: faker.internet.url(),
              content_type: faker.lorem.slug(1),
              insecure_ssl: faker.lorem.slug(1),
              secret: faker.lorem.slug(1),
            },
            updated_at: faker.date.past(),
            created_at: faker.date.past(),
            url: faker.internet.url(),
            ping_url: faker.internet.url(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/admin/hooks`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          type: faker.lorem.slug(1),
          id: faker.datatype.number(),
          name: faker.name.findName(),
          active: faker.datatype.boolean(),
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          config: {
            url: faker.internet.url(),
            content_type: faker.lorem.slug(1),
            insecure_ssl: faker.lorem.slug(1),
            secret: faker.lorem.slug(1),
          },
          updated_at: faker.date.past(),
          created_at: faker.date.past(),
          url: faker.internet.url(),
          ping_url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/admin/hooks/:hookId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          type: faker.lorem.slug(1),
          id: faker.datatype.number(),
          name: faker.name.findName(),
          active: faker.datatype.boolean(),
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          config: {
            url: faker.internet.url(),
            content_type: faker.lorem.slug(1),
            insecure_ssl: faker.lorem.slug(1),
            secret: faker.lorem.slug(1),
          },
          updated_at: faker.date.past(),
          created_at: faker.date.past(),
          url: faker.internet.url(),
          ping_url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/admin/hooks/:hookId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          type: faker.lorem.slug(1),
          id: faker.datatype.number(),
          name: faker.name.findName(),
          active: faker.datatype.boolean(),
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          config: {
            url: faker.internet.url(),
            content_type: faker.lorem.slug(1),
            insecure_ssl: faker.lorem.slug(1),
          },
          updated_at: faker.date.past(),
          created_at: faker.date.past(),
          url: faker.internet.url(),
          ping_url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/admin/hooks/:hookId`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/admin/hooks/:hookId/pings`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/admin/keys`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            key: faker.lorem.slug(1),
            user_id: faker.datatype.number(),
            repository_id: faker.datatype.number(),
            url: faker.internet.url(),
            title: faker.lorem.slug(1),
            read_only: faker.datatype.boolean(),
            verified: faker.datatype.boolean(),
            created_at: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/admin/keys/:keyIds`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/admin/ldap/teams/:teamId/mapping`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          ldap_dn: faker.lorem.slug(1),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          name: faker.name.findName(),
          slug: faker.lorem.slug(1),
          description: faker.lorem.slug(1),
          privacy: faker.lorem.slug(1),
          permission: faker.lorem.slug(1),
          members_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          parent: null,
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/admin/ldap/teams/:teamId/sync`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/admin/ldap/users/:username/mapping`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          ldap_dn: faker.lorem.slug(1),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url:
            'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url:
            'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url:
            'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url:
            'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          name: 'monalisa octocat',
          company: 'GitHub',
          blog: 'https://github.com/blog',
          location: 'San Francisco',
          email: 'octocat@github.com',
          hireable: faker.datatype.boolean(),
          bio: 'There once was...',
          twitter_username: 'monalisa',
          public_repos: 2,
          public_gists: 1,
          followers: 20,
          following: faker.datatype.number(),
          created_at: '2008-01-14T04:33:35Z',
          updated_at: '2008-01-14T04:33:35Z',
          private_gists: 81,
          total_private_repos: 100,
          owned_private_repos: 100,
          disk_usage: 10000,
          collaborators: 8,
          two_factor_authentication: true,
          plan: {
            collaborators: faker.datatype.number(),
            name: faker.name.findName(),
            space: faker.datatype.number(),
            private_repos: faker.datatype.number(),
          },
          suspended_at: faker.date.past(),
          business_plus: faker.datatype.boolean(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/admin/ldap/users/:username/sync`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/admin/organizations`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          login: 'github',
          id: 1,
          node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
          url: 'https://api.github.com/orgs/github',
          repos_url: 'https://api.github.com/orgs/github/repos',
          events_url: 'https://api.github.com/orgs/github/events',
          hooks_url: 'https://api.github.com/orgs/github/hooks',
          issues_url: 'https://api.github.com/orgs/github/issues',
          members_url: 'https://api.github.com/orgs/github/members{/member}',
          public_members_url:
            'https://api.github.com/orgs/github/public_members{/member}',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          description: 'A great organization',
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/admin/organizations/:org`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(202),
        ctx.json({
          message: faker.lorem.slug(1),
          url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/admin/pre-receive-environments`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            image_url: faker.internet.url(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            default_environment: faker.datatype.boolean(),
            created_at: faker.date.past(),
            hooks_count: faker.datatype.number(),
            download: {
              url: faker.internet.url(),
              state: faker.lorem.slug(1),
              downloaded_at: faker.date.past(),
              message: faker.lorem.slug(1),
            },
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/admin/pre-receive-environments`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          name: faker.name.findName(),
          image_url: faker.internet.url(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          default_environment: faker.datatype.boolean(),
          created_at: faker.date.past(),
          hooks_count: faker.datatype.number(),
          download: {
            url: faker.internet.url(),
            state: faker.lorem.slug(1),
            downloaded_at: faker.date.past(),
            message: faker.lorem.slug(1),
          },
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/admin/pre-receive-environments/:preReceiveEnvironmentId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            image_url: faker.internet.url(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            default_environment: faker.datatype.boolean(),
            created_at: faker.date.past(),
            hooks_count: faker.datatype.number(),
            download: {
              url: faker.internet.url(),
              state: faker.lorem.slug(1),
              downloaded_at: faker.date.past(),
              message: faker.lorem.slug(1),
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/admin/pre-receive-environments/:preReceiveEnvironmentId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            image_url: faker.internet.url(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            default_environment: faker.datatype.boolean(),
            created_at: faker.date.past(),
            hooks_count: faker.datatype.number(),
            download: {
              url: faker.internet.url(),
              state: faker.lorem.slug(1),
              downloaded_at: faker.date.past(),
              message: faker.lorem.slug(1),
            },
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/admin/pre-receive-environments/:preReceiveEnvironmentId`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/admin/pre-receive-environments/:preReceiveEnvironmentId/downloads`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(202),
          ctx.json({
            url: faker.internet.url(),
            state: faker.lorem.slug(1),
            downloaded_at: faker.date.past(),
            message: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/admin/pre-receive-environments/:preReceiveEnvironmentId/downloads/latest`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.internet.url(),
            state: faker.lorem.slug(1),
            downloaded_at: faker.date.past(),
            message: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/admin/pre-receive-hooks`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            enforcement: faker.lorem.slug(1),
            script: faker.lorem.slug(1),
            script_repository: {
              id: faker.datatype.number(),
              full_name: faker.name.findName(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
            },
            environment: {
              id: faker.datatype.number(),
              name: faker.name.findName(),
              image_url: faker.internet.url(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              default_environment: faker.datatype.boolean(),
              created_at: faker.date.past(),
              hooks_count: faker.datatype.number(),
              download: {
                url: faker.internet.url(),
                state: faker.lorem.slug(1),
                downloaded_at: faker.date.past(),
                message: faker.lorem.slug(1),
              },
            },
            allow_downstream_configuration: faker.datatype.boolean(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/admin/pre-receive-hooks`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          name: faker.name.findName(),
          enforcement: faker.lorem.slug(1),
          script: faker.lorem.slug(1),
          script_repository: {
            id: faker.datatype.number(),
            full_name: faker.name.findName(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
          },
          environment: {
            id: faker.datatype.number(),
            name: faker.name.findName(),
            image_url: faker.internet.url(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            default_environment: faker.datatype.boolean(),
            created_at: faker.date.past(),
            hooks_count: faker.datatype.number(),
            download: {
              url: faker.internet.url(),
              state: faker.lorem.slug(1),
              downloaded_at: faker.date.past(),
              message: faker.lorem.slug(1),
            },
          },
          allow_downstream_configuration: faker.datatype.boolean(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/admin/pre-receive-hooks/:preReceiveHookId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            enforcement: faker.lorem.slug(1),
            script: faker.lorem.slug(1),
            script_repository: {
              id: faker.datatype.number(),
              full_name: faker.name.findName(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
            },
            environment: {
              id: faker.datatype.number(),
              name: faker.name.findName(),
              image_url: faker.internet.url(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              default_environment: faker.datatype.boolean(),
              created_at: faker.date.past(),
              hooks_count: faker.datatype.number(),
              download: {
                url: faker.internet.url(),
                state: faker.lorem.slug(1),
                downloaded_at: faker.date.past(),
                message: faker.lorem.slug(1),
              },
            },
            allow_downstream_configuration: faker.datatype.boolean(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/admin/pre-receive-hooks/:preReceiveHookId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            enforcement: faker.lorem.slug(1),
            script: faker.lorem.slug(1),
            script_repository: {
              id: faker.datatype.number(),
              full_name: faker.name.findName(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
            },
            environment: {
              id: faker.datatype.number(),
              name: faker.name.findName(),
              image_url: faker.internet.url(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              default_environment: faker.datatype.boolean(),
              created_at: faker.date.past(),
              hooks_count: faker.datatype.number(),
              download: {
                url: faker.internet.url(),
                state: faker.lorem.slug(1),
                downloaded_at: faker.date.past(),
                message: faker.lorem.slug(1),
              },
            },
            allow_downstream_configuration: faker.datatype.boolean(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/admin/pre-receive-hooks/:preReceiveHookId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/admin/tokens`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            url: faker.internet.url(),
            scopes: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            token: faker.lorem.slug(1),
            token_last_eight: faker.lorem.slug(1),
            hashed_token: faker.lorem.slug(1),
            app: {
              client_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              url: faker.internet.url(),
            },
            note: faker.lorem.slug(1),
            note_url: faker.internet.url(),
            updated_at: faker.date.past(),
            created_at: faker.date.past(),
            fingerprint: faker.lorem.slug(1),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            installation: {
              permissions: {
                contents: 'read',
                issues: 'read',
                deployments: 'write',
                single_file: 'read',
              },
              repository_selection: faker.helpers.arrayElement([
                'all',
                'selected',
              ]),
              single_file_name: 'config.yaml',
              has_multiple_single_files: true,
              single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
              repositories_url: 'https://api.github.com/users/octocat/repos',
              account: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            },
            expires_at: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/admin/tokens/:tokenId`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/admin/users`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          name: faker.name.findName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url:
            'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url:
            'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url:
            'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url:
            'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/admin/users/:username`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(202),
        ctx.json({
          message: faker.lorem.slug(1),
          url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/admin/users/:username`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(
    `${baseURL}/admin/users/:username/authorizations`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            url: faker.internet.url(),
            scopes: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            token: faker.lorem.slug(1),
            token_last_eight: faker.lorem.slug(1),
            hashed_token: faker.lorem.slug(1),
            app: {
              client_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              url: faker.internet.url(),
            },
            note: faker.lorem.slug(1),
            note_url: faker.internet.url(),
            updated_at: faker.date.past(),
            created_at: faker.date.past(),
            fingerprint: faker.lorem.slug(1),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            installation: {
              permissions: {
                contents: 'read',
                issues: 'read',
                deployments: 'write',
                single_file: 'read',
              },
              repository_selection: faker.helpers.arrayElement([
                'all',
                'selected',
              ]),
              single_file_name: 'config.yaml',
              has_multiple_single_files: true,
              single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
              repositories_url: 'https://api.github.com/users/octocat/repos',
              account: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            },
            expires_at: faker.date.past(),
          }),
        ],
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            url: faker.internet.url(),
            scopes: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            token: faker.lorem.slug(1),
            token_last_eight: faker.lorem.slug(1),
            hashed_token: faker.lorem.slug(1),
            app: {
              client_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              url: faker.internet.url(),
            },
            note: faker.lorem.slug(1),
            note_url: faker.internet.url(),
            updated_at: faker.date.past(),
            created_at: faker.date.past(),
            fingerprint: faker.lorem.slug(1),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            installation: {
              permissions: {
                contents: 'read',
                issues: 'read',
                deployments: 'write',
                single_file: 'read',
              },
              repository_selection: faker.helpers.arrayElement([
                'all',
                'selected',
              ]),
              single_file_name: 'config.yaml',
              has_multiple_single_files: true,
              single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
              repositories_url: 'https://api.github.com/users/octocat/repos',
              account: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            },
            expires_at: faker.date.past(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/admin/users/:username/authorizations`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/app`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/app-manifests/:code/conversions`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(201), ctx.json(null)],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/app/hook/config`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: 'https://example.com/webhook',
          content_type: '"json"',
          secret: '"********"',
          insecure_ssl: null,
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/app/hook/config`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: 'https://example.com/webhook',
          content_type: '"json"',
          secret: '"********"',
          insecure_ssl: null,
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/app/hook/deliveries`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 42,
            guid: '58474f00-b361-11eb-836d-0e4f3503ccbe',
            delivered_at: '2021-05-12T20:33:44Z',
            redelivery: faker.datatype.boolean(),
            duration: 0.03,
            status: 'failed to connect',
            status_code: 502,
            event: 'issues',
            action: 'opened',
            installation_id: 123,
            repository_id: 123,
          }))
        ),
      ],
      [
        ctx.status(400),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/app/hook/deliveries/:deliveryId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 42,
          guid: '58474f00-b361-11eb-836d-0e4f3503ccbe',
          delivered_at: '2021-05-12T20:33:44Z',
          redelivery: faker.datatype.boolean(),
          duration: 0.03,
          status: 'failed to connect',
          status_code: 502,
          event: 'issues',
          action: 'opened',
          installation_id: 123,
          repository_id: 123,
          url: 'https://www.example.com',
          request: {
            headers: {},
            payload: {},
          },
          response: {
            headers: {},
            payload: faker.lorem.slug(1),
          },
        }),
      ],
      [
        ctx.status(400),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(
    `${baseURL}/app/hook/deliveries/:deliveryId/attempts`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(202), ctx.json({})],
        [
          ctx.status(400),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/app/installations`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 1,
            account: null,
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
            access_tokens_url:
              'https://api.github.com/installations/1/access_tokens',
            repositories_url:
              'https://api.github.com/installation/repositories',
            html_url:
              'https://github.com/organizations/github/settings/installations/1',
            app_id: 1,
            target_id: faker.datatype.number(),
            target_type: 'Organization',
            permissions: {
              contents: 'read',
              issues: 'read',
              deployments: 'write',
              single_file: 'read',
            },
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            single_file_name: 'config.yaml',
            has_multiple_single_files: true,
            single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
            app_slug: 'github-actions',
            suspended_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            suspended_at: faker.date.past(),
            contact_email: '"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"',
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/app/installations/:installationId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 1,
          account: null,
          repository_selection: faker.helpers.arrayElement(['all', 'selected']),
          access_tokens_url:
            'https://api.github.com/installations/1/access_tokens',
          repositories_url: 'https://api.github.com/installation/repositories',
          html_url:
            'https://github.com/organizations/github/settings/installations/1',
          app_id: 1,
          target_id: faker.datatype.number(),
          target_type: 'Organization',
          permissions: {
            contents: 'read',
            issues: 'read',
            deployments: 'write',
            single_file: 'read',
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          single_file_name: 'config.yaml',
          has_multiple_single_files: true,
          single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
          app_slug: 'github-actions',
          suspended_by: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          suspended_at: faker.date.past(),
          contact_email: '"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"',
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/app/installations/:installationId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(
    `${baseURL}/app/installations/:installationId/access_tokens`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            token: faker.lorem.slug(1),
            expires_at: faker.date.past(),
            permissions: {
              contents: 'read',
              issues: 'read',
              deployments: 'write',
              single_file: 'read',
            },
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
            repositories: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            })),
            single_file: 'README.md',
            has_multiple_single_files: true,
            single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
          }),
        ],
        [
          ctx.status(401),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/app/installations/:installationId/suspended`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/app/installations/:installationId/suspended`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/applications/grants`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 1,
            url: 'https://api.github.com/applications/grants/1',
            app: {
              client_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              url: faker.internet.url(),
            },
            created_at: '2011-09-06T17:26:27Z',
            updated_at: '2011-09-06T20:39:23Z',
            scopes: ['public_repo'],
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/applications/grants/:grantId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 1,
          url: 'https://api.github.com/applications/grants/1',
          app: {
            client_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            url: faker.internet.url(),
          },
          created_at: '2011-09-06T17:26:27Z',
          updated_at: '2011-09-06T20:39:23Z',
          scopes: ['public_repo'],
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/applications/grants/:grantId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/applications/:clientId/grant`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(
    `${baseURL}/applications/:clientId/grants/:accessToken`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(`${baseURL}/applications/:clientId/token`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.internet.url(),
          scopes: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          token: faker.lorem.slug(1),
          token_last_eight: faker.lorem.slug(1),
          hashed_token: faker.lorem.slug(1),
          app: {
            client_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            url: faker.internet.url(),
          },
          note: faker.lorem.slug(1),
          note_url: faker.internet.url(),
          updated_at: faker.date.past(),
          created_at: faker.date.past(),
          fingerprint: faker.lorem.slug(1),
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          installation: {
            permissions: {
              contents: 'read',
              issues: 'read',
              deployments: 'write',
              single_file: 'read',
            },
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: 'config.yaml',
            has_multiple_single_files: true,
            single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
            repositories_url: 'https://api.github.com/users/octocat/repos',
            account: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
          },
          expires_at: faker.date.past(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/applications/:clientId/token`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.internet.url(),
          scopes: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          token: faker.lorem.slug(1),
          token_last_eight: faker.lorem.slug(1),
          hashed_token: faker.lorem.slug(1),
          app: {
            client_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            url: faker.internet.url(),
          },
          note: faker.lorem.slug(1),
          note_url: faker.internet.url(),
          updated_at: faker.date.past(),
          created_at: faker.date.past(),
          fingerprint: faker.lorem.slug(1),
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          installation: {
            permissions: {
              contents: 'read',
              issues: 'read',
              deployments: 'write',
              single_file: 'read',
            },
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: 'config.yaml',
            has_multiple_single_files: true,
            single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
            repositories_url: 'https://api.github.com/users/octocat/repos',
            account: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
          },
          expires_at: faker.date.past(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/applications/:clientId/token`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/applications/:clientId/token/scoped`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.internet.url(),
          scopes: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          token: faker.lorem.slug(1),
          token_last_eight: faker.lorem.slug(1),
          hashed_token: faker.lorem.slug(1),
          app: {
            client_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            url: faker.internet.url(),
          },
          note: faker.lorem.slug(1),
          note_url: faker.internet.url(),
          updated_at: faker.date.past(),
          created_at: faker.date.past(),
          fingerprint: faker.lorem.slug(1),
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          installation: {
            permissions: {
              contents: 'read',
              issues: 'read',
              deployments: 'write',
              single_file: 'read',
            },
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: 'config.yaml',
            has_multiple_single_files: true,
            single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
            repositories_url: 'https://api.github.com/users/octocat/repos',
            account: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
          },
          expires_at: faker.date.past(),
        }),
      ],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/applications/:clientId/tokens/:accessToken`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            url: faker.internet.url(),
            scopes: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            token: faker.lorem.slug(1),
            token_last_eight: faker.lorem.slug(1),
            hashed_token: faker.lorem.slug(1),
            app: {
              client_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              url: faker.internet.url(),
            },
            note: faker.lorem.slug(1),
            note_url: faker.internet.url(),
            updated_at: faker.date.past(),
            created_at: faker.date.past(),
            fingerprint: faker.lorem.slug(1),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            installation: {
              permissions: {
                contents: 'read',
                issues: 'read',
                deployments: 'write',
                single_file: 'read',
              },
              repository_selection: faker.helpers.arrayElement([
                'all',
                'selected',
              ]),
              single_file_name: 'config.yaml',
              has_multiple_single_files: true,
              single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
              repositories_url: 'https://api.github.com/users/octocat/repos',
              account: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            },
            expires_at: faker.date.past(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/applications/:clientId/tokens/:accessToken`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            url: faker.internet.url(),
            scopes: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            token: faker.lorem.slug(1),
            token_last_eight: faker.lorem.slug(1),
            hashed_token: faker.lorem.slug(1),
            app: {
              client_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              url: faker.internet.url(),
            },
            note: faker.lorem.slug(1),
            note_url: faker.internet.url(),
            updated_at: faker.date.past(),
            created_at: faker.date.past(),
            fingerprint: faker.lorem.slug(1),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            installation: {
              permissions: {
                contents: 'read',
                issues: 'read',
                deployments: 'write',
                single_file: 'read',
              },
              repository_selection: faker.helpers.arrayElement([
                'all',
                'selected',
              ]),
              single_file_name: 'config.yaml',
              has_multiple_single_files: true,
              single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
              repositories_url: 'https://api.github.com/users/octocat/repos',
              account: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            },
            expires_at: faker.date.past(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/applications/:clientId/tokens/:accessToken`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/apps/:appSlug`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/authorizations`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            url: faker.internet.url(),
            scopes: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            token: faker.lorem.slug(1),
            token_last_eight: faker.lorem.slug(1),
            hashed_token: faker.lorem.slug(1),
            app: {
              client_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              url: faker.internet.url(),
            },
            note: faker.lorem.slug(1),
            note_url: faker.internet.url(),
            updated_at: faker.date.past(),
            created_at: faker.date.past(),
            fingerprint: faker.lorem.slug(1),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            installation: {
              permissions: {
                contents: 'read',
                issues: 'read',
                deployments: 'write',
                single_file: 'read',
              },
              repository_selection: faker.helpers.arrayElement([
                'all',
                'selected',
              ]),
              single_file_name: 'config.yaml',
              has_multiple_single_files: true,
              single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
              repositories_url: 'https://api.github.com/users/octocat/repos',
              account: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            },
            expires_at: faker.date.past(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/authorizations`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.internet.url(),
          scopes: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          token: faker.lorem.slug(1),
          token_last_eight: faker.lorem.slug(1),
          hashed_token: faker.lorem.slug(1),
          app: {
            client_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            url: faker.internet.url(),
          },
          note: faker.lorem.slug(1),
          note_url: faker.internet.url(),
          updated_at: faker.date.past(),
          created_at: faker.date.past(),
          fingerprint: faker.lorem.slug(1),
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          installation: {
            permissions: {
              contents: 'read',
              issues: 'read',
              deployments: 'write',
              single_file: 'read',
            },
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: 'config.yaml',
            has_multiple_single_files: true,
            single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
            repositories_url: 'https://api.github.com/users/octocat/repos',
            account: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
          },
          expires_at: faker.date.past(),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/authorizations/clients/:clientId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.internet.url(),
          scopes: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          token: faker.lorem.slug(1),
          token_last_eight: faker.lorem.slug(1),
          hashed_token: faker.lorem.slug(1),
          app: {
            client_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            url: faker.internet.url(),
          },
          note: faker.lorem.slug(1),
          note_url: faker.internet.url(),
          updated_at: faker.date.past(),
          created_at: faker.date.past(),
          fingerprint: faker.lorem.slug(1),
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          installation: {
            permissions: {
              contents: 'read',
              issues: 'read',
              deployments: 'write',
              single_file: 'read',
            },
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: 'config.yaml',
            has_multiple_single_files: true,
            single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
            repositories_url: 'https://api.github.com/users/octocat/repos',
            account: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
          },
          expires_at: faker.date.past(),
        }),
      ],
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.internet.url(),
          scopes: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          token: faker.lorem.slug(1),
          token_last_eight: faker.lorem.slug(1),
          hashed_token: faker.lorem.slug(1),
          app: {
            client_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            url: faker.internet.url(),
          },
          note: faker.lorem.slug(1),
          note_url: faker.internet.url(),
          updated_at: faker.date.past(),
          created_at: faker.date.past(),
          fingerprint: faker.lorem.slug(1),
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          installation: {
            permissions: {
              contents: 'read',
              issues: 'read',
              deployments: 'write',
              single_file: 'read',
            },
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: 'config.yaml',
            has_multiple_single_files: true,
            single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
            repositories_url: 'https://api.github.com/users/octocat/repos',
            account: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
          },
          expires_at: faker.date.past(),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(
    `${baseURL}/authorizations/clients/:clientId/:fingerprint`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            url: faker.internet.url(),
            scopes: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            token: faker.lorem.slug(1),
            token_last_eight: faker.lorem.slug(1),
            hashed_token: faker.lorem.slug(1),
            app: {
              client_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              url: faker.internet.url(),
            },
            note: faker.lorem.slug(1),
            note_url: faker.internet.url(),
            updated_at: faker.date.past(),
            created_at: faker.date.past(),
            fingerprint: faker.lorem.slug(1),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            installation: {
              permissions: {
                contents: 'read',
                issues: 'read',
                deployments: 'write',
                single_file: 'read',
              },
              repository_selection: faker.helpers.arrayElement([
                'all',
                'selected',
              ]),
              single_file_name: 'config.yaml',
              has_multiple_single_files: true,
              single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
              repositories_url: 'https://api.github.com/users/octocat/repos',
              account: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            },
            expires_at: faker.date.past(),
          }),
        ],
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            url: faker.internet.url(),
            scopes: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            token: faker.lorem.slug(1),
            token_last_eight: faker.lorem.slug(1),
            hashed_token: faker.lorem.slug(1),
            app: {
              client_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              url: faker.internet.url(),
            },
            note: faker.lorem.slug(1),
            note_url: faker.internet.url(),
            updated_at: faker.date.past(),
            created_at: faker.date.past(),
            fingerprint: faker.lorem.slug(1),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            installation: {
              permissions: {
                contents: 'read',
                issues: 'read',
                deployments: 'write',
                single_file: 'read',
              },
              repository_selection: faker.helpers.arrayElement([
                'all',
                'selected',
              ]),
              single_file_name: 'config.yaml',
              has_multiple_single_files: true,
              single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
              repositories_url: 'https://api.github.com/users/octocat/repos',
              account: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            },
            expires_at: faker.date.past(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/authorizations/:authorizationId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.internet.url(),
          scopes: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          token: faker.lorem.slug(1),
          token_last_eight: faker.lorem.slug(1),
          hashed_token: faker.lorem.slug(1),
          app: {
            client_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            url: faker.internet.url(),
          },
          note: faker.lorem.slug(1),
          note_url: faker.internet.url(),
          updated_at: faker.date.past(),
          created_at: faker.date.past(),
          fingerprint: faker.lorem.slug(1),
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          installation: {
            permissions: {
              contents: 'read',
              issues: 'read',
              deployments: 'write',
              single_file: 'read',
            },
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: 'config.yaml',
            has_multiple_single_files: true,
            single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
            repositories_url: 'https://api.github.com/users/octocat/repos',
            account: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
          },
          expires_at: faker.date.past(),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/authorizations/:authorizationId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.internet.url(),
          scopes: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          token: faker.lorem.slug(1),
          token_last_eight: faker.lorem.slug(1),
          hashed_token: faker.lorem.slug(1),
          app: {
            client_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            url: faker.internet.url(),
          },
          note: faker.lorem.slug(1),
          note_url: faker.internet.url(),
          updated_at: faker.date.past(),
          created_at: faker.date.past(),
          fingerprint: faker.lorem.slug(1),
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          installation: {
            permissions: {
              contents: 'read',
              issues: 'read',
              deployments: 'write',
              single_file: 'read',
            },
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: 'config.yaml',
            has_multiple_single_files: true,
            single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
            repositories_url: 'https://api.github.com/users/octocat/repos',
            account: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
          },
          expires_at: faker.date.past(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/authorizations/:authorizationId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/codes_of_conduct`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            key: 'contributor_covenant',
            name: 'Contributor Covenant',
            url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
            body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
            html_url: faker.internet.url(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/codes_of_conduct/:key`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          key: 'contributor_covenant',
          name: 'Contributor Covenant',
          url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
          body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
          html_url: faker.internet.url(),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/emojis`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(5).keys()]
            .map(_ => ({ [faker.lorem.word()]: faker.lorem.slug(1) }))
            .reduce((acc, next) => Object.assign(acc, next), {})
        ),
      ],
      [ctx.status(304), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/enterprise/announcement`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          announcement: 'Very **important** announcement about _something_.',
          expires_at: '"2021-01-01T00:00:00.000-07:00"',
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/enterprise/announcement`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          announcement: 'Very **important** announcement about _something_.',
          expires_at: '"2021-01-01T00:00:00.000-07:00"',
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/enterprise/announcement`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/enterprise/settings/license`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          seats: null,
          seats_used: faker.datatype.number(),
          seats_available: null,
          kind: faker.lorem.slug(1),
          days_until_expiration: faker.datatype.number(),
          expire_at: faker.date.past(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/enterprise/stats/all`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          repos: {
            total_repos: faker.datatype.number(),
            root_repos: faker.datatype.number(),
            fork_repos: faker.datatype.number(),
            org_repos: faker.datatype.number(),
            total_pushes: faker.datatype.number(),
            total_wikis: faker.datatype.number(),
          },
          hooks: {
            total_hooks: faker.datatype.number(),
            active_hooks: faker.datatype.number(),
            inactive_hooks: faker.datatype.number(),
          },
          pages: {
            total_pages: faker.datatype.number(),
          },
          orgs: {
            total_orgs: faker.datatype.number(),
            disabled_orgs: faker.datatype.number(),
            total_teams: faker.datatype.number(),
            total_team_members: faker.datatype.number(),
          },
          users: {
            total_users: faker.datatype.number(),
            admin_users: faker.datatype.number(),
            suspended_users: faker.datatype.number(),
          },
          pulls: {
            total_pulls: faker.datatype.number(),
            merged_pulls: faker.datatype.number(),
            mergeable_pulls: faker.datatype.number(),
            unmergeable_pulls: faker.datatype.number(),
          },
          issues: {
            total_issues: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            closed_issues: faker.datatype.number(),
          },
          milestones: {
            total_milestones: faker.datatype.number(),
            open_milestones: faker.datatype.number(),
            closed_milestones: faker.datatype.number(),
          },
          gists: {
            total_gists: faker.datatype.number(),
            private_gists: faker.datatype.number(),
            public_gists: faker.datatype.number(),
          },
          comments: {
            total_commit_comments: faker.datatype.number(),
            total_gist_comments: faker.datatype.number(),
            total_issue_comments: faker.datatype.number(),
            total_pull_request_comments: faker.datatype.number(),
          },
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/enterprise/stats/comments`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_commit_comments: faker.datatype.number(),
          total_gist_comments: faker.datatype.number(),
          total_issue_comments: faker.datatype.number(),
          total_pull_request_comments: faker.datatype.number(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/enterprise/stats/gists`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_gists: faker.datatype.number(),
          private_gists: faker.datatype.number(),
          public_gists: faker.datatype.number(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/enterprise/stats/hooks`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_hooks: faker.datatype.number(),
          active_hooks: faker.datatype.number(),
          inactive_hooks: faker.datatype.number(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/enterprise/stats/issues`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_issues: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/enterprise/stats/milestones`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_milestones: faker.datatype.number(),
          open_milestones: faker.datatype.number(),
          closed_milestones: faker.datatype.number(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/enterprise/stats/orgs`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_orgs: faker.datatype.number(),
          disabled_orgs: faker.datatype.number(),
          total_teams: faker.datatype.number(),
          total_team_members: faker.datatype.number(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/enterprise/stats/pages`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_pages: faker.datatype.number(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/enterprise/stats/pulls`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_pulls: faker.datatype.number(),
          merged_pulls: faker.datatype.number(),
          mergeable_pulls: faker.datatype.number(),
          unmergeable_pulls: faker.datatype.number(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/enterprise/stats/repos`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_repos: faker.datatype.number(),
          root_repos: faker.datatype.number(),
          fork_repos: faker.datatype.number(),
          org_repos: faker.datatype.number(),
          total_pushes: faker.datatype.number(),
          total_wikis: faker.datatype.number(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/enterprise/stats/users`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_users: faker.datatype.number(),
          admin_users: faker.datatype.number(),
          suspended_users: faker.datatype.number(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/enterprises/:enterprise/actions/permissions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            enabled_organizations: faker.helpers.arrayElement([
              'all',
              'none',
              'selected',
            ]),
            selected_organizations_url: faker.internet.url(),
            allowed_actions: faker.helpers.arrayElement([
              'all',
              'local_only',
              'selected',
            ]),
            selected_actions_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/enterprises/:enterprise/actions/permissions`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/enterprises/:enterprise/actions/permissions/organizations`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            organizations: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              login: 'github',
              id: 1,
              node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
              url: 'https://api.github.com/orgs/github',
              repos_url: 'https://api.github.com/orgs/github/repos',
              events_url: 'https://api.github.com/orgs/github/events',
              hooks_url: 'https://api.github.com/orgs/github/hooks',
              issues_url: 'https://api.github.com/orgs/github/issues',
              members_url:
                'https://api.github.com/orgs/github/members{/member}',
              public_members_url:
                'https://api.github.com/orgs/github/public_members{/member}',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              description: 'A great organization',
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/enterprises/:enterprise/actions/permissions/organizations`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/enterprises/:enterprise/actions/permissions/organizations/:orgId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/enterprises/:enterprise/actions/permissions/organizations/:orgId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/enterprises/:enterprise/actions/permissions/selected-actions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            github_owned_allowed: faker.datatype.boolean(),
            patterns_allowed: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/enterprises/:enterprise/actions/permissions/selected-actions`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/enterprises/:enterprise/actions/runner-groups`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            runner_groups: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              name: faker.name.findName(),
              visibility: faker.lorem.slug(1),
              default: faker.datatype.boolean(),
              selected_organizations_url: faker.internet.url(),
              runners_url: faker.internet.url(),
              allows_public_repositories: faker.datatype.boolean(),
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/enterprises/:enterprise/actions/runner-groups`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            visibility: faker.lorem.slug(1),
            default: faker.datatype.boolean(),
            selected_organizations_url: faker.internet.url(),
            runners_url: faker.internet.url(),
            allows_public_repositories: faker.datatype.boolean(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            visibility: faker.lorem.slug(1),
            default: faker.datatype.boolean(),
            selected_organizations_url: faker.internet.url(),
            runners_url: faker.internet.url(),
            allows_public_repositories: faker.datatype.boolean(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            visibility: faker.lorem.slug(1),
            default: faker.datatype.boolean(),
            selected_organizations_url: faker.internet.url(),
            runners_url: faker.internet.url(),
            allows_public_repositories: faker.datatype.boolean(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/organizations`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            organizations: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              login: 'github',
              id: 1,
              node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
              url: 'https://api.github.com/orgs/github',
              repos_url: 'https://api.github.com/orgs/github/repos',
              events_url: 'https://api.github.com/orgs/github/events',
              hooks_url: 'https://api.github.com/orgs/github/hooks',
              issues_url: 'https://api.github.com/orgs/github/issues',
              members_url:
                'https://api.github.com/orgs/github/members{/member}',
              public_members_url:
                'https://api.github.com/orgs/github/public_members{/member}',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              description: 'A great organization',
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/organizations`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/organizations/:orgId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/organizations/:orgId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/runners`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            runners: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 5,
              name: 'iMac',
              os: 'macos',
              status: 'online',
              busy: faker.datatype.boolean(),
              labels: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                name: faker.name.findName(),
                type: faker.helpers.arrayElement(['read-only', 'custom']),
              })),
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/runners`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/runners/:runnerId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/runners/:runnerId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/enterprises/:enterprise/actions/runners`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            runners: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 5,
              name: 'iMac',
              os: 'macos',
              status: 'online',
              busy: faker.datatype.boolean(),
              labels: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                name: faker.name.findName(),
                type: faker.helpers.arrayElement(['read-only', 'custom']),
              })),
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/enterprises/:enterprise/actions/runners/downloads`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              os: faker.lorem.slug(1),
              architecture: faker.lorem.slug(1),
              download_url: faker.internet.url(),
              filename: faker.name.findName(),
              temp_download_token: faker.lorem.slug(1),
              sha256_checksum: faker.lorem.slug(1),
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/enterprises/:enterprise/actions/runners/registration-token`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            token: 'v1.1f699f1069f60xxx',
            expires_at: '2016-07-11T22:14:10Z',
            permissions: { issues: 'read', deployments: 'write' },
            repositories: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            })),
            single_file: 'config.yaml',
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/enterprises/:enterprise/actions/runners/remove-token`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            token: 'v1.1f699f1069f60xxx',
            expires_at: '2016-07-11T22:14:10Z',
            permissions: { issues: 'read', deployments: 'write' },
            repositories: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            })),
            single_file: 'config.yaml',
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/enterprises/:enterprise/actions/runners/:runnerId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 5,
            name: 'iMac',
            os: 'macos',
            status: 'online',
            busy: faker.datatype.boolean(),
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              name: faker.name.findName(),
              type: faker.helpers.arrayElement(['read-only', 'custom']),
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/enterprises/:enterprise/actions/runners/:runnerId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/enterprises/:enterprise/audit-log`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            '@timestamp': faker.datatype.number(),
            action: faker.lorem.slug(1),
            active: faker.datatype.boolean(),
            active_was: faker.datatype.boolean(),
            actor: faker.lorem.slug(1),
            actor_id: faker.datatype.number(),
            actor_location: {
              country_name: faker.name.findName(),
            },
            data: {},
            org_id: faker.datatype.number(),
            user_id: faker.datatype.number(),
            business_id: faker.datatype.number(),
            blocked_user: faker.lorem.slug(1),
            business: faker.lorem.slug(1),
            config: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({})),
            config_was: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({})),
            content_type: faker.lorem.slug(1),
            operation_type: faker.lorem.slug(1),
            created_at: faker.datatype.number(),
            deploy_key_fingerprint: faker.lorem.slug(1),
            _document_id: faker.lorem.slug(1),
            emoji: faker.lorem.slug(1),
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({})),
            events_were: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({})),
            explanation: faker.lorem.slug(1),
            fingerprint: faker.lorem.slug(1),
            hook_id: faker.datatype.number(),
            limited_availability: faker.datatype.boolean(),
            message: faker.lorem.slug(1),
            name: faker.name.findName(),
            old_user: faker.lorem.slug(1),
            openssh_public_key: faker.lorem.slug(1),
            org: faker.lorem.slug(1),
            previous_visibility: faker.lorem.slug(1),
            read_only: faker.datatype.boolean(),
            repo: faker.lorem.slug(1),
            repository: faker.lorem.slug(1),
            repository_public: faker.datatype.boolean(),
            target_login: faker.lorem.slug(1),
            team: faker.lorem.slug(1),
            transport_protocol: faker.datatype.number(),
            transport_protocol_name: faker.name.findName(),
            user: faker.lorem.slug(1),
            visibility: faker.lorem.slug(1),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/events`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.lorem.slug(1),
            type: faker.lorem.slug(1),
            actor: {
              id: faker.datatype.number(),
              login: faker.lorem.slug(1),
              display_login: faker.lorem.slug(1),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              avatar_url: faker.internet.url(),
            },
            repo: {
              id: faker.datatype.number(),
              name: faker.name.findName(),
              url: faker.internet.url(),
            },
            org: {
              id: faker.datatype.number(),
              login: faker.lorem.slug(1),
              display_login: faker.lorem.slug(1),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              avatar_url: faker.internet.url(),
            },
            payload: {
              action: faker.lorem.slug(1),
              issue: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                url: 'https://api.github.com/repositories/42/issues/1',
                repository_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                events_url: faker.internet.url(),
                html_url: faker.internet.url(),
                number: 42,
                state: 'open',
                state_reason: 'not_planned',
                title: 'Widget creation fails in Safari on OS X 10.8',
                body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                labels: ['bug', 'registration'],
                assignee: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                assignees: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                })),
                milestone: {
                  url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
                  html_url:
                    'https://github.com/octocat/Hello-World/milestones/v1.0',
                  labels_url:
                    'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
                  id: 1002604,
                  node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
                  number: 42,
                  state: 'open',
                  title: 'v1.0',
                  description: 'Tracking milestone for version 1.0',
                  creator: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  open_issues: 4,
                  closed_issues: 8,
                  created_at: '2011-04-10T20:09:31Z',
                  updated_at: '2014-03-03T18:58:10Z',
                  closed_at: '2013-02-12T13:22:01Z',
                  due_on: '2012-10-09T23:39:01Z',
                },
                locked: faker.datatype.boolean(),
                active_lock_reason: faker.lorem.slug(1),
                comments: faker.datatype.number(),
                pull_request: {
                  merged_at: faker.date.past(),
                  diff_url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  patch_url: faker.internet.url(),
                  url: faker.internet.url(),
                },
                closed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                draft: faker.datatype.boolean(),
                closed_by: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                body_html: faker.lorem.slug(1),
                body_text: faker.lorem.slug(1),
                timeline_url: faker.internet.url(),
                repository: {
                  id: 42,
                  node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                  name: 'Team Environment',
                  full_name: 'octocat/Hello-World',
                  license: {
                    key: 'mit',
                    name: 'MIT License',
                    url: 'https://api.github.com/licenses/mit',
                    spdx_id: 'MIT',
                    node_id: 'MDc6TGljZW5zZW1pdA==',
                    html_url: faker.internet.url(),
                  },
                  organization: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  forks: faker.datatype.number(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                  },
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  private: faker.datatype.boolean(),
                  html_url: 'https://github.com/octocat/Hello-World',
                  description: 'This your first repo!',
                  fork: faker.datatype.boolean(),
                  url: 'https://api.github.com/repos/octocat/Hello-World',
                  archive_url:
                    'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                  assignees_url:
                    'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                  blobs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                  branches_url:
                    'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                  collaborators_url:
                    'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                  comments_url:
                    'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                  commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                  compare_url:
                    'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                  contents_url:
                    'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                  contributors_url:
                    'http://api.github.com/repos/octocat/Hello-World/contributors',
                  deployments_url:
                    'http://api.github.com/repos/octocat/Hello-World/deployments',
                  downloads_url:
                    'http://api.github.com/repos/octocat/Hello-World/downloads',
                  events_url:
                    'http://api.github.com/repos/octocat/Hello-World/events',
                  forks_url:
                    'http://api.github.com/repos/octocat/Hello-World/forks',
                  git_commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                  git_refs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                  git_tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                  git_url: 'git:github.com/octocat/Hello-World.git',
                  issue_comment_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                  issue_events_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                  issues_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                  keys_url:
                    'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                  labels_url:
                    'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                  languages_url:
                    'http://api.github.com/repos/octocat/Hello-World/languages',
                  merges_url:
                    'http://api.github.com/repos/octocat/Hello-World/merges',
                  milestones_url:
                    'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                  notifications_url:
                    'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                  pulls_url:
                    'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                  releases_url:
                    'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                  ssh_url: 'git@github.com:octocat/Hello-World.git',
                  stargazers_url:
                    'http://api.github.com/repos/octocat/Hello-World/stargazers',
                  statuses_url:
                    'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                  subscribers_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscribers',
                  subscription_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscription',
                  tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/tags',
                  teams_url:
                    'http://api.github.com/repos/octocat/Hello-World/teams',
                  trees_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                  clone_url: 'https://github.com/octocat/Hello-World.git',
                  mirror_url: 'git:git.example.com/octocat/Hello-World',
                  hooks_url:
                    'http://api.github.com/repos/octocat/Hello-World/hooks',
                  svn_url: 'https://svn.github.com/octocat/Hello-World',
                  homepage: 'https://github.com',
                  language: faker.lorem.slug(1),
                  forks_count: 9,
                  stargazers_count: 80,
                  watchers_count: 80,
                  size: 108,
                  default_branch: 'master',
                  open_issues_count: faker.datatype.number(),
                  is_template: true,
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: true,
                  has_projects: true,
                  has_wiki: true,
                  has_pages: faker.datatype.boolean(),
                  has_downloads: true,
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: '2011-01-26T19:06:43Z',
                  created_at: '2011-01-26T19:01:12Z',
                  updated_at: '2011-01-26T19:14:43Z',
                  allow_rebase_merge: true,
                  template_repository: {
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    name: faker.name.findName(),
                    full_name: faker.name.findName(),
                    owner: {
                      login: faker.lorem.slug(1),
                      id: faker.datatype.number(),
                      node_id: faker.lorem.slug(1),
                      avatar_url: faker.internet.url(),
                      gravatar_id: faker.lorem.slug(1),
                      url: faker.internet.url(),
                      html_url: faker.internet.url(),
                      followers_url: faker.internet.url(),
                      following_url: faker.internet.url(),
                      gists_url: faker.internet.url(),
                      starred_url: faker.internet.url(),
                      subscriptions_url: faker.internet.url(),
                      organizations_url: faker.internet.url(),
                      repos_url: faker.internet.url(),
                      events_url: faker.internet.url(),
                      received_events_url: faker.internet.url(),
                      type: faker.lorem.slug(1),
                      site_admin: faker.datatype.boolean(),
                    },
                    private: faker.datatype.boolean(),
                    html_url: faker.internet.url(),
                    description: faker.lorem.slug(1),
                    fork: faker.datatype.boolean(),
                    url: faker.internet.url(),
                    archive_url: faker.internet.url(),
                    assignees_url: faker.internet.url(),
                    blobs_url: faker.internet.url(),
                    branches_url: faker.internet.url(),
                    collaborators_url: faker.internet.url(),
                    comments_url: faker.internet.url(),
                    commits_url: faker.internet.url(),
                    compare_url: faker.internet.url(),
                    contents_url: faker.internet.url(),
                    contributors_url: faker.internet.url(),
                    deployments_url: faker.internet.url(),
                    downloads_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    forks_url: faker.internet.url(),
                    git_commits_url: faker.internet.url(),
                    git_refs_url: faker.internet.url(),
                    git_tags_url: faker.internet.url(),
                    git_url: faker.internet.url(),
                    issue_comment_url: faker.internet.url(),
                    issue_events_url: faker.internet.url(),
                    issues_url: faker.internet.url(),
                    keys_url: faker.internet.url(),
                    labels_url: faker.internet.url(),
                    languages_url: faker.internet.url(),
                    merges_url: faker.internet.url(),
                    milestones_url: faker.internet.url(),
                    notifications_url: faker.internet.url(),
                    pulls_url: faker.internet.url(),
                    releases_url: faker.internet.url(),
                    ssh_url: faker.internet.url(),
                    stargazers_url: faker.internet.url(),
                    statuses_url: faker.internet.url(),
                    subscribers_url: faker.internet.url(),
                    subscription_url: faker.internet.url(),
                    tags_url: faker.internet.url(),
                    teams_url: faker.internet.url(),
                    trees_url: faker.internet.url(),
                    clone_url: faker.internet.url(),
                    mirror_url: faker.internet.url(),
                    hooks_url: faker.internet.url(),
                    svn_url: faker.internet.url(),
                    homepage: faker.lorem.slug(1),
                    language: faker.lorem.slug(1),
                    forks_count: faker.datatype.number(),
                    stargazers_count: faker.datatype.number(),
                    watchers_count: faker.datatype.number(),
                    size: faker.datatype.number(),
                    default_branch: faker.lorem.slug(1),
                    open_issues_count: faker.datatype.number(),
                    is_template: faker.datatype.boolean(),
                    topics: [
                      ...new Array(
                        faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                      ).keys(),
                    ].map(_ => faker.lorem.slug(1)),
                    has_issues: faker.datatype.boolean(),
                    has_projects: faker.datatype.boolean(),
                    has_wiki: faker.datatype.boolean(),
                    has_pages: faker.datatype.boolean(),
                    has_downloads: faker.datatype.boolean(),
                    archived: faker.datatype.boolean(),
                    disabled: faker.datatype.boolean(),
                    visibility: faker.lorem.slug(1),
                    pushed_at: faker.date.past(),
                    created_at: faker.date.past(),
                    updated_at: faker.date.past(),
                    permissions: {
                      admin: faker.datatype.boolean(),
                      maintain: faker.datatype.boolean(),
                      push: faker.datatype.boolean(),
                      triage: faker.datatype.boolean(),
                      pull: faker.datatype.boolean(),
                    },
                    allow_rebase_merge: faker.datatype.boolean(),
                    temp_clone_token: faker.lorem.slug(1),
                    allow_squash_merge: faker.datatype.boolean(),
                    allow_auto_merge: faker.datatype.boolean(),
                    delete_branch_on_merge: faker.datatype.boolean(),
                    allow_update_branch: faker.datatype.boolean(),
                    allow_merge_commit: faker.datatype.boolean(),
                    subscribers_count: faker.datatype.number(),
                    network_count: faker.datatype.number(),
                  },
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: true,
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: true,
                  allow_forking: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                  open_issues: faker.datatype.number(),
                  watchers: faker.datatype.number(),
                  master_branch: faker.lorem.slug(1),
                  starred_at: '"2020-07-09T00:17:42Z"',
                  anonymous_access_enabled: faker.datatype.boolean(),
                },
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
                author_association: 'OWNER',
                reactions: {
                  url: faker.internet.url(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              },
              comment: {
                id: 42,
                node_id: faker.lorem.slug(1),
                url: 'https://api.github.com/repositories/42/issues/comments/1',
                body: 'What version of Safari were you using when you observed this bug?',
                body_text: faker.lorem.slug(1),
                body_html: faker.lorem.slug(1),
                html_url: faker.internet.url(),
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                created_at: '2011-04-14T16:00:49Z',
                updated_at: '2011-04-14T16:00:49Z',
                issue_url: faker.internet.url(),
                author_association: 'OWNER',
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
                reactions: {
                  url: faker.internet.url(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              },
              pages: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                page_name: faker.name.findName(),
                title: faker.lorem.slug(1),
                summary: faker.lorem.slug(1),
                action: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                html_url: faker.internet.url(),
              })),
            },
            public: faker.datatype.boolean(),
            created_at: faker.date.past(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.lorem.slug(1),
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/feeds`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          timeline_url: 'https://github.com/timeline',
          user_url: 'https://github.com/{user}',
          current_user_public_url: 'https://github.com/octocat',
          current_user_url: 'https://github.com/octocat.private?token=abc123',
          current_user_actor_url:
            'https://github.com/octocat.private.actor?token=abc123',
          current_user_organization_url: 'https://github.com/octocat-org',
          current_user_organization_urls: [
            'https://github.com/organizations/github/octocat.private.atom?token=abc123',
          ],
          security_advisories_url: 'https://github.com/security-advisories',
          repository_discussions_url:
            'https://github.com/{user}/{repo}/discussions',
          repository_discussions_category_url:
            'https://github.com/{user}/{repo}/discussions/categories/{category}',
          _links: {
            timeline: {
              href: faker.lorem.slug(1),
              type: faker.lorem.slug(1),
            },
            user: {
              href: faker.lorem.slug(1),
              type: faker.lorem.slug(1),
            },
            security_advisories: {
              href: faker.lorem.slug(1),
              type: faker.lorem.slug(1),
            },
            current_user: {
              href: faker.lorem.slug(1),
              type: faker.lorem.slug(1),
            },
            current_user_public: {
              href: faker.lorem.slug(1),
              type: faker.lorem.slug(1),
            },
            current_user_actor: {
              href: faker.lorem.slug(1),
              type: faker.lorem.slug(1),
            },
            current_user_organization: {
              href: faker.lorem.slug(1),
              type: faker.lorem.slug(1),
            },
            current_user_organizations: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              href: faker.lorem.slug(1),
              type: faker.lorem.slug(1),
            })),
            repository_discussions: {
              href: faker.lorem.slug(1),
              type: faker.lorem.slug(1),
            },
            repository_discussions_category: {
              href: faker.lorem.slug(1),
              type: faker.lorem.slug(1),
            },
          },
          repository_discussions: {
            href: faker.lorem.slug(1),
            type: faker.lorem.slug(1),
          },
          repository_discussions_category: {
            href: faker.lorem.slug(1),
            type: faker.lorem.slug(1),
          },
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/gists`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: faker.internet.url(),
            forks_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            id: faker.lorem.slug(1),
            node_id: faker.lorem.slug(1),
            git_pull_url: faker.internet.url(),
            git_push_url: faker.internet.url(),
            html_url: faker.internet.url(),
            files: [...new Array(5).keys()]
              .map(_ => ({
                [faker.lorem.word()]: {
                  filename: faker.name.findName(),
                  type: faker.lorem.slug(1),
                  language: faker.lorem.slug(1),
                  raw_url: faker.internet.url(),
                  size: faker.datatype.number(),
                },
              }))
              .reduce((acc, next) => Object.assign(acc, next), {}),
            public: faker.datatype.boolean(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            description: faker.lorem.slug(1),
            comments: faker.datatype.number(),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            comments_url: faker.internet.url(),
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            truncated: faker.datatype.boolean(),
            forks: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            history: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/gists`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          forks: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.lorem.slug(1),
            url: faker.internet.url(),
            user: {
              login: faker.lorem.slug(1),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              site_admin: faker.datatype.boolean(),
              name: faker.name.findName(),
              company: faker.lorem.slug(1),
              blog: faker.lorem.slug(1),
              location: faker.lorem.slug(1),
              email: faker.internet.email(),
              hireable: faker.datatype.boolean(),
              bio: faker.lorem.slug(1),
              twitter_username: faker.name.findName(),
              public_repos: faker.datatype.number(),
              public_gists: faker.datatype.number(),
              followers: faker.datatype.number(),
              following: faker.datatype.number(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              plan: {
                collaborators: faker.datatype.number(),
                name: faker.name.findName(),
                space: faker.datatype.number(),
                private_repos: faker.datatype.number(),
              },
              suspended_at: faker.date.past(),
              private_gists: 1,
              total_private_repos: 2,
              owned_private_repos: 2,
              disk_usage: 1,
              collaborators: 3,
            },
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
          })),
          history: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            version: faker.lorem.slug(1),
            committed_at: faker.date.past(),
            change_status: {
              total: faker.datatype.number(),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
            },
            url: faker.internet.url(),
          })),
          fork_of: {
            url: faker.internet.url(),
            forks_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            id: faker.lorem.slug(1),
            node_id: faker.lorem.slug(1),
            git_pull_url: faker.internet.url(),
            git_push_url: faker.internet.url(),
            html_url: faker.internet.url(),
            files: [...new Array(5).keys()]
              .map(_ => ({
                [faker.lorem.word()]: {
                  filename: faker.name.findName(),
                  type: faker.lorem.slug(1),
                  language: faker.lorem.slug(1),
                  raw_url: faker.internet.url(),
                  size: faker.datatype.number(),
                },
              }))
              .reduce((acc, next) => Object.assign(acc, next), {}),
            public: faker.datatype.boolean(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            description: faker.lorem.slug(1),
            comments: faker.datatype.number(),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            comments_url: faker.internet.url(),
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            truncated: faker.datatype.boolean(),
            forks: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            history: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
          },
          url: faker.internet.url(),
          forks_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          id: faker.lorem.slug(1),
          node_id: faker.lorem.slug(1),
          git_pull_url: faker.internet.url(),
          git_push_url: faker.internet.url(),
          html_url: faker.internet.url(),
          files: [...new Array(5).keys()]
            .map(_ => ({
              [faker.lorem.word()]: {
                filename: faker.name.findName(),
                type: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                raw_url: faker.internet.url(),
                size: faker.datatype.number(),
                truncated: faker.datatype.boolean(),
                content: faker.lorem.slug(1),
              },
            }))
            .reduce((acc, next) => Object.assign(acc, next), {}),
          public: faker.datatype.boolean(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          description: faker.lorem.slug(1),
          comments: faker.datatype.number(),
          user: faker.lorem.slug(1),
          comments_url: faker.internet.url(),
          owner: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          truncated: faker.datatype.boolean(),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/gists/public`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: faker.internet.url(),
            forks_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            id: faker.lorem.slug(1),
            node_id: faker.lorem.slug(1),
            git_pull_url: faker.internet.url(),
            git_push_url: faker.internet.url(),
            html_url: faker.internet.url(),
            files: [...new Array(5).keys()]
              .map(_ => ({
                [faker.lorem.word()]: {
                  filename: faker.name.findName(),
                  type: faker.lorem.slug(1),
                  language: faker.lorem.slug(1),
                  raw_url: faker.internet.url(),
                  size: faker.datatype.number(),
                },
              }))
              .reduce((acc, next) => Object.assign(acc, next), {}),
            public: faker.datatype.boolean(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            description: faker.lorem.slug(1),
            comments: faker.datatype.number(),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            comments_url: faker.internet.url(),
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            truncated: faker.datatype.boolean(),
            forks: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            history: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/gists/starred`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: faker.internet.url(),
            forks_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            id: faker.lorem.slug(1),
            node_id: faker.lorem.slug(1),
            git_pull_url: faker.internet.url(),
            git_push_url: faker.internet.url(),
            html_url: faker.internet.url(),
            files: [...new Array(5).keys()]
              .map(_ => ({
                [faker.lorem.word()]: {
                  filename: faker.name.findName(),
                  type: faker.lorem.slug(1),
                  language: faker.lorem.slug(1),
                  raw_url: faker.internet.url(),
                  size: faker.datatype.number(),
                },
              }))
              .reduce((acc, next) => Object.assign(acc, next), {}),
            public: faker.datatype.boolean(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            description: faker.lorem.slug(1),
            comments: faker.datatype.number(),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            comments_url: faker.internet.url(),
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            truncated: faker.datatype.boolean(),
            forks: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            history: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/gists/:gistId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          forks: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.lorem.slug(1),
            url: faker.internet.url(),
            user: {
              login: faker.lorem.slug(1),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              site_admin: faker.datatype.boolean(),
              name: faker.name.findName(),
              company: faker.lorem.slug(1),
              blog: faker.lorem.slug(1),
              location: faker.lorem.slug(1),
              email: faker.internet.email(),
              hireable: faker.datatype.boolean(),
              bio: faker.lorem.slug(1),
              twitter_username: faker.name.findName(),
              public_repos: faker.datatype.number(),
              public_gists: faker.datatype.number(),
              followers: faker.datatype.number(),
              following: faker.datatype.number(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              plan: {
                collaborators: faker.datatype.number(),
                name: faker.name.findName(),
                space: faker.datatype.number(),
                private_repos: faker.datatype.number(),
              },
              suspended_at: faker.date.past(),
              private_gists: 1,
              total_private_repos: 2,
              owned_private_repos: 2,
              disk_usage: 1,
              collaborators: 3,
            },
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
          })),
          history: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            version: faker.lorem.slug(1),
            committed_at: faker.date.past(),
            change_status: {
              total: faker.datatype.number(),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
            },
            url: faker.internet.url(),
          })),
          fork_of: {
            url: faker.internet.url(),
            forks_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            id: faker.lorem.slug(1),
            node_id: faker.lorem.slug(1),
            git_pull_url: faker.internet.url(),
            git_push_url: faker.internet.url(),
            html_url: faker.internet.url(),
            files: [...new Array(5).keys()]
              .map(_ => ({
                [faker.lorem.word()]: {
                  filename: faker.name.findName(),
                  type: faker.lorem.slug(1),
                  language: faker.lorem.slug(1),
                  raw_url: faker.internet.url(),
                  size: faker.datatype.number(),
                },
              }))
              .reduce((acc, next) => Object.assign(acc, next), {}),
            public: faker.datatype.boolean(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            description: faker.lorem.slug(1),
            comments: faker.datatype.number(),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            comments_url: faker.internet.url(),
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            truncated: faker.datatype.boolean(),
            forks: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            history: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
          },
          url: faker.internet.url(),
          forks_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          id: faker.lorem.slug(1),
          node_id: faker.lorem.slug(1),
          git_pull_url: faker.internet.url(),
          git_push_url: faker.internet.url(),
          html_url: faker.internet.url(),
          files: [...new Array(5).keys()]
            .map(_ => ({
              [faker.lorem.word()]: {
                filename: faker.name.findName(),
                type: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                raw_url: faker.internet.url(),
                size: faker.datatype.number(),
                truncated: faker.datatype.boolean(),
                content: faker.lorem.slug(1),
              },
            }))
            .reduce((acc, next) => Object.assign(acc, next), {}),
          public: faker.datatype.boolean(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          description: faker.lorem.slug(1),
          comments: faker.datatype.number(),
          user: faker.lorem.slug(1),
          comments_url: faker.internet.url(),
          owner: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          truncated: faker.datatype.boolean(),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          block: {
            reason: faker.lorem.slug(1),
            created_at: faker.date.past(),
            html_url: faker.internet.url(),
          },
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/gists/:gistId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          forks: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.lorem.slug(1),
            url: faker.internet.url(),
            user: {
              login: faker.lorem.slug(1),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              site_admin: faker.datatype.boolean(),
              name: faker.name.findName(),
              company: faker.lorem.slug(1),
              blog: faker.lorem.slug(1),
              location: faker.lorem.slug(1),
              email: faker.internet.email(),
              hireable: faker.datatype.boolean(),
              bio: faker.lorem.slug(1),
              twitter_username: faker.name.findName(),
              public_repos: faker.datatype.number(),
              public_gists: faker.datatype.number(),
              followers: faker.datatype.number(),
              following: faker.datatype.number(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              plan: {
                collaborators: faker.datatype.number(),
                name: faker.name.findName(),
                space: faker.datatype.number(),
                private_repos: faker.datatype.number(),
              },
              suspended_at: faker.date.past(),
              private_gists: 1,
              total_private_repos: 2,
              owned_private_repos: 2,
              disk_usage: 1,
              collaborators: 3,
            },
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
          })),
          history: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            version: faker.lorem.slug(1),
            committed_at: faker.date.past(),
            change_status: {
              total: faker.datatype.number(),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
            },
            url: faker.internet.url(),
          })),
          fork_of: {
            url: faker.internet.url(),
            forks_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            id: faker.lorem.slug(1),
            node_id: faker.lorem.slug(1),
            git_pull_url: faker.internet.url(),
            git_push_url: faker.internet.url(),
            html_url: faker.internet.url(),
            files: [...new Array(5).keys()]
              .map(_ => ({
                [faker.lorem.word()]: {
                  filename: faker.name.findName(),
                  type: faker.lorem.slug(1),
                  language: faker.lorem.slug(1),
                  raw_url: faker.internet.url(),
                  size: faker.datatype.number(),
                },
              }))
              .reduce((acc, next) => Object.assign(acc, next), {}),
            public: faker.datatype.boolean(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            description: faker.lorem.slug(1),
            comments: faker.datatype.number(),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            comments_url: faker.internet.url(),
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            truncated: faker.datatype.boolean(),
            forks: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            history: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
          },
          url: faker.internet.url(),
          forks_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          id: faker.lorem.slug(1),
          node_id: faker.lorem.slug(1),
          git_pull_url: faker.internet.url(),
          git_push_url: faker.internet.url(),
          html_url: faker.internet.url(),
          files: [...new Array(5).keys()]
            .map(_ => ({
              [faker.lorem.word()]: {
                filename: faker.name.findName(),
                type: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                raw_url: faker.internet.url(),
                size: faker.datatype.number(),
                truncated: faker.datatype.boolean(),
                content: faker.lorem.slug(1),
              },
            }))
            .reduce((acc, next) => Object.assign(acc, next), {}),
          public: faker.datatype.boolean(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          description: faker.lorem.slug(1),
          comments: faker.datatype.number(),
          user: faker.lorem.slug(1),
          comments_url: faker.internet.url(),
          owner: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          truncated: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/gists/:gistId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/gists/:gistId/comments`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 1,
            node_id: 'MDExOkdpc3RDb21tZW50MQ==',
            url: 'https://api.github.com/gists/a6db0bec360bb87e9418/comments/1',
            body: 'Body of the attachment',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: '2011-04-18T23:23:56Z',
            updated_at: '2011-04-18T23:23:56Z',
            author_association: 'OWNER',
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/gists/:gistId/comments`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: 1,
          node_id: 'MDExOkdpc3RDb21tZW50MQ==',
          url: 'https://api.github.com/gists/a6db0bec360bb87e9418/comments/1',
          body: 'Body of the attachment',
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          created_at: '2011-04-18T23:23:56Z',
          updated_at: '2011-04-18T23:23:56Z',
          author_association: 'OWNER',
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/gists/:gistId/comments/:commentId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 1,
          node_id: 'MDExOkdpc3RDb21tZW50MQ==',
          url: 'https://api.github.com/gists/a6db0bec360bb87e9418/comments/1',
          body: 'Body of the attachment',
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          created_at: '2011-04-18T23:23:56Z',
          updated_at: '2011-04-18T23:23:56Z',
          author_association: 'OWNER',
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          block: {
            reason: faker.lorem.slug(1),
            created_at: faker.date.past(),
            html_url: faker.internet.url(),
          },
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/gists/:gistId/comments/:commentId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 1,
          node_id: 'MDExOkdpc3RDb21tZW50MQ==',
          url: 'https://api.github.com/gists/a6db0bec360bb87e9418/comments/1',
          body: 'Body of the attachment',
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          created_at: '2011-04-18T23:23:56Z',
          updated_at: '2011-04-18T23:23:56Z',
          author_association: 'OWNER',
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/gists/:gistId/comments/:commentId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/gists/:gistId/commits`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: 'https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f',
            version: '57a7f021a713b1c5a6a199b54cc514735d2d462f',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            change_status: {
              total: faker.datatype.number(),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
            },
            committed_at: '2010-04-14T02:15:15Z',
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/gists/:gistId/forks`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            forks: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.lorem.slug(1),
              url: faker.internet.url(),
              user: {
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
                name: faker.name.findName(),
                company: faker.lorem.slug(1),
                blog: faker.lorem.slug(1),
                location: faker.lorem.slug(1),
                email: faker.internet.email(),
                hireable: faker.datatype.boolean(),
                bio: faker.lorem.slug(1),
                twitter_username: faker.name.findName(),
                public_repos: faker.datatype.number(),
                public_gists: faker.datatype.number(),
                followers: faker.datatype.number(),
                following: faker.datatype.number(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                plan: {
                  collaborators: faker.datatype.number(),
                  name: faker.name.findName(),
                  space: faker.datatype.number(),
                  private_repos: faker.datatype.number(),
                },
                suspended_at: faker.date.past(),
                private_gists: 1,
                total_private_repos: 2,
                owned_private_repos: 2,
                disk_usage: 1,
                collaborators: 3,
              },
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
            })),
            history: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              version: faker.lorem.slug(1),
              committed_at: faker.date.past(),
              change_status: {
                total: faker.datatype.number(),
                additions: faker.datatype.number(),
                deletions: faker.datatype.number(),
              },
              url: faker.internet.url(),
            })),
            fork_of: {
              url: faker.internet.url(),
              forks_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              id: faker.lorem.slug(1),
              node_id: faker.lorem.slug(1),
              git_pull_url: faker.internet.url(),
              git_push_url: faker.internet.url(),
              html_url: faker.internet.url(),
              files: [...new Array(5).keys()]
                .map(_ => ({
                  [faker.lorem.word()]: {
                    filename: faker.name.findName(),
                    type: faker.lorem.slug(1),
                    language: faker.lorem.slug(1),
                    raw_url: faker.internet.url(),
                    size: faker.datatype.number(),
                  },
                }))
                .reduce((acc, next) => Object.assign(acc, next), {}),
              public: faker.datatype.boolean(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              description: faker.lorem.slug(1),
              comments: faker.datatype.number(),
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              comments_url: faker.internet.url(),
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              truncated: faker.datatype.boolean(),
              forks: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => null),
              history: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => null),
            },
            url: faker.internet.url(),
            forks_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            id: faker.lorem.slug(1),
            node_id: faker.lorem.slug(1),
            git_pull_url: faker.internet.url(),
            git_push_url: faker.internet.url(),
            html_url: faker.internet.url(),
            files: [...new Array(5).keys()]
              .map(_ => ({
                [faker.lorem.word()]: {
                  filename: faker.name.findName(),
                  type: faker.lorem.slug(1),
                  language: faker.lorem.slug(1),
                  raw_url: faker.internet.url(),
                  size: faker.datatype.number(),
                  truncated: faker.datatype.boolean(),
                  content: faker.lorem.slug(1),
                },
              }))
              .reduce((acc, next) => Object.assign(acc, next), {}),
            public: faker.datatype.boolean(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            description: faker.lorem.slug(1),
            comments: faker.datatype.number(),
            user: faker.lorem.slug(1),
            comments_url: faker.internet.url(),
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            truncated: faker.datatype.boolean(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/gists/:gistId/forks`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          url: faker.internet.url(),
          forks_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          id: faker.lorem.slug(1),
          node_id: faker.lorem.slug(1),
          git_pull_url: faker.internet.url(),
          git_push_url: faker.internet.url(),
          html_url: faker.internet.url(),
          files: [...new Array(5).keys()]
            .map(_ => ({
              [faker.lorem.word()]: {
                filename: faker.name.findName(),
                type: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                raw_url: faker.internet.url(),
                size: faker.datatype.number(),
              },
            }))
            .reduce((acc, next) => Object.assign(acc, next), {}),
          public: faker.datatype.boolean(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          description: faker.lorem.slug(1),
          comments: faker.datatype.number(),
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          comments_url: faker.internet.url(),
          owner: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          truncated: faker.datatype.boolean(),
          forks: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
          history: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/gists/:gistId/star`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [ctx.status(404), ctx.json({})],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/gists/:gistId/star`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/gists/:gistId/star`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/gists/:gistId/:sha`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          forks: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.lorem.slug(1),
            url: faker.internet.url(),
            user: {
              login: faker.lorem.slug(1),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              site_admin: faker.datatype.boolean(),
              name: faker.name.findName(),
              company: faker.lorem.slug(1),
              blog: faker.lorem.slug(1),
              location: faker.lorem.slug(1),
              email: faker.internet.email(),
              hireable: faker.datatype.boolean(),
              bio: faker.lorem.slug(1),
              twitter_username: faker.name.findName(),
              public_repos: faker.datatype.number(),
              public_gists: faker.datatype.number(),
              followers: faker.datatype.number(),
              following: faker.datatype.number(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              plan: {
                collaborators: faker.datatype.number(),
                name: faker.name.findName(),
                space: faker.datatype.number(),
                private_repos: faker.datatype.number(),
              },
              suspended_at: faker.date.past(),
              private_gists: 1,
              total_private_repos: 2,
              owned_private_repos: 2,
              disk_usage: 1,
              collaborators: 3,
            },
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
          })),
          history: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            version: faker.lorem.slug(1),
            committed_at: faker.date.past(),
            change_status: {
              total: faker.datatype.number(),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
            },
            url: faker.internet.url(),
          })),
          fork_of: {
            url: faker.internet.url(),
            forks_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            id: faker.lorem.slug(1),
            node_id: faker.lorem.slug(1),
            git_pull_url: faker.internet.url(),
            git_push_url: faker.internet.url(),
            html_url: faker.internet.url(),
            files: [...new Array(5).keys()]
              .map(_ => ({
                [faker.lorem.word()]: {
                  filename: faker.name.findName(),
                  type: faker.lorem.slug(1),
                  language: faker.lorem.slug(1),
                  raw_url: faker.internet.url(),
                  size: faker.datatype.number(),
                },
              }))
              .reduce((acc, next) => Object.assign(acc, next), {}),
            public: faker.datatype.boolean(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            description: faker.lorem.slug(1),
            comments: faker.datatype.number(),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            comments_url: faker.internet.url(),
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            truncated: faker.datatype.boolean(),
            forks: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            history: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
          },
          url: faker.internet.url(),
          forks_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          id: faker.lorem.slug(1),
          node_id: faker.lorem.slug(1),
          git_pull_url: faker.internet.url(),
          git_push_url: faker.internet.url(),
          html_url: faker.internet.url(),
          files: [...new Array(5).keys()]
            .map(_ => ({
              [faker.lorem.word()]: {
                filename: faker.name.findName(),
                type: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                raw_url: faker.internet.url(),
                size: faker.datatype.number(),
                truncated: faker.datatype.boolean(),
                content: faker.lorem.slug(1),
              },
            }))
            .reduce((acc, next) => Object.assign(acc, next), {}),
          public: faker.datatype.boolean(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          description: faker.lorem.slug(1),
          comments: faker.datatype.number(),
          user: faker.lorem.slug(1),
          comments_url: faker.internet.url(),
          owner: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          truncated: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/gitignore/templates`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/gitignore/templates/:name`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          name: 'C',
          source:
            '# Object files\n*.o\n\n# Libraries\n*.lib\n*.a\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n',
        }),
      ],
      [ctx.status(304), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/installation/repositories`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          repositories: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 42,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Team Environment',
            full_name: 'octocat/Hello-World',
            license: {
              key: 'mit',
              name: 'MIT License',
              url: 'https://api.github.com/licenses/mit',
              spdx_id: 'MIT',
              node_id: 'MDc6TGljZW5zZW1pdA==',
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: 'git:github.com/octocat/Hello-World.git',
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: 'git@github.com:octocat/Hello-World.git',
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: 'https://github.com/octocat/Hello-World.git',
            mirror_url: 'git:git.example.com/octocat/Hello-World',
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: 'https://svn.github.com/octocat/Hello-World',
            homepage: 'https://github.com',
            language: faker.lorem.slug(1),
            forks_count: 9,
            stargazers_count: 80,
            watchers_count: 80,
            size: 108,
            default_branch: 'master',
            open_issues_count: faker.datatype.number(),
            is_template: true,
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: true,
            has_projects: true,
            has_wiki: true,
            has_pages: faker.datatype.boolean(),
            has_downloads: true,
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            allow_rebase_merge: true,
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              full_name: faker.name.findName(),
              owner: {
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              git_url: faker.internet.url(),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              notifications_url: faker.internet.url(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              ssh_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: faker.date.past(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: true,
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: true,
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(1),
            starred_at: '"2020-07-09T00:17:42Z"',
            anonymous_access_enabled: faker.datatype.boolean(),
          })),
          repository_selection: 'selected',
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/installation/token`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/issues`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            url: 'https://api.github.com/repositories/42/issues/1',
            repository_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            number: 42,
            state: 'open',
            state_reason: 'not_planned',
            title: 'Widget creation fails in Safari on OS X 10.8',
            body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            labels: ['bug', 'registration'],
            assignee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            milestone: {
              url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
              html_url:
                'https://github.com/octocat/Hello-World/milestones/v1.0',
              labels_url:
                'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
              id: 1002604,
              node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
              number: 42,
              state: 'open',
              title: 'v1.0',
              description: 'Tracking milestone for version 1.0',
              creator: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              open_issues: 4,
              closed_issues: 8,
              created_at: '2011-04-10T20:09:31Z',
              updated_at: '2014-03-03T18:58:10Z',
              closed_at: '2013-02-12T13:22:01Z',
              due_on: '2012-10-09T23:39:01Z',
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(1),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.date.past(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            closed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            timeline_url: faker.internet.url(),
            repository: {
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            },
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
            author_association: 'OWNER',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/licenses`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            key: 'mit',
            name: 'MIT License',
            url: 'https://api.github.com/licenses/mit',
            spdx_id: 'MIT',
            node_id: 'MDc6TGljZW5zZW1pdA==',
            html_url: faker.internet.url(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/licenses/:license`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          key: 'mit',
          name: 'MIT License',
          spdx_id: 'MIT',
          url: 'https://api.github.com/licenses/mit',
          node_id: 'MDc6TGljZW5zZW1pdA==',
          html_url: 'http://choosealicense.com/licenses/mit/',
          description:
            'A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty.',
          implementation:
            'Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders.',
          permissions: [
            'commercial-use',
            'modifications',
            'distribution',
            'sublicense',
            'private-use',
          ],
          conditions: ['include-copyright'],
          limitations: ['no-liability'],
          body: '\n\nThe MIT License (MIT)\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n',
          featured: true,
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/markdown`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/markdown/raw`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/meta`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          verifiable_password_authentication: true,
          packages: [
            '13.65.0.0/16',
            '157.55.204.33/32',
            '2a01:111:f403:f90c::/62',
          ],
          dependabot: ['192.168.7.15/32', '192.168.7.16/32'],
          installed_version: '3.3.0',
        }),
      ],
      [ctx.status(304), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/networks/:owner/:repo/events`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.lorem.slug(1),
            type: faker.lorem.slug(1),
            actor: {
              id: faker.datatype.number(),
              login: faker.lorem.slug(1),
              display_login: faker.lorem.slug(1),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              avatar_url: faker.internet.url(),
            },
            repo: {
              id: faker.datatype.number(),
              name: faker.name.findName(),
              url: faker.internet.url(),
            },
            org: {
              id: faker.datatype.number(),
              login: faker.lorem.slug(1),
              display_login: faker.lorem.slug(1),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              avatar_url: faker.internet.url(),
            },
            payload: {
              action: faker.lorem.slug(1),
              issue: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                url: 'https://api.github.com/repositories/42/issues/1',
                repository_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                events_url: faker.internet.url(),
                html_url: faker.internet.url(),
                number: 42,
                state: 'open',
                state_reason: 'not_planned',
                title: 'Widget creation fails in Safari on OS X 10.8',
                body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                labels: ['bug', 'registration'],
                assignee: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                assignees: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                })),
                milestone: {
                  url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
                  html_url:
                    'https://github.com/octocat/Hello-World/milestones/v1.0',
                  labels_url:
                    'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
                  id: 1002604,
                  node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
                  number: 42,
                  state: 'open',
                  title: 'v1.0',
                  description: 'Tracking milestone for version 1.0',
                  creator: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  open_issues: 4,
                  closed_issues: 8,
                  created_at: '2011-04-10T20:09:31Z',
                  updated_at: '2014-03-03T18:58:10Z',
                  closed_at: '2013-02-12T13:22:01Z',
                  due_on: '2012-10-09T23:39:01Z',
                },
                locked: faker.datatype.boolean(),
                active_lock_reason: faker.lorem.slug(1),
                comments: faker.datatype.number(),
                pull_request: {
                  merged_at: faker.date.past(),
                  diff_url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  patch_url: faker.internet.url(),
                  url: faker.internet.url(),
                },
                closed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                draft: faker.datatype.boolean(),
                closed_by: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                body_html: faker.lorem.slug(1),
                body_text: faker.lorem.slug(1),
                timeline_url: faker.internet.url(),
                repository: {
                  id: 42,
                  node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                  name: 'Team Environment',
                  full_name: 'octocat/Hello-World',
                  license: {
                    key: 'mit',
                    name: 'MIT License',
                    url: 'https://api.github.com/licenses/mit',
                    spdx_id: 'MIT',
                    node_id: 'MDc6TGljZW5zZW1pdA==',
                    html_url: faker.internet.url(),
                  },
                  organization: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  forks: faker.datatype.number(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                  },
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  private: faker.datatype.boolean(),
                  html_url: 'https://github.com/octocat/Hello-World',
                  description: 'This your first repo!',
                  fork: faker.datatype.boolean(),
                  url: 'https://api.github.com/repos/octocat/Hello-World',
                  archive_url:
                    'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                  assignees_url:
                    'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                  blobs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                  branches_url:
                    'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                  collaborators_url:
                    'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                  comments_url:
                    'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                  commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                  compare_url:
                    'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                  contents_url:
                    'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                  contributors_url:
                    'http://api.github.com/repos/octocat/Hello-World/contributors',
                  deployments_url:
                    'http://api.github.com/repos/octocat/Hello-World/deployments',
                  downloads_url:
                    'http://api.github.com/repos/octocat/Hello-World/downloads',
                  events_url:
                    'http://api.github.com/repos/octocat/Hello-World/events',
                  forks_url:
                    'http://api.github.com/repos/octocat/Hello-World/forks',
                  git_commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                  git_refs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                  git_tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                  git_url: 'git:github.com/octocat/Hello-World.git',
                  issue_comment_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                  issue_events_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                  issues_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                  keys_url:
                    'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                  labels_url:
                    'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                  languages_url:
                    'http://api.github.com/repos/octocat/Hello-World/languages',
                  merges_url:
                    'http://api.github.com/repos/octocat/Hello-World/merges',
                  milestones_url:
                    'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                  notifications_url:
                    'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                  pulls_url:
                    'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                  releases_url:
                    'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                  ssh_url: 'git@github.com:octocat/Hello-World.git',
                  stargazers_url:
                    'http://api.github.com/repos/octocat/Hello-World/stargazers',
                  statuses_url:
                    'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                  subscribers_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscribers',
                  subscription_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscription',
                  tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/tags',
                  teams_url:
                    'http://api.github.com/repos/octocat/Hello-World/teams',
                  trees_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                  clone_url: 'https://github.com/octocat/Hello-World.git',
                  mirror_url: 'git:git.example.com/octocat/Hello-World',
                  hooks_url:
                    'http://api.github.com/repos/octocat/Hello-World/hooks',
                  svn_url: 'https://svn.github.com/octocat/Hello-World',
                  homepage: 'https://github.com',
                  language: faker.lorem.slug(1),
                  forks_count: 9,
                  stargazers_count: 80,
                  watchers_count: 80,
                  size: 108,
                  default_branch: 'master',
                  open_issues_count: faker.datatype.number(),
                  is_template: true,
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: true,
                  has_projects: true,
                  has_wiki: true,
                  has_pages: faker.datatype.boolean(),
                  has_downloads: true,
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: '2011-01-26T19:06:43Z',
                  created_at: '2011-01-26T19:01:12Z',
                  updated_at: '2011-01-26T19:14:43Z',
                  allow_rebase_merge: true,
                  template_repository: {
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    name: faker.name.findName(),
                    full_name: faker.name.findName(),
                    owner: {
                      login: faker.lorem.slug(1),
                      id: faker.datatype.number(),
                      node_id: faker.lorem.slug(1),
                      avatar_url: faker.internet.url(),
                      gravatar_id: faker.lorem.slug(1),
                      url: faker.internet.url(),
                      html_url: faker.internet.url(),
                      followers_url: faker.internet.url(),
                      following_url: faker.internet.url(),
                      gists_url: faker.internet.url(),
                      starred_url: faker.internet.url(),
                      subscriptions_url: faker.internet.url(),
                      organizations_url: faker.internet.url(),
                      repos_url: faker.internet.url(),
                      events_url: faker.internet.url(),
                      received_events_url: faker.internet.url(),
                      type: faker.lorem.slug(1),
                      site_admin: faker.datatype.boolean(),
                    },
                    private: faker.datatype.boolean(),
                    html_url: faker.internet.url(),
                    description: faker.lorem.slug(1),
                    fork: faker.datatype.boolean(),
                    url: faker.internet.url(),
                    archive_url: faker.internet.url(),
                    assignees_url: faker.internet.url(),
                    blobs_url: faker.internet.url(),
                    branches_url: faker.internet.url(),
                    collaborators_url: faker.internet.url(),
                    comments_url: faker.internet.url(),
                    commits_url: faker.internet.url(),
                    compare_url: faker.internet.url(),
                    contents_url: faker.internet.url(),
                    contributors_url: faker.internet.url(),
                    deployments_url: faker.internet.url(),
                    downloads_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    forks_url: faker.internet.url(),
                    git_commits_url: faker.internet.url(),
                    git_refs_url: faker.internet.url(),
                    git_tags_url: faker.internet.url(),
                    git_url: faker.internet.url(),
                    issue_comment_url: faker.internet.url(),
                    issue_events_url: faker.internet.url(),
                    issues_url: faker.internet.url(),
                    keys_url: faker.internet.url(),
                    labels_url: faker.internet.url(),
                    languages_url: faker.internet.url(),
                    merges_url: faker.internet.url(),
                    milestones_url: faker.internet.url(),
                    notifications_url: faker.internet.url(),
                    pulls_url: faker.internet.url(),
                    releases_url: faker.internet.url(),
                    ssh_url: faker.internet.url(),
                    stargazers_url: faker.internet.url(),
                    statuses_url: faker.internet.url(),
                    subscribers_url: faker.internet.url(),
                    subscription_url: faker.internet.url(),
                    tags_url: faker.internet.url(),
                    teams_url: faker.internet.url(),
                    trees_url: faker.internet.url(),
                    clone_url: faker.internet.url(),
                    mirror_url: faker.internet.url(),
                    hooks_url: faker.internet.url(),
                    svn_url: faker.internet.url(),
                    homepage: faker.lorem.slug(1),
                    language: faker.lorem.slug(1),
                    forks_count: faker.datatype.number(),
                    stargazers_count: faker.datatype.number(),
                    watchers_count: faker.datatype.number(),
                    size: faker.datatype.number(),
                    default_branch: faker.lorem.slug(1),
                    open_issues_count: faker.datatype.number(),
                    is_template: faker.datatype.boolean(),
                    topics: [
                      ...new Array(
                        faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                      ).keys(),
                    ].map(_ => faker.lorem.slug(1)),
                    has_issues: faker.datatype.boolean(),
                    has_projects: faker.datatype.boolean(),
                    has_wiki: faker.datatype.boolean(),
                    has_pages: faker.datatype.boolean(),
                    has_downloads: faker.datatype.boolean(),
                    archived: faker.datatype.boolean(),
                    disabled: faker.datatype.boolean(),
                    visibility: faker.lorem.slug(1),
                    pushed_at: faker.date.past(),
                    created_at: faker.date.past(),
                    updated_at: faker.date.past(),
                    permissions: {
                      admin: faker.datatype.boolean(),
                      maintain: faker.datatype.boolean(),
                      push: faker.datatype.boolean(),
                      triage: faker.datatype.boolean(),
                      pull: faker.datatype.boolean(),
                    },
                    allow_rebase_merge: faker.datatype.boolean(),
                    temp_clone_token: faker.lorem.slug(1),
                    allow_squash_merge: faker.datatype.boolean(),
                    allow_auto_merge: faker.datatype.boolean(),
                    delete_branch_on_merge: faker.datatype.boolean(),
                    allow_update_branch: faker.datatype.boolean(),
                    allow_merge_commit: faker.datatype.boolean(),
                    subscribers_count: faker.datatype.number(),
                    network_count: faker.datatype.number(),
                  },
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: true,
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: true,
                  allow_forking: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                  open_issues: faker.datatype.number(),
                  watchers: faker.datatype.number(),
                  master_branch: faker.lorem.slug(1),
                  starred_at: '"2020-07-09T00:17:42Z"',
                  anonymous_access_enabled: faker.datatype.boolean(),
                },
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
                author_association: 'OWNER',
                reactions: {
                  url: faker.internet.url(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              },
              comment: {
                id: 42,
                node_id: faker.lorem.slug(1),
                url: 'https://api.github.com/repositories/42/issues/comments/1',
                body: 'What version of Safari were you using when you observed this bug?',
                body_text: faker.lorem.slug(1),
                body_html: faker.lorem.slug(1),
                html_url: faker.internet.url(),
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                created_at: '2011-04-14T16:00:49Z',
                updated_at: '2011-04-14T16:00:49Z',
                issue_url: faker.internet.url(),
                author_association: 'OWNER',
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
                reactions: {
                  url: faker.internet.url(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              },
              pages: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                page_name: faker.name.findName(),
                title: faker.lorem.slug(1),
                summary: faker.lorem.slug(1),
                action: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                html_url: faker.internet.url(),
              })),
            },
            public: faker.datatype.boolean(),
            created_at: faker.date.past(),
          }))
        ),
      ],
      [
        ctx.status(301),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/notifications`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.lorem.slug(1),
            repository: {
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: faker.internet.url(),
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: faker.internet.url(),
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: 'contributor_covenant',
                name: 'Contributor Covenant',
                url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                html_url: faker.internet.url(),
              },
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                spdx_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                node_id: faker.lorem.slug(1),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            subject: {
              title: faker.lorem.slug(1),
              url: faker.internet.url(),
              latest_comment_url: faker.internet.url(),
              type: faker.lorem.slug(1),
            },
            reason: faker.lorem.slug(1),
            unread: faker.datatype.boolean(),
            updated_at: faker.date.past(),
            last_read_at: faker.date.past(),
            url: faker.internet.url(),
            subscription_url:
              'https://api.github.com/notifications/threads/2/subscription',
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/notifications`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(202),
        ctx.json({
          message: faker.lorem.slug(1),
        }),
      ],
      [ctx.status(205), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/notifications/threads/:threadId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          repository: {
            id: 1296269,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Hello-World',
            full_name: 'octocat/Hello-World',
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: faker.internet.url(),
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: faker.internet.url(),
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(1),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: 'contributor_covenant',
              name: 'Contributor Covenant',
              url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
              body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(1),
              name: faker.name.findName(),
              spdx_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              node_id: faker.lorem.slug(1),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          },
          subject: {
            title: faker.lorem.slug(1),
            url: faker.internet.url(),
            latest_comment_url: faker.internet.url(),
            type: faker.lorem.slug(1),
          },
          reason: faker.lorem.slug(1),
          unread: faker.datatype.boolean(),
          updated_at: faker.date.past(),
          last_read_at: faker.date.past(),
          url: faker.internet.url(),
          subscription_url:
            'https://api.github.com/notifications/threads/2/subscription',
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/notifications/threads/:threadId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(205), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/notifications/threads/:threadId/subscription`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            subscribed: true,
            ignored: faker.datatype.boolean(),
            reason: faker.lorem.slug(1),
            created_at: '2012-10-06T21:34:12Z',
            url: 'https://api.github.com/notifications/threads/1/subscription',
            thread_url: 'https://api.github.com/notifications/threads/1',
            repository_url: 'https://api.github.com/repos/1',
          }),
        ],
        [ctx.status(304), ctx.json(null)],
        [
          ctx.status(401),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/notifications/threads/:threadId/subscription`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            subscribed: true,
            ignored: faker.datatype.boolean(),
            reason: faker.lorem.slug(1),
            created_at: '2012-10-06T21:34:12Z',
            url: 'https://api.github.com/notifications/threads/1/subscription',
            thread_url: 'https://api.github.com/notifications/threads/1',
            repository_url: 'https://api.github.com/repos/1',
          }),
        ],
        [ctx.status(304), ctx.json(null)],
        [
          ctx.status(401),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/notifications/threads/:threadId/subscription`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [ctx.status(304), ctx.json(null)],
        [
          ctx.status(401),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/octocat`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/organizations`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            login: 'github',
            id: 1,
            node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
            url: 'https://api.github.com/orgs/github',
            repos_url: 'https://api.github.com/orgs/github/repos',
            events_url: 'https://api.github.com/orgs/github/events',
            hooks_url: 'https://api.github.com/orgs/github/hooks',
            issues_url: 'https://api.github.com/orgs/github/issues',
            members_url: 'https://api.github.com/orgs/github/members{/member}',
            public_members_url:
              'https://api.github.com/orgs/github/public_members{/member}',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            description: 'A great organization',
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          login: 'github',
          id: 1,
          node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
          url: 'https://api.github.com/orgs/github',
          repos_url: 'https://api.github.com/orgs/github/repos',
          events_url: 'https://api.github.com/orgs/github/events',
          hooks_url: 'https://api.github.com/orgs/github/hooks',
          issues_url: 'https://api.github.com/orgs/github/issues',
          members_url: 'https://api.github.com/orgs/github/members{/member}',
          public_members_url:
            'https://api.github.com/orgs/github/public_members{/member}',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          description: 'A great organization',
          name: 'github',
          company: 'GitHub',
          blog: 'https://github.com/blog',
          location: 'San Francisco',
          email: 'octocat@github.com',
          twitter_username: 'github',
          is_verified: true,
          has_organization_projects: true,
          has_repository_projects: true,
          public_repos: 2,
          public_gists: 1,
          followers: 20,
          following: faker.datatype.number(),
          html_url: 'https://github.com/octocat',
          created_at: '2008-01-14T04:33:35Z',
          type: 'Organization',
          total_private_repos: 100,
          owned_private_repos: 100,
          private_gists: 81,
          disk_usage: 10000,
          collaborators: 8,
          billing_email: 'org@example.com',
          plan: {
            name: faker.name.findName(),
            space: faker.datatype.number(),
            private_repos: faker.datatype.number(),
            filled_seats: faker.datatype.number(),
            seats: faker.datatype.number(),
          },
          default_repository_permission: faker.lorem.slug(1),
          members_can_create_repositories: true,
          two_factor_requirement_enabled: true,
          members_allowed_repository_creation_type: 'all',
          members_can_create_public_repositories: true,
          members_can_create_private_repositories: true,
          members_can_create_internal_repositories: true,
          members_can_create_pages: true,
          members_can_create_public_pages: true,
          members_can_create_private_pages: true,
          updated_at: faker.date.past(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/orgs/:org`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          login: 'github',
          id: 1,
          node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
          url: 'https://api.github.com/orgs/github',
          repos_url: 'https://api.github.com/orgs/github/repos',
          events_url: 'https://api.github.com/orgs/github/events',
          hooks_url: 'https://api.github.com/orgs/github/hooks',
          issues_url: 'https://api.github.com/orgs/github/issues',
          members_url: 'https://api.github.com/orgs/github/members{/member}',
          public_members_url:
            'https://api.github.com/orgs/github/public_members{/member}',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          description: 'A great organization',
          name: 'github',
          company: 'GitHub',
          blog: 'https://github.com/blog',
          location: 'San Francisco',
          email: 'octocat@github.com',
          twitter_username: 'github',
          is_verified: true,
          has_organization_projects: true,
          has_repository_projects: true,
          public_repos: 2,
          public_gists: 1,
          followers: 20,
          following: faker.datatype.number(),
          html_url: 'https://github.com/octocat',
          created_at: '2008-01-14T04:33:35Z',
          type: 'Organization',
          total_private_repos: 100,
          owned_private_repos: 100,
          private_gists: 81,
          disk_usage: 10000,
          collaborators: 8,
          billing_email: 'org@example.com',
          plan: {
            name: faker.name.findName(),
            space: faker.datatype.number(),
            private_repos: faker.datatype.number(),
            filled_seats: faker.datatype.number(),
            seats: faker.datatype.number(),
          },
          default_repository_permission: faker.lorem.slug(1),
          members_can_create_repositories: true,
          two_factor_requirement_enabled: true,
          members_allowed_repository_creation_type: 'all',
          members_can_create_public_repositories: true,
          members_can_create_private_repositories: true,
          members_can_create_internal_repositories: true,
          members_can_create_pages: true,
          members_can_create_public_pages: true,
          members_can_create_private_pages: true,
          updated_at: faker.date.past(),
        }),
      ],
      [
        ctx.status(409),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [ctx.status(422), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/actions/permissions`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          enabled_repositories: faker.helpers.arrayElement([
            'all',
            'none',
            'selected',
          ]),
          selected_repositories_url: faker.internet.url(),
          allowed_actions: faker.helpers.arrayElement([
            'all',
            'local_only',
            'selected',
          ]),
          selected_actions_url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/orgs/:org/actions/permissions`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/orgs/:org/actions/permissions/repositories`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            repositories: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/orgs/:org/actions/permissions/repositories`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/orgs/:org/actions/permissions/repositories/:repositoryId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/orgs/:org/actions/permissions/repositories/:repositoryId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/orgs/:org/actions/permissions/selected-actions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            github_owned_allowed: faker.datatype.boolean(),
            patterns_allowed: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/orgs/:org/actions/permissions/selected-actions`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/orgs/:org/actions/runner-groups`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          runner_groups: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            visibility: faker.lorem.slug(1),
            default: faker.datatype.boolean(),
            selected_repositories_url: faker.internet.url(),
            runners_url: faker.internet.url(),
            inherited: faker.datatype.boolean(),
            inherited_allows_public_repositories: faker.datatype.boolean(),
            allows_public_repositories: faker.datatype.boolean(),
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/orgs/:org/actions/runner-groups`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          name: faker.name.findName(),
          visibility: faker.lorem.slug(1),
          default: faker.datatype.boolean(),
          selected_repositories_url: faker.internet.url(),
          runners_url: faker.internet.url(),
          inherited: faker.datatype.boolean(),
          inherited_allows_public_repositories: faker.datatype.boolean(),
          allows_public_repositories: faker.datatype.boolean(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            visibility: faker.lorem.slug(1),
            default: faker.datatype.boolean(),
            selected_repositories_url: faker.internet.url(),
            runners_url: faker.internet.url(),
            inherited: faker.datatype.boolean(),
            inherited_allows_public_repositories: faker.datatype.boolean(),
            allows_public_repositories: faker.datatype.boolean(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            visibility: faker.lorem.slug(1),
            default: faker.datatype.boolean(),
            selected_repositories_url: faker.internet.url(),
            runners_url: faker.internet.url(),
            inherited: faker.datatype.boolean(),
            inherited_allows_public_repositories: faker.datatype.boolean(),
            allows_public_repositories: faker.datatype.boolean(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId/repositories`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            repositories: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: faker.internet.url(),
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: faker.internet.url(),
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: 'contributor_covenant',
                name: 'Contributor Covenant',
                url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                html_url: faker.internet.url(),
              },
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                spdx_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                node_id: faker.lorem.slug(1),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId/repositories`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId/repositories/:repositoryId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId/repositories/:repositoryId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId/runners`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            runners: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 5,
              name: 'iMac',
              os: 'macos',
              status: 'online',
              busy: faker.datatype.boolean(),
              labels: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                name: faker.name.findName(),
                type: faker.helpers.arrayElement(['read-only', 'custom']),
              })),
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId/runners`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId/runners/:runnerId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId/runners/:runnerId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/orgs/:org/actions/runners`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          runners: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 5,
            name: 'iMac',
            os: 'macos',
            status: 'online',
            busy: faker.datatype.boolean(),
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              name: faker.name.findName(),
              type: faker.helpers.arrayElement(['read-only', 'custom']),
            })),
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/actions/runners/downloads`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            os: faker.lorem.slug(1),
            architecture: faker.lorem.slug(1),
            download_url: faker.internet.url(),
            filename: faker.name.findName(),
            temp_download_token: faker.lorem.slug(1),
            sha256_checksum: faker.lorem.slug(1),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(
    `${baseURL}/orgs/:org/actions/runners/registration-token`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            token: 'v1.1f699f1069f60xxx',
            expires_at: '2016-07-11T22:14:10Z',
            permissions: { issues: 'read', deployments: 'write' },
            repositories: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            })),
            single_file: 'config.yaml',
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/orgs/:org/actions/runners/remove-token`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            token: 'v1.1f699f1069f60xxx',
            expires_at: '2016-07-11T22:14:10Z',
            permissions: { issues: 'read', deployments: 'write' },
            repositories: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            })),
            single_file: 'config.yaml',
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/orgs/:org/actions/runners/:runnerId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 5,
          name: 'iMac',
          os: 'macos',
          status: 'online',
          busy: faker.datatype.boolean(),
          labels: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            type: faker.helpers.arrayElement(['read-only', 'custom']),
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(
    `${baseURL}/orgs/:org/actions/runners/:runnerId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/orgs/:org/actions/secrets`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          secrets: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: 'SECRET_TOKEN',
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            visibility: faker.helpers.arrayElement([
              'all',
              'private',
              'selected',
            ]),
            selected_repositories_url:
              'https://api.github.com/organizations/org/secrets/my_secret/repositories',
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/actions/secrets/public-key`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          key_id: '1234567',
          key: 'hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=',
          id: 2,
          url: 'https://api.github.com/user/keys/2',
          title: 'ssh-rsa AAAAB3NzaC1yc2EAAA',
          created_at: '2011-01-26T19:01:12Z',
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/orgs/:org/actions/secrets/:secretName`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            name: 'SECRET_TOKEN',
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            visibility: faker.helpers.arrayElement([
              'all',
              'private',
              'selected',
            ]),
            selected_repositories_url:
              'https://api.github.com/organizations/org/secrets/my_secret/repositories',
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/orgs/:org/actions/secrets/:secretName`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(201), ctx.json({})],
        [ctx.status(204), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/orgs/:org/actions/secrets/:secretName`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/orgs/:org/actions/secrets/:secretName/repositories`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            repositories: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: faker.internet.url(),
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: faker.internet.url(),
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: 'contributor_covenant',
                name: 'Contributor Covenant',
                url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                html_url: faker.internet.url(),
              },
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                spdx_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                node_id: faker.lorem.slug(1),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/orgs/:org/actions/secrets/:secretName/repositories`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/orgs/:org/actions/secrets/:secretName/repositories/:repositoryId`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [ctx.status(409), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/orgs/:org/actions/secrets/:secretName/repositories/:repositoryId`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [ctx.status(409), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/orgs/:org/audit-log`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            '@timestamp': faker.datatype.number(),
            action: faker.lorem.slug(1),
            active: faker.datatype.boolean(),
            active_was: faker.datatype.boolean(),
            actor: faker.lorem.slug(1),
            actor_id: faker.datatype.number(),
            actor_location: {
              country_name: faker.name.findName(),
            },
            data: {},
            org_id: faker.datatype.number(),
            user_id: faker.datatype.number(),
            business_id: faker.datatype.number(),
            blocked_user: faker.lorem.slug(1),
            business: faker.lorem.slug(1),
            config: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({})),
            config_was: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({})),
            content_type: faker.lorem.slug(1),
            operation_type: faker.lorem.slug(1),
            created_at: faker.datatype.number(),
            deploy_key_fingerprint: faker.lorem.slug(1),
            _document_id: faker.lorem.slug(1),
            emoji: faker.lorem.slug(1),
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({})),
            events_were: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({})),
            explanation: faker.lorem.slug(1),
            fingerprint: faker.lorem.slug(1),
            hook_id: faker.datatype.number(),
            limited_availability: faker.datatype.boolean(),
            message: faker.lorem.slug(1),
            name: faker.name.findName(),
            old_user: faker.lorem.slug(1),
            openssh_public_key: faker.lorem.slug(1),
            org: faker.lorem.slug(1),
            previous_visibility: faker.lorem.slug(1),
            read_only: faker.datatype.boolean(),
            repo: faker.lorem.slug(1),
            repository: faker.lorem.slug(1),
            repository_public: faker.datatype.boolean(),
            target_login: faker.lorem.slug(1),
            team: faker.lorem.slug(1),
            transport_protocol: faker.datatype.number(),
            transport_protocol_name: faker.name.findName(),
            user: faker.lorem.slug(1),
            visibility: faker.lorem.slug(1),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/events`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.lorem.slug(1),
            type: faker.lorem.slug(1),
            actor: {
              id: faker.datatype.number(),
              login: faker.lorem.slug(1),
              display_login: faker.lorem.slug(1),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              avatar_url: faker.internet.url(),
            },
            repo: {
              id: faker.datatype.number(),
              name: faker.name.findName(),
              url: faker.internet.url(),
            },
            org: {
              id: faker.datatype.number(),
              login: faker.lorem.slug(1),
              display_login: faker.lorem.slug(1),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              avatar_url: faker.internet.url(),
            },
            payload: {
              action: faker.lorem.slug(1),
              issue: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                url: 'https://api.github.com/repositories/42/issues/1',
                repository_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                events_url: faker.internet.url(),
                html_url: faker.internet.url(),
                number: 42,
                state: 'open',
                state_reason: 'not_planned',
                title: 'Widget creation fails in Safari on OS X 10.8',
                body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                labels: ['bug', 'registration'],
                assignee: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                assignees: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                })),
                milestone: {
                  url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
                  html_url:
                    'https://github.com/octocat/Hello-World/milestones/v1.0',
                  labels_url:
                    'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
                  id: 1002604,
                  node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
                  number: 42,
                  state: 'open',
                  title: 'v1.0',
                  description: 'Tracking milestone for version 1.0',
                  creator: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  open_issues: 4,
                  closed_issues: 8,
                  created_at: '2011-04-10T20:09:31Z',
                  updated_at: '2014-03-03T18:58:10Z',
                  closed_at: '2013-02-12T13:22:01Z',
                  due_on: '2012-10-09T23:39:01Z',
                },
                locked: faker.datatype.boolean(),
                active_lock_reason: faker.lorem.slug(1),
                comments: faker.datatype.number(),
                pull_request: {
                  merged_at: faker.date.past(),
                  diff_url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  patch_url: faker.internet.url(),
                  url: faker.internet.url(),
                },
                closed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                draft: faker.datatype.boolean(),
                closed_by: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                body_html: faker.lorem.slug(1),
                body_text: faker.lorem.slug(1),
                timeline_url: faker.internet.url(),
                repository: {
                  id: 42,
                  node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                  name: 'Team Environment',
                  full_name: 'octocat/Hello-World',
                  license: {
                    key: 'mit',
                    name: 'MIT License',
                    url: 'https://api.github.com/licenses/mit',
                    spdx_id: 'MIT',
                    node_id: 'MDc6TGljZW5zZW1pdA==',
                    html_url: faker.internet.url(),
                  },
                  organization: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  forks: faker.datatype.number(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                  },
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  private: faker.datatype.boolean(),
                  html_url: 'https://github.com/octocat/Hello-World',
                  description: 'This your first repo!',
                  fork: faker.datatype.boolean(),
                  url: 'https://api.github.com/repos/octocat/Hello-World',
                  archive_url:
                    'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                  assignees_url:
                    'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                  blobs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                  branches_url:
                    'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                  collaborators_url:
                    'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                  comments_url:
                    'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                  commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                  compare_url:
                    'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                  contents_url:
                    'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                  contributors_url:
                    'http://api.github.com/repos/octocat/Hello-World/contributors',
                  deployments_url:
                    'http://api.github.com/repos/octocat/Hello-World/deployments',
                  downloads_url:
                    'http://api.github.com/repos/octocat/Hello-World/downloads',
                  events_url:
                    'http://api.github.com/repos/octocat/Hello-World/events',
                  forks_url:
                    'http://api.github.com/repos/octocat/Hello-World/forks',
                  git_commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                  git_refs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                  git_tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                  git_url: 'git:github.com/octocat/Hello-World.git',
                  issue_comment_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                  issue_events_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                  issues_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                  keys_url:
                    'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                  labels_url:
                    'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                  languages_url:
                    'http://api.github.com/repos/octocat/Hello-World/languages',
                  merges_url:
                    'http://api.github.com/repos/octocat/Hello-World/merges',
                  milestones_url:
                    'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                  notifications_url:
                    'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                  pulls_url:
                    'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                  releases_url:
                    'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                  ssh_url: 'git@github.com:octocat/Hello-World.git',
                  stargazers_url:
                    'http://api.github.com/repos/octocat/Hello-World/stargazers',
                  statuses_url:
                    'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                  subscribers_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscribers',
                  subscription_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscription',
                  tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/tags',
                  teams_url:
                    'http://api.github.com/repos/octocat/Hello-World/teams',
                  trees_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                  clone_url: 'https://github.com/octocat/Hello-World.git',
                  mirror_url: 'git:git.example.com/octocat/Hello-World',
                  hooks_url:
                    'http://api.github.com/repos/octocat/Hello-World/hooks',
                  svn_url: 'https://svn.github.com/octocat/Hello-World',
                  homepage: 'https://github.com',
                  language: faker.lorem.slug(1),
                  forks_count: 9,
                  stargazers_count: 80,
                  watchers_count: 80,
                  size: 108,
                  default_branch: 'master',
                  open_issues_count: faker.datatype.number(),
                  is_template: true,
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: true,
                  has_projects: true,
                  has_wiki: true,
                  has_pages: faker.datatype.boolean(),
                  has_downloads: true,
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: '2011-01-26T19:06:43Z',
                  created_at: '2011-01-26T19:01:12Z',
                  updated_at: '2011-01-26T19:14:43Z',
                  allow_rebase_merge: true,
                  template_repository: {
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    name: faker.name.findName(),
                    full_name: faker.name.findName(),
                    owner: {
                      login: faker.lorem.slug(1),
                      id: faker.datatype.number(),
                      node_id: faker.lorem.slug(1),
                      avatar_url: faker.internet.url(),
                      gravatar_id: faker.lorem.slug(1),
                      url: faker.internet.url(),
                      html_url: faker.internet.url(),
                      followers_url: faker.internet.url(),
                      following_url: faker.internet.url(),
                      gists_url: faker.internet.url(),
                      starred_url: faker.internet.url(),
                      subscriptions_url: faker.internet.url(),
                      organizations_url: faker.internet.url(),
                      repos_url: faker.internet.url(),
                      events_url: faker.internet.url(),
                      received_events_url: faker.internet.url(),
                      type: faker.lorem.slug(1),
                      site_admin: faker.datatype.boolean(),
                    },
                    private: faker.datatype.boolean(),
                    html_url: faker.internet.url(),
                    description: faker.lorem.slug(1),
                    fork: faker.datatype.boolean(),
                    url: faker.internet.url(),
                    archive_url: faker.internet.url(),
                    assignees_url: faker.internet.url(),
                    blobs_url: faker.internet.url(),
                    branches_url: faker.internet.url(),
                    collaborators_url: faker.internet.url(),
                    comments_url: faker.internet.url(),
                    commits_url: faker.internet.url(),
                    compare_url: faker.internet.url(),
                    contents_url: faker.internet.url(),
                    contributors_url: faker.internet.url(),
                    deployments_url: faker.internet.url(),
                    downloads_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    forks_url: faker.internet.url(),
                    git_commits_url: faker.internet.url(),
                    git_refs_url: faker.internet.url(),
                    git_tags_url: faker.internet.url(),
                    git_url: faker.internet.url(),
                    issue_comment_url: faker.internet.url(),
                    issue_events_url: faker.internet.url(),
                    issues_url: faker.internet.url(),
                    keys_url: faker.internet.url(),
                    labels_url: faker.internet.url(),
                    languages_url: faker.internet.url(),
                    merges_url: faker.internet.url(),
                    milestones_url: faker.internet.url(),
                    notifications_url: faker.internet.url(),
                    pulls_url: faker.internet.url(),
                    releases_url: faker.internet.url(),
                    ssh_url: faker.internet.url(),
                    stargazers_url: faker.internet.url(),
                    statuses_url: faker.internet.url(),
                    subscribers_url: faker.internet.url(),
                    subscription_url: faker.internet.url(),
                    tags_url: faker.internet.url(),
                    teams_url: faker.internet.url(),
                    trees_url: faker.internet.url(),
                    clone_url: faker.internet.url(),
                    mirror_url: faker.internet.url(),
                    hooks_url: faker.internet.url(),
                    svn_url: faker.internet.url(),
                    homepage: faker.lorem.slug(1),
                    language: faker.lorem.slug(1),
                    forks_count: faker.datatype.number(),
                    stargazers_count: faker.datatype.number(),
                    watchers_count: faker.datatype.number(),
                    size: faker.datatype.number(),
                    default_branch: faker.lorem.slug(1),
                    open_issues_count: faker.datatype.number(),
                    is_template: faker.datatype.boolean(),
                    topics: [
                      ...new Array(
                        faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                      ).keys(),
                    ].map(_ => faker.lorem.slug(1)),
                    has_issues: faker.datatype.boolean(),
                    has_projects: faker.datatype.boolean(),
                    has_wiki: faker.datatype.boolean(),
                    has_pages: faker.datatype.boolean(),
                    has_downloads: faker.datatype.boolean(),
                    archived: faker.datatype.boolean(),
                    disabled: faker.datatype.boolean(),
                    visibility: faker.lorem.slug(1),
                    pushed_at: faker.date.past(),
                    created_at: faker.date.past(),
                    updated_at: faker.date.past(),
                    permissions: {
                      admin: faker.datatype.boolean(),
                      maintain: faker.datatype.boolean(),
                      push: faker.datatype.boolean(),
                      triage: faker.datatype.boolean(),
                      pull: faker.datatype.boolean(),
                    },
                    allow_rebase_merge: faker.datatype.boolean(),
                    temp_clone_token: faker.lorem.slug(1),
                    allow_squash_merge: faker.datatype.boolean(),
                    allow_auto_merge: faker.datatype.boolean(),
                    delete_branch_on_merge: faker.datatype.boolean(),
                    allow_update_branch: faker.datatype.boolean(),
                    allow_merge_commit: faker.datatype.boolean(),
                    subscribers_count: faker.datatype.number(),
                    network_count: faker.datatype.number(),
                  },
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: true,
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: true,
                  allow_forking: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                  open_issues: faker.datatype.number(),
                  watchers: faker.datatype.number(),
                  master_branch: faker.lorem.slug(1),
                  starred_at: '"2020-07-09T00:17:42Z"',
                  anonymous_access_enabled: faker.datatype.boolean(),
                },
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
                author_association: 'OWNER',
                reactions: {
                  url: faker.internet.url(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              },
              comment: {
                id: 42,
                node_id: faker.lorem.slug(1),
                url: 'https://api.github.com/repositories/42/issues/comments/1',
                body: 'What version of Safari were you using when you observed this bug?',
                body_text: faker.lorem.slug(1),
                body_html: faker.lorem.slug(1),
                html_url: faker.internet.url(),
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                created_at: '2011-04-14T16:00:49Z',
                updated_at: '2011-04-14T16:00:49Z',
                issue_url: faker.internet.url(),
                author_association: 'OWNER',
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
                reactions: {
                  url: faker.internet.url(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              },
              pages: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                page_name: faker.name.findName(),
                title: faker.lorem.slug(1),
                summary: faker.lorem.slug(1),
                action: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                html_url: faker.internet.url(),
              })),
            },
            public: faker.datatype.boolean(),
            created_at: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/hooks`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 1,
            url: 'https://api.github.com/orgs/octocat/hooks/1',
            ping_url: 'https://api.github.com/orgs/octocat/hooks/1/pings',
            deliveries_url:
              'https://api.github.com/orgs/octocat/hooks/1/deliveries',
            name: 'web',
            events: ['push', 'pull_request'],
            active: true,
            config: {
              url: '"http://example.com/2"',
              insecure_ssl: '"0"',
              content_type: '"form"',
              secret: '"********"',
            },
            updated_at: '2011-09-06T20:39:23Z',
            created_at: '2011-09-06T17:26:27Z',
            type: faker.lorem.slug(1),
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/orgs/:org/hooks`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: 1,
          url: 'https://api.github.com/orgs/octocat/hooks/1',
          ping_url: 'https://api.github.com/orgs/octocat/hooks/1/pings',
          deliveries_url:
            'https://api.github.com/orgs/octocat/hooks/1/deliveries',
          name: 'web',
          events: ['push', 'pull_request'],
          active: true,
          config: {
            url: '"http://example.com/2"',
            insecure_ssl: '"0"',
            content_type: '"form"',
            secret: '"********"',
          },
          updated_at: '2011-09-06T20:39:23Z',
          created_at: '2011-09-06T17:26:27Z',
          type: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/hooks/:hookId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 1,
          url: 'https://api.github.com/orgs/octocat/hooks/1',
          ping_url: 'https://api.github.com/orgs/octocat/hooks/1/pings',
          deliveries_url:
            'https://api.github.com/orgs/octocat/hooks/1/deliveries',
          name: 'web',
          events: ['push', 'pull_request'],
          active: true,
          config: {
            url: '"http://example.com/2"',
            insecure_ssl: '"0"',
            content_type: '"form"',
            secret: '"********"',
          },
          updated_at: '2011-09-06T20:39:23Z',
          created_at: '2011-09-06T17:26:27Z',
          type: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/orgs/:org/hooks/:hookId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 1,
          url: 'https://api.github.com/orgs/octocat/hooks/1',
          ping_url: 'https://api.github.com/orgs/octocat/hooks/1/pings',
          deliveries_url:
            'https://api.github.com/orgs/octocat/hooks/1/deliveries',
          name: 'web',
          events: ['push', 'pull_request'],
          active: true,
          config: {
            url: '"http://example.com/2"',
            insecure_ssl: '"0"',
            content_type: '"form"',
            secret: '"********"',
          },
          updated_at: '2011-09-06T20:39:23Z',
          created_at: '2011-09-06T17:26:27Z',
          type: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/orgs/:org/hooks/:hookId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/hooks/:hookId/config`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: 'https://example.com/webhook',
          content_type: '"json"',
          secret: '"********"',
          insecure_ssl: null,
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/orgs/:org/hooks/:hookId/config`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: 'https://example.com/webhook',
          content_type: '"json"',
          secret: '"********"',
          insecure_ssl: null,
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/hooks/:hookId/deliveries`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 42,
            guid: '58474f00-b361-11eb-836d-0e4f3503ccbe',
            delivered_at: '2021-05-12T20:33:44Z',
            redelivery: faker.datatype.boolean(),
            duration: 0.03,
            status: 'failed to connect',
            status_code: 502,
            event: 'issues',
            action: 'opened',
            installation_id: 123,
            repository_id: 123,
          }))
        ),
      ],
      [
        ctx.status(400),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/orgs/:org/hooks/:hookId/deliveries/:deliveryId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 42,
            guid: '58474f00-b361-11eb-836d-0e4f3503ccbe',
            delivered_at: '2021-05-12T20:33:44Z',
            redelivery: faker.datatype.boolean(),
            duration: 0.03,
            status: 'failed to connect',
            status_code: 502,
            event: 'issues',
            action: 'opened',
            installation_id: 123,
            repository_id: 123,
            url: 'https://www.example.com',
            request: {
              headers: {},
              payload: {},
            },
            response: {
              headers: {},
              payload: faker.lorem.slug(1),
            },
          }),
        ],
        [
          ctx.status(400),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/orgs/:org/hooks/:hookId/deliveries/:deliveryId/attempts`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(202), ctx.json({})],
        [
          ctx.status(400),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(`${baseURL}/orgs/:org/hooks/:hookId/pings`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/installation`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 1,
          account: null,
          repository_selection: faker.helpers.arrayElement(['all', 'selected']),
          access_tokens_url:
            'https://api.github.com/installations/1/access_tokens',
          repositories_url: 'https://api.github.com/installation/repositories',
          html_url:
            'https://github.com/organizations/github/settings/installations/1',
          app_id: 1,
          target_id: faker.datatype.number(),
          target_type: 'Organization',
          permissions: {
            contents: 'read',
            issues: 'read',
            deployments: 'write',
            single_file: 'read',
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          single_file_name: 'config.yaml',
          has_multiple_single_files: true,
          single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
          app_slug: 'github-actions',
          suspended_by: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          suspended_at: faker.date.past(),
          contact_email: '"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"',
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/installations`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          installations: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 1,
            account: null,
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
            access_tokens_url:
              'https://api.github.com/installations/1/access_tokens',
            repositories_url:
              'https://api.github.com/installation/repositories',
            html_url:
              'https://github.com/organizations/github/settings/installations/1',
            app_id: 1,
            target_id: faker.datatype.number(),
            target_type: 'Organization',
            permissions: {
              contents: 'read',
              issues: 'read',
              deployments: 'write',
              single_file: 'read',
            },
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            single_file_name: 'config.yaml',
            has_multiple_single_files: true,
            single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
            app_slug: 'github-actions',
            suspended_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            suspended_at: faker.date.past(),
            contact_email: '"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"',
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/issues`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            url: 'https://api.github.com/repositories/42/issues/1',
            repository_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            number: 42,
            state: 'open',
            state_reason: 'not_planned',
            title: 'Widget creation fails in Safari on OS X 10.8',
            body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            labels: ['bug', 'registration'],
            assignee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            milestone: {
              url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
              html_url:
                'https://github.com/octocat/Hello-World/milestones/v1.0',
              labels_url:
                'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
              id: 1002604,
              node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
              number: 42,
              state: 'open',
              title: 'v1.0',
              description: 'Tracking milestone for version 1.0',
              creator: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              open_issues: 4,
              closed_issues: 8,
              created_at: '2011-04-10T20:09:31Z',
              updated_at: '2014-03-03T18:58:10Z',
              closed_at: '2013-02-12T13:22:01Z',
              due_on: '2012-10-09T23:39:01Z',
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(1),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.date.past(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            closed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            timeline_url: faker.internet.url(),
            repository: {
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            },
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
            author_association: 'OWNER',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/members`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          }))
        ),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/members/:username`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(302), ctx.json(null)],
      [ctx.status(404), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/orgs/:org/members/:username`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/memberships/:username`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: 'https://api.github.com/orgs/octocat/memberships/defunkt',
          state: 'active',
          role: 'admin',
          organization_url: 'https://api.github.com/orgs/octocat',
          organization: {
            login: 'github',
            id: 1,
            node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
            url: 'https://api.github.com/orgs/github',
            repos_url: 'https://api.github.com/orgs/github/repos',
            events_url: 'https://api.github.com/orgs/github/events',
            hooks_url: 'https://api.github.com/orgs/github/hooks',
            issues_url: 'https://api.github.com/orgs/github/issues',
            members_url: 'https://api.github.com/orgs/github/members{/member}',
            public_members_url:
              'https://api.github.com/orgs/github/public_members{/member}',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            description: 'A great organization',
          },
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          permissions: {
            can_create_repository: faker.datatype.boolean(),
          },
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/orgs/:org/memberships/:username`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: 'https://api.github.com/orgs/octocat/memberships/defunkt',
          state: 'active',
          role: 'admin',
          organization_url: 'https://api.github.com/orgs/octocat',
          organization: {
            login: 'github',
            id: 1,
            node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
            url: 'https://api.github.com/orgs/github',
            repos_url: 'https://api.github.com/orgs/github/repos',
            events_url: 'https://api.github.com/orgs/github/events',
            hooks_url: 'https://api.github.com/orgs/github/hooks',
            issues_url: 'https://api.github.com/orgs/github/issues',
            members_url: 'https://api.github.com/orgs/github/members{/member}',
            public_members_url:
              'https://api.github.com/orgs/github/public_members{/member}',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            description: 'A great organization',
          },
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          permissions: {
            can_create_repository: faker.datatype.boolean(),
          },
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/orgs/:org/memberships/:username`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/outside_collaborators`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(
    `${baseURL}/orgs/:org/outside_collaborators/:username`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(202), ctx.json({})],
        [ctx.status(204), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/orgs/:org/outside_collaborators/:username`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/orgs/:org/pre-receive-hooks`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            enforcement: faker.lorem.slug(1),
            configuration_url: faker.internet.url(),
            allow_downstream_configuration: faker.datatype.boolean(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/orgs/:org/pre-receive-hooks/:preReceiveHookId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            enforcement: faker.lorem.slug(1),
            configuration_url: faker.internet.url(),
            allow_downstream_configuration: faker.datatype.boolean(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/orgs/:org/pre-receive-hooks/:preReceiveHookId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            enforcement: faker.lorem.slug(1),
            configuration_url: faker.internet.url(),
            allow_downstream_configuration: faker.datatype.boolean(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/orgs/:org/pre-receive-hooks/:preReceiveHookId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            enforcement: faker.lorem.slug(1),
            configuration_url: faker.internet.url(),
            allow_downstream_configuration: faker.datatype.boolean(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/orgs/:org/projects`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            owner_url:
              'https://api.github.com/repos/api-playground/projects-test',
            url: 'https://api.github.com/projects/1002604',
            html_url:
              'https://github.com/api-playground/projects-test/projects/12',
            columns_url: 'https://api.github.com/projects/1002604/columns',
            id: 1002604,
            node_id: 'MDc6UHJvamVjdDEwMDI2MDQ=',
            name: 'Week One Sprint',
            body: 'This project represents the sprint of the first week in January',
            number: 1,
            state: 'open',
            creator: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: '2011-04-10T20:09:31Z',
            updated_at: '2014-03-03T18:58:10Z',
            organization_permission: faker.helpers.arrayElement([
              'read',
              'write',
              'admin',
              'none',
            ]),
            private: faker.datatype.boolean(),
          }))
        ),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/orgs/:org/projects`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          owner_url:
            'https://api.github.com/repos/api-playground/projects-test',
          url: 'https://api.github.com/projects/1002604',
          html_url:
            'https://github.com/api-playground/projects-test/projects/12',
          columns_url: 'https://api.github.com/projects/1002604/columns',
          id: 1002604,
          node_id: 'MDc6UHJvamVjdDEwMDI2MDQ=',
          name: 'Week One Sprint',
          body: 'This project represents the sprint of the first week in January',
          number: 1,
          state: 'open',
          creator: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          created_at: '2011-04-10T20:09:31Z',
          updated_at: '2014-03-03T18:58:10Z',
          organization_permission: faker.helpers.arrayElement([
            'read',
            'write',
            'admin',
            'none',
          ]),
          private: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/public_members`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/public_members/:username`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(404), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/orgs/:org/public_members/:username`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(
    `${baseURL}/orgs/:org/public_members/:username`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/orgs/:org/repos`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 1296269,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Hello-World',
            full_name: 'octocat/Hello-World',
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: faker.internet.url(),
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: faker.internet.url(),
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(1),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: 'contributor_covenant',
              name: 'Contributor Covenant',
              url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
              body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(1),
              name: faker.name.findName(),
              spdx_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              node_id: faker.lorem.slug(1),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/orgs/:org/repos`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: 42,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Team Environment',
          full_name: 'octocat/Hello-World',
          license: {
            key: 'mit',
            name: 'MIT License',
            url: 'https://api.github.com/licenses/mit',
            spdx_id: 'MIT',
            node_id: 'MDc6TGljZW5zZW1pdA==',
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          private: faker.datatype.boolean(),
          html_url: 'https://github.com/octocat/Hello-World',
          description: 'This your first repo!',
          fork: faker.datatype.boolean(),
          url: 'https://api.github.com/repos/octocat/Hello-World',
          archive_url:
            'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
          assignees_url:
            'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
          blobs_url:
            'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
          branches_url:
            'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
          collaborators_url:
            'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
          comments_url:
            'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
          commits_url:
            'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
          compare_url:
            'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
          contents_url:
            'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
          contributors_url:
            'http://api.github.com/repos/octocat/Hello-World/contributors',
          deployments_url:
            'http://api.github.com/repos/octocat/Hello-World/deployments',
          downloads_url:
            'http://api.github.com/repos/octocat/Hello-World/downloads',
          events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
          forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
          git_commits_url:
            'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
          git_refs_url:
            'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
          git_tags_url:
            'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
          git_url: 'git:github.com/octocat/Hello-World.git',
          issue_comment_url:
            'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
          issue_events_url:
            'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
          issues_url:
            'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
          keys_url:
            'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
          labels_url:
            'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
          languages_url:
            'http://api.github.com/repos/octocat/Hello-World/languages',
          merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
          milestones_url:
            'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
          notifications_url:
            'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
          pulls_url:
            'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
          releases_url:
            'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
          ssh_url: 'git@github.com:octocat/Hello-World.git',
          stargazers_url:
            'http://api.github.com/repos/octocat/Hello-World/stargazers',
          statuses_url:
            'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
          subscribers_url:
            'http://api.github.com/repos/octocat/Hello-World/subscribers',
          subscription_url:
            'http://api.github.com/repos/octocat/Hello-World/subscription',
          tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
          teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
          trees_url:
            'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
          clone_url: 'https://github.com/octocat/Hello-World.git',
          mirror_url: 'git:git.example.com/octocat/Hello-World',
          hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
          svn_url: 'https://svn.github.com/octocat/Hello-World',
          homepage: 'https://github.com',
          language: faker.lorem.slug(1),
          forks_count: 9,
          stargazers_count: 80,
          watchers_count: 80,
          size: 108,
          default_branch: 'master',
          open_issues_count: faker.datatype.number(),
          is_template: true,
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          has_issues: true,
          has_projects: true,
          has_wiki: true,
          has_pages: faker.datatype.boolean(),
          has_downloads: true,
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: '2011-01-26T19:06:43Z',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:14:43Z',
          allow_rebase_merge: true,
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            full_name: faker.name.findName(),
            owner: {
              login: faker.lorem.slug(1),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(1),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.internet.url(),
            assignees_url: faker.internet.url(),
            blobs_url: faker.internet.url(),
            branches_url: faker.internet.url(),
            collaborators_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            compare_url: faker.internet.url(),
            contents_url: faker.internet.url(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.internet.url(),
            git_refs_url: faker.internet.url(),
            git_tags_url: faker.internet.url(),
            git_url: faker.internet.url(),
            issue_comment_url: faker.internet.url(),
            issue_events_url: faker.internet.url(),
            issues_url: faker.internet.url(),
            keys_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.internet.url(),
            notifications_url: faker.internet.url(),
            pulls_url: faker.internet.url(),
            releases_url: faker.internet.url(),
            ssh_url: faker.internet.url(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.internet.url(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.internet.url(),
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: true,
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: true,
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(1),
          starred_at: '"2020-07-09T00:17:42Z"',
          anonymous_access_enabled: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/secret-scanning/alerts`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            number: faker.datatype.number(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            locations_url: faker.internet.url(),
            state: faker.helpers.arrayElement(['open', 'resolved']),
            resolution: faker.helpers.arrayElement([
              null,
              'false_positive',
              'wont_fix',
              'revoked',
              'used_in_tests',
            ]),
            resolved_at: faker.date.past(),
            resolved_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            secret_type: faker.lorem.slug(1),
            secret: faker.lorem.slug(1),
            repository: {
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'https://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'https://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'https://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'https://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'https://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'https://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'https://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'https://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'https://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'https://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              issue_comment_url:
                'https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'https://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'https://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'https://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'https://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'https://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'https://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'https://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'https://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'https://api.github.com/repos/octocat/Hello-World/releases{/id}',
              stargazers_url:
                'https://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'https://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'https://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'https://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'https://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'https://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              hooks_url:
                'https://api.github.com/repos/octocat/Hello-World/hooks',
            },
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.lorem.slug(1),
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/teams`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            slug: faker.lorem.slug(1),
            description: faker.lorem.slug(1),
            privacy: faker.lorem.slug(1),
            permission: faker.lorem.slug(1),
            permissions: {
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
            url: faker.internet.url(),
            html_url: 'https://github.com/orgs/rails/teams/core',
            members_url: faker.internet.url(),
            repositories_url: faker.internet.url(),
            parent: {
              id: 1,
              node_id: 'MDQ6VGVhbTE=',
              url: 'https://api.github.com/organizations/1/team/1',
              members_url:
                'https://api.github.com/organizations/1/team/1/members{/member}',
              name: 'Justice League',
              description: 'A great team.',
              permission: 'admin',
              privacy: 'closed',
              html_url: 'https://github.com/orgs/rails/teams/core',
              repositories_url:
                'https://api.github.com/organizations/1/team/1/repos',
              slug: 'justice-league',
              ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
            },
          }))
        ),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/orgs/:org/teams`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: 42,
          node_id: 'MDQ6VGVhbTE=',
          url: 'https://api.github.com/organizations/1/team/1',
          html_url: 'https://github.com/orgs/rails/teams/core',
          name: 'Developers',
          slug: 'justice-league',
          description: 'A great team.',
          privacy: 'closed',
          permission: 'push',
          members_url:
            'https://api.github.com/organizations/1/team/1/members{/member}',
          repositories_url:
            'https://api.github.com/organizations/1/team/1/repos',
          parent: {
            id: 1,
            node_id: 'MDQ6VGVhbTE=',
            url: 'https://api.github.com/organizations/1/team/1',
            members_url:
              'https://api.github.com/organizations/1/team/1/members{/member}',
            name: 'Justice League',
            description: 'A great team.',
            permission: 'admin',
            privacy: 'closed',
            html_url: 'https://github.com/orgs/rails/teams/core',
            repositories_url:
              'https://api.github.com/organizations/1/team/1/repos',
            slug: 'justice-league',
            ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
          },
          members_count: 3,
          repos_count: 10,
          created_at: '2017-07-14T16:53:42Z',
          updated_at: '2017-08-17T12:37:15Z',
          organization: {
            login: 'github',
            id: 1,
            node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
            url: 'https://api.github.com/orgs/github',
            repos_url: 'https://api.github.com/orgs/github/repos',
            events_url: 'https://api.github.com/orgs/github/events',
            hooks_url: 'https://api.github.com/orgs/github/hooks',
            issues_url: 'https://api.github.com/orgs/github/issues',
            members_url: 'https://api.github.com/orgs/github/members{/member}',
            public_members_url:
              'https://api.github.com/orgs/github/public_members{/member}',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            description: 'A great organization',
            name: 'github',
            company: 'GitHub',
            blog: 'https://github.com/blog',
            location: 'San Francisco',
            email: 'octocat@github.com',
            twitter_username: 'github',
            is_verified: true,
            has_organization_projects: true,
            has_repository_projects: true,
            public_repos: 2,
            public_gists: 1,
            followers: 20,
            following: faker.datatype.number(),
            html_url: 'https://github.com/octocat',
            created_at: '2008-01-14T04:33:35Z',
            type: 'Organization',
            total_private_repos: 100,
            owned_private_repos: 100,
            private_gists: 81,
            disk_usage: 10000,
            collaborators: 8,
            billing_email: 'org@example.com',
            plan: {
              name: faker.name.findName(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
              filled_seats: faker.datatype.number(),
              seats: faker.datatype.number(),
            },
            default_repository_permission: faker.lorem.slug(1),
            members_can_create_repositories: true,
            two_factor_requirement_enabled: true,
            members_allowed_repository_creation_type: 'all',
            members_can_create_public_repositories: true,
            members_can_create_private_repositories: true,
            members_can_create_internal_repositories: true,
            members_can_create_pages: true,
            members_can_create_public_pages: true,
            members_can_create_private_pages: true,
            updated_at: faker.date.past(),
          },
          ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/orgs/:org/teams/:teamSlug`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 42,
          node_id: 'MDQ6VGVhbTE=',
          url: 'https://api.github.com/organizations/1/team/1',
          html_url: 'https://github.com/orgs/rails/teams/core',
          name: 'Developers',
          slug: 'justice-league',
          description: 'A great team.',
          privacy: 'closed',
          permission: 'push',
          members_url:
            'https://api.github.com/organizations/1/team/1/members{/member}',
          repositories_url:
            'https://api.github.com/organizations/1/team/1/repos',
          parent: {
            id: 1,
            node_id: 'MDQ6VGVhbTE=',
            url: 'https://api.github.com/organizations/1/team/1',
            members_url:
              'https://api.github.com/organizations/1/team/1/members{/member}',
            name: 'Justice League',
            description: 'A great team.',
            permission: 'admin',
            privacy: 'closed',
            html_url: 'https://github.com/orgs/rails/teams/core',
            repositories_url:
              'https://api.github.com/organizations/1/team/1/repos',
            slug: 'justice-league',
            ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
          },
          members_count: 3,
          repos_count: 10,
          created_at: '2017-07-14T16:53:42Z',
          updated_at: '2017-08-17T12:37:15Z',
          organization: {
            login: 'github',
            id: 1,
            node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
            url: 'https://api.github.com/orgs/github',
            repos_url: 'https://api.github.com/orgs/github/repos',
            events_url: 'https://api.github.com/orgs/github/events',
            hooks_url: 'https://api.github.com/orgs/github/hooks',
            issues_url: 'https://api.github.com/orgs/github/issues',
            members_url: 'https://api.github.com/orgs/github/members{/member}',
            public_members_url:
              'https://api.github.com/orgs/github/public_members{/member}',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            description: 'A great organization',
            name: 'github',
            company: 'GitHub',
            blog: 'https://github.com/blog',
            location: 'San Francisco',
            email: 'octocat@github.com',
            twitter_username: 'github',
            is_verified: true,
            has_organization_projects: true,
            has_repository_projects: true,
            public_repos: 2,
            public_gists: 1,
            followers: 20,
            following: faker.datatype.number(),
            html_url: 'https://github.com/octocat',
            created_at: '2008-01-14T04:33:35Z',
            type: 'Organization',
            total_private_repos: 100,
            owned_private_repos: 100,
            private_gists: 81,
            disk_usage: 10000,
            collaborators: 8,
            billing_email: 'org@example.com',
            plan: {
              name: faker.name.findName(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
              filled_seats: faker.datatype.number(),
              seats: faker.datatype.number(),
            },
            default_repository_permission: faker.lorem.slug(1),
            members_can_create_repositories: true,
            two_factor_requirement_enabled: true,
            members_allowed_repository_creation_type: 'all',
            members_can_create_public_repositories: true,
            members_can_create_private_repositories: true,
            members_can_create_internal_repositories: true,
            members_can_create_pages: true,
            members_can_create_public_pages: true,
            members_can_create_private_pages: true,
            updated_at: faker.date.past(),
          },
          ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/orgs/:org/teams/:teamSlug`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 42,
          node_id: 'MDQ6VGVhbTE=',
          url: 'https://api.github.com/organizations/1/team/1',
          html_url: 'https://github.com/orgs/rails/teams/core',
          name: 'Developers',
          slug: 'justice-league',
          description: 'A great team.',
          privacy: 'closed',
          permission: 'push',
          members_url:
            'https://api.github.com/organizations/1/team/1/members{/member}',
          repositories_url:
            'https://api.github.com/organizations/1/team/1/repos',
          parent: {
            id: 1,
            node_id: 'MDQ6VGVhbTE=',
            url: 'https://api.github.com/organizations/1/team/1',
            members_url:
              'https://api.github.com/organizations/1/team/1/members{/member}',
            name: 'Justice League',
            description: 'A great team.',
            permission: 'admin',
            privacy: 'closed',
            html_url: 'https://github.com/orgs/rails/teams/core',
            repositories_url:
              'https://api.github.com/organizations/1/team/1/repos',
            slug: 'justice-league',
            ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
          },
          members_count: 3,
          repos_count: 10,
          created_at: '2017-07-14T16:53:42Z',
          updated_at: '2017-08-17T12:37:15Z',
          organization: {
            login: 'github',
            id: 1,
            node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
            url: 'https://api.github.com/orgs/github',
            repos_url: 'https://api.github.com/orgs/github/repos',
            events_url: 'https://api.github.com/orgs/github/events',
            hooks_url: 'https://api.github.com/orgs/github/hooks',
            issues_url: 'https://api.github.com/orgs/github/issues',
            members_url: 'https://api.github.com/orgs/github/members{/member}',
            public_members_url:
              'https://api.github.com/orgs/github/public_members{/member}',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            description: 'A great organization',
            name: 'github',
            company: 'GitHub',
            blog: 'https://github.com/blog',
            location: 'San Francisco',
            email: 'octocat@github.com',
            twitter_username: 'github',
            is_verified: true,
            has_organization_projects: true,
            has_repository_projects: true,
            public_repos: 2,
            public_gists: 1,
            followers: 20,
            following: faker.datatype.number(),
            html_url: 'https://github.com/octocat',
            created_at: '2008-01-14T04:33:35Z',
            type: 'Organization',
            total_private_repos: 100,
            owned_private_repos: 100,
            private_gists: 81,
            disk_usage: 10000,
            collaborators: 8,
            billing_email: 'org@example.com',
            plan: {
              name: faker.name.findName(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
              filled_seats: faker.datatype.number(),
              seats: faker.datatype.number(),
            },
            default_repository_permission: faker.lorem.slug(1),
            members_can_create_repositories: true,
            two_factor_requirement_enabled: true,
            members_allowed_repository_creation_type: 'all',
            members_can_create_public_repositories: true,
            members_can_create_private_repositories: true,
            members_can_create_internal_repositories: true,
            members_can_create_pages: true,
            members_can_create_public_pages: true,
            members_can_create_private_pages: true,
            updated_at: faker.date.past(),
          },
          ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
        }),
      ],
      [
        ctx.status(201),
        ctx.json({
          id: 42,
          node_id: 'MDQ6VGVhbTE=',
          url: 'https://api.github.com/organizations/1/team/1',
          html_url: 'https://github.com/orgs/rails/teams/core',
          name: 'Developers',
          slug: 'justice-league',
          description: 'A great team.',
          privacy: 'closed',
          permission: 'push',
          members_url:
            'https://api.github.com/organizations/1/team/1/members{/member}',
          repositories_url:
            'https://api.github.com/organizations/1/team/1/repos',
          parent: {
            id: 1,
            node_id: 'MDQ6VGVhbTE=',
            url: 'https://api.github.com/organizations/1/team/1',
            members_url:
              'https://api.github.com/organizations/1/team/1/members{/member}',
            name: 'Justice League',
            description: 'A great team.',
            permission: 'admin',
            privacy: 'closed',
            html_url: 'https://github.com/orgs/rails/teams/core',
            repositories_url:
              'https://api.github.com/organizations/1/team/1/repos',
            slug: 'justice-league',
            ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
          },
          members_count: 3,
          repos_count: 10,
          created_at: '2017-07-14T16:53:42Z',
          updated_at: '2017-08-17T12:37:15Z',
          organization: {
            login: 'github',
            id: 1,
            node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
            url: 'https://api.github.com/orgs/github',
            repos_url: 'https://api.github.com/orgs/github/repos',
            events_url: 'https://api.github.com/orgs/github/events',
            hooks_url: 'https://api.github.com/orgs/github/hooks',
            issues_url: 'https://api.github.com/orgs/github/issues',
            members_url: 'https://api.github.com/orgs/github/members{/member}',
            public_members_url:
              'https://api.github.com/orgs/github/public_members{/member}',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            description: 'A great organization',
            name: 'github',
            company: 'GitHub',
            blog: 'https://github.com/blog',
            location: 'San Francisco',
            email: 'octocat@github.com',
            twitter_username: 'github',
            is_verified: true,
            has_organization_projects: true,
            has_repository_projects: true,
            public_repos: 2,
            public_gists: 1,
            followers: 20,
            following: faker.datatype.number(),
            html_url: 'https://github.com/octocat',
            created_at: '2008-01-14T04:33:35Z',
            type: 'Organization',
            total_private_repos: 100,
            owned_private_repos: 100,
            private_gists: 81,
            disk_usage: 10000,
            collaborators: 8,
            billing_email: 'org@example.com',
            plan: {
              name: faker.name.findName(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
              filled_seats: faker.datatype.number(),
              seats: faker.datatype.number(),
            },
            default_repository_permission: faker.lorem.slug(1),
            members_can_create_repositories: true,
            two_factor_requirement_enabled: true,
            members_allowed_repository_creation_type: 'all',
            members_can_create_public_repositories: true,
            members_can_create_private_repositories: true,
            members_can_create_internal_repositories: true,
            members_can_create_pages: true,
            members_can_create_public_pages: true,
            members_can_create_private_pages: true,
            updated_at: faker.date.past(),
          },
          ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/orgs/:org/teams/:teamSlug`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              author: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              body: 'Please suggest improvements to our workflow in comments.',
              body_html:
                '<p>Hi! This is an area for us to collaborate as a team</p>',
              body_version: '0307116bbf7ced493b8d8a346c650b71',
              comments_count: faker.datatype.number(),
              comments_url:
                'https://api.github.com/organizations/1/team/2343027/discussions/1/comments',
              created_at: '2018-01-25T18:56:31Z',
              last_edited_at: faker.date.past(),
              html_url:
                'https://github.com/orgs/github/teams/justice-league/discussions/1',
              node_id: 'MDE0OlRlYW1EaXNjdXNzaW9uMQ==',
              number: 42,
              pinned: true,
              private: true,
              team_url: 'https://api.github.com/organizations/1/team/2343027',
              title: 'How can we improve our workflow?',
              updated_at: '2018-01-25T18:56:31Z',
              url: 'https://api.github.com/organizations/1/team/2343027/discussions/1',
              reactions: {
                url: faker.internet.url(),
                total_count: faker.datatype.number(),
                '+1': faker.datatype.number(),
                '-1': faker.datatype.number(),
                laugh: faker.datatype.number(),
                confused: faker.datatype.number(),
                heart: faker.datatype.number(),
                hooray: faker.datatype.number(),
                eyes: faker.datatype.number(),
                rocket: faker.datatype.number(),
              },
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'Please suggest improvements to our workflow in comments.',
            body_html:
              '<p>Hi! This is an area for us to collaborate as a team</p>',
            body_version: '0307116bbf7ced493b8d8a346c650b71',
            comments_count: faker.datatype.number(),
            comments_url:
              'https://api.github.com/organizations/1/team/2343027/discussions/1/comments',
            created_at: '2018-01-25T18:56:31Z',
            last_edited_at: faker.date.past(),
            html_url:
              'https://github.com/orgs/github/teams/justice-league/discussions/1',
            node_id: 'MDE0OlRlYW1EaXNjdXNzaW9uMQ==',
            number: 42,
            pinned: true,
            private: true,
            team_url: 'https://api.github.com/organizations/1/team/2343027',
            title: 'How can we improve our workflow?',
            updated_at: '2018-01-25T18:56:31Z',
            url: 'https://api.github.com/organizations/1/team/2343027/discussions/1',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'Please suggest improvements to our workflow in comments.',
            body_html:
              '<p>Hi! This is an area for us to collaborate as a team</p>',
            body_version: '0307116bbf7ced493b8d8a346c650b71',
            comments_count: faker.datatype.number(),
            comments_url:
              'https://api.github.com/organizations/1/team/2343027/discussions/1/comments',
            created_at: '2018-01-25T18:56:31Z',
            last_edited_at: faker.date.past(),
            html_url:
              'https://github.com/orgs/github/teams/justice-league/discussions/1',
            node_id: 'MDE0OlRlYW1EaXNjdXNzaW9uMQ==',
            number: 42,
            pinned: true,
            private: true,
            team_url: 'https://api.github.com/organizations/1/team/2343027',
            title: 'How can we improve our workflow?',
            updated_at: '2018-01-25T18:56:31Z',
            url: 'https://api.github.com/organizations/1/team/2343027/discussions/1',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'Please suggest improvements to our workflow in comments.',
            body_html:
              '<p>Hi! This is an area for us to collaborate as a team</p>',
            body_version: '0307116bbf7ced493b8d8a346c650b71',
            comments_count: faker.datatype.number(),
            comments_url:
              'https://api.github.com/organizations/1/team/2343027/discussions/1/comments',
            created_at: '2018-01-25T18:56:31Z',
            last_edited_at: faker.date.past(),
            html_url:
              'https://github.com/orgs/github/teams/justice-league/discussions/1',
            node_id: 'MDE0OlRlYW1EaXNjdXNzaW9uMQ==',
            number: 42,
            pinned: true,
            private: true,
            team_url: 'https://api.github.com/organizations/1/team/2343027',
            title: 'How can we improve our workflow?',
            updated_at: '2018-01-25T18:56:31Z',
            url: 'https://api.github.com/organizations/1/team/2343027/discussions/1',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              author: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              body: 'I agree with this suggestion.',
              body_html: '<p>Do you like apples?</p>',
              body_version: '0307116bbf7ced493b8d8a346c650b71',
              created_at: '2018-01-15T23:53:58Z',
              last_edited_at: faker.date.past(),
              discussion_url:
                'https://api.github.com/organizations/1/team/2403582/discussions/1',
              html_url:
                'https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1',
              node_id: 'MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=',
              number: 42,
              updated_at: '2018-01-15T23:53:58Z',
              url: 'https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1',
              reactions: {
                url: faker.internet.url(),
                total_count: faker.datatype.number(),
                '+1': faker.datatype.number(),
                '-1': faker.datatype.number(),
                laugh: faker.datatype.number(),
                confused: faker.datatype.number(),
                heart: faker.datatype.number(),
                hooray: faker.datatype.number(),
                eyes: faker.datatype.number(),
                rocket: faker.datatype.number(),
              },
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'I agree with this suggestion.',
            body_html: '<p>Do you like apples?</p>',
            body_version: '0307116bbf7ced493b8d8a346c650b71',
            created_at: '2018-01-15T23:53:58Z',
            last_edited_at: faker.date.past(),
            discussion_url:
              'https://api.github.com/organizations/1/team/2403582/discussions/1',
            html_url:
              'https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1',
            node_id: 'MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=',
            number: 42,
            updated_at: '2018-01-15T23:53:58Z',
            url: 'https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'I agree with this suggestion.',
            body_html: '<p>Do you like apples?</p>',
            body_version: '0307116bbf7ced493b8d8a346c650b71',
            created_at: '2018-01-15T23:53:58Z',
            last_edited_at: faker.date.past(),
            discussion_url:
              'https://api.github.com/organizations/1/team/2403582/discussions/1',
            html_url:
              'https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1',
            node_id: 'MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=',
            number: 42,
            updated_at: '2018-01-15T23:53:58Z',
            url: 'https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'I agree with this suggestion.',
            body_html: '<p>Do you like apples?</p>',
            body_version: '0307116bbf7ced493b8d8a346c650b71',
            created_at: '2018-01-15T23:53:58Z',
            last_edited_at: faker.date.past(),
            discussion_url:
              'https://api.github.com/organizations/1/team/2403582/discussions/1',
            html_url:
              'https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1',
            node_id: 'MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=',
            number: 42,
            updated_at: '2018-01-15T23:53:58Z',
            url: 'https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 1,
              node_id: 'MDg6UmVhY3Rpb24x',
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              content: 'heart',
              created_at: '2016-05-20T20:09:31Z',
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 1,
            node_id: 'MDg6UmVhY3Rpb24x',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            content: 'heart',
            created_at: '2016-05-20T20:09:31Z',
          }),
        ],
        [
          ctx.status(201),
          ctx.json({
            id: 1,
            node_id: 'MDg6UmVhY3Rpb24x',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            content: 'heart',
            created_at: '2016-05-20T20:09:31Z',
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions/:reactionId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 1,
              node_id: 'MDg6UmVhY3Rpb24x',
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              content: 'heart',
              created_at: '2016-05-20T20:09:31Z',
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 1,
            node_id: 'MDg6UmVhY3Rpb24x',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            content: 'heart',
            created_at: '2016-05-20T20:09:31Z',
          }),
        ],
        [
          ctx.status(201),
          ctx.json({
            id: 1,
            node_id: 'MDg6UmVhY3Rpb24x',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            content: 'heart',
            created_at: '2016-05-20T20:09:31Z',
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions/:reactionId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/orgs/:org/teams/:teamSlug/members`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/orgs/:org/teams/:teamSlug/memberships/:username`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.internet.url(),
            role: 'member',
            state: faker.helpers.arrayElement(['active', 'pending']),
          }),
        ],
        [ctx.status(404), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/orgs/:org/teams/:teamSlug/memberships/:username`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.internet.url(),
            role: 'member',
            state: faker.helpers.arrayElement(['active', 'pending']),
          }),
        ],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(422), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/orgs/:org/teams/:teamSlug/memberships/:username`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/orgs/:org/teams/:teamSlug/projects`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            owner_url: faker.internet.url(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            columns_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            body: faker.lorem.slug(1),
            number: faker.datatype.number(),
            state: faker.lorem.slug(1),
            creator: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            organization_permission: faker.lorem.slug(1),
            private: faker.datatype.boolean(),
            permissions: {
              read: faker.datatype.boolean(),
              write: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/orgs/:org/teams/:teamSlug/projects/:projectId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            owner_url: faker.internet.url(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            columns_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            body: faker.lorem.slug(1),
            number: faker.datatype.number(),
            state: faker.lorem.slug(1),
            creator: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            organization_permission: faker.lorem.slug(1),
            private: faker.datatype.boolean(),
            permissions: {
              read: faker.datatype.boolean(),
              write: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
          }),
        ],
        [ctx.status(404), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/orgs/:org/teams/:teamSlug/projects/:projectId`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/orgs/:org/teams/:teamSlug/projects/:projectId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/orgs/:org/teams/:teamSlug/repos`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 1296269,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Hello-World',
            full_name: 'octocat/Hello-World',
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: faker.internet.url(),
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: faker.internet.url(),
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(1),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: 'contributor_covenant',
              name: 'Contributor Covenant',
              url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
              body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(1),
              name: faker.name.findName(),
              spdx_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              node_id: faker.lorem.slug(1),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/orgs/:org/teams/:teamSlug/repos/:owner/:repo`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 42,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Team Environment',
            full_name: 'octocat/Hello-World',
            license: {
              key: 'mit',
              name: 'MIT License',
              url: 'https://api.github.com/licenses/mit',
              spdx_id: 'MIT',
              node_id: 'MDc6TGljZW5zZW1pdA==',
              html_url: faker.internet.url(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: 'git:github.com/octocat/Hello-World.git',
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: 'git@github.com:octocat/Hello-World.git',
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: 'https://github.com/octocat/Hello-World.git',
            mirror_url: 'git:git.example.com/octocat/Hello-World',
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: 'https://svn.github.com/octocat/Hello-World',
            homepage: 'https://github.com',
            language: faker.lorem.slug(1),
            forks_count: 9,
            stargazers_count: 80,
            watchers_count: 80,
            size: 108,
            default_branch: 'master',
            open_issues_count: faker.datatype.number(),
            is_template: true,
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: true,
            has_projects: true,
            has_wiki: true,
            has_pages: faker.datatype.boolean(),
            has_downloads: true,
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            allow_rebase_merge: true,
            template_repository: {
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: true,
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: true,
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(1),
          }),
        ],
        [ctx.status(204), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/orgs/:org/teams/:teamSlug/repos/:owner/:repo`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/orgs/:org/teams/:teamSlug/repos/:owner/:repo`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/orgs/:org/teams/:teamSlug/teams`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            slug: faker.lorem.slug(1),
            description: faker.lorem.slug(1),
            privacy: faker.lorem.slug(1),
            permission: faker.lorem.slug(1),
            permissions: {
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
            url: faker.internet.url(),
            html_url: 'https://github.com/orgs/rails/teams/core',
            members_url: faker.internet.url(),
            repositories_url: faker.internet.url(),
            parent: {
              id: 1,
              node_id: 'MDQ6VGVhbTE=',
              url: 'https://api.github.com/organizations/1/team/1',
              members_url:
                'https://api.github.com/organizations/1/team/1/members{/member}',
              name: 'Justice League',
              description: 'A great team.',
              permission: 'admin',
              privacy: 'closed',
              html_url: 'https://github.com/orgs/rails/teams/core',
              repositories_url:
                'https://api.github.com/organizations/1/team/1/repos',
              slug: 'justice-league',
              ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
            },
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/projects/columns/cards/:cardId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: 'https://api.github.com/projects/columns/cards/1478',
          id: 42,
          node_id: 'MDExOlByb2plY3RDYXJkMTQ3OA==',
          note: 'Add payload for delete Project column',
          creator: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          created_at: '2016-09-05T14:21:06Z',
          updated_at: '2016-09-05T14:20:22Z',
          archived: faker.datatype.boolean(),
          column_name: faker.name.findName(),
          project_id: faker.lorem.slug(1),
          column_url: 'https://api.github.com/projects/columns/367',
          content_url:
            'https://api.github.com/repos/api-playground/projects-test/issues/3',
          project_url: 'https://api.github.com/projects/120',
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/projects/columns/cards/:cardId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: 'https://api.github.com/projects/columns/cards/1478',
          id: 42,
          node_id: 'MDExOlByb2plY3RDYXJkMTQ3OA==',
          note: 'Add payload for delete Project column',
          creator: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          created_at: '2016-09-05T14:21:06Z',
          updated_at: '2016-09-05T14:20:22Z',
          archived: faker.datatype.boolean(),
          column_name: faker.name.findName(),
          project_id: faker.lorem.slug(1),
          column_url: 'https://api.github.com/projects/columns/367',
          content_url:
            'https://api.github.com/repos/api-playground/projects-test/issues/3',
          project_url: 'https://api.github.com/projects/120',
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/projects/columns/cards/:cardId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(
    `${baseURL}/projects/columns/cards/:cardId/moves`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(201), ctx.json({})],
        [ctx.status(304), ctx.json(null)],
        [
          ctx.status(401),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              code: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
            })),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
        [
          ctx.status(503),
          ctx.json({
            code: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              code: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/projects/columns/:columnId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: 'https://api.github.com/projects/columns/367',
          project_url: 'https://api.github.com/projects/120',
          cards_url: 'https://api.github.com/projects/columns/367/cards',
          id: 42,
          node_id: 'MDEzOlByb2plY3RDb2x1bW4zNjc=',
          name: 'Remaining tasks',
          created_at: '2016-09-05T14:18:44Z',
          updated_at: '2016-09-05T14:22:28Z',
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/projects/columns/:columnId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: 'https://api.github.com/projects/columns/367',
          project_url: 'https://api.github.com/projects/120',
          cards_url: 'https://api.github.com/projects/columns/367/cards',
          id: 42,
          node_id: 'MDEzOlByb2plY3RDb2x1bW4zNjc=',
          name: 'Remaining tasks',
          created_at: '2016-09-05T14:18:44Z',
          updated_at: '2016-09-05T14:22:28Z',
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/projects/columns/:columnId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/projects/columns/:columnId/cards`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: 'https://api.github.com/projects/columns/cards/1478',
            id: 42,
            node_id: 'MDExOlByb2plY3RDYXJkMTQ3OA==',
            note: 'Add payload for delete Project column',
            creator: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: '2016-09-05T14:21:06Z',
            updated_at: '2016-09-05T14:20:22Z',
            archived: faker.datatype.boolean(),
            column_name: faker.name.findName(),
            project_id: faker.lorem.slug(1),
            column_url: 'https://api.github.com/projects/columns/367',
            content_url:
              'https://api.github.com/repos/api-playground/projects-test/issues/3',
            project_url: 'https://api.github.com/projects/120',
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/projects/columns/:columnId/cards`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          url: 'https://api.github.com/projects/columns/cards/1478',
          id: 42,
          node_id: 'MDExOlByb2plY3RDYXJkMTQ3OA==',
          note: 'Add payload for delete Project column',
          creator: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          created_at: '2016-09-05T14:21:06Z',
          updated_at: '2016-09-05T14:20:22Z',
          archived: faker.datatype.boolean(),
          column_name: faker.name.findName(),
          project_id: faker.lorem.slug(1),
          column_url: 'https://api.github.com/projects/columns/367',
          content_url:
            'https://api.github.com/repos/api-playground/projects-test/issues/3',
          project_url: 'https://api.github.com/projects/120',
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [ctx.status(422), ctx.json(null)],
      [
        ctx.status(503),
        ctx.json({
          code: faker.lorem.slug(1),
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            code: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/projects/columns/:columnId/moves`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(201), ctx.json({})],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/projects/:projectId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          owner_url:
            'https://api.github.com/repos/api-playground/projects-test',
          url: 'https://api.github.com/projects/1002604',
          html_url:
            'https://github.com/api-playground/projects-test/projects/12',
          columns_url: 'https://api.github.com/projects/1002604/columns',
          id: 1002604,
          node_id: 'MDc6UHJvamVjdDEwMDI2MDQ=',
          name: 'Week One Sprint',
          body: 'This project represents the sprint of the first week in January',
          number: 1,
          state: 'open',
          creator: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          created_at: '2011-04-10T20:09:31Z',
          updated_at: '2014-03-03T18:58:10Z',
          organization_permission: faker.helpers.arrayElement([
            'read',
            'write',
            'admin',
            'none',
          ]),
          private: faker.datatype.boolean(),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/projects/:projectId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          owner_url:
            'https://api.github.com/repos/api-playground/projects-test',
          url: 'https://api.github.com/projects/1002604',
          html_url:
            'https://github.com/api-playground/projects-test/projects/12',
          columns_url: 'https://api.github.com/projects/1002604/columns',
          id: 1002604,
          node_id: 'MDc6UHJvamVjdDEwMDI2MDQ=',
          name: 'Week One Sprint',
          body: 'This project represents the sprint of the first week in January',
          number: 1,
          state: 'open',
          creator: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          created_at: '2011-04-10T20:09:31Z',
          updated_at: '2014-03-03T18:58:10Z',
          organization_permission: faker.helpers.arrayElement([
            'read',
            'write',
            'admin',
            'none',
          ]),
          private: faker.datatype.boolean(),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
        }),
      ],
      [ctx.status(404), ctx.json(null)],
      [
        ctx.status(410),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/projects/:projectId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/projects/:projectId/collaborators`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(
    `${baseURL}/projects/:projectId/collaborators/:username`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [ctx.status(304), ctx.json(null)],
        [
          ctx.status(401),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/projects/:projectId/collaborators/:username`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [ctx.status(304), ctx.json(null)],
        [
          ctx.status(401),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/projects/:projectId/collaborators/:username/permission`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            permission: faker.lorem.slug(1),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
          }),
        ],
        [ctx.status(304), ctx.json(null)],
        [
          ctx.status(401),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/projects/:projectId/columns`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: 'https://api.github.com/projects/columns/367',
            project_url: 'https://api.github.com/projects/120',
            cards_url: 'https://api.github.com/projects/columns/367/cards',
            id: 42,
            node_id: 'MDEzOlByb2plY3RDb2x1bW4zNjc=',
            name: 'Remaining tasks',
            created_at: '2016-09-05T14:18:44Z',
            updated_at: '2016-09-05T14:22:28Z',
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/projects/:projectId/columns`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          url: 'https://api.github.com/projects/columns/367',
          project_url: 'https://api.github.com/projects/120',
          cards_url: 'https://api.github.com/projects/columns/367/cards',
          id: 42,
          node_id: 'MDEzOlByb2plY3RDb2x1bW4zNjc=',
          name: 'Remaining tasks',
          created_at: '2016-09-05T14:18:44Z',
          updated_at: '2016-09-05T14:22:28Z',
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/rate_limit`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          resources: {
            core: {
              limit: faker.datatype.number(),
              remaining: faker.datatype.number(),
              reset: faker.datatype.number(),
              used: faker.datatype.number(),
            },
            graphql: {
              limit: faker.datatype.number(),
              remaining: faker.datatype.number(),
              reset: faker.datatype.number(),
              used: faker.datatype.number(),
            },
            search: {
              limit: faker.datatype.number(),
              remaining: faker.datatype.number(),
              reset: faker.datatype.number(),
              used: faker.datatype.number(),
            },
            source_import: {
              limit: faker.datatype.number(),
              remaining: faker.datatype.number(),
              reset: faker.datatype.number(),
              used: faker.datatype.number(),
            },
            integration_manifest: {
              limit: faker.datatype.number(),
              remaining: faker.datatype.number(),
              reset: faker.datatype.number(),
              used: faker.datatype.number(),
            },
            code_scanning_upload: {
              limit: faker.datatype.number(),
              remaining: faker.datatype.number(),
              reset: faker.datatype.number(),
              used: faker.datatype.number(),
            },
            actions_runner_registration: {
              limit: faker.datatype.number(),
              remaining: faker.datatype.number(),
              reset: faker.datatype.number(),
              used: faker.datatype.number(),
            },
            scim: {
              limit: faker.datatype.number(),
              remaining: faker.datatype.number(),
              reset: faker.datatype.number(),
              used: faker.datatype.number(),
            },
          },
          rate: {
            limit: faker.datatype.number(),
            remaining: faker.datatype.number(),
            reset: faker.datatype.number(),
            used: faker.datatype.number(),
          },
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/reactions/:reactionId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 1296269,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Hello-World',
          full_name: 'octocat/Hello-World',
          owner: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          private: faker.datatype.boolean(),
          html_url: 'https://github.com/octocat/Hello-World',
          description: 'This your first repo!',
          fork: faker.datatype.boolean(),
          url: 'https://api.github.com/repos/octocat/Hello-World',
          archive_url:
            'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
          assignees_url:
            'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
          blobs_url:
            'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
          branches_url:
            'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
          collaborators_url:
            'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
          comments_url:
            'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
          commits_url:
            'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
          compare_url:
            'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
          contents_url:
            'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
          contributors_url:
            'http://api.github.com/repos/octocat/Hello-World/contributors',
          deployments_url:
            'http://api.github.com/repos/octocat/Hello-World/deployments',
          downloads_url:
            'http://api.github.com/repos/octocat/Hello-World/downloads',
          events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
          forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
          git_commits_url:
            'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
          git_refs_url:
            'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
          git_tags_url:
            'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
          git_url: 'git:github.com/octocat/Hello-World.git',
          issue_comment_url:
            'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
          issue_events_url:
            'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
          issues_url:
            'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
          keys_url:
            'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
          labels_url:
            'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
          languages_url:
            'http://api.github.com/repos/octocat/Hello-World/languages',
          merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
          milestones_url:
            'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
          notifications_url:
            'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
          pulls_url:
            'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
          releases_url:
            'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
          ssh_url: 'git@github.com:octocat/Hello-World.git',
          stargazers_url:
            'http://api.github.com/repos/octocat/Hello-World/stargazers',
          statuses_url:
            'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
          subscribers_url:
            'http://api.github.com/repos/octocat/Hello-World/subscribers',
          subscription_url:
            'http://api.github.com/repos/octocat/Hello-World/subscription',
          tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
          teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
          trees_url:
            'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
          clone_url: 'https://github.com/octocat/Hello-World.git',
          mirror_url: 'git:git.example.com/octocat/Hello-World',
          hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
          svn_url: 'https://svn.github.com/octocat/Hello-World',
          homepage: 'https://github.com',
          language: faker.lorem.slug(1),
          forks_count: 9,
          stargazers_count: 80,
          watchers_count: 80,
          size: 108,
          default_branch: 'master',
          open_issues_count: faker.datatype.number(),
          is_template: true,
          topics: ['octocat', 'atom', 'electron', 'API'],
          has_issues: true,
          has_projects: true,
          has_wiki: true,
          has_pages: faker.datatype.boolean(),
          has_downloads: true,
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: 'public',
          pushed_at: '2011-01-26T19:06:43Z',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:14:43Z',
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: true,
          template_repository: {
            id: 42,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Team Environment',
            full_name: 'octocat/Hello-World',
            license: {
              key: 'mit',
              name: 'MIT License',
              url: 'https://api.github.com/licenses/mit',
              spdx_id: 'MIT',
              node_id: 'MDc6TGljZW5zZW1pdA==',
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: 'git:github.com/octocat/Hello-World.git',
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: 'git@github.com:octocat/Hello-World.git',
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: 'https://github.com/octocat/Hello-World.git',
            mirror_url: 'git:git.example.com/octocat/Hello-World',
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: 'https://svn.github.com/octocat/Hello-World',
            homepage: 'https://github.com',
            language: faker.lorem.slug(1),
            forks_count: 9,
            stargazers_count: 80,
            watchers_count: 80,
            size: 108,
            default_branch: 'master',
            open_issues_count: faker.datatype.number(),
            is_template: true,
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: true,
            has_projects: true,
            has_wiki: true,
            has_pages: faker.datatype.boolean(),
            has_downloads: true,
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            allow_rebase_merge: true,
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              full_name: faker.name.findName(),
              owner: {
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              git_url: faker.internet.url(),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              notifications_url: faker.internet.url(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              ssh_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: faker.date.past(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: true,
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: true,
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(1),
            starred_at: '"2020-07-09T00:17:42Z"',
            anonymous_access_enabled: faker.datatype.boolean(),
          },
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: true,
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: true,
          allow_update_branch: true,
          allow_forking: true,
          subscribers_count: 42,
          network_count: faker.datatype.number(),
          license: {
            key: 'mit',
            name: 'MIT License',
            url: 'https://api.github.com/licenses/mit',
            spdx_id: 'MIT',
            node_id: 'MDc6TGljZW5zZW1pdA==',
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          parent: {
            id: 42,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Team Environment',
            full_name: 'octocat/Hello-World',
            license: {
              key: 'mit',
              name: 'MIT License',
              url: 'https://api.github.com/licenses/mit',
              spdx_id: 'MIT',
              node_id: 'MDc6TGljZW5zZW1pdA==',
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: 'git:github.com/octocat/Hello-World.git',
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: 'git@github.com:octocat/Hello-World.git',
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: 'https://github.com/octocat/Hello-World.git',
            mirror_url: 'git:git.example.com/octocat/Hello-World',
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: 'https://svn.github.com/octocat/Hello-World',
            homepage: 'https://github.com',
            language: faker.lorem.slug(1),
            forks_count: 9,
            stargazers_count: 80,
            watchers_count: 80,
            size: 108,
            default_branch: 'master',
            open_issues_count: faker.datatype.number(),
            is_template: true,
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: true,
            has_projects: true,
            has_wiki: true,
            has_pages: faker.datatype.boolean(),
            has_downloads: true,
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            allow_rebase_merge: true,
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              full_name: faker.name.findName(),
              owner: {
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              git_url: faker.internet.url(),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              notifications_url: faker.internet.url(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              ssh_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: faker.date.past(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: true,
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: true,
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(1),
            starred_at: '"2020-07-09T00:17:42Z"',
            anonymous_access_enabled: faker.datatype.boolean(),
          },
          source: {
            id: 42,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Team Environment',
            full_name: 'octocat/Hello-World',
            license: {
              key: 'mit',
              name: 'MIT License',
              url: 'https://api.github.com/licenses/mit',
              spdx_id: 'MIT',
              node_id: 'MDc6TGljZW5zZW1pdA==',
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: 'git:github.com/octocat/Hello-World.git',
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: 'git@github.com:octocat/Hello-World.git',
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: 'https://github.com/octocat/Hello-World.git',
            mirror_url: 'git:git.example.com/octocat/Hello-World',
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: 'https://svn.github.com/octocat/Hello-World',
            homepage: 'https://github.com',
            language: faker.lorem.slug(1),
            forks_count: 9,
            stargazers_count: 80,
            watchers_count: 80,
            size: 108,
            default_branch: 'master',
            open_issues_count: faker.datatype.number(),
            is_template: true,
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: true,
            has_projects: true,
            has_wiki: true,
            has_pages: faker.datatype.boolean(),
            has_downloads: true,
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            allow_rebase_merge: true,
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              full_name: faker.name.findName(),
              owner: {
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              git_url: faker.internet.url(),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              notifications_url: faker.internet.url(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              ssh_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: faker.date.past(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: true,
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: true,
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(1),
            starred_at: '"2020-07-09T00:17:42Z"',
            anonymous_access_enabled: faker.datatype.boolean(),
          },
          forks: faker.datatype.number(),
          master_branch: faker.lorem.slug(1),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          anonymous_access_enabled: faker.datatype.boolean(),
          code_of_conduct: {
            url: 'https://api.github.com/repos/github/docs/community/code_of_conduct',
            key: 'citizen_code_of_conduct',
            name: 'Citizen Code of Conduct',
            html_url:
              'https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md',
          },
          security_and_analysis: {
            advanced_security: {
              status: faker.helpers.arrayElement(['enabled', 'disabled']),
            },
            secret_scanning: {
              status: faker.helpers.arrayElement(['enabled', 'disabled']),
            },
            secret_scanning_push_protection: {
              status: faker.helpers.arrayElement(['enabled', 'disabled']),
            },
          },
        }),
      ],
      [
        ctx.status(301),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/repos/:owner/:repo`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 1296269,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Hello-World',
          full_name: 'octocat/Hello-World',
          owner: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          private: faker.datatype.boolean(),
          html_url: 'https://github.com/octocat/Hello-World',
          description: 'This your first repo!',
          fork: faker.datatype.boolean(),
          url: 'https://api.github.com/repos/octocat/Hello-World',
          archive_url:
            'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
          assignees_url:
            'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
          blobs_url:
            'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
          branches_url:
            'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
          collaborators_url:
            'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
          comments_url:
            'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
          commits_url:
            'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
          compare_url:
            'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
          contents_url:
            'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
          contributors_url:
            'http://api.github.com/repos/octocat/Hello-World/contributors',
          deployments_url:
            'http://api.github.com/repos/octocat/Hello-World/deployments',
          downloads_url:
            'http://api.github.com/repos/octocat/Hello-World/downloads',
          events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
          forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
          git_commits_url:
            'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
          git_refs_url:
            'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
          git_tags_url:
            'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
          git_url: 'git:github.com/octocat/Hello-World.git',
          issue_comment_url:
            'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
          issue_events_url:
            'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
          issues_url:
            'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
          keys_url:
            'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
          labels_url:
            'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
          languages_url:
            'http://api.github.com/repos/octocat/Hello-World/languages',
          merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
          milestones_url:
            'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
          notifications_url:
            'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
          pulls_url:
            'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
          releases_url:
            'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
          ssh_url: 'git@github.com:octocat/Hello-World.git',
          stargazers_url:
            'http://api.github.com/repos/octocat/Hello-World/stargazers',
          statuses_url:
            'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
          subscribers_url:
            'http://api.github.com/repos/octocat/Hello-World/subscribers',
          subscription_url:
            'http://api.github.com/repos/octocat/Hello-World/subscription',
          tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
          teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
          trees_url:
            'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
          clone_url: 'https://github.com/octocat/Hello-World.git',
          mirror_url: 'git:git.example.com/octocat/Hello-World',
          hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
          svn_url: 'https://svn.github.com/octocat/Hello-World',
          homepage: 'https://github.com',
          language: faker.lorem.slug(1),
          forks_count: 9,
          stargazers_count: 80,
          watchers_count: 80,
          size: 108,
          default_branch: 'master',
          open_issues_count: faker.datatype.number(),
          is_template: true,
          topics: ['octocat', 'atom', 'electron', 'API'],
          has_issues: true,
          has_projects: true,
          has_wiki: true,
          has_pages: faker.datatype.boolean(),
          has_downloads: true,
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: 'public',
          pushed_at: '2011-01-26T19:06:43Z',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:14:43Z',
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: true,
          template_repository: {
            id: 42,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Team Environment',
            full_name: 'octocat/Hello-World',
            license: {
              key: 'mit',
              name: 'MIT License',
              url: 'https://api.github.com/licenses/mit',
              spdx_id: 'MIT',
              node_id: 'MDc6TGljZW5zZW1pdA==',
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: 'git:github.com/octocat/Hello-World.git',
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: 'git@github.com:octocat/Hello-World.git',
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: 'https://github.com/octocat/Hello-World.git',
            mirror_url: 'git:git.example.com/octocat/Hello-World',
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: 'https://svn.github.com/octocat/Hello-World',
            homepage: 'https://github.com',
            language: faker.lorem.slug(1),
            forks_count: 9,
            stargazers_count: 80,
            watchers_count: 80,
            size: 108,
            default_branch: 'master',
            open_issues_count: faker.datatype.number(),
            is_template: true,
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: true,
            has_projects: true,
            has_wiki: true,
            has_pages: faker.datatype.boolean(),
            has_downloads: true,
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            allow_rebase_merge: true,
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              full_name: faker.name.findName(),
              owner: {
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              git_url: faker.internet.url(),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              notifications_url: faker.internet.url(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              ssh_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: faker.date.past(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: true,
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: true,
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(1),
            starred_at: '"2020-07-09T00:17:42Z"',
            anonymous_access_enabled: faker.datatype.boolean(),
          },
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: true,
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: true,
          allow_update_branch: true,
          allow_forking: true,
          subscribers_count: 42,
          network_count: faker.datatype.number(),
          license: {
            key: 'mit',
            name: 'MIT License',
            url: 'https://api.github.com/licenses/mit',
            spdx_id: 'MIT',
            node_id: 'MDc6TGljZW5zZW1pdA==',
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          parent: {
            id: 42,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Team Environment',
            full_name: 'octocat/Hello-World',
            license: {
              key: 'mit',
              name: 'MIT License',
              url: 'https://api.github.com/licenses/mit',
              spdx_id: 'MIT',
              node_id: 'MDc6TGljZW5zZW1pdA==',
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: 'git:github.com/octocat/Hello-World.git',
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: 'git@github.com:octocat/Hello-World.git',
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: 'https://github.com/octocat/Hello-World.git',
            mirror_url: 'git:git.example.com/octocat/Hello-World',
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: 'https://svn.github.com/octocat/Hello-World',
            homepage: 'https://github.com',
            language: faker.lorem.slug(1),
            forks_count: 9,
            stargazers_count: 80,
            watchers_count: 80,
            size: 108,
            default_branch: 'master',
            open_issues_count: faker.datatype.number(),
            is_template: true,
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: true,
            has_projects: true,
            has_wiki: true,
            has_pages: faker.datatype.boolean(),
            has_downloads: true,
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            allow_rebase_merge: true,
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              full_name: faker.name.findName(),
              owner: {
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              git_url: faker.internet.url(),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              notifications_url: faker.internet.url(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              ssh_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: faker.date.past(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: true,
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: true,
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(1),
            starred_at: '"2020-07-09T00:17:42Z"',
            anonymous_access_enabled: faker.datatype.boolean(),
          },
          source: {
            id: 42,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Team Environment',
            full_name: 'octocat/Hello-World',
            license: {
              key: 'mit',
              name: 'MIT License',
              url: 'https://api.github.com/licenses/mit',
              spdx_id: 'MIT',
              node_id: 'MDc6TGljZW5zZW1pdA==',
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: 'git:github.com/octocat/Hello-World.git',
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: 'git@github.com:octocat/Hello-World.git',
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: 'https://github.com/octocat/Hello-World.git',
            mirror_url: 'git:git.example.com/octocat/Hello-World',
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: 'https://svn.github.com/octocat/Hello-World',
            homepage: 'https://github.com',
            language: faker.lorem.slug(1),
            forks_count: 9,
            stargazers_count: 80,
            watchers_count: 80,
            size: 108,
            default_branch: 'master',
            open_issues_count: faker.datatype.number(),
            is_template: true,
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: true,
            has_projects: true,
            has_wiki: true,
            has_pages: faker.datatype.boolean(),
            has_downloads: true,
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            allow_rebase_merge: true,
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              full_name: faker.name.findName(),
              owner: {
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              git_url: faker.internet.url(),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              notifications_url: faker.internet.url(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              ssh_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: faker.date.past(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: true,
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: true,
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(1),
            starred_at: '"2020-07-09T00:17:42Z"',
            anonymous_access_enabled: faker.datatype.boolean(),
          },
          forks: faker.datatype.number(),
          master_branch: faker.lorem.slug(1),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          anonymous_access_enabled: faker.datatype.boolean(),
          code_of_conduct: {
            url: 'https://api.github.com/repos/github/docs/community/code_of_conduct',
            key: 'citizen_code_of_conduct',
            name: 'Citizen Code of Conduct',
            html_url:
              'https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md',
          },
          security_and_analysis: {
            advanced_security: {
              status: faker.helpers.arrayElement(['enabled', 'disabled']),
            },
            secret_scanning: {
              status: faker.helpers.arrayElement(['enabled', 'disabled']),
            },
            secret_scanning_push_protection: {
              status: faker.helpers.arrayElement(['enabled', 'disabled']),
            },
          },
        }),
      ],
      [
        ctx.status(307),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/repos/:owner/:repo`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(307),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/actions/artifacts`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          artifacts: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 5,
            node_id: 'MDEwOkNoZWNrU3VpdGU1',
            name: 'AdventureWorks.Framework',
            size_in_bytes: 12345,
            url: 'https://api.github.com/repos/github/hello-world/actions/artifacts/5',
            archive_download_url:
              'https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip',
            expired: faker.datatype.boolean(),
            created_at: faker.date.past(),
            expires_at: faker.date.past(),
            updated_at: faker.date.past(),
            workflow_run: {
              id: 10,
              repository_id: 42,
              head_repository_id: 42,
              head_branch: 'main',
              head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
            },
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/artifacts/:artifactId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 5,
            node_id: 'MDEwOkNoZWNrU3VpdGU1',
            name: 'AdventureWorks.Framework',
            size_in_bytes: 12345,
            url: 'https://api.github.com/repos/github/hello-world/actions/artifacts/5',
            archive_download_url:
              'https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip',
            expired: faker.datatype.boolean(),
            created_at: faker.date.past(),
            expires_at: faker.date.past(),
            updated_at: faker.date.past(),
            workflow_run: {
              id: 10,
              repository_id: 42,
              head_repository_id: 42,
              head_branch: 'main',
              head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/actions/artifacts/:artifactId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/artifacts/:artifactId/:archiveFormat`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(302), ctx.json(null)],
        [
          ctx.status(410),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/jobs/:jobId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 21,
            run_id: 5,
            run_url:
              'https://api.github.com/repos/github/hello-world/actions/runs/5',
            run_attempt: 1,
            node_id: 'MDg6Q2hlY2tSdW40',
            head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
            url: 'https://api.github.com/repos/github/hello-world/actions/jobs/21',
            html_url: 'https://github.com/github/hello-world/runs/4',
            status: 'queued',
            conclusion: 'success',
            started_at: '2019-08-08T08:00:00-07:00',
            completed_at: '2019-08-08T08:00:00-07:00',
            name: 'test-coverage',
            steps: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              status: 'queued',
              conclusion: 'success',
              name: 'test-coverage',
              number: 1,
              started_at: '2019-08-08T08:00:00-07:00',
              completed_at: '2019-08-08T08:00:00-07:00',
            })),
            check_run_url:
              'https://api.github.com/repos/github/hello-world/check-runs/4',
            labels: ['self-hosted', 'foo', 'bar'],
            runner_id: 1,
            runner_name: 'my runner',
            runner_group_id: 2,
            runner_group_name: 'my runner group',
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/jobs/:jobId/logs`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(302), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/permissions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            enabled: faker.datatype.boolean(),
            allowed_actions: faker.helpers.arrayElement([
              'all',
              'local_only',
              'selected',
            ]),
            selected_actions_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/actions/permissions`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/permissions/selected-actions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            github_owned_allowed: faker.datatype.boolean(),
            patterns_allowed: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/actions/permissions/selected-actions`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/actions/runners`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          runners: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 5,
            name: 'iMac',
            os: 'macos',
            status: 'online',
            busy: faker.datatype.boolean(),
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              name: faker.name.findName(),
              type: faker.helpers.arrayElement(['read-only', 'custom']),
            })),
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/runners/downloads`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              os: faker.lorem.slug(1),
              architecture: faker.lorem.slug(1),
              download_url: faker.internet.url(),
              filename: faker.name.findName(),
              temp_download_token: faker.lorem.slug(1),
              sha256_checksum: faker.lorem.slug(1),
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/actions/runners/registration-token`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            token: 'v1.1f699f1069f60xxx',
            expires_at: '2016-07-11T22:14:10Z',
            permissions: { issues: 'read', deployments: 'write' },
            repositories: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            })),
            single_file: 'config.yaml',
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/actions/runners/remove-token`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            token: 'v1.1f699f1069f60xxx',
            expires_at: '2016-07-11T22:14:10Z',
            permissions: { issues: 'read', deployments: 'write' },
            repositories: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            })),
            single_file: 'config.yaml',
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/runners/:runnerId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 5,
            name: 'iMac',
            os: 'macos',
            status: 'online',
            busy: faker.datatype.boolean(),
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              name: faker.name.findName(),
              type: faker.helpers.arrayElement(['read-only', 'custom']),
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/actions/runners/:runnerId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/actions/runs`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          workflow_runs: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 5,
            name: 'Build',
            node_id: 'MDEwOkNoZWNrU3VpdGU1',
            check_suite_id: 42,
            check_suite_node_id: 'MDEwOkNoZWNrU3VpdGU0Mg==',
            head_branch: 'master',
            head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
            run_number: 106,
            event: 'push',
            status: 'completed',
            conclusion: 'neutral',
            workflow_id: 5,
            url: 'https://api.github.com/repos/github/hello-world/actions/runs/5',
            html_url: 'https://github.com/github/hello-world/suites/4',
            pull_requests: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              number: faker.datatype.number(),
              url: faker.internet.url(),
              head: {
                ref: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.internet.url(),
                  name: faker.name.findName(),
                },
              },
              base: {
                ref: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.internet.url(),
                  name: faker.name.findName(),
                },
              },
            })),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            jobs_url:
              'https://api.github.com/repos/github/hello-world/actions/runs/5/jobs',
            logs_url:
              'https://api.github.com/repos/github/hello-world/actions/runs/5/logs',
            check_suite_url:
              'https://api.github.com/repos/github/hello-world/check-suites/12',
            artifacts_url:
              'https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts',
            cancel_url:
              'https://api.github.com/repos/github/hello-world/actions/runs/5/cancel',
            rerun_url:
              'https://api.github.com/repos/github/hello-world/actions/runs/5/rerun',
            workflow_url:
              'https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml',
            head_commit: {
              id: faker.lorem.slug(1),
              tree_id: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              timestamp: faker.date.past(),
              author: {
                name: faker.name.findName(),
                email: faker.internet.email(),
              },
              committer: {
                name: faker.name.findName(),
                email: faker.internet.email(),
              },
            },
            repository: {
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: faker.internet.url(),
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: faker.internet.url(),
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: 'contributor_covenant',
                name: 'Contributor Covenant',
                url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                html_url: faker.internet.url(),
              },
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                spdx_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                node_id: faker.lorem.slug(1),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            head_repository: {
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: faker.internet.url(),
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: faker.internet.url(),
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: 'contributor_covenant',
                name: 'Contributor Covenant',
                url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                html_url: faker.internet.url(),
              },
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                spdx_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                node_id: faker.lorem.slug(1),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            head_repository_id: 5,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/runs/:runId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 5,
            name: 'Build',
            node_id: 'MDEwOkNoZWNrU3VpdGU1',
            check_suite_id: 42,
            check_suite_node_id: 'MDEwOkNoZWNrU3VpdGU0Mg==',
            head_branch: 'master',
            head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
            run_number: 106,
            event: 'push',
            status: 'completed',
            conclusion: 'neutral',
            workflow_id: 5,
            url: 'https://api.github.com/repos/github/hello-world/actions/runs/5',
            html_url: 'https://github.com/github/hello-world/suites/4',
            pull_requests: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              number: faker.datatype.number(),
              url: faker.internet.url(),
              head: {
                ref: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.internet.url(),
                  name: faker.name.findName(),
                },
              },
              base: {
                ref: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.internet.url(),
                  name: faker.name.findName(),
                },
              },
            })),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            jobs_url:
              'https://api.github.com/repos/github/hello-world/actions/runs/5/jobs',
            logs_url:
              'https://api.github.com/repos/github/hello-world/actions/runs/5/logs',
            check_suite_url:
              'https://api.github.com/repos/github/hello-world/check-suites/12',
            artifacts_url:
              'https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts',
            cancel_url:
              'https://api.github.com/repos/github/hello-world/actions/runs/5/cancel',
            rerun_url:
              'https://api.github.com/repos/github/hello-world/actions/runs/5/rerun',
            workflow_url:
              'https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml',
            head_commit: {
              id: faker.lorem.slug(1),
              tree_id: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              timestamp: faker.date.past(),
              author: {
                name: faker.name.findName(),
                email: faker.internet.email(),
              },
              committer: {
                name: faker.name.findName(),
                email: faker.internet.email(),
              },
            },
            repository: {
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: faker.internet.url(),
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: faker.internet.url(),
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: 'contributor_covenant',
                name: 'Contributor Covenant',
                url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                html_url: faker.internet.url(),
              },
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                spdx_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                node_id: faker.lorem.slug(1),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            head_repository: {
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: faker.internet.url(),
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: faker.internet.url(),
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: 'contributor_covenant',
                name: 'Contributor Covenant',
                url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                html_url: faker.internet.url(),
              },
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                spdx_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                node_id: faker.lorem.slug(1),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            head_repository_id: 5,
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/actions/runs/:runId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/runs/:runId/approvals`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              environments: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: 56780428,
                node_id: 'MDExOkVudmlyb25tZW50NTY3ODA0Mjg=',
                name: 'staging',
                url: 'https://api.github.com/repos/github/hello-world/environments/staging',
                html_url:
                  'https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging',
                created_at: '2020-11-23T22:00:40Z',
                updated_at: '2020-11-23T22:00:40Z',
              })),
              state: 'approved',
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              comment: 'Ship it!',
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/runs/:runId/artifacts`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            artifacts: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 5,
              node_id: 'MDEwOkNoZWNrU3VpdGU1',
              name: 'AdventureWorks.Framework',
              size_in_bytes: 12345,
              url: 'https://api.github.com/repos/github/hello-world/actions/artifacts/5',
              archive_download_url:
                'https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip',
              expired: faker.datatype.boolean(),
              created_at: faker.date.past(),
              expires_at: faker.date.past(),
              updated_at: faker.date.past(),
              workflow_run: {
                id: 10,
                repository_id: 42,
                head_repository_id: 42,
                head_branch: 'main',
                head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
              },
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/actions/runs/:runId/cancel`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(202), ctx.json({})],
        [
          ctx.status(409),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/runs/:runId/jobs`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            jobs: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 21,
              run_id: 5,
              run_url:
                'https://api.github.com/repos/github/hello-world/actions/runs/5',
              run_attempt: 1,
              node_id: 'MDg6Q2hlY2tSdW40',
              head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
              url: 'https://api.github.com/repos/github/hello-world/actions/jobs/21',
              html_url: 'https://github.com/github/hello-world/runs/4',
              status: 'queued',
              conclusion: 'success',
              started_at: '2019-08-08T08:00:00-07:00',
              completed_at: '2019-08-08T08:00:00-07:00',
              name: 'test-coverage',
              steps: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                status: 'queued',
                conclusion: 'success',
                name: 'test-coverage',
                number: 1,
                started_at: '2019-08-08T08:00:00-07:00',
                completed_at: '2019-08-08T08:00:00-07:00',
              })),
              check_run_url:
                'https://api.github.com/repos/github/hello-world/check-runs/4',
              labels: ['self-hosted', 'foo', 'bar'],
              runner_id: 1,
              runner_name: 'my runner',
              runner_group_id: 2,
              runner_group_name: 'my runner group',
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/runs/:runId/logs`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(302), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/actions/runs/:runId/logs`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(500),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/runs/:runId/pending_deployments`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              environment: {
                id: 56780428,
                node_id: 'MDExOkVudmlyb25tZW50NTY3ODA0Mjg=',
                name: 'staging',
                url: 'https://api.github.com/repos/github/hello-world/environments/staging',
                html_url:
                  'https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging',
              },
              wait_timer: 30,
              wait_timer_started_at: '2020-11-23T22:00:40Z',
              current_user_can_approve: true,
              reviewers: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                type: 'User',
                reviewer: null,
              })),
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/actions/runs/:runId/pending_deployments`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              url: 'https://api.github.com/repos/octocat/example/deployments/1',
              id: 42,
              node_id: 'MDEwOkRlcGxveW1lbnQx',
              sha: 'a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d',
              ref: 'topic-branch',
              task: 'deploy',
              payload: null,
              original_environment: 'staging',
              environment: 'production',
              description: 'Deploy request from hubot',
              creator: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              created_at: '2012-07-20T01:19:13Z',
              updated_at: '2012-07-20T01:19:13Z',
              statuses_url:
                'https://api.github.com/repos/octocat/example/deployments/1/statuses',
              repository_url: 'https://api.github.com/repos/octocat/example',
              transient_environment: true,
              production_environment: true,
              performed_via_github_app: {
                id: 37,
                slug: 'probot-owners',
                node_id: 'MDExOkludGVncmF0aW9uMQ==',
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                name: 'Probot Owners',
                description: 'The description of the app.',
                external_url: 'https://example.com',
                html_url: 'https://github.com/apps/super-ci',
                created_at: '2017-07-08T16:18:44-04:00',
                updated_at: '2017-07-08T16:18:44-04:00',
                permissions: { issues: 'read', deployments: 'write' },
                events: ['label', 'deployment'],
                installations_count: 5,
                client_id: '"Iv1.25b5d1e65ffc4022"',
                client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
              },
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/actions/runs/:runId/rerun`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(201), ctx.json({})]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/actions/secrets`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          secrets: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: 'SECRET_TOKEN',
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/secrets/public-key`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            key_id: '1234567',
            key: 'hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=',
            id: 2,
            url: 'https://api.github.com/user/keys/2',
            title: 'ssh-rsa AAAAB3NzaC1yc2EAAA',
            created_at: '2011-01-26T19:01:12Z',
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/secrets/:secretName`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            name: 'SECRET_TOKEN',
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/actions/secrets/:secretName`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(201), ctx.json({})],
        [ctx.status(204), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/actions/secrets/:secretName`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/actions/workflows`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          workflows: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 5,
            node_id: 'MDg6V29ya2Zsb3cxMg==',
            name: 'CI',
            path: 'ruby.yaml',
            state: 'active',
            created_at: '2019-12-06T14:20:20.000Z',
            updated_at: '2019-12-06T14:20:20.000Z',
            url: 'https://api.github.com/repos/actions/setup-ruby/workflows/5',
            html_url:
              'https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml',
            badge_url:
              'https://github.com/actions/setup-ruby/workflows/CI/badge.svg',
            deleted_at: '2019-12-06T14:20:20.000Z',
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/workflows/:workflowId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 5,
            node_id: 'MDg6V29ya2Zsb3cxMg==',
            name: 'CI',
            path: 'ruby.yaml',
            state: 'active',
            created_at: '2019-12-06T14:20:20.000Z',
            updated_at: '2019-12-06T14:20:20.000Z',
            url: 'https://api.github.com/repos/actions/setup-ruby/workflows/5',
            html_url:
              'https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml',
            badge_url:
              'https://github.com/actions/setup-ruby/workflows/CI/badge.svg',
            deleted_at: '2019-12-06T14:20:20.000Z',
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/actions/workflows/:workflowId/disable`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/actions/workflows/:workflowId/dispatches`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/actions/workflows/:workflowId/enable`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/actions/workflows/:workflowId/runs`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            workflow_runs: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 5,
              name: 'Build',
              node_id: 'MDEwOkNoZWNrU3VpdGU1',
              check_suite_id: 42,
              check_suite_node_id: 'MDEwOkNoZWNrU3VpdGU0Mg==',
              head_branch: 'master',
              head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
              run_number: 106,
              event: 'push',
              status: 'completed',
              conclusion: 'neutral',
              workflow_id: 5,
              url: 'https://api.github.com/repos/github/hello-world/actions/runs/5',
              html_url: 'https://github.com/github/hello-world/suites/4',
              pull_requests: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                number: faker.datatype.number(),
                url: faker.internet.url(),
                head: {
                  ref: faker.lorem.slug(1),
                  sha: faker.lorem.slug(1),
                  repo: {
                    id: faker.datatype.number(),
                    url: faker.internet.url(),
                    name: faker.name.findName(),
                  },
                },
                base: {
                  ref: faker.lorem.slug(1),
                  sha: faker.lorem.slug(1),
                  repo: {
                    id: faker.datatype.number(),
                    url: faker.internet.url(),
                    name: faker.name.findName(),
                  },
                },
              })),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              jobs_url:
                'https://api.github.com/repos/github/hello-world/actions/runs/5/jobs',
              logs_url:
                'https://api.github.com/repos/github/hello-world/actions/runs/5/logs',
              check_suite_url:
                'https://api.github.com/repos/github/hello-world/check-suites/12',
              artifacts_url:
                'https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts',
              cancel_url:
                'https://api.github.com/repos/github/hello-world/actions/runs/5/cancel',
              rerun_url:
                'https://api.github.com/repos/github/hello-world/actions/runs/5/rerun',
              workflow_url:
                'https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml',
              head_commit: {
                id: faker.lorem.slug(1),
                tree_id: faker.lorem.slug(1),
                message: faker.lorem.slug(1),
                timestamp: faker.date.past(),
                author: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                },
                committer: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                },
              },
              repository: {
                id: 1296269,
                node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                name: 'Hello-World',
                full_name: 'octocat/Hello-World',
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                private: faker.datatype.boolean(),
                html_url: 'https://github.com/octocat/Hello-World',
                description: 'This your first repo!',
                fork: faker.datatype.boolean(),
                url: 'https://api.github.com/repos/octocat/Hello-World',
                archive_url:
                  'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                assignees_url:
                  'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                blobs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                branches_url:
                  'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                collaborators_url:
                  'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                comments_url:
                  'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                compare_url:
                  'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                contents_url:
                  'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                contributors_url:
                  'http://api.github.com/repos/octocat/Hello-World/contributors',
                deployments_url:
                  'http://api.github.com/repos/octocat/Hello-World/deployments',
                downloads_url:
                  'http://api.github.com/repos/octocat/Hello-World/downloads',
                events_url:
                  'http://api.github.com/repos/octocat/Hello-World/events',
                forks_url:
                  'http://api.github.com/repos/octocat/Hello-World/forks',
                git_commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                git_refs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                git_tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                git_url: faker.internet.url(),
                issue_comment_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                issue_events_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                issues_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                keys_url:
                  'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                labels_url:
                  'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                languages_url:
                  'http://api.github.com/repos/octocat/Hello-World/languages',
                merges_url:
                  'http://api.github.com/repos/octocat/Hello-World/merges',
                milestones_url:
                  'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                notifications_url:
                  'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                pulls_url:
                  'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                releases_url:
                  'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                ssh_url: faker.internet.url(),
                stargazers_url:
                  'http://api.github.com/repos/octocat/Hello-World/stargazers',
                statuses_url:
                  'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                subscribers_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscribers',
                subscription_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscription',
                tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/tags',
                teams_url:
                  'http://api.github.com/repos/octocat/Hello-World/teams',
                trees_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url:
                  'http://api.github.com/repos/octocat/Hello-World/hooks',
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: '2011-01-26T19:06:43Z',
                created_at: '2011-01-26T19:01:12Z',
                updated_at: '2011-01-26T19:14:43Z',
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                temp_clone_token: faker.lorem.slug(1),
                delete_branch_on_merge: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                code_of_conduct: {
                  key: 'contributor_covenant',
                  name: 'Contributor Covenant',
                  url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                  body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                  html_url: faker.internet.url(),
                },
                license: {
                  key: faker.lorem.slug(1),
                  name: faker.name.findName(),
                  spdx_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  node_id: faker.lorem.slug(1),
                },
                forks: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                allow_forking: faker.datatype.boolean(),
              },
              head_repository: {
                id: 1296269,
                node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                name: 'Hello-World',
                full_name: 'octocat/Hello-World',
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                private: faker.datatype.boolean(),
                html_url: 'https://github.com/octocat/Hello-World',
                description: 'This your first repo!',
                fork: faker.datatype.boolean(),
                url: 'https://api.github.com/repos/octocat/Hello-World',
                archive_url:
                  'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                assignees_url:
                  'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                blobs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                branches_url:
                  'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                collaborators_url:
                  'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                comments_url:
                  'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                compare_url:
                  'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                contents_url:
                  'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                contributors_url:
                  'http://api.github.com/repos/octocat/Hello-World/contributors',
                deployments_url:
                  'http://api.github.com/repos/octocat/Hello-World/deployments',
                downloads_url:
                  'http://api.github.com/repos/octocat/Hello-World/downloads',
                events_url:
                  'http://api.github.com/repos/octocat/Hello-World/events',
                forks_url:
                  'http://api.github.com/repos/octocat/Hello-World/forks',
                git_commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                git_refs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                git_tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                git_url: faker.internet.url(),
                issue_comment_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                issue_events_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                issues_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                keys_url:
                  'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                labels_url:
                  'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                languages_url:
                  'http://api.github.com/repos/octocat/Hello-World/languages',
                merges_url:
                  'http://api.github.com/repos/octocat/Hello-World/merges',
                milestones_url:
                  'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                notifications_url:
                  'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                pulls_url:
                  'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                releases_url:
                  'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                ssh_url: faker.internet.url(),
                stargazers_url:
                  'http://api.github.com/repos/octocat/Hello-World/stargazers',
                statuses_url:
                  'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                subscribers_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscribers',
                subscription_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscription',
                tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/tags',
                teams_url:
                  'http://api.github.com/repos/octocat/Hello-World/teams',
                trees_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url:
                  'http://api.github.com/repos/octocat/Hello-World/hooks',
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: '2011-01-26T19:06:43Z',
                created_at: '2011-01-26T19:01:12Z',
                updated_at: '2011-01-26T19:14:43Z',
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                temp_clone_token: faker.lorem.slug(1),
                delete_branch_on_merge: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                code_of_conduct: {
                  key: 'contributor_covenant',
                  name: 'Contributor Covenant',
                  url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                  body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                  html_url: faker.internet.url(),
                },
                license: {
                  key: faker.lorem.slug(1),
                  name: faker.name.findName(),
                  spdx_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  node_id: faker.lorem.slug(1),
                },
                forks: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                allow_forking: faker.datatype.boolean(),
              },
              head_repository_id: 5,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/assignees`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/assignees/:assignee`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/autolinks`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 3,
            key_prefix: 'TICKET-',
            url_template: 'https://example.com/TICKET?query=<num>',
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/autolinks`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: 3,
          key_prefix: 'TICKET-',
          url_template: 'https://example.com/TICKET?query=<num>',
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/autolinks/:autolinkId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 3,
            key_prefix: 'TICKET-',
            url_template: 'https://example.com/TICKET?query=<num>',
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/autolinks/:autolinkId`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/branches`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            commit: {
              sha: faker.lorem.slug(1),
              url: faker.internet.url(),
            },
            protected: faker.datatype.boolean(),
            protection: {
              url: faker.internet.url(),
              enabled: faker.datatype.boolean(),
              required_status_checks: {
                url: faker.internet.url(),
                enforcement_level: faker.lorem.slug(1),
                contexts: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                contexts_url: faker.internet.url(),
                strict: faker.datatype.boolean(),
              },
              enforce_admins: {
                url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins',
                enabled: true,
              },
              required_pull_request_reviews: {
                url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions',
                dismissal_restrictions: {
                  users: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => ({
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  })),
                  teams: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => ({
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    name: faker.name.findName(),
                    slug: faker.lorem.slug(1),
                    description: faker.lorem.slug(1),
                    privacy: faker.lorem.slug(1),
                    permission: faker.lorem.slug(1),
                    permissions: {
                      pull: faker.datatype.boolean(),
                      triage: faker.datatype.boolean(),
                      push: faker.datatype.boolean(),
                      maintain: faker.datatype.boolean(),
                      admin: faker.datatype.boolean(),
                    },
                    url: faker.internet.url(),
                    html_url: 'https://github.com/orgs/rails/teams/core',
                    members_url: faker.internet.url(),
                    repositories_url: faker.internet.url(),
                    parent: {
                      id: 1,
                      node_id: 'MDQ6VGVhbTE=',
                      url: 'https://api.github.com/organizations/1/team/1',
                      members_url:
                        'https://api.github.com/organizations/1/team/1/members{/member}',
                      name: 'Justice League',
                      description: 'A great team.',
                      permission: 'admin',
                      privacy: 'closed',
                      html_url: 'https://github.com/orgs/rails/teams/core',
                      repositories_url:
                        'https://api.github.com/organizations/1/team/1/repos',
                      slug: 'justice-league',
                      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
                    },
                  })),
                  apps: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => ({
                    id: 37,
                    slug: 'probot-owners',
                    node_id: 'MDExOkludGVncmF0aW9uMQ==',
                    owner: {
                      name: faker.name.findName(),
                      email: faker.internet.email(),
                      login: 'octocat',
                      id: 1,
                      node_id: 'MDQ6VXNlcjE=',
                      avatar_url:
                        'https://github.com/images/error/octocat_happy.gif',
                      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                      url: 'https://api.github.com/users/octocat',
                      html_url: 'https://github.com/octocat',
                      followers_url:
                        'https://api.github.com/users/octocat/followers',
                      following_url:
                        'https://api.github.com/users/octocat/following{/other_user}',
                      gists_url:
                        'https://api.github.com/users/octocat/gists{/gist_id}',
                      starred_url:
                        'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                      subscriptions_url:
                        'https://api.github.com/users/octocat/subscriptions',
                      organizations_url:
                        'https://api.github.com/users/octocat/orgs',
                      repos_url: 'https://api.github.com/users/octocat/repos',
                      events_url:
                        'https://api.github.com/users/octocat/events{/privacy}',
                      received_events_url:
                        'https://api.github.com/users/octocat/received_events',
                      type: 'User',
                      site_admin: faker.datatype.boolean(),
                      starred_at: '"2020-07-09T00:17:55Z"',
                    },
                    name: 'Probot Owners',
                    description: 'The description of the app.',
                    external_url: 'https://example.com',
                    html_url: 'https://github.com/apps/super-ci',
                    created_at: '2017-07-08T16:18:44-04:00',
                    updated_at: '2017-07-08T16:18:44-04:00',
                    permissions: { issues: 'read', deployments: 'write' },
                    events: ['label', 'deployment'],
                    installations_count: 5,
                    client_id: '"Iv1.25b5d1e65ffc4022"',
                    client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                    webhook_secret:
                      '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                    pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                  })),
                  url: '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"',
                  users_url:
                    '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"',
                  teams_url:
                    '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"',
                },
                dismiss_stale_reviews: true,
                require_code_owner_reviews: true,
                required_approving_review_count: 2,
              },
              restrictions: {
                url: faker.internet.url(),
                users_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                apps_url: faker.internet.url(),
                users: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                })),
                teams: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  name: faker.name.findName(),
                  slug: faker.lorem.slug(1),
                  description: faker.lorem.slug(1),
                  privacy: faker.lorem.slug(1),
                  permission: faker.lorem.slug(1),
                  members_url: faker.internet.url(),
                  repositories_url: faker.internet.url(),
                  parent: faker.lorem.slug(1),
                })),
                apps: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  id: faker.datatype.number(),
                  slug: faker.lorem.slug(1),
                  node_id: faker.lorem.slug(1),
                  owner: {
                    login: faker.lorem.slug(1),
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    url: faker.internet.url(),
                    repos_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    hooks_url: faker.internet.url(),
                    issues_url: faker.internet.url(),
                    members_url: faker.internet.url(),
                    public_members_url: faker.internet.url(),
                    avatar_url: faker.internet.url(),
                    description: faker.lorem.slug(1),
                    gravatar_id: '""',
                    html_url: '"https://github.com/testorg-ea8ec76d71c3af4b"',
                    followers_url:
                      '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"',
                    following_url:
                      '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"',
                    gists_url:
                      '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"',
                    starred_url:
                      '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"',
                    subscriptions_url:
                      '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"',
                    organizations_url:
                      '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"',
                    received_events_url:
                      '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"',
                    type: '"Organization"',
                    site_admin: faker.datatype.boolean(),
                  },
                  name: faker.name.findName(),
                  description: faker.lorem.slug(1),
                  external_url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  created_at: faker.date.past(),
                  updated_at: faker.date.past(),
                  permissions: {
                    metadata: faker.lorem.slug(1),
                    contents: faker.lorem.slug(1),
                    issues: faker.lorem.slug(1),
                    single_file: faker.lorem.slug(1),
                  },
                  events: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                })),
              },
              required_linear_history: {
                enabled: faker.datatype.boolean(),
              },
              allow_force_pushes: {
                enabled: faker.datatype.boolean(),
              },
              allow_deletions: {
                enabled: faker.datatype.boolean(),
              },
              block_creations: {
                enabled: faker.datatype.boolean(),
              },
              required_conversation_resolution: {
                enabled: faker.datatype.boolean(),
              },
              name: '"branch/with/protection"',
              protection_url:
                '"https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"',
              required_signatures: {
                url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures',
                enabled: true,
              },
            },
            protection_url: faker.internet.url(),
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/branches/:branch`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          name: faker.name.findName(),
          commit: {
            url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
            node_id:
              'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
            html_url:
              'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            comments_url:
              'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
            commit: {
              url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
              author: {
                name: '"Chris Wanstrath"',
                email: '"chris@ozmm.org"',
                date: '"2007-10-29T02:42:39.000-07:00"',
              },
              committer: {
                name: '"Chris Wanstrath"',
                email: '"chris@ozmm.org"',
                date: '"2007-10-29T02:42:39.000-07:00"',
              },
              message: 'Fix all the bugs',
              comment_count: faker.datatype.number(),
              tree: {
                sha: '827efc6d56897b048c772eb4087f854f46256132',
                url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
              },
              verification: {
                verified: faker.datatype.boolean(),
                reason: faker.lorem.slug(1),
                payload: faker.lorem.slug(1),
                signature: faker.lorem.slug(1),
              },
            },
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            committer: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            parents: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
              url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
              html_url:
                'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
            })),
            stats: {
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              total: faker.datatype.number(),
            },
            files: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
              filename: 'file1.txt',
              status: 'added',
              additions: 103,
              deletions: 21,
              changes: 124,
              blob_url:
                'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
              raw_url:
                'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
              contents_url:
                'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
              patch:
                '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
              previous_filename: 'file.txt',
            })),
          },
          _links: {
            html: faker.lorem.slug(1),
            self: faker.internet.url(),
          },
          protected: faker.datatype.boolean(),
          protection: {
            url: faker.internet.url(),
            enabled: faker.datatype.boolean(),
            required_status_checks: {
              url: faker.internet.url(),
              enforcement_level: faker.lorem.slug(1),
              contexts: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              contexts_url: faker.internet.url(),
              strict: faker.datatype.boolean(),
            },
            enforce_admins: {
              url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins',
              enabled: true,
            },
            required_pull_request_reviews: {
              url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions',
              dismissal_restrictions: {
                users: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                })),
                teams: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  name: faker.name.findName(),
                  slug: faker.lorem.slug(1),
                  description: faker.lorem.slug(1),
                  privacy: faker.lorem.slug(1),
                  permission: faker.lorem.slug(1),
                  permissions: {
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    admin: faker.datatype.boolean(),
                  },
                  url: faker.internet.url(),
                  html_url: 'https://github.com/orgs/rails/teams/core',
                  members_url: faker.internet.url(),
                  repositories_url: faker.internet.url(),
                  parent: {
                    id: 1,
                    node_id: 'MDQ6VGVhbTE=',
                    url: 'https://api.github.com/organizations/1/team/1',
                    members_url:
                      'https://api.github.com/organizations/1/team/1/members{/member}',
                    name: 'Justice League',
                    description: 'A great team.',
                    permission: 'admin',
                    privacy: 'closed',
                    html_url: 'https://github.com/orgs/rails/teams/core',
                    repositories_url:
                      'https://api.github.com/organizations/1/team/1/repos',
                    slug: 'justice-league',
                    ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
                  },
                })),
                apps: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                })),
                url: '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"',
                users_url:
                  '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"',
                teams_url:
                  '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"',
              },
              dismiss_stale_reviews: true,
              require_code_owner_reviews: true,
              required_approving_review_count: 2,
            },
            restrictions: {
              url: faker.internet.url(),
              users_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              apps_url: faker.internet.url(),
              users: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              })),
              teams: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                name: faker.name.findName(),
                slug: faker.lorem.slug(1),
                description: faker.lorem.slug(1),
                privacy: faker.lorem.slug(1),
                permission: faker.lorem.slug(1),
                members_url: faker.internet.url(),
                repositories_url: faker.internet.url(),
                parent: faker.lorem.slug(1),
              })),
              apps: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                slug: faker.lorem.slug(1),
                node_id: faker.lorem.slug(1),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  hooks_url: faker.internet.url(),
                  issues_url: faker.internet.url(),
                  members_url: faker.internet.url(),
                  public_members_url: faker.internet.url(),
                  avatar_url: faker.internet.url(),
                  description: faker.lorem.slug(1),
                  gravatar_id: '""',
                  html_url: '"https://github.com/testorg-ea8ec76d71c3af4b"',
                  followers_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"',
                  following_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"',
                  gists_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"',
                  starred_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"',
                  subscriptions_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"',
                  organizations_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"',
                  received_events_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"',
                  type: '"Organization"',
                  site_admin: faker.datatype.boolean(),
                },
                name: faker.name.findName(),
                description: faker.lorem.slug(1),
                external_url: faker.internet.url(),
                html_url: faker.internet.url(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  metadata: faker.lorem.slug(1),
                  contents: faker.lorem.slug(1),
                  issues: faker.lorem.slug(1),
                  single_file: faker.lorem.slug(1),
                },
                events: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
              })),
            },
            required_linear_history: {
              enabled: faker.datatype.boolean(),
            },
            allow_force_pushes: {
              enabled: faker.datatype.boolean(),
            },
            allow_deletions: {
              enabled: faker.datatype.boolean(),
            },
            block_creations: {
              enabled: faker.datatype.boolean(),
            },
            required_conversation_resolution: {
              enabled: faker.datatype.boolean(),
            },
            name: '"branch/with/protection"',
            protection_url:
              '"https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"',
            required_signatures: {
              url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures',
              enabled: true,
            },
          },
          protection_url: faker.internet.url(),
          pattern: '"mas*"',
          required_approving_review_count: 1,
        }),
      ],
      [
        ctx.status(301),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.internet.url(),
            enabled: faker.datatype.boolean(),
            required_status_checks: {
              url: faker.internet.url(),
              enforcement_level: faker.lorem.slug(1),
              contexts: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              contexts_url: faker.internet.url(),
              strict: faker.datatype.boolean(),
            },
            enforce_admins: {
              url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins',
              enabled: true,
            },
            required_pull_request_reviews: {
              url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions',
              dismissal_restrictions: {
                users: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                })),
                teams: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  name: faker.name.findName(),
                  slug: faker.lorem.slug(1),
                  description: faker.lorem.slug(1),
                  privacy: faker.lorem.slug(1),
                  permission: faker.lorem.slug(1),
                  permissions: {
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    admin: faker.datatype.boolean(),
                  },
                  url: faker.internet.url(),
                  html_url: 'https://github.com/orgs/rails/teams/core',
                  members_url: faker.internet.url(),
                  repositories_url: faker.internet.url(),
                  parent: {
                    id: 1,
                    node_id: 'MDQ6VGVhbTE=',
                    url: 'https://api.github.com/organizations/1/team/1',
                    members_url:
                      'https://api.github.com/organizations/1/team/1/members{/member}',
                    name: 'Justice League',
                    description: 'A great team.',
                    permission: 'admin',
                    privacy: 'closed',
                    html_url: 'https://github.com/orgs/rails/teams/core',
                    repositories_url:
                      'https://api.github.com/organizations/1/team/1/repos',
                    slug: 'justice-league',
                    ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
                  },
                })),
                apps: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                })),
                url: '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"',
                users_url:
                  '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"',
                teams_url:
                  '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"',
              },
              dismiss_stale_reviews: true,
              require_code_owner_reviews: true,
              required_approving_review_count: 2,
            },
            restrictions: {
              url: faker.internet.url(),
              users_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              apps_url: faker.internet.url(),
              users: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              })),
              teams: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                name: faker.name.findName(),
                slug: faker.lorem.slug(1),
                description: faker.lorem.slug(1),
                privacy: faker.lorem.slug(1),
                permission: faker.lorem.slug(1),
                members_url: faker.internet.url(),
                repositories_url: faker.internet.url(),
                parent: faker.lorem.slug(1),
              })),
              apps: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                slug: faker.lorem.slug(1),
                node_id: faker.lorem.slug(1),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  hooks_url: faker.internet.url(),
                  issues_url: faker.internet.url(),
                  members_url: faker.internet.url(),
                  public_members_url: faker.internet.url(),
                  avatar_url: faker.internet.url(),
                  description: faker.lorem.slug(1),
                  gravatar_id: '""',
                  html_url: '"https://github.com/testorg-ea8ec76d71c3af4b"',
                  followers_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"',
                  following_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"',
                  gists_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"',
                  starred_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"',
                  subscriptions_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"',
                  organizations_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"',
                  received_events_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"',
                  type: '"Organization"',
                  site_admin: faker.datatype.boolean(),
                },
                name: faker.name.findName(),
                description: faker.lorem.slug(1),
                external_url: faker.internet.url(),
                html_url: faker.internet.url(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  metadata: faker.lorem.slug(1),
                  contents: faker.lorem.slug(1),
                  issues: faker.lorem.slug(1),
                  single_file: faker.lorem.slug(1),
                },
                events: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
              })),
            },
            required_linear_history: {
              enabled: faker.datatype.boolean(),
            },
            allow_force_pushes: {
              enabled: faker.datatype.boolean(),
            },
            allow_deletions: {
              enabled: faker.datatype.boolean(),
            },
            block_creations: {
              enabled: faker.datatype.boolean(),
            },
            required_conversation_resolution: {
              enabled: faker.datatype.boolean(),
            },
            name: '"branch/with/protection"',
            protection_url:
              '"https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"',
            required_signatures: {
              url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures',
              enabled: true,
            },
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.internet.url(),
            required_status_checks: {
              url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks',
              strict: true,
              contexts: ['continuous-integration/travis-ci'],
              contexts_url:
                'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts',
            },
            required_pull_request_reviews: {
              url: faker.internet.url(),
              dismiss_stale_reviews: faker.datatype.boolean(),
              require_code_owner_reviews: faker.datatype.boolean(),
              required_approving_review_count: faker.datatype.number(),
              dismissal_restrictions: {
                url: faker.internet.url(),
                users_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                users: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                })),
                teams: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  name: faker.name.findName(),
                  slug: faker.lorem.slug(1),
                  description: faker.lorem.slug(1),
                  privacy: faker.lorem.slug(1),
                  permission: faker.lorem.slug(1),
                  permissions: {
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    admin: faker.datatype.boolean(),
                  },
                  url: faker.internet.url(),
                  html_url: 'https://github.com/orgs/rails/teams/core',
                  members_url: faker.internet.url(),
                  repositories_url: faker.internet.url(),
                  parent: {
                    id: 1,
                    node_id: 'MDQ6VGVhbTE=',
                    url: 'https://api.github.com/organizations/1/team/1',
                    members_url:
                      'https://api.github.com/organizations/1/team/1/members{/member}',
                    name: 'Justice League',
                    description: 'A great team.',
                    permission: 'admin',
                    privacy: 'closed',
                    html_url: 'https://github.com/orgs/rails/teams/core',
                    repositories_url:
                      'https://api.github.com/organizations/1/team/1/repos',
                    slug: 'justice-league',
                    ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
                  },
                })),
                apps: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                })),
              },
            },
            required_signatures: {
              url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures',
              enabled: true,
            },
            enforce_admins: {
              url: faker.internet.url(),
              enabled: faker.datatype.boolean(),
            },
            required_linear_history: {
              enabled: faker.datatype.boolean(),
            },
            allow_force_pushes: {
              enabled: faker.datatype.boolean(),
            },
            allow_deletions: {
              enabled: faker.datatype.boolean(),
            },
            restrictions: {
              url: faker.internet.url(),
              users_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              apps_url: faker.internet.url(),
              users: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              })),
              teams: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                name: faker.name.findName(),
                slug: faker.lorem.slug(1),
                description: faker.lorem.slug(1),
                privacy: faker.lorem.slug(1),
                permission: faker.lorem.slug(1),
                members_url: faker.internet.url(),
                repositories_url: faker.internet.url(),
                parent: faker.lorem.slug(1),
              })),
              apps: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                slug: faker.lorem.slug(1),
                node_id: faker.lorem.slug(1),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  hooks_url: faker.internet.url(),
                  issues_url: faker.internet.url(),
                  members_url: faker.internet.url(),
                  public_members_url: faker.internet.url(),
                  avatar_url: faker.internet.url(),
                  description: faker.lorem.slug(1),
                  gravatar_id: '""',
                  html_url: '"https://github.com/testorg-ea8ec76d71c3af4b"',
                  followers_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"',
                  following_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"',
                  gists_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"',
                  starred_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"',
                  subscriptions_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"',
                  organizations_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"',
                  received_events_url:
                    '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"',
                  type: '"Organization"',
                  site_admin: faker.datatype.boolean(),
                },
                name: faker.name.findName(),
                description: faker.lorem.slug(1),
                external_url: faker.internet.url(),
                html_url: faker.internet.url(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  metadata: faker.lorem.slug(1),
                  contents: faker.lorem.slug(1),
                  issues: faker.lorem.slug(1),
                  single_file: faker.lorem.slug(1),
                },
                events: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
              })),
            },
            required_conversation_resolution: {
              enabled: faker.datatype.boolean(),
            },
            block_creations: {
              enabled: faker.datatype.boolean(),
            },
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/enforce_admins`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins',
            enabled: true,
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/enforce_admins`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins',
            enabled: true,
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/enforce_admins`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions',
            dismissal_restrictions: {
              users: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              })),
              teams: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                slug: faker.lorem.slug(1),
                description: faker.lorem.slug(1),
                privacy: faker.lorem.slug(1),
                permission: faker.lorem.slug(1),
                permissions: {
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  admin: faker.datatype.boolean(),
                },
                url: faker.internet.url(),
                html_url: 'https://github.com/orgs/rails/teams/core',
                members_url: faker.internet.url(),
                repositories_url: faker.internet.url(),
                parent: {
                  id: 1,
                  node_id: 'MDQ6VGVhbTE=',
                  url: 'https://api.github.com/organizations/1/team/1',
                  members_url:
                    'https://api.github.com/organizations/1/team/1/members{/member}',
                  name: 'Justice League',
                  description: 'A great team.',
                  permission: 'admin',
                  privacy: 'closed',
                  html_url: 'https://github.com/orgs/rails/teams/core',
                  repositories_url:
                    'https://api.github.com/organizations/1/team/1/repos',
                  slug: 'justice-league',
                  ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
                },
              })),
              apps: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: 37,
                slug: 'probot-owners',
                node_id: 'MDExOkludGVncmF0aW9uMQ==',
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                name: 'Probot Owners',
                description: 'The description of the app.',
                external_url: 'https://example.com',
                html_url: 'https://github.com/apps/super-ci',
                created_at: '2017-07-08T16:18:44-04:00',
                updated_at: '2017-07-08T16:18:44-04:00',
                permissions: { issues: 'read', deployments: 'write' },
                events: ['label', 'deployment'],
                installations_count: 5,
                client_id: '"Iv1.25b5d1e65ffc4022"',
                client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
              })),
              url: '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"',
              users_url:
                '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"',
              teams_url:
                '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"',
            },
            dismiss_stale_reviews: true,
            require_code_owner_reviews: true,
            required_approving_review_count: 2,
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions',
            dismissal_restrictions: {
              users: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              })),
              teams: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                slug: faker.lorem.slug(1),
                description: faker.lorem.slug(1),
                privacy: faker.lorem.slug(1),
                permission: faker.lorem.slug(1),
                permissions: {
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  admin: faker.datatype.boolean(),
                },
                url: faker.internet.url(),
                html_url: 'https://github.com/orgs/rails/teams/core',
                members_url: faker.internet.url(),
                repositories_url: faker.internet.url(),
                parent: {
                  id: 1,
                  node_id: 'MDQ6VGVhbTE=',
                  url: 'https://api.github.com/organizations/1/team/1',
                  members_url:
                    'https://api.github.com/organizations/1/team/1/members{/member}',
                  name: 'Justice League',
                  description: 'A great team.',
                  permission: 'admin',
                  privacy: 'closed',
                  html_url: 'https://github.com/orgs/rails/teams/core',
                  repositories_url:
                    'https://api.github.com/organizations/1/team/1/repos',
                  slug: 'justice-league',
                  ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
                },
              })),
              apps: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: 37,
                slug: 'probot-owners',
                node_id: 'MDExOkludGVncmF0aW9uMQ==',
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                name: 'Probot Owners',
                description: 'The description of the app.',
                external_url: 'https://example.com',
                html_url: 'https://github.com/apps/super-ci',
                created_at: '2017-07-08T16:18:44-04:00',
                updated_at: '2017-07-08T16:18:44-04:00',
                permissions: { issues: 'read', deployments: 'write' },
                events: ['label', 'deployment'],
                installations_count: 5,
                client_id: '"Iv1.25b5d1e65ffc4022"',
                client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
              })),
              url: '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"',
              users_url:
                '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"',
              teams_url:
                '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"',
            },
            dismiss_stale_reviews: true,
            require_code_owner_reviews: true,
            required_approving_review_count: 2,
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_signatures`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins',
            enabled: true,
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_signatures`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins',
            enabled: true,
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_signatures`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_status_checks`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks',
            strict: true,
            contexts: ['continuous-integration/travis-ci'],
            contexts_url:
              'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts',
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_status_checks`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks',
            strict: true,
            contexts: ['continuous-integration/travis-ci'],
            contexts_url:
              'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts',
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_status_checks`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1))
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1))
          ),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1))
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1))
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.internet.url(),
            users_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            apps_url: faker.internet.url(),
            users: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              login: faker.lorem.slug(1),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              site_admin: faker.datatype.boolean(),
            })),
            teams: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              name: faker.name.findName(),
              slug: faker.lorem.slug(1),
              description: faker.lorem.slug(1),
              privacy: faker.lorem.slug(1),
              permission: faker.lorem.slug(1),
              members_url: faker.internet.url(),
              repositories_url: faker.internet.url(),
              parent: faker.lorem.slug(1),
            })),
            apps: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              slug: faker.lorem.slug(1),
              node_id: faker.lorem.slug(1),
              owner: {
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                members_url: faker.internet.url(),
                public_members_url: faker.internet.url(),
                avatar_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                gravatar_id: '""',
                html_url: '"https://github.com/testorg-ea8ec76d71c3af4b"',
                followers_url:
                  '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"',
                following_url:
                  '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"',
                gists_url:
                  '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"',
                starred_url:
                  '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"',
                subscriptions_url:
                  '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"',
                organizations_url:
                  '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"',
                received_events_url:
                  '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"',
                type: '"Organization"',
                site_admin: faker.datatype.boolean(),
              },
              name: faker.name.findName(),
              description: faker.lorem.slug(1),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              permissions: {
                metadata: faker.lorem.slug(1),
                contents: faker.lorem.slug(1),
                issues: faker.lorem.slug(1),
                single_file: faker.lorem.slug(1),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
            })),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/apps`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            }))
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/apps`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            }))
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/apps`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            }))
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/apps`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            }))
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/teams`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              slug: faker.lorem.slug(1),
              description: faker.lorem.slug(1),
              privacy: faker.lorem.slug(1),
              permission: faker.lorem.slug(1),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.internet.url(),
              html_url: 'https://github.com/orgs/rails/teams/core',
              members_url: faker.internet.url(),
              repositories_url: faker.internet.url(),
              parent: {
                id: 1,
                node_id: 'MDQ6VGVhbTE=',
                url: 'https://api.github.com/organizations/1/team/1',
                members_url:
                  'https://api.github.com/organizations/1/team/1/members{/member}',
                name: 'Justice League',
                description: 'A great team.',
                permission: 'admin',
                privacy: 'closed',
                html_url: 'https://github.com/orgs/rails/teams/core',
                repositories_url:
                  'https://api.github.com/organizations/1/team/1/repos',
                slug: 'justice-league',
                ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
              },
            }))
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/teams`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              slug: faker.lorem.slug(1),
              description: faker.lorem.slug(1),
              privacy: faker.lorem.slug(1),
              permission: faker.lorem.slug(1),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.internet.url(),
              html_url: 'https://github.com/orgs/rails/teams/core',
              members_url: faker.internet.url(),
              repositories_url: faker.internet.url(),
              parent: {
                id: 1,
                node_id: 'MDQ6VGVhbTE=',
                url: 'https://api.github.com/organizations/1/team/1',
                members_url:
                  'https://api.github.com/organizations/1/team/1/members{/member}',
                name: 'Justice League',
                description: 'A great team.',
                permission: 'admin',
                privacy: 'closed',
                html_url: 'https://github.com/orgs/rails/teams/core',
                repositories_url:
                  'https://api.github.com/organizations/1/team/1/repos',
                slug: 'justice-league',
                ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
              },
            }))
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/teams`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              slug: faker.lorem.slug(1),
              description: faker.lorem.slug(1),
              privacy: faker.lorem.slug(1),
              permission: faker.lorem.slug(1),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.internet.url(),
              html_url: 'https://github.com/orgs/rails/teams/core',
              members_url: faker.internet.url(),
              repositories_url: faker.internet.url(),
              parent: {
                id: 1,
                node_id: 'MDQ6VGVhbTE=',
                url: 'https://api.github.com/organizations/1/team/1',
                members_url:
                  'https://api.github.com/organizations/1/team/1/members{/member}',
                name: 'Justice League',
                description: 'A great team.',
                permission: 'admin',
                privacy: 'closed',
                html_url: 'https://github.com/orgs/rails/teams/core',
                repositories_url:
                  'https://api.github.com/organizations/1/team/1/repos',
                slug: 'justice-league',
                ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
              },
            }))
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/teams`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              slug: faker.lorem.slug(1),
              description: faker.lorem.slug(1),
              privacy: faker.lorem.slug(1),
              permission: faker.lorem.slug(1),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.internet.url(),
              html_url: 'https://github.com/orgs/rails/teams/core',
              members_url: faker.internet.url(),
              repositories_url: faker.internet.url(),
              parent: {
                id: 1,
                node_id: 'MDQ6VGVhbTE=',
                url: 'https://api.github.com/organizations/1/team/1',
                members_url:
                  'https://api.github.com/organizations/1/team/1/members{/member}',
                name: 'Justice League',
                description: 'A great team.',
                permission: 'admin',
                privacy: 'closed',
                html_url: 'https://github.com/orgs/rails/teams/core',
                repositories_url:
                  'https://api.github.com/organizations/1/team/1/repos',
                slug: 'justice-league',
                ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
              },
            }))
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/users`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            }))
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/users`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            }))
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/users`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            }))
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/users`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            }))
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/branches/:branch/rename`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            name: faker.name.findName(),
            commit: {
              url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
              sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
              node_id:
                'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
              html_url:
                'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
              comments_url:
                'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
              commit: {
                url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
                author: {
                  name: '"Chris Wanstrath"',
                  email: '"chris@ozmm.org"',
                  date: '"2007-10-29T02:42:39.000-07:00"',
                },
                committer: {
                  name: '"Chris Wanstrath"',
                  email: '"chris@ozmm.org"',
                  date: '"2007-10-29T02:42:39.000-07:00"',
                },
                message: 'Fix all the bugs',
                comment_count: faker.datatype.number(),
                tree: {
                  sha: '827efc6d56897b048c772eb4087f854f46256132',
                  url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
                },
                verification: {
                  verified: faker.datatype.boolean(),
                  reason: faker.lorem.slug(1),
                  payload: faker.lorem.slug(1),
                  signature: faker.lorem.slug(1),
                },
              },
              author: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              committer: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              parents: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
                url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
                html_url:
                  'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
              })),
              stats: {
                additions: faker.datatype.number(),
                deletions: faker.datatype.number(),
                total: faker.datatype.number(),
              },
              files: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
                filename: 'file1.txt',
                status: 'added',
                additions: 103,
                deletions: 21,
                changes: 124,
                blob_url:
                  'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
                raw_url:
                  'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
                contents_url:
                  'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
                patch:
                  '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
                previous_filename: 'file.txt',
              })),
            },
            _links: {
              html: faker.lorem.slug(1),
              self: faker.internet.url(),
            },
            protected: faker.datatype.boolean(),
            protection: {
              url: faker.internet.url(),
              enabled: faker.datatype.boolean(),
              required_status_checks: {
                url: faker.internet.url(),
                enforcement_level: faker.lorem.slug(1),
                contexts: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                contexts_url: faker.internet.url(),
                strict: faker.datatype.boolean(),
              },
              enforce_admins: {
                url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins',
                enabled: true,
              },
              required_pull_request_reviews: {
                url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions',
                dismissal_restrictions: {
                  users: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => ({
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  })),
                  teams: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => ({
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    name: faker.name.findName(),
                    slug: faker.lorem.slug(1),
                    description: faker.lorem.slug(1),
                    privacy: faker.lorem.slug(1),
                    permission: faker.lorem.slug(1),
                    permissions: {
                      pull: faker.datatype.boolean(),
                      triage: faker.datatype.boolean(),
                      push: faker.datatype.boolean(),
                      maintain: faker.datatype.boolean(),
                      admin: faker.datatype.boolean(),
                    },
                    url: faker.internet.url(),
                    html_url: 'https://github.com/orgs/rails/teams/core',
                    members_url: faker.internet.url(),
                    repositories_url: faker.internet.url(),
                    parent: {
                      id: 1,
                      node_id: 'MDQ6VGVhbTE=',
                      url: 'https://api.github.com/organizations/1/team/1',
                      members_url:
                        'https://api.github.com/organizations/1/team/1/members{/member}',
                      name: 'Justice League',
                      description: 'A great team.',
                      permission: 'admin',
                      privacy: 'closed',
                      html_url: 'https://github.com/orgs/rails/teams/core',
                      repositories_url:
                        'https://api.github.com/organizations/1/team/1/repos',
                      slug: 'justice-league',
                      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
                    },
                  })),
                  apps: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => ({
                    id: 37,
                    slug: 'probot-owners',
                    node_id: 'MDExOkludGVncmF0aW9uMQ==',
                    owner: {
                      name: faker.name.findName(),
                      email: faker.internet.email(),
                      login: 'octocat',
                      id: 1,
                      node_id: 'MDQ6VXNlcjE=',
                      avatar_url:
                        'https://github.com/images/error/octocat_happy.gif',
                      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                      url: 'https://api.github.com/users/octocat',
                      html_url: 'https://github.com/octocat',
                      followers_url:
                        'https://api.github.com/users/octocat/followers',
                      following_url:
                        'https://api.github.com/users/octocat/following{/other_user}',
                      gists_url:
                        'https://api.github.com/users/octocat/gists{/gist_id}',
                      starred_url:
                        'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                      subscriptions_url:
                        'https://api.github.com/users/octocat/subscriptions',
                      organizations_url:
                        'https://api.github.com/users/octocat/orgs',
                      repos_url: 'https://api.github.com/users/octocat/repos',
                      events_url:
                        'https://api.github.com/users/octocat/events{/privacy}',
                      received_events_url:
                        'https://api.github.com/users/octocat/received_events',
                      type: 'User',
                      site_admin: faker.datatype.boolean(),
                      starred_at: '"2020-07-09T00:17:55Z"',
                    },
                    name: 'Probot Owners',
                    description: 'The description of the app.',
                    external_url: 'https://example.com',
                    html_url: 'https://github.com/apps/super-ci',
                    created_at: '2017-07-08T16:18:44-04:00',
                    updated_at: '2017-07-08T16:18:44-04:00',
                    permissions: { issues: 'read', deployments: 'write' },
                    events: ['label', 'deployment'],
                    installations_count: 5,
                    client_id: '"Iv1.25b5d1e65ffc4022"',
                    client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                    webhook_secret:
                      '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                    pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                  })),
                  url: '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"',
                  users_url:
                    '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"',
                  teams_url:
                    '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"',
                },
                dismiss_stale_reviews: true,
                require_code_owner_reviews: true,
                required_approving_review_count: 2,
              },
              restrictions: {
                url: faker.internet.url(),
                users_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                apps_url: faker.internet.url(),
                users: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                })),
                teams: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  name: faker.name.findName(),
                  slug: faker.lorem.slug(1),
                  description: faker.lorem.slug(1),
                  privacy: faker.lorem.slug(1),
                  permission: faker.lorem.slug(1),
                  members_url: faker.internet.url(),
                  repositories_url: faker.internet.url(),
                  parent: faker.lorem.slug(1),
                })),
                apps: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  id: faker.datatype.number(),
                  slug: faker.lorem.slug(1),
                  node_id: faker.lorem.slug(1),
                  owner: {
                    login: faker.lorem.slug(1),
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    url: faker.internet.url(),
                    repos_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    hooks_url: faker.internet.url(),
                    issues_url: faker.internet.url(),
                    members_url: faker.internet.url(),
                    public_members_url: faker.internet.url(),
                    avatar_url: faker.internet.url(),
                    description: faker.lorem.slug(1),
                    gravatar_id: '""',
                    html_url: '"https://github.com/testorg-ea8ec76d71c3af4b"',
                    followers_url:
                      '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"',
                    following_url:
                      '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"',
                    gists_url:
                      '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"',
                    starred_url:
                      '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"',
                    subscriptions_url:
                      '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"',
                    organizations_url:
                      '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"',
                    received_events_url:
                      '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"',
                    type: '"Organization"',
                    site_admin: faker.datatype.boolean(),
                  },
                  name: faker.name.findName(),
                  description: faker.lorem.slug(1),
                  external_url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  created_at: faker.date.past(),
                  updated_at: faker.date.past(),
                  permissions: {
                    metadata: faker.lorem.slug(1),
                    contents: faker.lorem.slug(1),
                    issues: faker.lorem.slug(1),
                    single_file: faker.lorem.slug(1),
                  },
                  events: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                })),
              },
              required_linear_history: {
                enabled: faker.datatype.boolean(),
              },
              allow_force_pushes: {
                enabled: faker.datatype.boolean(),
              },
              allow_deletions: {
                enabled: faker.datatype.boolean(),
              },
              block_creations: {
                enabled: faker.datatype.boolean(),
              },
              required_conversation_resolution: {
                enabled: faker.datatype.boolean(),
              },
              name: '"branch/with/protection"',
              protection_url:
                '"https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"',
              required_signatures: {
                url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures',
                enabled: true,
              },
            },
            protection_url: faker.internet.url(),
            pattern: '"mas*"',
            required_approving_review_count: 1,
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(`${baseURL}/repos/:owner/:repo/check-runs`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: 21,
          head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
          node_id: 'MDg6Q2hlY2tSdW40',
          external_id: '42',
          url: 'https://api.github.com/repos/github/hello-world/check-runs/4',
          html_url: 'https://github.com/github/hello-world/runs/4',
          details_url: 'https://example.com',
          status: 'queued',
          conclusion: 'neutral',
          started_at: '2018-05-04T01:14:52Z',
          completed_at: '2018-05-04T01:14:52Z',
          output: {
            title: faker.lorem.slug(1),
            summary: faker.lorem.slug(1),
            text: faker.lorem.slug(1),
            annotations_count: faker.datatype.number(),
            annotations_url: faker.internet.url(),
          },
          name: 'test-coverage',
          check_suite: {
            id: faker.datatype.number(),
          },
          app: {
            id: 37,
            slug: 'probot-owners',
            node_id: 'MDExOkludGVncmF0aW9uMQ==',
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            name: 'Probot Owners',
            description: 'The description of the app.',
            external_url: 'https://example.com',
            html_url: 'https://github.com/apps/super-ci',
            created_at: '2017-07-08T16:18:44-04:00',
            updated_at: '2017-07-08T16:18:44-04:00',
            permissions: { issues: 'read', deployments: 'write' },
            events: ['label', 'deployment'],
            installations_count: 5,
            client_id: '"Iv1.25b5d1e65ffc4022"',
            client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
            webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
            pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
          },
          pull_requests: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            number: faker.datatype.number(),
            url: faker.internet.url(),
            head: {
              ref: faker.lorem.slug(1),
              sha: faker.lorem.slug(1),
              repo: {
                id: faker.datatype.number(),
                url: faker.internet.url(),
                name: faker.name.findName(),
              },
            },
            base: {
              ref: faker.lorem.slug(1),
              sha: faker.lorem.slug(1),
              repo: {
                id: faker.datatype.number(),
                url: faker.internet.url(),
                name: faker.name.findName(),
              },
            },
          })),
          deployment: {
            url: 'https://api.github.com/repos/octocat/example/deployments/1',
            id: 42,
            node_id: 'MDEwOkRlcGxveW1lbnQx',
            task: 'deploy',
            original_environment: 'staging',
            environment: 'production',
            description: 'Deploy request from hubot',
            created_at: '2012-07-20T01:19:13Z',
            updated_at: '2012-07-20T01:19:13Z',
            statuses_url:
              'https://api.github.com/repos/octocat/example/deployments/1/statuses',
            repository_url: 'https://api.github.com/repos/octocat/example',
            transient_environment: true,
            production_environment: true,
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
          },
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/check-runs/:checkRunId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 21,
            head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
            node_id: 'MDg6Q2hlY2tSdW40',
            external_id: '42',
            url: 'https://api.github.com/repos/github/hello-world/check-runs/4',
            html_url: 'https://github.com/github/hello-world/runs/4',
            details_url: 'https://example.com',
            status: 'queued',
            conclusion: 'neutral',
            started_at: '2018-05-04T01:14:52Z',
            completed_at: '2018-05-04T01:14:52Z',
            output: {
              title: faker.lorem.slug(1),
              summary: faker.lorem.slug(1),
              text: faker.lorem.slug(1),
              annotations_count: faker.datatype.number(),
              annotations_url: faker.internet.url(),
            },
            name: 'test-coverage',
            check_suite: {
              id: faker.datatype.number(),
            },
            app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
            pull_requests: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              number: faker.datatype.number(),
              url: faker.internet.url(),
              head: {
                ref: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.internet.url(),
                  name: faker.name.findName(),
                },
              },
              base: {
                ref: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.internet.url(),
                  name: faker.name.findName(),
                },
              },
            })),
            deployment: {
              url: 'https://api.github.com/repos/octocat/example/deployments/1',
              id: 42,
              node_id: 'MDEwOkRlcGxveW1lbnQx',
              task: 'deploy',
              original_environment: 'staging',
              environment: 'production',
              description: 'Deploy request from hubot',
              created_at: '2012-07-20T01:19:13Z',
              updated_at: '2012-07-20T01:19:13Z',
              statuses_url:
                'https://api.github.com/repos/octocat/example/deployments/1/statuses',
              repository_url: 'https://api.github.com/repos/octocat/example',
              transient_environment: true,
              production_environment: true,
              performed_via_github_app: {
                id: 37,
                slug: 'probot-owners',
                node_id: 'MDExOkludGVncmF0aW9uMQ==',
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                name: 'Probot Owners',
                description: 'The description of the app.',
                external_url: 'https://example.com',
                html_url: 'https://github.com/apps/super-ci',
                created_at: '2017-07-08T16:18:44-04:00',
                updated_at: '2017-07-08T16:18:44-04:00',
                permissions: { issues: 'read', deployments: 'write' },
                events: ['label', 'deployment'],
                installations_count: 5,
                client_id: '"Iv1.25b5d1e65ffc4022"',
                client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
              },
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/repos/:owner/:repo/check-runs/:checkRunId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 21,
            head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
            node_id: 'MDg6Q2hlY2tSdW40',
            external_id: '42',
            url: 'https://api.github.com/repos/github/hello-world/check-runs/4',
            html_url: 'https://github.com/github/hello-world/runs/4',
            details_url: 'https://example.com',
            status: 'queued',
            conclusion: 'neutral',
            started_at: '2018-05-04T01:14:52Z',
            completed_at: '2018-05-04T01:14:52Z',
            output: {
              title: faker.lorem.slug(1),
              summary: faker.lorem.slug(1),
              text: faker.lorem.slug(1),
              annotations_count: faker.datatype.number(),
              annotations_url: faker.internet.url(),
            },
            name: 'test-coverage',
            check_suite: {
              id: faker.datatype.number(),
            },
            app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
            pull_requests: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              number: faker.datatype.number(),
              url: faker.internet.url(),
              head: {
                ref: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.internet.url(),
                  name: faker.name.findName(),
                },
              },
              base: {
                ref: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.internet.url(),
                  name: faker.name.findName(),
                },
              },
            })),
            deployment: {
              url: 'https://api.github.com/repos/octocat/example/deployments/1',
              id: 42,
              node_id: 'MDEwOkRlcGxveW1lbnQx',
              task: 'deploy',
              original_environment: 'staging',
              environment: 'production',
              description: 'Deploy request from hubot',
              created_at: '2012-07-20T01:19:13Z',
              updated_at: '2012-07-20T01:19:13Z',
              statuses_url:
                'https://api.github.com/repos/octocat/example/deployments/1/statuses',
              repository_url: 'https://api.github.com/repos/octocat/example',
              transient_environment: true,
              production_environment: true,
              performed_via_github_app: {
                id: 37,
                slug: 'probot-owners',
                node_id: 'MDExOkludGVncmF0aW9uMQ==',
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                name: 'Probot Owners',
                description: 'The description of the app.',
                external_url: 'https://example.com',
                html_url: 'https://github.com/apps/super-ci',
                created_at: '2017-07-08T16:18:44-04:00',
                updated_at: '2017-07-08T16:18:44-04:00',
                permissions: { issues: 'read', deployments: 'write' },
                events: ['label', 'deployment'],
                installations_count: 5,
                client_id: '"Iv1.25b5d1e65ffc4022"',
                client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
              },
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/check-runs/:checkRunId/annotations`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              path: 'README.md',
              start_line: 2,
              end_line: 2,
              start_column: 5,
              end_column: 10,
              annotation_level: 'warning',
              title: 'Spell Checker',
              message: "Check your spelling for 'banaas'.",
              raw_details: "Do you mean 'bananas' or 'banana'?",
              blob_href: faker.lorem.slug(1),
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/check-runs/:checkRunId/rerequest`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(201), ctx.json({})],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(`${baseURL}/repos/:owner/:repo/check-suites`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 5,
          node_id: 'MDEwOkNoZWNrU3VpdGU1',
          head_branch: 'master',
          head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
          status: 'completed',
          conclusion: 'neutral',
          url: 'https://api.github.com/repos/github/hello-world/check-suites/5',
          before: '146e867f55c26428e5f9fade55a9bbf5e95a7912',
          after: 'd6fde92930d4715a2b49857d24b940956b26d2d3',
          pull_requests: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            number: faker.datatype.number(),
            url: faker.internet.url(),
            head: {
              ref: faker.lorem.slug(1),
              sha: faker.lorem.slug(1),
              repo: {
                id: faker.datatype.number(),
                url: faker.internet.url(),
                name: faker.name.findName(),
              },
            },
            base: {
              ref: faker.lorem.slug(1),
              sha: faker.lorem.slug(1),
              repo: {
                id: faker.datatype.number(),
                url: faker.internet.url(),
                name: faker.name.findName(),
              },
            },
          })),
          app: {
            id: 37,
            slug: 'probot-owners',
            node_id: 'MDExOkludGVncmF0aW9uMQ==',
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            name: 'Probot Owners',
            description: 'The description of the app.',
            external_url: 'https://example.com',
            html_url: 'https://github.com/apps/super-ci',
            created_at: '2017-07-08T16:18:44-04:00',
            updated_at: '2017-07-08T16:18:44-04:00',
            permissions: { issues: 'read', deployments: 'write' },
            events: ['label', 'deployment'],
            installations_count: 5,
            client_id: '"Iv1.25b5d1e65ffc4022"',
            client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
            webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
            pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
          },
          repository: {
            id: 1296269,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Hello-World',
            full_name: 'octocat/Hello-World',
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: faker.internet.url(),
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: faker.internet.url(),
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(1),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: 'contributor_covenant',
              name: 'Contributor Covenant',
              url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
              body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(1),
              name: faker.name.findName(),
              spdx_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              node_id: faker.lorem.slug(1),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          },
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          head_commit: {
            id: faker.lorem.slug(1),
            tree_id: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            timestamp: faker.date.past(),
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
            },
            committer: {
              name: faker.name.findName(),
              email: faker.internet.email(),
            },
          },
          latest_check_runs_count: faker.datatype.number(),
          check_runs_url: faker.internet.url(),
          rerequestable: faker.datatype.boolean(),
          runs_rerequestable: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(201),
        ctx.json({
          id: 5,
          node_id: 'MDEwOkNoZWNrU3VpdGU1',
          head_branch: 'master',
          head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
          status: 'completed',
          conclusion: 'neutral',
          url: 'https://api.github.com/repos/github/hello-world/check-suites/5',
          before: '146e867f55c26428e5f9fade55a9bbf5e95a7912',
          after: 'd6fde92930d4715a2b49857d24b940956b26d2d3',
          pull_requests: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            number: faker.datatype.number(),
            url: faker.internet.url(),
            head: {
              ref: faker.lorem.slug(1),
              sha: faker.lorem.slug(1),
              repo: {
                id: faker.datatype.number(),
                url: faker.internet.url(),
                name: faker.name.findName(),
              },
            },
            base: {
              ref: faker.lorem.slug(1),
              sha: faker.lorem.slug(1),
              repo: {
                id: faker.datatype.number(),
                url: faker.internet.url(),
                name: faker.name.findName(),
              },
            },
          })),
          app: {
            id: 37,
            slug: 'probot-owners',
            node_id: 'MDExOkludGVncmF0aW9uMQ==',
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            name: 'Probot Owners',
            description: 'The description of the app.',
            external_url: 'https://example.com',
            html_url: 'https://github.com/apps/super-ci',
            created_at: '2017-07-08T16:18:44-04:00',
            updated_at: '2017-07-08T16:18:44-04:00',
            permissions: { issues: 'read', deployments: 'write' },
            events: ['label', 'deployment'],
            installations_count: 5,
            client_id: '"Iv1.25b5d1e65ffc4022"',
            client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
            webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
            pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
          },
          repository: {
            id: 1296269,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Hello-World',
            full_name: 'octocat/Hello-World',
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: faker.internet.url(),
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: faker.internet.url(),
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(1),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: 'contributor_covenant',
              name: 'Contributor Covenant',
              url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
              body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(1),
              name: faker.name.findName(),
              spdx_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              node_id: faker.lorem.slug(1),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          },
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          head_commit: {
            id: faker.lorem.slug(1),
            tree_id: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            timestamp: faker.date.past(),
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
            },
            committer: {
              name: faker.name.findName(),
              email: faker.internet.email(),
            },
          },
          latest_check_runs_count: faker.datatype.number(),
          check_runs_url: faker.internet.url(),
          rerequestable: faker.datatype.boolean(),
          runs_rerequestable: faker.datatype.boolean(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(
    `${baseURL}/repos/:owner/:repo/check-suites/preferences`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            preferences: {
              auto_trigger_checks: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                app_id: faker.datatype.number(),
                setting: faker.datatype.boolean(),
              })),
            },
            repository: {
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: faker.internet.url(),
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: faker.internet.url(),
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: 'contributor_covenant',
                name: 'Contributor Covenant',
                url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                html_url: faker.internet.url(),
              },
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                spdx_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                node_id: faker.lorem.slug(1),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/check-suites/:checkSuiteId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 5,
            node_id: 'MDEwOkNoZWNrU3VpdGU1',
            head_branch: 'master',
            head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
            status: 'completed',
            conclusion: 'neutral',
            url: 'https://api.github.com/repos/github/hello-world/check-suites/5',
            before: '146e867f55c26428e5f9fade55a9bbf5e95a7912',
            after: 'd6fde92930d4715a2b49857d24b940956b26d2d3',
            pull_requests: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              number: faker.datatype.number(),
              url: faker.internet.url(),
              head: {
                ref: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.internet.url(),
                  name: faker.name.findName(),
                },
              },
              base: {
                ref: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.internet.url(),
                  name: faker.name.findName(),
                },
              },
            })),
            app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
            repository: {
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: faker.internet.url(),
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: faker.internet.url(),
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: 'contributor_covenant',
                name: 'Contributor Covenant',
                url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                html_url: faker.internet.url(),
              },
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                spdx_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                node_id: faker.lorem.slug(1),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            head_commit: {
              id: faker.lorem.slug(1),
              tree_id: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              timestamp: faker.date.past(),
              author: {
                name: faker.name.findName(),
                email: faker.internet.email(),
              },
              committer: {
                name: faker.name.findName(),
                email: faker.internet.email(),
              },
            },
            latest_check_runs_count: faker.datatype.number(),
            check_runs_url: faker.internet.url(),
            rerequestable: faker.datatype.boolean(),
            runs_rerequestable: faker.datatype.boolean(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/check-suites/:checkSuiteId/check-runs`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            check_runs: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 21,
              head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
              node_id: 'MDg6Q2hlY2tSdW40',
              external_id: '42',
              url: 'https://api.github.com/repos/github/hello-world/check-runs/4',
              html_url: 'https://github.com/github/hello-world/runs/4',
              details_url: 'https://example.com',
              status: 'queued',
              conclusion: 'neutral',
              started_at: '2018-05-04T01:14:52Z',
              completed_at: '2018-05-04T01:14:52Z',
              output: {
                title: faker.lorem.slug(1),
                summary: faker.lorem.slug(1),
                text: faker.lorem.slug(1),
                annotations_count: faker.datatype.number(),
                annotations_url: faker.internet.url(),
              },
              name: 'test-coverage',
              check_suite: {
                id: faker.datatype.number(),
              },
              app: {
                id: 37,
                slug: 'probot-owners',
                node_id: 'MDExOkludGVncmF0aW9uMQ==',
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                name: 'Probot Owners',
                description: 'The description of the app.',
                external_url: 'https://example.com',
                html_url: 'https://github.com/apps/super-ci',
                created_at: '2017-07-08T16:18:44-04:00',
                updated_at: '2017-07-08T16:18:44-04:00',
                permissions: { issues: 'read', deployments: 'write' },
                events: ['label', 'deployment'],
                installations_count: 5,
                client_id: '"Iv1.25b5d1e65ffc4022"',
                client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
              },
              pull_requests: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                number: faker.datatype.number(),
                url: faker.internet.url(),
                head: {
                  ref: faker.lorem.slug(1),
                  sha: faker.lorem.slug(1),
                  repo: {
                    id: faker.datatype.number(),
                    url: faker.internet.url(),
                    name: faker.name.findName(),
                  },
                },
                base: {
                  ref: faker.lorem.slug(1),
                  sha: faker.lorem.slug(1),
                  repo: {
                    id: faker.datatype.number(),
                    url: faker.internet.url(),
                    name: faker.name.findName(),
                  },
                },
              })),
              deployment: {
                url: 'https://api.github.com/repos/octocat/example/deployments/1',
                id: 42,
                node_id: 'MDEwOkRlcGxveW1lbnQx',
                task: 'deploy',
                original_environment: 'staging',
                environment: 'production',
                description: 'Deploy request from hubot',
                created_at: '2012-07-20T01:19:13Z',
                updated_at: '2012-07-20T01:19:13Z',
                statuses_url:
                  'https://api.github.com/repos/octocat/example/deployments/1/statuses',
                repository_url: 'https://api.github.com/repos/octocat/example',
                transient_environment: true,
                production_environment: true,
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
              },
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/check-suites/:checkSuiteId/rerequest`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(201), ctx.json({})]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/code-scanning/alerts`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              number: faker.datatype.number(),
              created_at: faker.date.past(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              instances_url: faker.internet.url(),
              state: faker.helpers.arrayElement([
                'open',
                'closed',
                'dismissed',
                'fixed',
              ]),
              dismissed_by: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              dismissed_at: faker.date.past(),
              dismissed_reason: faker.helpers.arrayElement([
                null,
                'false positive',
                "won't fix",
                'used in tests',
              ]),
              rule: {
                id: faker.lorem.slug(1),
                name: faker.name.findName(),
                severity: faker.helpers.arrayElement([
                  'none',
                  'note',
                  'warning',
                  'error',
                ]),
                description: faker.lorem.slug(1),
              },
              tool: {
                name: faker.name.findName(),
                version: faker.lorem.slug(1),
                guid: faker.lorem.slug(1),
              },
              most_recent_instance: {
                ref: faker.lorem.slug(1),
                analysis_key: faker.lorem.slug(1),
                environment: faker.lorem.slug(1),
                category: faker.lorem.slug(1),
                state: faker.helpers.arrayElement([
                  'open',
                  'closed',
                  'dismissed',
                  'fixed',
                ]),
                commit_sha: faker.lorem.slug(1),
                message: {
                  text: faker.lorem.slug(1),
                },
                location: {
                  path: faker.lorem.slug(1),
                  start_line: faker.datatype.number(),
                  end_line: faker.datatype.number(),
                  start_column: faker.datatype.number(),
                  end_column: faker.datatype.number(),
                },
                html_url: faker.internet.url(),
                classifications: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ =>
                  faker.helpers.arrayElement([
                    'source',
                    'generated',
                    'test',
                    'library',
                  ])
                ),
              },
            }))
          ),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(503),
          ctx.json({
            code: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/code-scanning/alerts/:alertNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            number: faker.datatype.number(),
            created_at: faker.date.past(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            instances_url: faker.internet.url(),
            state: faker.helpers.arrayElement([
              'open',
              'closed',
              'dismissed',
              'fixed',
            ]),
            dismissed_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            dismissed_at: faker.date.past(),
            dismissed_reason: faker.helpers.arrayElement([
              null,
              'false positive',
              "won't fix",
              'used in tests',
            ]),
            rule: {
              id: faker.lorem.slug(1),
              name: faker.name.findName(),
              severity: faker.helpers.arrayElement([
                'none',
                'note',
                'warning',
                'error',
              ]),
              security_severity_level: faker.helpers.arrayElement([
                'low',
                'medium',
                'high',
                'critical',
              ]),
              description: faker.lorem.slug(1),
              full_description: faker.lorem.slug(1),
              tags: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              help: faker.lorem.slug(1),
              help_uri: faker.lorem.slug(1),
            },
            tool: {
              name: faker.name.findName(),
              version: faker.lorem.slug(1),
              guid: faker.lorem.slug(1),
            },
            most_recent_instance: {
              ref: faker.lorem.slug(1),
              analysis_key: faker.lorem.slug(1),
              environment: faker.lorem.slug(1),
              category: faker.lorem.slug(1),
              state: faker.helpers.arrayElement([
                'open',
                'closed',
                'dismissed',
                'fixed',
              ]),
              commit_sha: faker.lorem.slug(1),
              message: {
                text: faker.lorem.slug(1),
              },
              location: {
                path: faker.lorem.slug(1),
                start_line: faker.datatype.number(),
                end_line: faker.datatype.number(),
                start_column: faker.datatype.number(),
                end_column: faker.datatype.number(),
              },
              html_url: faker.internet.url(),
              classifications: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ =>
                faker.helpers.arrayElement([
                  'source',
                  'generated',
                  'test',
                  'library',
                ])
              ),
            },
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(503),
          ctx.json({
            code: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/repos/:owner/:repo/code-scanning/alerts/:alertNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            number: faker.datatype.number(),
            created_at: faker.date.past(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            instances_url: faker.internet.url(),
            state: faker.helpers.arrayElement([
              'open',
              'closed',
              'dismissed',
              'fixed',
            ]),
            dismissed_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            dismissed_at: faker.date.past(),
            dismissed_reason: faker.helpers.arrayElement([
              null,
              'false positive',
              "won't fix",
              'used in tests',
            ]),
            rule: {
              id: faker.lorem.slug(1),
              name: faker.name.findName(),
              severity: faker.helpers.arrayElement([
                'none',
                'note',
                'warning',
                'error',
              ]),
              security_severity_level: faker.helpers.arrayElement([
                'low',
                'medium',
                'high',
                'critical',
              ]),
              description: faker.lorem.slug(1),
              full_description: faker.lorem.slug(1),
              tags: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              help: faker.lorem.slug(1),
              help_uri: faker.lorem.slug(1),
            },
            tool: {
              name: faker.name.findName(),
              version: faker.lorem.slug(1),
              guid: faker.lorem.slug(1),
            },
            most_recent_instance: {
              ref: faker.lorem.slug(1),
              analysis_key: faker.lorem.slug(1),
              environment: faker.lorem.slug(1),
              category: faker.lorem.slug(1),
              state: faker.helpers.arrayElement([
                'open',
                'closed',
                'dismissed',
                'fixed',
              ]),
              commit_sha: faker.lorem.slug(1),
              message: {
                text: faker.lorem.slug(1),
              },
              location: {
                path: faker.lorem.slug(1),
                start_line: faker.datatype.number(),
                end_line: faker.datatype.number(),
                start_column: faker.datatype.number(),
                end_column: faker.datatype.number(),
              },
              html_url: faker.internet.url(),
              classifications: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ =>
                faker.helpers.arrayElement([
                  'source',
                  'generated',
                  'test',
                  'library',
                ])
              ),
            },
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(503),
          ctx.json({
            code: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/code-scanning/alerts/:alertNumber/instances`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              ref: faker.lorem.slug(1),
              analysis_key: faker.lorem.slug(1),
              environment: faker.lorem.slug(1),
              category: faker.lorem.slug(1),
              state: faker.helpers.arrayElement([
                'open',
                'closed',
                'dismissed',
                'fixed',
              ]),
              commit_sha: faker.lorem.slug(1),
              message: {
                text: faker.lorem.slug(1),
              },
              location: {
                path: faker.lorem.slug(1),
                start_line: faker.datatype.number(),
                end_line: faker.datatype.number(),
                start_column: faker.datatype.number(),
                end_column: faker.datatype.number(),
              },
              html_url: faker.internet.url(),
              classifications: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ =>
                faker.helpers.arrayElement([
                  'source',
                  'generated',
                  'test',
                  'library',
                ])
              ),
            }))
          ),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(503),
          ctx.json({
            code: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/code-scanning/analyses`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              ref: faker.lorem.slug(1),
              commit_sha: faker.lorem.slug(1),
              analysis_key: faker.lorem.slug(1),
              environment: faker.lorem.slug(1),
              category: faker.lorem.slug(1),
              error: 'error reading field xyz',
              created_at: faker.date.past(),
              results_count: faker.datatype.number(),
              rules_count: faker.datatype.number(),
              id: faker.datatype.number(),
              url: faker.internet.url(),
              sarif_id: '6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53',
              tool: {
                name: faker.name.findName(),
                version: faker.lorem.slug(1),
                guid: faker.lorem.slug(1),
              },
              deletable: faker.datatype.boolean(),
              warning: '123 results were ignored',
            }))
          ),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(503),
          ctx.json({
            code: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/code-scanning/analyses/:analysisId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            ref: faker.lorem.slug(1),
            commit_sha: faker.lorem.slug(1),
            analysis_key: faker.lorem.slug(1),
            environment: faker.lorem.slug(1),
            category: faker.lorem.slug(1),
            error: 'error reading field xyz',
            created_at: faker.date.past(),
            results_count: faker.datatype.number(),
            rules_count: faker.datatype.number(),
            id: faker.datatype.number(),
            url: faker.internet.url(),
            sarif_id: '6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53',
            tool: {
              name: faker.name.findName(),
              version: faker.lorem.slug(1),
              guid: faker.lorem.slug(1),
            },
            deletable: faker.datatype.boolean(),
            warning: '123 results were ignored',
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(503),
          ctx.json({
            code: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/code-scanning/analyses/:analysisId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            next_analysis_url: faker.internet.url(),
            confirm_delete_url: faker.internet.url(),
          }),
        ],
        [
          ctx.status(400),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(503),
          ctx.json({
            code: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/code-scanning/sarifs`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(202),
          ctx.json({
            id: '6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53',
            url: faker.internet.url(),
          }),
        ],
        [ctx.status(400), ctx.json(null)],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [ctx.status(413), ctx.json(null)],
        [
          ctx.status(503),
          ctx.json({
            code: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/code-scanning/sarifs/:sarifId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            processing_status: faker.helpers.arrayElement([
              'pending',
              'complete',
            ]),
            analyses_url: faker.internet.url(),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [ctx.status(404), ctx.json(null)],
        [
          ctx.status(503),
          ctx.json({
            code: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/collaborators`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            login: 'octocat',
            id: 1,
            email: faker.internet.email(),
            name: faker.name.findName(),
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            permissions: {
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/collaborators/:username`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/collaborators/:username`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            id: 42,
            repository: {
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: faker.internet.url(),
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: faker.internet.url(),
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: 'contributor_covenant',
                name: 'Contributor Covenant',
                url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                html_url: faker.internet.url(),
              },
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                spdx_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                node_id: faker.lorem.slug(1),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            invitee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            inviter: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            permissions: 'read',
            created_at: '2016-06-13T14:52:50-05:00',
            expired: faker.datatype.boolean(),
            url: 'https://api.github.com/user/repository-invitations/1',
            html_url: 'https://github.com/octocat/Hello-World/invitations',
            node_id: faker.lorem.slug(1),
          }),
        ],
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/collaborators/:username`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/collaborators/:username/permission`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            permission: faker.lorem.slug(1),
            user: {
              login: 'octocat',
              id: 1,
              email: faker.internet.email(),
              name: faker.name.findName(),
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
            },
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/comments`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            html_url: faker.internet.url(),
            url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            body: faker.lorem.slug(1),
            path: faker.lorem.slug(1),
            position: faker.datatype.number(),
            line: faker.datatype.number(),
            commit_id: faker.lorem.slug(1),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            author_association: 'OWNER',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/comments/:commentId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            html_url: faker.internet.url(),
            url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            body: faker.lorem.slug(1),
            path: faker.lorem.slug(1),
            position: faker.datatype.number(),
            line: faker.datatype.number(),
            commit_id: faker.lorem.slug(1),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            author_association: 'OWNER',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/repos/:owner/:repo/comments/:commentId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            html_url: faker.internet.url(),
            url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            body: faker.lorem.slug(1),
            path: faker.lorem.slug(1),
            position: faker.datatype.number(),
            line: faker.datatype.number(),
            commit_id: faker.lorem.slug(1),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            author_association: 'OWNER',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/comments/:commentId`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/comments/:commentId/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 1,
              node_id: 'MDg6UmVhY3Rpb24x',
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              content: 'heart',
              created_at: '2016-05-20T20:09:31Z',
            }))
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/comments/:commentId/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 1,
            node_id: 'MDg6UmVhY3Rpb24x',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            content: 'heart',
            created_at: '2016-05-20T20:09:31Z',
          }),
        ],
        [
          ctx.status(201),
          ctx.json({
            id: 1,
            node_id: 'MDg6UmVhY3Rpb24x',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            content: 'heart',
            created_at: '2016-05-20T20:09:31Z',
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/comments/:commentId/reactions/:reactionId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/commits`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
            node_id:
              'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
            html_url:
              'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            comments_url:
              'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
            commit: {
              url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
              author: {
                name: '"Chris Wanstrath"',
                email: '"chris@ozmm.org"',
                date: '"2007-10-29T02:42:39.000-07:00"',
              },
              committer: {
                name: '"Chris Wanstrath"',
                email: '"chris@ozmm.org"',
                date: '"2007-10-29T02:42:39.000-07:00"',
              },
              message: 'Fix all the bugs',
              comment_count: faker.datatype.number(),
              tree: {
                sha: '827efc6d56897b048c772eb4087f854f46256132',
                url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
              },
              verification: {
                verified: faker.datatype.boolean(),
                reason: faker.lorem.slug(1),
                payload: faker.lorem.slug(1),
                signature: faker.lorem.slug(1),
              },
            },
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            committer: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            parents: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
              url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
              html_url:
                'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
            })),
            stats: {
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              total: faker.datatype.number(),
            },
            files: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
              filename: 'file1.txt',
              status: 'added',
              additions: 103,
              deletions: 21,
              changes: 124,
              blob_url:
                'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
              raw_url:
                'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
              contents_url:
                'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
              patch:
                '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
              previous_filename: 'file.txt',
            })),
          }))
        ),
      ],
      [
        ctx.status(400),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(409),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(500),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/commits/:commitSha/branches-where-head`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              commit: {
                sha: faker.lorem.slug(1),
                url: faker.internet.url(),
              },
              protected: faker.datatype.boolean(),
            }))
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/commits/:commitSha/comments`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              html_url: faker.internet.url(),
              url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              body: faker.lorem.slug(1),
              path: faker.lorem.slug(1),
              position: faker.datatype.number(),
              line: faker.datatype.number(),
              commit_id: faker.lorem.slug(1),
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              author_association: 'OWNER',
              reactions: {
                url: faker.internet.url(),
                total_count: faker.datatype.number(),
                '+1': faker.datatype.number(),
                '-1': faker.datatype.number(),
                laugh: faker.datatype.number(),
                confused: faker.datatype.number(),
                heart: faker.datatype.number(),
                hooray: faker.datatype.number(),
                eyes: faker.datatype.number(),
                rocket: faker.datatype.number(),
              },
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/commits/:commitSha/comments`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            html_url: faker.internet.url(),
            url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            body: faker.lorem.slug(1),
            path: faker.lorem.slug(1),
            position: faker.datatype.number(),
            line: faker.datatype.number(),
            commit_id: faker.lorem.slug(1),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            author_association: 'OWNER',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/commits/:commitSha/pulls`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347',
              id: 1,
              node_id: 'MDExOlB1bGxSZXF1ZXN0MQ==',
              html_url: 'https://github.com/octocat/Hello-World/pull/1347',
              diff_url: 'https://github.com/octocat/Hello-World/pull/1347.diff',
              patch_url:
                'https://github.com/octocat/Hello-World/pull/1347.patch',
              issue_url:
                'https://api.github.com/repos/octocat/Hello-World/issues/1347',
              commits_url:
                'https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits',
              review_comments_url:
                'https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments',
              review_comment_url:
                'https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}',
              comments_url:
                'https://api.github.com/repos/octocat/Hello-World/issues/1347/comments',
              statuses_url:
                'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e',
              number: 1347,
              state: 'open',
              locked: true,
              title: 'new-feature',
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              body: 'Please pull these awesome changes',
              labels: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                name: faker.name.findName(),
                description: faker.lorem.slug(1),
                color: faker.lorem.slug(1),
                default: faker.datatype.boolean(),
              })),
              milestone: {
                url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
                html_url:
                  'https://github.com/octocat/Hello-World/milestones/v1.0',
                labels_url:
                  'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
                id: 1002604,
                node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
                number: 42,
                state: 'open',
                title: 'v1.0',
                description: 'Tracking milestone for version 1.0',
                creator: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                open_issues: 4,
                closed_issues: 8,
                created_at: '2011-04-10T20:09:31Z',
                updated_at: '2014-03-03T18:58:10Z',
                closed_at: '2013-02-12T13:22:01Z',
                due_on: '2012-10-09T23:39:01Z',
              },
              active_lock_reason: 'too heated',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:01:12Z',
              closed_at: '2011-01-26T19:01:12Z',
              merged_at: '2011-01-26T19:01:12Z',
              merge_commit_sha: 'e5bd3914e2e596debea16f433f57875b5b90bcd6',
              assignee: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              assignees: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              })),
              requested_reviewers: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              })),
              requested_teams: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                slug: faker.lorem.slug(1),
                description: faker.lorem.slug(1),
                privacy: faker.lorem.slug(1),
                permission: faker.lorem.slug(1),
                permissions: {
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  admin: faker.datatype.boolean(),
                },
                url: faker.internet.url(),
                html_url: 'https://github.com/orgs/rails/teams/core',
                members_url: faker.internet.url(),
                repositories_url: faker.internet.url(),
                parent: {
                  id: 1,
                  node_id: 'MDQ6VGVhbTE=',
                  url: 'https://api.github.com/organizations/1/team/1',
                  members_url:
                    'https://api.github.com/organizations/1/team/1/members{/member}',
                  name: 'Justice League',
                  description: 'A great team.',
                  permission: 'admin',
                  privacy: 'closed',
                  html_url: 'https://github.com/orgs/rails/teams/core',
                  repositories_url:
                    'https://api.github.com/organizations/1/team/1/repos',
                  slug: 'justice-league',
                  ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
                },
              })),
              head: {
                label: faker.lorem.slug(1),
                ref: faker.lorem.slug(1),
                repo: {
                  id: 42,
                  node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                  name: 'Team Environment',
                  full_name: 'octocat/Hello-World',
                  license: {
                    key: 'mit',
                    name: 'MIT License',
                    url: 'https://api.github.com/licenses/mit',
                    spdx_id: 'MIT',
                    node_id: 'MDc6TGljZW5zZW1pdA==',
                    html_url: faker.internet.url(),
                  },
                  organization: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  forks: faker.datatype.number(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                  },
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  private: faker.datatype.boolean(),
                  html_url: 'https://github.com/octocat/Hello-World',
                  description: 'This your first repo!',
                  fork: faker.datatype.boolean(),
                  url: 'https://api.github.com/repos/octocat/Hello-World',
                  archive_url:
                    'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                  assignees_url:
                    'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                  blobs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                  branches_url:
                    'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                  collaborators_url:
                    'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                  comments_url:
                    'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                  commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                  compare_url:
                    'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                  contents_url:
                    'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                  contributors_url:
                    'http://api.github.com/repos/octocat/Hello-World/contributors',
                  deployments_url:
                    'http://api.github.com/repos/octocat/Hello-World/deployments',
                  downloads_url:
                    'http://api.github.com/repos/octocat/Hello-World/downloads',
                  events_url:
                    'http://api.github.com/repos/octocat/Hello-World/events',
                  forks_url:
                    'http://api.github.com/repos/octocat/Hello-World/forks',
                  git_commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                  git_refs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                  git_tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                  git_url: 'git:github.com/octocat/Hello-World.git',
                  issue_comment_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                  issue_events_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                  issues_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                  keys_url:
                    'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                  labels_url:
                    'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                  languages_url:
                    'http://api.github.com/repos/octocat/Hello-World/languages',
                  merges_url:
                    'http://api.github.com/repos/octocat/Hello-World/merges',
                  milestones_url:
                    'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                  notifications_url:
                    'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                  pulls_url:
                    'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                  releases_url:
                    'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                  ssh_url: 'git@github.com:octocat/Hello-World.git',
                  stargazers_url:
                    'http://api.github.com/repos/octocat/Hello-World/stargazers',
                  statuses_url:
                    'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                  subscribers_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscribers',
                  subscription_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscription',
                  tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/tags',
                  teams_url:
                    'http://api.github.com/repos/octocat/Hello-World/teams',
                  trees_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                  clone_url: 'https://github.com/octocat/Hello-World.git',
                  mirror_url: 'git:git.example.com/octocat/Hello-World',
                  hooks_url:
                    'http://api.github.com/repos/octocat/Hello-World/hooks',
                  svn_url: 'https://svn.github.com/octocat/Hello-World',
                  homepage: 'https://github.com',
                  language: faker.lorem.slug(1),
                  forks_count: 9,
                  stargazers_count: 80,
                  watchers_count: 80,
                  size: 108,
                  default_branch: 'master',
                  open_issues_count: faker.datatype.number(),
                  is_template: true,
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: true,
                  has_projects: true,
                  has_wiki: true,
                  has_pages: faker.datatype.boolean(),
                  has_downloads: true,
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: '2011-01-26T19:06:43Z',
                  created_at: '2011-01-26T19:01:12Z',
                  updated_at: '2011-01-26T19:14:43Z',
                  allow_rebase_merge: true,
                  template_repository: {
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    name: faker.name.findName(),
                    full_name: faker.name.findName(),
                    owner: {
                      login: faker.lorem.slug(1),
                      id: faker.datatype.number(),
                      node_id: faker.lorem.slug(1),
                      avatar_url: faker.internet.url(),
                      gravatar_id: faker.lorem.slug(1),
                      url: faker.internet.url(),
                      html_url: faker.internet.url(),
                      followers_url: faker.internet.url(),
                      following_url: faker.internet.url(),
                      gists_url: faker.internet.url(),
                      starred_url: faker.internet.url(),
                      subscriptions_url: faker.internet.url(),
                      organizations_url: faker.internet.url(),
                      repos_url: faker.internet.url(),
                      events_url: faker.internet.url(),
                      received_events_url: faker.internet.url(),
                      type: faker.lorem.slug(1),
                      site_admin: faker.datatype.boolean(),
                    },
                    private: faker.datatype.boolean(),
                    html_url: faker.internet.url(),
                    description: faker.lorem.slug(1),
                    fork: faker.datatype.boolean(),
                    url: faker.internet.url(),
                    archive_url: faker.internet.url(),
                    assignees_url: faker.internet.url(),
                    blobs_url: faker.internet.url(),
                    branches_url: faker.internet.url(),
                    collaborators_url: faker.internet.url(),
                    comments_url: faker.internet.url(),
                    commits_url: faker.internet.url(),
                    compare_url: faker.internet.url(),
                    contents_url: faker.internet.url(),
                    contributors_url: faker.internet.url(),
                    deployments_url: faker.internet.url(),
                    downloads_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    forks_url: faker.internet.url(),
                    git_commits_url: faker.internet.url(),
                    git_refs_url: faker.internet.url(),
                    git_tags_url: faker.internet.url(),
                    git_url: faker.internet.url(),
                    issue_comment_url: faker.internet.url(),
                    issue_events_url: faker.internet.url(),
                    issues_url: faker.internet.url(),
                    keys_url: faker.internet.url(),
                    labels_url: faker.internet.url(),
                    languages_url: faker.internet.url(),
                    merges_url: faker.internet.url(),
                    milestones_url: faker.internet.url(),
                    notifications_url: faker.internet.url(),
                    pulls_url: faker.internet.url(),
                    releases_url: faker.internet.url(),
                    ssh_url: faker.internet.url(),
                    stargazers_url: faker.internet.url(),
                    statuses_url: faker.internet.url(),
                    subscribers_url: faker.internet.url(),
                    subscription_url: faker.internet.url(),
                    tags_url: faker.internet.url(),
                    teams_url: faker.internet.url(),
                    trees_url: faker.internet.url(),
                    clone_url: faker.internet.url(),
                    mirror_url: faker.internet.url(),
                    hooks_url: faker.internet.url(),
                    svn_url: faker.internet.url(),
                    homepage: faker.lorem.slug(1),
                    language: faker.lorem.slug(1),
                    forks_count: faker.datatype.number(),
                    stargazers_count: faker.datatype.number(),
                    watchers_count: faker.datatype.number(),
                    size: faker.datatype.number(),
                    default_branch: faker.lorem.slug(1),
                    open_issues_count: faker.datatype.number(),
                    is_template: faker.datatype.boolean(),
                    topics: [
                      ...new Array(
                        faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                      ).keys(),
                    ].map(_ => faker.lorem.slug(1)),
                    has_issues: faker.datatype.boolean(),
                    has_projects: faker.datatype.boolean(),
                    has_wiki: faker.datatype.boolean(),
                    has_pages: faker.datatype.boolean(),
                    has_downloads: faker.datatype.boolean(),
                    archived: faker.datatype.boolean(),
                    disabled: faker.datatype.boolean(),
                    visibility: faker.lorem.slug(1),
                    pushed_at: faker.date.past(),
                    created_at: faker.date.past(),
                    updated_at: faker.date.past(),
                    permissions: {
                      admin: faker.datatype.boolean(),
                      maintain: faker.datatype.boolean(),
                      push: faker.datatype.boolean(),
                      triage: faker.datatype.boolean(),
                      pull: faker.datatype.boolean(),
                    },
                    allow_rebase_merge: faker.datatype.boolean(),
                    temp_clone_token: faker.lorem.slug(1),
                    allow_squash_merge: faker.datatype.boolean(),
                    allow_auto_merge: faker.datatype.boolean(),
                    delete_branch_on_merge: faker.datatype.boolean(),
                    allow_update_branch: faker.datatype.boolean(),
                    allow_merge_commit: faker.datatype.boolean(),
                    subscribers_count: faker.datatype.number(),
                    network_count: faker.datatype.number(),
                  },
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: true,
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: true,
                  allow_forking: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                  open_issues: faker.datatype.number(),
                  watchers: faker.datatype.number(),
                  master_branch: faker.lorem.slug(1),
                  starred_at: '"2020-07-09T00:17:42Z"',
                  anonymous_access_enabled: faker.datatype.boolean(),
                },
                sha: faker.lorem.slug(1),
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
              },
              base: {
                label: faker.lorem.slug(1),
                ref: faker.lorem.slug(1),
                repo: {
                  id: 42,
                  node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                  name: 'Team Environment',
                  full_name: 'octocat/Hello-World',
                  license: {
                    key: 'mit',
                    name: 'MIT License',
                    url: 'https://api.github.com/licenses/mit',
                    spdx_id: 'MIT',
                    node_id: 'MDc6TGljZW5zZW1pdA==',
                    html_url: faker.internet.url(),
                  },
                  organization: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  forks: faker.datatype.number(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                  },
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  private: faker.datatype.boolean(),
                  html_url: 'https://github.com/octocat/Hello-World',
                  description: 'This your first repo!',
                  fork: faker.datatype.boolean(),
                  url: 'https://api.github.com/repos/octocat/Hello-World',
                  archive_url:
                    'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                  assignees_url:
                    'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                  blobs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                  branches_url:
                    'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                  collaborators_url:
                    'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                  comments_url:
                    'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                  commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                  compare_url:
                    'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                  contents_url:
                    'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                  contributors_url:
                    'http://api.github.com/repos/octocat/Hello-World/contributors',
                  deployments_url:
                    'http://api.github.com/repos/octocat/Hello-World/deployments',
                  downloads_url:
                    'http://api.github.com/repos/octocat/Hello-World/downloads',
                  events_url:
                    'http://api.github.com/repos/octocat/Hello-World/events',
                  forks_url:
                    'http://api.github.com/repos/octocat/Hello-World/forks',
                  git_commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                  git_refs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                  git_tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                  git_url: 'git:github.com/octocat/Hello-World.git',
                  issue_comment_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                  issue_events_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                  issues_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                  keys_url:
                    'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                  labels_url:
                    'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                  languages_url:
                    'http://api.github.com/repos/octocat/Hello-World/languages',
                  merges_url:
                    'http://api.github.com/repos/octocat/Hello-World/merges',
                  milestones_url:
                    'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                  notifications_url:
                    'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                  pulls_url:
                    'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                  releases_url:
                    'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                  ssh_url: 'git@github.com:octocat/Hello-World.git',
                  stargazers_url:
                    'http://api.github.com/repos/octocat/Hello-World/stargazers',
                  statuses_url:
                    'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                  subscribers_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscribers',
                  subscription_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscription',
                  tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/tags',
                  teams_url:
                    'http://api.github.com/repos/octocat/Hello-World/teams',
                  trees_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                  clone_url: 'https://github.com/octocat/Hello-World.git',
                  mirror_url: 'git:git.example.com/octocat/Hello-World',
                  hooks_url:
                    'http://api.github.com/repos/octocat/Hello-World/hooks',
                  svn_url: 'https://svn.github.com/octocat/Hello-World',
                  homepage: 'https://github.com',
                  language: faker.lorem.slug(1),
                  forks_count: 9,
                  stargazers_count: 80,
                  watchers_count: 80,
                  size: 108,
                  default_branch: 'master',
                  open_issues_count: faker.datatype.number(),
                  is_template: true,
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: true,
                  has_projects: true,
                  has_wiki: true,
                  has_pages: faker.datatype.boolean(),
                  has_downloads: true,
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: '2011-01-26T19:06:43Z',
                  created_at: '2011-01-26T19:01:12Z',
                  updated_at: '2011-01-26T19:14:43Z',
                  allow_rebase_merge: true,
                  template_repository: {
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    name: faker.name.findName(),
                    full_name: faker.name.findName(),
                    owner: {
                      login: faker.lorem.slug(1),
                      id: faker.datatype.number(),
                      node_id: faker.lorem.slug(1),
                      avatar_url: faker.internet.url(),
                      gravatar_id: faker.lorem.slug(1),
                      url: faker.internet.url(),
                      html_url: faker.internet.url(),
                      followers_url: faker.internet.url(),
                      following_url: faker.internet.url(),
                      gists_url: faker.internet.url(),
                      starred_url: faker.internet.url(),
                      subscriptions_url: faker.internet.url(),
                      organizations_url: faker.internet.url(),
                      repos_url: faker.internet.url(),
                      events_url: faker.internet.url(),
                      received_events_url: faker.internet.url(),
                      type: faker.lorem.slug(1),
                      site_admin: faker.datatype.boolean(),
                    },
                    private: faker.datatype.boolean(),
                    html_url: faker.internet.url(),
                    description: faker.lorem.slug(1),
                    fork: faker.datatype.boolean(),
                    url: faker.internet.url(),
                    archive_url: faker.internet.url(),
                    assignees_url: faker.internet.url(),
                    blobs_url: faker.internet.url(),
                    branches_url: faker.internet.url(),
                    collaborators_url: faker.internet.url(),
                    comments_url: faker.internet.url(),
                    commits_url: faker.internet.url(),
                    compare_url: faker.internet.url(),
                    contents_url: faker.internet.url(),
                    contributors_url: faker.internet.url(),
                    deployments_url: faker.internet.url(),
                    downloads_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    forks_url: faker.internet.url(),
                    git_commits_url: faker.internet.url(),
                    git_refs_url: faker.internet.url(),
                    git_tags_url: faker.internet.url(),
                    git_url: faker.internet.url(),
                    issue_comment_url: faker.internet.url(),
                    issue_events_url: faker.internet.url(),
                    issues_url: faker.internet.url(),
                    keys_url: faker.internet.url(),
                    labels_url: faker.internet.url(),
                    languages_url: faker.internet.url(),
                    merges_url: faker.internet.url(),
                    milestones_url: faker.internet.url(),
                    notifications_url: faker.internet.url(),
                    pulls_url: faker.internet.url(),
                    releases_url: faker.internet.url(),
                    ssh_url: faker.internet.url(),
                    stargazers_url: faker.internet.url(),
                    statuses_url: faker.internet.url(),
                    subscribers_url: faker.internet.url(),
                    subscription_url: faker.internet.url(),
                    tags_url: faker.internet.url(),
                    teams_url: faker.internet.url(),
                    trees_url: faker.internet.url(),
                    clone_url: faker.internet.url(),
                    mirror_url: faker.internet.url(),
                    hooks_url: faker.internet.url(),
                    svn_url: faker.internet.url(),
                    homepage: faker.lorem.slug(1),
                    language: faker.lorem.slug(1),
                    forks_count: faker.datatype.number(),
                    stargazers_count: faker.datatype.number(),
                    watchers_count: faker.datatype.number(),
                    size: faker.datatype.number(),
                    default_branch: faker.lorem.slug(1),
                    open_issues_count: faker.datatype.number(),
                    is_template: faker.datatype.boolean(),
                    topics: [
                      ...new Array(
                        faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                      ).keys(),
                    ].map(_ => faker.lorem.slug(1)),
                    has_issues: faker.datatype.boolean(),
                    has_projects: faker.datatype.boolean(),
                    has_wiki: faker.datatype.boolean(),
                    has_pages: faker.datatype.boolean(),
                    has_downloads: faker.datatype.boolean(),
                    archived: faker.datatype.boolean(),
                    disabled: faker.datatype.boolean(),
                    visibility: faker.lorem.slug(1),
                    pushed_at: faker.date.past(),
                    created_at: faker.date.past(),
                    updated_at: faker.date.past(),
                    permissions: {
                      admin: faker.datatype.boolean(),
                      maintain: faker.datatype.boolean(),
                      push: faker.datatype.boolean(),
                      triage: faker.datatype.boolean(),
                      pull: faker.datatype.boolean(),
                    },
                    allow_rebase_merge: faker.datatype.boolean(),
                    temp_clone_token: faker.lorem.slug(1),
                    allow_squash_merge: faker.datatype.boolean(),
                    allow_auto_merge: faker.datatype.boolean(),
                    delete_branch_on_merge: faker.datatype.boolean(),
                    allow_update_branch: faker.datatype.boolean(),
                    allow_merge_commit: faker.datatype.boolean(),
                    subscribers_count: faker.datatype.number(),
                    network_count: faker.datatype.number(),
                  },
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: true,
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: true,
                  allow_forking: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                  open_issues: faker.datatype.number(),
                  watchers: faker.datatype.number(),
                  master_branch: faker.lorem.slug(1),
                  starred_at: '"2020-07-09T00:17:42Z"',
                  anonymous_access_enabled: faker.datatype.boolean(),
                },
                sha: faker.lorem.slug(1),
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
              },
              _links: {
                comments: {
                  href: faker.lorem.slug(1),
                },
                commits: {
                  href: faker.lorem.slug(1),
                },
                statuses: {
                  href: faker.lorem.slug(1),
                },
                html: {
                  href: faker.lorem.slug(1),
                },
                issue: {
                  href: faker.lorem.slug(1),
                },
                review_comments: {
                  href: faker.lorem.slug(1),
                },
                review_comment: {
                  href: faker.lorem.slug(1),
                },
                self: {
                  href: faker.lorem.slug(1),
                },
              },
              author_association: 'OWNER',
              auto_merge: {
                enabled_by: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                merge_method: faker.helpers.arrayElement([
                  'merge',
                  'squash',
                  'rebase',
                ]),
                commit_title: faker.lorem.slug(1),
                commit_message: faker.lorem.slug(1),
              },
              draft: faker.datatype.boolean(),
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/commits/:ref`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
          sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
          node_id:
            'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
          html_url:
            'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
          comments_url:
            'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
          commit: {
            url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            author: {
              name: '"Chris Wanstrath"',
              email: '"chris@ozmm.org"',
              date: '"2007-10-29T02:42:39.000-07:00"',
            },
            committer: {
              name: '"Chris Wanstrath"',
              email: '"chris@ozmm.org"',
              date: '"2007-10-29T02:42:39.000-07:00"',
            },
            message: 'Fix all the bugs',
            comment_count: faker.datatype.number(),
            tree: {
              sha: '827efc6d56897b048c772eb4087f854f46256132',
              url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
            },
            verification: {
              verified: faker.datatype.boolean(),
              reason: faker.lorem.slug(1),
              payload: faker.lorem.slug(1),
              signature: faker.lorem.slug(1),
            },
          },
          author: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          committer: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          parents: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
            url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
            html_url:
              'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
          })),
          stats: {
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
            total: faker.datatype.number(),
          },
          files: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
            filename: 'file1.txt',
            status: 'added',
            additions: 103,
            deletions: 21,
            changes: 124,
            blob_url:
              'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
            raw_url:
              'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
            contents_url:
              'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
            patch:
              '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
            previous_filename: 'file.txt',
          })),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
      [
        ctx.status(500),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.lorem.slug(1),
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/commits/:ref/check-runs`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            check_runs: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 21,
              head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
              node_id: 'MDg6Q2hlY2tSdW40',
              external_id: '42',
              url: 'https://api.github.com/repos/github/hello-world/check-runs/4',
              html_url: 'https://github.com/github/hello-world/runs/4',
              details_url: 'https://example.com',
              status: 'queued',
              conclusion: 'neutral',
              started_at: '2018-05-04T01:14:52Z',
              completed_at: '2018-05-04T01:14:52Z',
              output: {
                title: faker.lorem.slug(1),
                summary: faker.lorem.slug(1),
                text: faker.lorem.slug(1),
                annotations_count: faker.datatype.number(),
                annotations_url: faker.internet.url(),
              },
              name: 'test-coverage',
              check_suite: {
                id: faker.datatype.number(),
              },
              app: {
                id: 37,
                slug: 'probot-owners',
                node_id: 'MDExOkludGVncmF0aW9uMQ==',
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                name: 'Probot Owners',
                description: 'The description of the app.',
                external_url: 'https://example.com',
                html_url: 'https://github.com/apps/super-ci',
                created_at: '2017-07-08T16:18:44-04:00',
                updated_at: '2017-07-08T16:18:44-04:00',
                permissions: { issues: 'read', deployments: 'write' },
                events: ['label', 'deployment'],
                installations_count: 5,
                client_id: '"Iv1.25b5d1e65ffc4022"',
                client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
              },
              pull_requests: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                number: faker.datatype.number(),
                url: faker.internet.url(),
                head: {
                  ref: faker.lorem.slug(1),
                  sha: faker.lorem.slug(1),
                  repo: {
                    id: faker.datatype.number(),
                    url: faker.internet.url(),
                    name: faker.name.findName(),
                  },
                },
                base: {
                  ref: faker.lorem.slug(1),
                  sha: faker.lorem.slug(1),
                  repo: {
                    id: faker.datatype.number(),
                    url: faker.internet.url(),
                    name: faker.name.findName(),
                  },
                },
              })),
              deployment: {
                url: 'https://api.github.com/repos/octocat/example/deployments/1',
                id: 42,
                node_id: 'MDEwOkRlcGxveW1lbnQx',
                task: 'deploy',
                original_environment: 'staging',
                environment: 'production',
                description: 'Deploy request from hubot',
                created_at: '2012-07-20T01:19:13Z',
                updated_at: '2012-07-20T01:19:13Z',
                statuses_url:
                  'https://api.github.com/repos/octocat/example/deployments/1/statuses',
                repository_url: 'https://api.github.com/repos/octocat/example',
                transient_environment: true,
                production_environment: true,
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
              },
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/commits/:ref/check-suites`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            check_suites: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 5,
              node_id: 'MDEwOkNoZWNrU3VpdGU1',
              head_branch: 'master',
              head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
              status: 'completed',
              conclusion: 'neutral',
              url: 'https://api.github.com/repos/github/hello-world/check-suites/5',
              before: '146e867f55c26428e5f9fade55a9bbf5e95a7912',
              after: 'd6fde92930d4715a2b49857d24b940956b26d2d3',
              pull_requests: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                number: faker.datatype.number(),
                url: faker.internet.url(),
                head: {
                  ref: faker.lorem.slug(1),
                  sha: faker.lorem.slug(1),
                  repo: {
                    id: faker.datatype.number(),
                    url: faker.internet.url(),
                    name: faker.name.findName(),
                  },
                },
                base: {
                  ref: faker.lorem.slug(1),
                  sha: faker.lorem.slug(1),
                  repo: {
                    id: faker.datatype.number(),
                    url: faker.internet.url(),
                    name: faker.name.findName(),
                  },
                },
              })),
              app: {
                id: 37,
                slug: 'probot-owners',
                node_id: 'MDExOkludGVncmF0aW9uMQ==',
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                name: 'Probot Owners',
                description: 'The description of the app.',
                external_url: 'https://example.com',
                html_url: 'https://github.com/apps/super-ci',
                created_at: '2017-07-08T16:18:44-04:00',
                updated_at: '2017-07-08T16:18:44-04:00',
                permissions: { issues: 'read', deployments: 'write' },
                events: ['label', 'deployment'],
                installations_count: 5,
                client_id: '"Iv1.25b5d1e65ffc4022"',
                client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
              },
              repository: {
                id: 1296269,
                node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                name: 'Hello-World',
                full_name: 'octocat/Hello-World',
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                private: faker.datatype.boolean(),
                html_url: 'https://github.com/octocat/Hello-World',
                description: 'This your first repo!',
                fork: faker.datatype.boolean(),
                url: 'https://api.github.com/repos/octocat/Hello-World',
                archive_url:
                  'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                assignees_url:
                  'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                blobs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                branches_url:
                  'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                collaborators_url:
                  'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                comments_url:
                  'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                compare_url:
                  'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                contents_url:
                  'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                contributors_url:
                  'http://api.github.com/repos/octocat/Hello-World/contributors',
                deployments_url:
                  'http://api.github.com/repos/octocat/Hello-World/deployments',
                downloads_url:
                  'http://api.github.com/repos/octocat/Hello-World/downloads',
                events_url:
                  'http://api.github.com/repos/octocat/Hello-World/events',
                forks_url:
                  'http://api.github.com/repos/octocat/Hello-World/forks',
                git_commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                git_refs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                git_tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                git_url: faker.internet.url(),
                issue_comment_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                issue_events_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                issues_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                keys_url:
                  'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                labels_url:
                  'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                languages_url:
                  'http://api.github.com/repos/octocat/Hello-World/languages',
                merges_url:
                  'http://api.github.com/repos/octocat/Hello-World/merges',
                milestones_url:
                  'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                notifications_url:
                  'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                pulls_url:
                  'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                releases_url:
                  'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                ssh_url: faker.internet.url(),
                stargazers_url:
                  'http://api.github.com/repos/octocat/Hello-World/stargazers',
                statuses_url:
                  'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                subscribers_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscribers',
                subscription_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscription',
                tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/tags',
                teams_url:
                  'http://api.github.com/repos/octocat/Hello-World/teams',
                trees_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url:
                  'http://api.github.com/repos/octocat/Hello-World/hooks',
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: '2011-01-26T19:06:43Z',
                created_at: '2011-01-26T19:01:12Z',
                updated_at: '2011-01-26T19:14:43Z',
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                temp_clone_token: faker.lorem.slug(1),
                delete_branch_on_merge: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                code_of_conduct: {
                  key: 'contributor_covenant',
                  name: 'Contributor Covenant',
                  url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                  body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                  html_url: faker.internet.url(),
                },
                license: {
                  key: faker.lorem.slug(1),
                  name: faker.name.findName(),
                  spdx_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  node_id: faker.lorem.slug(1),
                },
                forks: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                allow_forking: faker.datatype.boolean(),
              },
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              head_commit: {
                id: faker.lorem.slug(1),
                tree_id: faker.lorem.slug(1),
                message: faker.lorem.slug(1),
                timestamp: faker.date.past(),
                author: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                },
                committer: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                },
              },
              latest_check_runs_count: faker.datatype.number(),
              check_runs_url: faker.internet.url(),
              rerequestable: faker.datatype.boolean(),
              runs_rerequestable: faker.datatype.boolean(),
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/commits/:ref/status`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            state: faker.lorem.slug(1),
            statuses: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              description: faker.lorem.slug(1),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              state: faker.lorem.slug(1),
              context: faker.lorem.slug(1),
              target_url: faker.internet.url(),
              required: faker.datatype.boolean(),
              avatar_url: faker.internet.url(),
              url: faker.internet.url(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
            })),
            sha: faker.lorem.slug(1),
            total_count: faker.datatype.number(),
            repository: {
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: faker.internet.url(),
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: faker.internet.url(),
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: 'contributor_covenant',
                name: 'Contributor Covenant',
                url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                html_url: faker.internet.url(),
              },
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                spdx_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                node_id: faker.lorem.slug(1),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            commit_url: faker.internet.url(),
            url: faker.internet.url(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/commits/:ref/statuses`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              url: faker.internet.url(),
              avatar_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              state: faker.lorem.slug(1),
              description: faker.lorem.slug(1),
              target_url: faker.internet.url(),
              context: faker.lorem.slug(1),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              creator: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            }))
          ),
        ],
        [
          ctx.status(301),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/compare/:basehead`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: 'https://api.github.com/repos/octocat/Hello-World/compare/master...topic',
          html_url:
            'https://github.com/octocat/Hello-World/compare/master...topic',
          permalink_url:
            'https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17',
          diff_url:
            'https://github.com/octocat/Hello-World/compare/master...topic.diff',
          patch_url:
            'https://github.com/octocat/Hello-World/compare/master...topic.patch',
          base_commit: {
            url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
            node_id:
              'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
            html_url:
              'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            comments_url:
              'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
            commit: {
              url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
              author: {
                name: '"Chris Wanstrath"',
                email: '"chris@ozmm.org"',
                date: '"2007-10-29T02:42:39.000-07:00"',
              },
              committer: {
                name: '"Chris Wanstrath"',
                email: '"chris@ozmm.org"',
                date: '"2007-10-29T02:42:39.000-07:00"',
              },
              message: 'Fix all the bugs',
              comment_count: faker.datatype.number(),
              tree: {
                sha: '827efc6d56897b048c772eb4087f854f46256132',
                url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
              },
              verification: {
                verified: faker.datatype.boolean(),
                reason: faker.lorem.slug(1),
                payload: faker.lorem.slug(1),
                signature: faker.lorem.slug(1),
              },
            },
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            committer: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            parents: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
              url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
              html_url:
                'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
            })),
            stats: {
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              total: faker.datatype.number(),
            },
            files: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
              filename: 'file1.txt',
              status: 'added',
              additions: 103,
              deletions: 21,
              changes: 124,
              blob_url:
                'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
              raw_url:
                'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
              contents_url:
                'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
              patch:
                '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
              previous_filename: 'file.txt',
            })),
          },
          merge_base_commit: {
            url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
            node_id:
              'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
            html_url:
              'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            comments_url:
              'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
            commit: {
              url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
              author: {
                name: '"Chris Wanstrath"',
                email: '"chris@ozmm.org"',
                date: '"2007-10-29T02:42:39.000-07:00"',
              },
              committer: {
                name: '"Chris Wanstrath"',
                email: '"chris@ozmm.org"',
                date: '"2007-10-29T02:42:39.000-07:00"',
              },
              message: 'Fix all the bugs',
              comment_count: faker.datatype.number(),
              tree: {
                sha: '827efc6d56897b048c772eb4087f854f46256132',
                url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
              },
              verification: {
                verified: faker.datatype.boolean(),
                reason: faker.lorem.slug(1),
                payload: faker.lorem.slug(1),
                signature: faker.lorem.slug(1),
              },
            },
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            committer: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            parents: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
              url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
              html_url:
                'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
            })),
            stats: {
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              total: faker.datatype.number(),
            },
            files: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
              filename: 'file1.txt',
              status: 'added',
              additions: 103,
              deletions: 21,
              changes: 124,
              blob_url:
                'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
              raw_url:
                'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
              contents_url:
                'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
              patch:
                '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
              previous_filename: 'file.txt',
            })),
          },
          status: 'ahead',
          ahead_by: 4,
          behind_by: 5,
          total_commits: 6,
          commits: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
            node_id:
              'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
            html_url:
              'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            comments_url:
              'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
            commit: {
              url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
              author: {
                name: '"Chris Wanstrath"',
                email: '"chris@ozmm.org"',
                date: '"2007-10-29T02:42:39.000-07:00"',
              },
              committer: {
                name: '"Chris Wanstrath"',
                email: '"chris@ozmm.org"',
                date: '"2007-10-29T02:42:39.000-07:00"',
              },
              message: 'Fix all the bugs',
              comment_count: faker.datatype.number(),
              tree: {
                sha: '827efc6d56897b048c772eb4087f854f46256132',
                url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
              },
              verification: {
                verified: faker.datatype.boolean(),
                reason: faker.lorem.slug(1),
                payload: faker.lorem.slug(1),
                signature: faker.lorem.slug(1),
              },
            },
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            committer: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            parents: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
              url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
              html_url:
                'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
            })),
            stats: {
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              total: faker.datatype.number(),
            },
            files: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
              filename: 'file1.txt',
              status: 'added',
              additions: 103,
              deletions: 21,
              changes: 124,
              blob_url:
                'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
              raw_url:
                'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
              contents_url:
                'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
              patch:
                '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
              previous_filename: 'file.txt',
            })),
          })),
          files: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
            filename: 'file1.txt',
            status: 'added',
            additions: 103,
            deletions: 21,
            changes: 124,
            blob_url:
              'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
            raw_url:
              'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
            contents_url:
              'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
            patch:
              '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
            previous_filename: 'file.txt',
          })),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(500),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.lorem.slug(1),
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(
    `${baseURL}/repos/:owner/:repo/content_references/:contentReferenceId/attachments`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 21,
            title: 'Title of the attachment',
            body: 'Body of the attachment',
            node_id: 'MDE3OkNvbnRlbnRBdHRhY2htZW50MjE=',
          }),
        ],
        [ctx.status(304), ctx.json(null)],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(415),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/contents/:path`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(null)],
      [ctx.status(302), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/repos/:owner/:repo/contents/:path`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          content: {
            name: faker.name.findName(),
            path: faker.lorem.slug(1),
            sha: faker.lorem.slug(1),
            size: faker.datatype.number(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            git_url: faker.internet.url(),
            download_url: faker.internet.url(),
            type: faker.lorem.slug(1),
            _links: {
              self: faker.lorem.slug(1),
              git: faker.lorem.slug(1),
              html: faker.lorem.slug(1),
            },
          },
          commit: {
            sha: faker.lorem.slug(1),
            node_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            author: {
              date: faker.lorem.slug(1),
              name: faker.name.findName(),
              email: faker.internet.email(),
            },
            committer: {
              date: faker.lorem.slug(1),
              name: faker.name.findName(),
              email: faker.internet.email(),
            },
            message: faker.lorem.slug(1),
            tree: {
              url: faker.internet.url(),
              sha: faker.lorem.slug(1),
            },
            parents: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              sha: faker.lorem.slug(1),
            })),
            verification: {
              verified: faker.datatype.boolean(),
              reason: faker.lorem.slug(1),
              signature: faker.lorem.slug(1),
              payload: faker.lorem.slug(1),
            },
          },
        }),
      ],
      [
        ctx.status(201),
        ctx.json({
          content: {
            name: faker.name.findName(),
            path: faker.lorem.slug(1),
            sha: faker.lorem.slug(1),
            size: faker.datatype.number(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            git_url: faker.internet.url(),
            download_url: faker.internet.url(),
            type: faker.lorem.slug(1),
            _links: {
              self: faker.lorem.slug(1),
              git: faker.lorem.slug(1),
              html: faker.lorem.slug(1),
            },
          },
          commit: {
            sha: faker.lorem.slug(1),
            node_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            author: {
              date: faker.lorem.slug(1),
              name: faker.name.findName(),
              email: faker.internet.email(),
            },
            committer: {
              date: faker.lorem.slug(1),
              name: faker.name.findName(),
              email: faker.internet.email(),
            },
            message: faker.lorem.slug(1),
            tree: {
              url: faker.internet.url(),
              sha: faker.lorem.slug(1),
            },
            parents: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              sha: faker.lorem.slug(1),
            })),
            verification: {
              verified: faker.datatype.boolean(),
              reason: faker.lorem.slug(1),
              signature: faker.lorem.slug(1),
              payload: faker.lorem.slug(1),
            },
          },
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(409),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/repos/:owner/:repo/contents/:path`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          content: {
            name: faker.name.findName(),
            path: faker.lorem.slug(1),
            sha: faker.lorem.slug(1),
            size: faker.datatype.number(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            git_url: faker.internet.url(),
            download_url: faker.internet.url(),
            type: faker.lorem.slug(1),
            _links: {
              self: faker.lorem.slug(1),
              git: faker.lorem.slug(1),
              html: faker.lorem.slug(1),
            },
          },
          commit: {
            sha: faker.lorem.slug(1),
            node_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            author: {
              date: faker.lorem.slug(1),
              name: faker.name.findName(),
              email: faker.internet.email(),
            },
            committer: {
              date: faker.lorem.slug(1),
              name: faker.name.findName(),
              email: faker.internet.email(),
            },
            message: faker.lorem.slug(1),
            tree: {
              url: faker.internet.url(),
              sha: faker.lorem.slug(1),
            },
            parents: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              sha: faker.lorem.slug(1),
            })),
            verification: {
              verified: faker.datatype.boolean(),
              reason: faker.lorem.slug(1),
              signature: faker.lorem.slug(1),
              payload: faker.lorem.slug(1),
            },
          },
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(409),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.lorem.slug(1),
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/contributors`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            login: faker.lorem.slug(1),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.internet.url(),
            gists_url: faker.internet.url(),
            starred_url: faker.internet.url(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(1),
            site_admin: faker.datatype.boolean(),
            contributions: faker.datatype.number(),
            email: faker.internet.email(),
            name: faker.name.findName(),
          }))
        ),
      ],
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/deployments`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: 'https://api.github.com/repos/octocat/example/deployments/1',
            id: 42,
            node_id: 'MDEwOkRlcGxveW1lbnQx',
            sha: 'a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d',
            ref: 'topic-branch',
            task: 'deploy',
            payload: null,
            original_environment: 'staging',
            environment: 'production',
            description: 'Deploy request from hubot',
            creator: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: '2012-07-20T01:19:13Z',
            updated_at: '2012-07-20T01:19:13Z',
            statuses_url:
              'https://api.github.com/repos/octocat/example/deployments/1/statuses',
            repository_url: 'https://api.github.com/repos/octocat/example',
            transient_environment: true,
            production_environment: true,
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/deployments`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          url: 'https://api.github.com/repos/octocat/example/deployments/1',
          id: 42,
          node_id: 'MDEwOkRlcGxveW1lbnQx',
          sha: 'a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d',
          ref: 'topic-branch',
          task: 'deploy',
          payload: null,
          original_environment: 'staging',
          environment: 'production',
          description: 'Deploy request from hubot',
          creator: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          created_at: '2012-07-20T01:19:13Z',
          updated_at: '2012-07-20T01:19:13Z',
          statuses_url:
            'https://api.github.com/repos/octocat/example/deployments/1/statuses',
          repository_url: 'https://api.github.com/repos/octocat/example',
          transient_environment: true,
          production_environment: true,
          performed_via_github_app: {
            id: 37,
            slug: 'probot-owners',
            node_id: 'MDExOkludGVncmF0aW9uMQ==',
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            name: 'Probot Owners',
            description: 'The description of the app.',
            external_url: 'https://example.com',
            html_url: 'https://github.com/apps/super-ci',
            created_at: '2017-07-08T16:18:44-04:00',
            updated_at: '2017-07-08T16:18:44-04:00',
            permissions: { issues: 'read', deployments: 'write' },
            events: ['label', 'deployment'],
            installations_count: 5,
            client_id: '"Iv1.25b5d1e65ffc4022"',
            client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
            webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
            pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
          },
        }),
      ],
      [
        ctx.status(202),
        ctx.json({
          message: faker.lorem.slug(1),
        }),
      ],
      [ctx.status(409), ctx.json(null)],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/deployments/:deploymentId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/example/deployments/1',
            id: 42,
            node_id: 'MDEwOkRlcGxveW1lbnQx',
            sha: 'a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d',
            ref: 'topic-branch',
            task: 'deploy',
            payload: null,
            original_environment: 'staging',
            environment: 'production',
            description: 'Deploy request from hubot',
            creator: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: '2012-07-20T01:19:13Z',
            updated_at: '2012-07-20T01:19:13Z',
            statuses_url:
              'https://api.github.com/repos/octocat/example/deployments/1/statuses',
            repository_url: 'https://api.github.com/repos/octocat/example',
            transient_environment: true,
            production_environment: true,
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/deployments/:deploymentId`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/deployments/:deploymentId/statuses`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              url: 'https://api.github.com/repos/octocat/example/deployments/42/statuses/1',
              id: 1,
              node_id: 'MDE2OkRlcGxveW1lbnRTdGF0dXMx',
              state: 'success',
              creator: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              description: 'Deployment finished successfully.',
              environment: 'production',
              target_url: 'https://example.com/deployment/42/output',
              created_at: '2012-07-20T01:19:13Z',
              updated_at: '2012-07-20T01:19:13Z',
              deployment_url:
                'https://api.github.com/repos/octocat/example/deployments/42',
              repository_url: 'https://api.github.com/repos/octocat/example',
              environment_url: 'https://staging.example.com/',
              log_url: 'https://example.com/deployment/42/output',
              performed_via_github_app: {
                id: 37,
                slug: 'probot-owners',
                node_id: 'MDExOkludGVncmF0aW9uMQ==',
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                name: 'Probot Owners',
                description: 'The description of the app.',
                external_url: 'https://example.com',
                html_url: 'https://github.com/apps/super-ci',
                created_at: '2017-07-08T16:18:44-04:00',
                updated_at: '2017-07-08T16:18:44-04:00',
                permissions: { issues: 'read', deployments: 'write' },
                events: ['label', 'deployment'],
                installations_count: 5,
                client_id: '"Iv1.25b5d1e65ffc4022"',
                client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
              },
            }))
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/deployments/:deploymentId/statuses`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/example/deployments/42/statuses/1',
            id: 1,
            node_id: 'MDE2OkRlcGxveW1lbnRTdGF0dXMx',
            state: 'success',
            creator: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            description: 'Deployment finished successfully.',
            environment: 'production',
            target_url: 'https://example.com/deployment/42/output',
            created_at: '2012-07-20T01:19:13Z',
            updated_at: '2012-07-20T01:19:13Z',
            deployment_url:
              'https://api.github.com/repos/octocat/example/deployments/42',
            repository_url: 'https://api.github.com/repos/octocat/example',
            environment_url: 'https://staging.example.com/',
            log_url: 'https://example.com/deployment/42/output',
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/deployments/:deploymentId/statuses/:statusId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/example/deployments/42/statuses/1',
            id: 1,
            node_id: 'MDE2OkRlcGxveW1lbnRTdGF0dXMx',
            state: 'success',
            creator: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            description: 'Deployment finished successfully.',
            environment: 'production',
            target_url: 'https://example.com/deployment/42/output',
            created_at: '2012-07-20T01:19:13Z',
            updated_at: '2012-07-20T01:19:13Z',
            deployment_url:
              'https://api.github.com/repos/octocat/example/deployments/42',
            repository_url: 'https://api.github.com/repos/octocat/example',
            environment_url: 'https://staging.example.com/',
            log_url: 'https://example.com/deployment/42/output',
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(`${baseURL}/repos/:owner/:repo/dispatches`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/environments`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: 5,
          environments: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 56780428,
            node_id: 'MDExOkVudmlyb25tZW50NTY3ODA0Mjg=',
            name: 'staging',
            url: 'https://api.github.com/repos/github/hello-world/environments/staging',
            html_url:
              'https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging',
            created_at: '2020-11-23T22:00:40Z',
            updated_at: '2020-11-23T22:00:40Z',
            protection_rules: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            deployment_branch_policy: {
              protected_branches: faker.datatype.boolean(),
              custom_branch_policies: faker.datatype.boolean(),
            },
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/environments/:environmentName`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 56780428,
            node_id: 'MDExOkVudmlyb25tZW50NTY3ODA0Mjg=',
            name: 'staging',
            url: 'https://api.github.com/repos/github/hello-world/environments/staging',
            html_url:
              'https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging',
            created_at: '2020-11-23T22:00:40Z',
            updated_at: '2020-11-23T22:00:40Z',
            protection_rules: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            deployment_branch_policy: {
              protected_branches: faker.datatype.boolean(),
              custom_branch_policies: faker.datatype.boolean(),
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/environments/:environmentName`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 56780428,
            node_id: 'MDExOkVudmlyb25tZW50NTY3ODA0Mjg=',
            name: 'staging',
            url: 'https://api.github.com/repos/github/hello-world/environments/staging',
            html_url:
              'https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging',
            created_at: '2020-11-23T22:00:40Z',
            updated_at: '2020-11-23T22:00:40Z',
            protection_rules: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            deployment_branch_policy: {
              protected_branches: faker.datatype.boolean(),
              custom_branch_policies: faker.datatype.boolean(),
            },
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/environments/:environmentName`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/environments/:environmentName/deployment-branch-policies`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: 2,
            branch_policies: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 361471,
              node_id: 'MDE2OkdhdGVCcmFuY2hQb2xpY3kzNjE0NzE=',
              name: 'release/*',
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/environments/:environmentName/deployment-branch-policies`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 361471,
            node_id: 'MDE2OkdhdGVCcmFuY2hQb2xpY3kzNjE0NzE=',
            name: 'release/*',
          }),
        ],
        [ctx.status(303), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/environments/:environmentName/deployment-branch-policies/:branchPolicyId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 361471,
            node_id: 'MDE2OkdhdGVCcmFuY2hQb2xpY3kzNjE0NzE=',
            name: 'release/*',
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/environments/:environmentName/deployment-branch-policies/:branchPolicyId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 361471,
            node_id: 'MDE2OkdhdGVCcmFuY2hQb2xpY3kzNjE0NzE=',
            name: 'release/*',
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/environments/:environmentName/deployment-branch-policies/:branchPolicyId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/events`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.lorem.slug(1),
            type: faker.lorem.slug(1),
            actor: {
              id: faker.datatype.number(),
              login: faker.lorem.slug(1),
              display_login: faker.lorem.slug(1),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              avatar_url: faker.internet.url(),
            },
            repo: {
              id: faker.datatype.number(),
              name: faker.name.findName(),
              url: faker.internet.url(),
            },
            org: {
              id: faker.datatype.number(),
              login: faker.lorem.slug(1),
              display_login: faker.lorem.slug(1),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              avatar_url: faker.internet.url(),
            },
            payload: {
              action: faker.lorem.slug(1),
              issue: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                url: 'https://api.github.com/repositories/42/issues/1',
                repository_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                events_url: faker.internet.url(),
                html_url: faker.internet.url(),
                number: 42,
                state: 'open',
                state_reason: 'not_planned',
                title: 'Widget creation fails in Safari on OS X 10.8',
                body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                labels: ['bug', 'registration'],
                assignee: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                assignees: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                })),
                milestone: {
                  url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
                  html_url:
                    'https://github.com/octocat/Hello-World/milestones/v1.0',
                  labels_url:
                    'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
                  id: 1002604,
                  node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
                  number: 42,
                  state: 'open',
                  title: 'v1.0',
                  description: 'Tracking milestone for version 1.0',
                  creator: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  open_issues: 4,
                  closed_issues: 8,
                  created_at: '2011-04-10T20:09:31Z',
                  updated_at: '2014-03-03T18:58:10Z',
                  closed_at: '2013-02-12T13:22:01Z',
                  due_on: '2012-10-09T23:39:01Z',
                },
                locked: faker.datatype.boolean(),
                active_lock_reason: faker.lorem.slug(1),
                comments: faker.datatype.number(),
                pull_request: {
                  merged_at: faker.date.past(),
                  diff_url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  patch_url: faker.internet.url(),
                  url: faker.internet.url(),
                },
                closed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                draft: faker.datatype.boolean(),
                closed_by: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                body_html: faker.lorem.slug(1),
                body_text: faker.lorem.slug(1),
                timeline_url: faker.internet.url(),
                repository: {
                  id: 42,
                  node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                  name: 'Team Environment',
                  full_name: 'octocat/Hello-World',
                  license: {
                    key: 'mit',
                    name: 'MIT License',
                    url: 'https://api.github.com/licenses/mit',
                    spdx_id: 'MIT',
                    node_id: 'MDc6TGljZW5zZW1pdA==',
                    html_url: faker.internet.url(),
                  },
                  organization: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  forks: faker.datatype.number(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                  },
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  private: faker.datatype.boolean(),
                  html_url: 'https://github.com/octocat/Hello-World',
                  description: 'This your first repo!',
                  fork: faker.datatype.boolean(),
                  url: 'https://api.github.com/repos/octocat/Hello-World',
                  archive_url:
                    'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                  assignees_url:
                    'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                  blobs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                  branches_url:
                    'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                  collaborators_url:
                    'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                  comments_url:
                    'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                  commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                  compare_url:
                    'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                  contents_url:
                    'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                  contributors_url:
                    'http://api.github.com/repos/octocat/Hello-World/contributors',
                  deployments_url:
                    'http://api.github.com/repos/octocat/Hello-World/deployments',
                  downloads_url:
                    'http://api.github.com/repos/octocat/Hello-World/downloads',
                  events_url:
                    'http://api.github.com/repos/octocat/Hello-World/events',
                  forks_url:
                    'http://api.github.com/repos/octocat/Hello-World/forks',
                  git_commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                  git_refs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                  git_tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                  git_url: 'git:github.com/octocat/Hello-World.git',
                  issue_comment_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                  issue_events_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                  issues_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                  keys_url:
                    'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                  labels_url:
                    'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                  languages_url:
                    'http://api.github.com/repos/octocat/Hello-World/languages',
                  merges_url:
                    'http://api.github.com/repos/octocat/Hello-World/merges',
                  milestones_url:
                    'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                  notifications_url:
                    'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                  pulls_url:
                    'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                  releases_url:
                    'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                  ssh_url: 'git@github.com:octocat/Hello-World.git',
                  stargazers_url:
                    'http://api.github.com/repos/octocat/Hello-World/stargazers',
                  statuses_url:
                    'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                  subscribers_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscribers',
                  subscription_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscription',
                  tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/tags',
                  teams_url:
                    'http://api.github.com/repos/octocat/Hello-World/teams',
                  trees_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                  clone_url: 'https://github.com/octocat/Hello-World.git',
                  mirror_url: 'git:git.example.com/octocat/Hello-World',
                  hooks_url:
                    'http://api.github.com/repos/octocat/Hello-World/hooks',
                  svn_url: 'https://svn.github.com/octocat/Hello-World',
                  homepage: 'https://github.com',
                  language: faker.lorem.slug(1),
                  forks_count: 9,
                  stargazers_count: 80,
                  watchers_count: 80,
                  size: 108,
                  default_branch: 'master',
                  open_issues_count: faker.datatype.number(),
                  is_template: true,
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: true,
                  has_projects: true,
                  has_wiki: true,
                  has_pages: faker.datatype.boolean(),
                  has_downloads: true,
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: '2011-01-26T19:06:43Z',
                  created_at: '2011-01-26T19:01:12Z',
                  updated_at: '2011-01-26T19:14:43Z',
                  allow_rebase_merge: true,
                  template_repository: {
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    name: faker.name.findName(),
                    full_name: faker.name.findName(),
                    owner: {
                      login: faker.lorem.slug(1),
                      id: faker.datatype.number(),
                      node_id: faker.lorem.slug(1),
                      avatar_url: faker.internet.url(),
                      gravatar_id: faker.lorem.slug(1),
                      url: faker.internet.url(),
                      html_url: faker.internet.url(),
                      followers_url: faker.internet.url(),
                      following_url: faker.internet.url(),
                      gists_url: faker.internet.url(),
                      starred_url: faker.internet.url(),
                      subscriptions_url: faker.internet.url(),
                      organizations_url: faker.internet.url(),
                      repos_url: faker.internet.url(),
                      events_url: faker.internet.url(),
                      received_events_url: faker.internet.url(),
                      type: faker.lorem.slug(1),
                      site_admin: faker.datatype.boolean(),
                    },
                    private: faker.datatype.boolean(),
                    html_url: faker.internet.url(),
                    description: faker.lorem.slug(1),
                    fork: faker.datatype.boolean(),
                    url: faker.internet.url(),
                    archive_url: faker.internet.url(),
                    assignees_url: faker.internet.url(),
                    blobs_url: faker.internet.url(),
                    branches_url: faker.internet.url(),
                    collaborators_url: faker.internet.url(),
                    comments_url: faker.internet.url(),
                    commits_url: faker.internet.url(),
                    compare_url: faker.internet.url(),
                    contents_url: faker.internet.url(),
                    contributors_url: faker.internet.url(),
                    deployments_url: faker.internet.url(),
                    downloads_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    forks_url: faker.internet.url(),
                    git_commits_url: faker.internet.url(),
                    git_refs_url: faker.internet.url(),
                    git_tags_url: faker.internet.url(),
                    git_url: faker.internet.url(),
                    issue_comment_url: faker.internet.url(),
                    issue_events_url: faker.internet.url(),
                    issues_url: faker.internet.url(),
                    keys_url: faker.internet.url(),
                    labels_url: faker.internet.url(),
                    languages_url: faker.internet.url(),
                    merges_url: faker.internet.url(),
                    milestones_url: faker.internet.url(),
                    notifications_url: faker.internet.url(),
                    pulls_url: faker.internet.url(),
                    releases_url: faker.internet.url(),
                    ssh_url: faker.internet.url(),
                    stargazers_url: faker.internet.url(),
                    statuses_url: faker.internet.url(),
                    subscribers_url: faker.internet.url(),
                    subscription_url: faker.internet.url(),
                    tags_url: faker.internet.url(),
                    teams_url: faker.internet.url(),
                    trees_url: faker.internet.url(),
                    clone_url: faker.internet.url(),
                    mirror_url: faker.internet.url(),
                    hooks_url: faker.internet.url(),
                    svn_url: faker.internet.url(),
                    homepage: faker.lorem.slug(1),
                    language: faker.lorem.slug(1),
                    forks_count: faker.datatype.number(),
                    stargazers_count: faker.datatype.number(),
                    watchers_count: faker.datatype.number(),
                    size: faker.datatype.number(),
                    default_branch: faker.lorem.slug(1),
                    open_issues_count: faker.datatype.number(),
                    is_template: faker.datatype.boolean(),
                    topics: [
                      ...new Array(
                        faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                      ).keys(),
                    ].map(_ => faker.lorem.slug(1)),
                    has_issues: faker.datatype.boolean(),
                    has_projects: faker.datatype.boolean(),
                    has_wiki: faker.datatype.boolean(),
                    has_pages: faker.datatype.boolean(),
                    has_downloads: faker.datatype.boolean(),
                    archived: faker.datatype.boolean(),
                    disabled: faker.datatype.boolean(),
                    visibility: faker.lorem.slug(1),
                    pushed_at: faker.date.past(),
                    created_at: faker.date.past(),
                    updated_at: faker.date.past(),
                    permissions: {
                      admin: faker.datatype.boolean(),
                      maintain: faker.datatype.boolean(),
                      push: faker.datatype.boolean(),
                      triage: faker.datatype.boolean(),
                      pull: faker.datatype.boolean(),
                    },
                    allow_rebase_merge: faker.datatype.boolean(),
                    temp_clone_token: faker.lorem.slug(1),
                    allow_squash_merge: faker.datatype.boolean(),
                    allow_auto_merge: faker.datatype.boolean(),
                    delete_branch_on_merge: faker.datatype.boolean(),
                    allow_update_branch: faker.datatype.boolean(),
                    allow_merge_commit: faker.datatype.boolean(),
                    subscribers_count: faker.datatype.number(),
                    network_count: faker.datatype.number(),
                  },
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: true,
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: true,
                  allow_forking: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                  open_issues: faker.datatype.number(),
                  watchers: faker.datatype.number(),
                  master_branch: faker.lorem.slug(1),
                  starred_at: '"2020-07-09T00:17:42Z"',
                  anonymous_access_enabled: faker.datatype.boolean(),
                },
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
                author_association: 'OWNER',
                reactions: {
                  url: faker.internet.url(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              },
              comment: {
                id: 42,
                node_id: faker.lorem.slug(1),
                url: 'https://api.github.com/repositories/42/issues/comments/1',
                body: 'What version of Safari were you using when you observed this bug?',
                body_text: faker.lorem.slug(1),
                body_html: faker.lorem.slug(1),
                html_url: faker.internet.url(),
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                created_at: '2011-04-14T16:00:49Z',
                updated_at: '2011-04-14T16:00:49Z',
                issue_url: faker.internet.url(),
                author_association: 'OWNER',
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
                reactions: {
                  url: faker.internet.url(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              },
              pages: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                page_name: faker.name.findName(),
                title: faker.lorem.slug(1),
                summary: faker.lorem.slug(1),
                action: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                html_url: faker.internet.url(),
              })),
            },
            public: faker.datatype.boolean(),
            created_at: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/forks`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 1296269,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Hello-World',
            full_name: 'octocat/Hello-World',
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: faker.internet.url(),
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: faker.internet.url(),
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(1),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: 'contributor_covenant',
              name: 'Contributor Covenant',
              url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
              body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(1),
              name: faker.name.findName(),
              spdx_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              node_id: faker.lorem.slug(1),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          }))
        ),
      ],
      [
        ctx.status(400),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/forks`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(202),
        ctx.json({
          id: 1296269,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Hello-World',
          full_name: 'octocat/Hello-World',
          owner: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          private: faker.datatype.boolean(),
          html_url: 'https://github.com/octocat/Hello-World',
          description: 'This your first repo!',
          fork: faker.datatype.boolean(),
          url: 'https://api.github.com/repos/octocat/Hello-World',
          archive_url:
            'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
          assignees_url:
            'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
          blobs_url:
            'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
          branches_url:
            'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
          collaborators_url:
            'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
          comments_url:
            'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
          commits_url:
            'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
          compare_url:
            'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
          contents_url:
            'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
          contributors_url:
            'http://api.github.com/repos/octocat/Hello-World/contributors',
          deployments_url:
            'http://api.github.com/repos/octocat/Hello-World/deployments',
          downloads_url:
            'http://api.github.com/repos/octocat/Hello-World/downloads',
          events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
          forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
          git_commits_url:
            'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
          git_refs_url:
            'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
          git_tags_url:
            'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
          git_url: 'git:github.com/octocat/Hello-World.git',
          issue_comment_url:
            'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
          issue_events_url:
            'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
          issues_url:
            'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
          keys_url:
            'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
          labels_url:
            'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
          languages_url:
            'http://api.github.com/repos/octocat/Hello-World/languages',
          merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
          milestones_url:
            'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
          notifications_url:
            'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
          pulls_url:
            'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
          releases_url:
            'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
          ssh_url: 'git@github.com:octocat/Hello-World.git',
          stargazers_url:
            'http://api.github.com/repos/octocat/Hello-World/stargazers',
          statuses_url:
            'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
          subscribers_url:
            'http://api.github.com/repos/octocat/Hello-World/subscribers',
          subscription_url:
            'http://api.github.com/repos/octocat/Hello-World/subscription',
          tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
          teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
          trees_url:
            'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
          clone_url: 'https://github.com/octocat/Hello-World.git',
          mirror_url: 'git:git.example.com/octocat/Hello-World',
          hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
          svn_url: 'https://svn.github.com/octocat/Hello-World',
          homepage: 'https://github.com',
          language: faker.lorem.slug(1),
          forks_count: 9,
          stargazers_count: 80,
          watchers_count: 80,
          size: 108,
          default_branch: 'master',
          open_issues_count: faker.datatype.number(),
          is_template: true,
          topics: ['octocat', 'atom', 'electron', 'API'],
          has_issues: true,
          has_projects: true,
          has_wiki: true,
          has_pages: faker.datatype.boolean(),
          has_downloads: true,
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: 'public',
          pushed_at: '2011-01-26T19:06:43Z',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:14:43Z',
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: true,
          template_repository: {
            id: 42,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Team Environment',
            full_name: 'octocat/Hello-World',
            license: {
              key: 'mit',
              name: 'MIT License',
              url: 'https://api.github.com/licenses/mit',
              spdx_id: 'MIT',
              node_id: 'MDc6TGljZW5zZW1pdA==',
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: 'git:github.com/octocat/Hello-World.git',
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: 'git@github.com:octocat/Hello-World.git',
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: 'https://github.com/octocat/Hello-World.git',
            mirror_url: 'git:git.example.com/octocat/Hello-World',
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: 'https://svn.github.com/octocat/Hello-World',
            homepage: 'https://github.com',
            language: faker.lorem.slug(1),
            forks_count: 9,
            stargazers_count: 80,
            watchers_count: 80,
            size: 108,
            default_branch: 'master',
            open_issues_count: faker.datatype.number(),
            is_template: true,
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: true,
            has_projects: true,
            has_wiki: true,
            has_pages: faker.datatype.boolean(),
            has_downloads: true,
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            allow_rebase_merge: true,
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              full_name: faker.name.findName(),
              owner: {
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              git_url: faker.internet.url(),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              notifications_url: faker.internet.url(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              ssh_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: faker.date.past(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: true,
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: true,
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(1),
            starred_at: '"2020-07-09T00:17:42Z"',
            anonymous_access_enabled: faker.datatype.boolean(),
          },
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: true,
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: true,
          allow_update_branch: true,
          allow_forking: true,
          subscribers_count: 42,
          network_count: faker.datatype.number(),
          license: {
            key: 'mit',
            name: 'MIT License',
            url: 'https://api.github.com/licenses/mit',
            spdx_id: 'MIT',
            node_id: 'MDc6TGljZW5zZW1pdA==',
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          parent: {
            id: 42,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Team Environment',
            full_name: 'octocat/Hello-World',
            license: {
              key: 'mit',
              name: 'MIT License',
              url: 'https://api.github.com/licenses/mit',
              spdx_id: 'MIT',
              node_id: 'MDc6TGljZW5zZW1pdA==',
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: 'git:github.com/octocat/Hello-World.git',
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: 'git@github.com:octocat/Hello-World.git',
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: 'https://github.com/octocat/Hello-World.git',
            mirror_url: 'git:git.example.com/octocat/Hello-World',
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: 'https://svn.github.com/octocat/Hello-World',
            homepage: 'https://github.com',
            language: faker.lorem.slug(1),
            forks_count: 9,
            stargazers_count: 80,
            watchers_count: 80,
            size: 108,
            default_branch: 'master',
            open_issues_count: faker.datatype.number(),
            is_template: true,
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: true,
            has_projects: true,
            has_wiki: true,
            has_pages: faker.datatype.boolean(),
            has_downloads: true,
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            allow_rebase_merge: true,
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              full_name: faker.name.findName(),
              owner: {
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              git_url: faker.internet.url(),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              notifications_url: faker.internet.url(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              ssh_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: faker.date.past(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: true,
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: true,
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(1),
            starred_at: '"2020-07-09T00:17:42Z"',
            anonymous_access_enabled: faker.datatype.boolean(),
          },
          source: {
            id: 42,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Team Environment',
            full_name: 'octocat/Hello-World',
            license: {
              key: 'mit',
              name: 'MIT License',
              url: 'https://api.github.com/licenses/mit',
              spdx_id: 'MIT',
              node_id: 'MDc6TGljZW5zZW1pdA==',
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: 'git:github.com/octocat/Hello-World.git',
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: 'git@github.com:octocat/Hello-World.git',
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: 'https://github.com/octocat/Hello-World.git',
            mirror_url: 'git:git.example.com/octocat/Hello-World',
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: 'https://svn.github.com/octocat/Hello-World',
            homepage: 'https://github.com',
            language: faker.lorem.slug(1),
            forks_count: 9,
            stargazers_count: 80,
            watchers_count: 80,
            size: 108,
            default_branch: 'master',
            open_issues_count: faker.datatype.number(),
            is_template: true,
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: true,
            has_projects: true,
            has_wiki: true,
            has_pages: faker.datatype.boolean(),
            has_downloads: true,
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            allow_rebase_merge: true,
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              full_name: faker.name.findName(),
              owner: {
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              git_url: faker.internet.url(),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              notifications_url: faker.internet.url(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              ssh_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: faker.date.past(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: true,
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: true,
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(1),
            starred_at: '"2020-07-09T00:17:42Z"',
            anonymous_access_enabled: faker.datatype.boolean(),
          },
          forks: faker.datatype.number(),
          master_branch: faker.lorem.slug(1),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          anonymous_access_enabled: faker.datatype.boolean(),
          code_of_conduct: {
            url: 'https://api.github.com/repos/github/docs/community/code_of_conduct',
            key: 'citizen_code_of_conduct',
            name: 'Citizen Code of Conduct',
            html_url:
              'https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md',
          },
          security_and_analysis: {
            advanced_security: {
              status: faker.helpers.arrayElement(['enabled', 'disabled']),
            },
            secret_scanning: {
              status: faker.helpers.arrayElement(['enabled', 'disabled']),
            },
            secret_scanning_push_protection: {
              status: faker.helpers.arrayElement(['enabled', 'disabled']),
            },
          },
        }),
      ],
      [
        ctx.status(400),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/git/blobs`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          url: faker.internet.url(),
          sha: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(409),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/git/blobs/:fileSha`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            content: faker.lorem.slug(1),
            encoding: faker.lorem.slug(1),
            url: faker.internet.url(),
            sha: faker.lorem.slug(1),
            size: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            highlighted_content: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(`${baseURL}/repos/:owner/:repo/git/commits`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
          node_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          author: {
            date: '2014-08-09T08:02:04+12:00',
            email: 'monalisa.octocat@example.com',
            name: 'Monalisa Octocat',
          },
          committer: {
            date: '2014-08-09T08:02:04+12:00',
            email: 'monalisa.octocat@example.com',
            name: 'Monalisa Octocat',
          },
          message: 'Fix #42',
          tree: {
            sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
            url: faker.internet.url(),
          },
          parents: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
            url: faker.internet.url(),
            html_url: faker.internet.url(),
          })),
          verification: {
            verified: faker.datatype.boolean(),
            reason: faker.lorem.slug(1),
            signature: faker.lorem.slug(1),
            payload: faker.lorem.slug(1),
          },
          html_url: faker.internet.url(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/git/commits/:commitSha`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
            node_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            author: {
              date: '2014-08-09T08:02:04+12:00',
              email: 'monalisa.octocat@example.com',
              name: 'Monalisa Octocat',
            },
            committer: {
              date: '2014-08-09T08:02:04+12:00',
              email: 'monalisa.octocat@example.com',
              name: 'Monalisa Octocat',
            },
            message: 'Fix #42',
            tree: {
              sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
              url: faker.internet.url(),
            },
            parents: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
              url: faker.internet.url(),
              html_url: faker.internet.url(),
            })),
            verification: {
              verified: faker.datatype.boolean(),
              reason: faker.lorem.slug(1),
              signature: faker.lorem.slug(1),
              payload: faker.lorem.slug(1),
            },
            html_url: faker.internet.url(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/git/matching-refs/:ref`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              ref: faker.lorem.slug(1),
              node_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              object: {
                type: faker.lorem.slug(1),
                sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
                url: faker.internet.url(),
              },
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/git/ref/:ref`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          ref: faker.lorem.slug(1),
          node_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          object: {
            type: faker.lorem.slug(1),
            sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
            url: faker.internet.url(),
          },
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/git/refs`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          ref: faker.lorem.slug(1),
          node_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          object: {
            type: faker.lorem.slug(1),
            sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
            url: faker.internet.url(),
          },
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/repos/:owner/:repo/git/refs/:ref`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          ref: faker.lorem.slug(1),
          node_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          object: {
            type: faker.lorem.slug(1),
            sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
            url: faker.internet.url(),
          },
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/repos/:owner/:repo/git/refs/:ref`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/git/tags`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          node_id:
            'MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==',
          tag: 'v0.0.1',
          sha: '940bd336248efae0f9ee5bc7b2d5c985887b16ac',
          url: 'https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac',
          message: 'Initial public release',
          tagger: {
            date: faker.lorem.slug(1),
            email: faker.internet.email(),
            name: faker.name.findName(),
          },
          object: {
            sha: faker.lorem.slug(1),
            type: faker.lorem.slug(1),
            url: faker.internet.url(),
          },
          verification: {
            verified: faker.datatype.boolean(),
            reason: faker.lorem.slug(1),
            payload: faker.lorem.slug(1),
            signature: faker.lorem.slug(1),
          },
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/git/tags/:tagSha`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          node_id:
            'MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==',
          tag: 'v0.0.1',
          sha: '940bd336248efae0f9ee5bc7b2d5c985887b16ac',
          url: 'https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac',
          message: 'Initial public release',
          tagger: {
            date: faker.lorem.slug(1),
            email: faker.internet.email(),
            name: faker.name.findName(),
          },
          object: {
            sha: faker.lorem.slug(1),
            type: faker.lorem.slug(1),
            url: faker.internet.url(),
          },
          verification: {
            verified: faker.datatype.boolean(),
            reason: faker.lorem.slug(1),
            payload: faker.lorem.slug(1),
            signature: faker.lorem.slug(1),
          },
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/git/trees`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          sha: faker.lorem.slug(1),
          url: faker.internet.url(),
          truncated: faker.datatype.boolean(),
          tree: [
            {
              path: 'file.rb',
              mode: '100644',
              type: 'blob',
              size: 30,
              sha: '44b4fc6d56897b048c772eb4087f854f46256132',
              url: 'https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132',
              properties: {
                path: { type: 'string' },
                mode: { type: 'string' },
                type: { type: 'string' },
                size: { type: 'integer' },
                sha: { type: 'string' },
                url: { type: 'string' },
              },
              required: ['path', 'mode', 'type', 'sha', 'url', 'size'],
            },
          ],
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/git/trees/:treeSha`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            sha: faker.lorem.slug(1),
            url: faker.internet.url(),
            truncated: faker.datatype.boolean(),
            tree: [
              {
                path: 'file.rb',
                mode: '100644',
                type: 'blob',
                size: 30,
                sha: '44b4fc6d56897b048c772eb4087f854f46256132',
                url: 'https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132',
                properties: {
                  path: { type: 'string' },
                  mode: { type: 'string' },
                  type: { type: 'string' },
                  size: { type: 'integer' },
                  sha: { type: 'string' },
                  url: { type: 'string' },
                },
                required: ['path', 'mode', 'type', 'sha', 'url', 'size'],
              },
            ],
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/hooks`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            type: faker.lorem.slug(1),
            id: 42,
            name: 'web',
            active: true,
            events: ['push', 'pull_request'],
            config: {
              email: '"foo@bar.com"',
              password: '"foo"',
              room: '"roomer"',
              subdomain: '"foo"',
              url: 'https://example.com/webhook',
              insecure_ssl: null,
              content_type: '"json"',
              digest: '"sha256"',
              secret: '"********"',
              token: '"abc"',
            },
            updated_at: '2011-09-06T20:39:23Z',
            created_at: '2011-09-06T17:26:27Z',
            url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1',
            test_url:
              'https://api.github.com/repos/octocat/Hello-World/hooks/1/test',
            ping_url:
              'https://api.github.com/repos/octocat/Hello-World/hooks/1/pings',
            deliveries_url:
              'https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries',
            last_response: {
              code: faker.datatype.number(),
              status: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
            },
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/hooks`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          type: faker.lorem.slug(1),
          id: 42,
          name: 'web',
          active: true,
          events: ['push', 'pull_request'],
          config: {
            email: '"foo@bar.com"',
            password: '"foo"',
            room: '"roomer"',
            subdomain: '"foo"',
            url: 'https://example.com/webhook',
            insecure_ssl: null,
            content_type: '"json"',
            digest: '"sha256"',
            secret: '"********"',
            token: '"abc"',
          },
          updated_at: '2011-09-06T20:39:23Z',
          created_at: '2011-09-06T17:26:27Z',
          url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1',
          test_url:
            'https://api.github.com/repos/octocat/Hello-World/hooks/1/test',
          ping_url:
            'https://api.github.com/repos/octocat/Hello-World/hooks/1/pings',
          deliveries_url:
            'https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries',
          last_response: {
            code: faker.datatype.number(),
            status: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
          },
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/hooks/:hookId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          type: faker.lorem.slug(1),
          id: 42,
          name: 'web',
          active: true,
          events: ['push', 'pull_request'],
          config: {
            email: '"foo@bar.com"',
            password: '"foo"',
            room: '"roomer"',
            subdomain: '"foo"',
            url: 'https://example.com/webhook',
            insecure_ssl: null,
            content_type: '"json"',
            digest: '"sha256"',
            secret: '"********"',
            token: '"abc"',
          },
          updated_at: '2011-09-06T20:39:23Z',
          created_at: '2011-09-06T17:26:27Z',
          url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1',
          test_url:
            'https://api.github.com/repos/octocat/Hello-World/hooks/1/test',
          ping_url:
            'https://api.github.com/repos/octocat/Hello-World/hooks/1/pings',
          deliveries_url:
            'https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries',
          last_response: {
            code: faker.datatype.number(),
            status: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
          },
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/repos/:owner/:repo/hooks/:hookId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          type: faker.lorem.slug(1),
          id: 42,
          name: 'web',
          active: true,
          events: ['push', 'pull_request'],
          config: {
            email: '"foo@bar.com"',
            password: '"foo"',
            room: '"roomer"',
            subdomain: '"foo"',
            url: 'https://example.com/webhook',
            insecure_ssl: null,
            content_type: '"json"',
            digest: '"sha256"',
            secret: '"********"',
            token: '"abc"',
          },
          updated_at: '2011-09-06T20:39:23Z',
          created_at: '2011-09-06T17:26:27Z',
          url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1',
          test_url:
            'https://api.github.com/repos/octocat/Hello-World/hooks/1/test',
          ping_url:
            'https://api.github.com/repos/octocat/Hello-World/hooks/1/pings',
          deliveries_url:
            'https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries',
          last_response: {
            code: faker.datatype.number(),
            status: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
          },
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/repos/:owner/:repo/hooks/:hookId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/hooks/:hookId/config`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://example.com/webhook',
            content_type: '"json"',
            secret: '"********"',
            insecure_ssl: null,
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/repos/:owner/:repo/hooks/:hookId/config`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://example.com/webhook',
            content_type: '"json"',
            secret: '"********"',
            insecure_ssl: null,
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/hooks/:hookId/deliveries`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 42,
              guid: '58474f00-b361-11eb-836d-0e4f3503ccbe',
              delivered_at: '2021-05-12T20:33:44Z',
              redelivery: faker.datatype.boolean(),
              duration: 0.03,
              status: 'failed to connect',
              status_code: 502,
              event: 'issues',
              action: 'opened',
              installation_id: 123,
              repository_id: 123,
            }))
          ),
        ],
        [
          ctx.status(400),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/hooks/:hookId/deliveries/:deliveryId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 42,
            guid: '58474f00-b361-11eb-836d-0e4f3503ccbe',
            delivered_at: '2021-05-12T20:33:44Z',
            redelivery: faker.datatype.boolean(),
            duration: 0.03,
            status: 'failed to connect',
            status_code: 502,
            event: 'issues',
            action: 'opened',
            installation_id: 123,
            repository_id: 123,
            url: 'https://www.example.com',
            request: {
              headers: {},
              payload: {},
            },
            response: {
              headers: {},
              payload: faker.lorem.slug(1),
            },
          }),
        ],
        [
          ctx.status(400),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/hooks/:hookId/deliveries/:deliveryId/attempts`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(202), ctx.json({})],
        [
          ctx.status(400),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/hooks/:hookId/pings`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/hooks/:hookId/tests`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/installation`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 1,
          account: null,
          repository_selection: faker.helpers.arrayElement(['all', 'selected']),
          access_tokens_url:
            'https://api.github.com/installations/1/access_tokens',
          repositories_url: 'https://api.github.com/installation/repositories',
          html_url:
            'https://github.com/organizations/github/settings/installations/1',
          app_id: 1,
          target_id: faker.datatype.number(),
          target_type: 'Organization',
          permissions: {
            contents: 'read',
            issues: 'read',
            deployments: 'write',
            single_file: 'read',
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          single_file_name: 'config.yaml',
          has_multiple_single_files: true,
          single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
          app_slug: 'github-actions',
          suspended_by: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          suspended_at: faker.date.past(),
          contact_email: '"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"',
        }),
      ],
      [
        ctx.status(301),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/invitations`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 42,
            repository: {
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: faker.internet.url(),
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: faker.internet.url(),
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: 'contributor_covenant',
                name: 'Contributor Covenant',
                url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                html_url: faker.internet.url(),
              },
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                spdx_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                node_id: faker.lorem.slug(1),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            invitee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            inviter: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            permissions: 'read',
            created_at: '2016-06-13T14:52:50-05:00',
            expired: faker.datatype.boolean(),
            url: 'https://api.github.com/user/repository-invitations/1',
            html_url: 'https://github.com/octocat/Hello-World/invitations',
            node_id: faker.lorem.slug(1),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(
    `${baseURL}/repos/:owner/:repo/invitations/:invitationId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 42,
            repository: {
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: faker.internet.url(),
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: faker.internet.url(),
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: 'contributor_covenant',
                name: 'Contributor Covenant',
                url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                html_url: faker.internet.url(),
              },
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                spdx_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                node_id: faker.lorem.slug(1),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            invitee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            inviter: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            permissions: 'read',
            created_at: '2016-06-13T14:52:50-05:00',
            expired: faker.datatype.boolean(),
            url: 'https://api.github.com/user/repository-invitations/1',
            html_url: 'https://github.com/octocat/Hello-World/invitations',
            node_id: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/invitations/:invitationId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/issues`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            url: 'https://api.github.com/repositories/42/issues/1',
            repository_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            number: 42,
            state: 'open',
            state_reason: 'not_planned',
            title: 'Widget creation fails in Safari on OS X 10.8',
            body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            labels: ['bug', 'registration'],
            assignee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            milestone: {
              url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
              html_url:
                'https://github.com/octocat/Hello-World/milestones/v1.0',
              labels_url:
                'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
              id: 1002604,
              node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
              number: 42,
              state: 'open',
              title: 'v1.0',
              description: 'Tracking milestone for version 1.0',
              creator: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              open_issues: 4,
              closed_issues: 8,
              created_at: '2011-04-10T20:09:31Z',
              updated_at: '2014-03-03T18:58:10Z',
              closed_at: '2013-02-12T13:22:01Z',
              due_on: '2012-10-09T23:39:01Z',
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(1),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.date.past(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            closed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            timeline_url: faker.internet.url(),
            repository: {
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            },
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
            author_association: 'OWNER',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }))
        ),
      ],
      [
        ctx.status(301),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/issues`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(1),
          url: 'https://api.github.com/repositories/42/issues/1',
          repository_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          events_url: faker.internet.url(),
          html_url: faker.internet.url(),
          number: 42,
          state: 'open',
          state_reason: 'not_planned',
          title: 'Widget creation fails in Safari on OS X 10.8',
          body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          labels: ['bug', 'registration'],
          assignee: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          assignees: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          })),
          milestone: {
            url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
            html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
            labels_url:
              'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
            id: 1002604,
            node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
            number: 42,
            state: 'open',
            title: 'v1.0',
            description: 'Tracking milestone for version 1.0',
            creator: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            open_issues: 4,
            closed_issues: 8,
            created_at: '2011-04-10T20:09:31Z',
            updated_at: '2014-03-03T18:58:10Z',
            closed_at: '2013-02-12T13:22:01Z',
            due_on: '2012-10-09T23:39:01Z',
          },
          locked: faker.datatype.boolean(),
          active_lock_reason: faker.lorem.slug(1),
          comments: faker.datatype.number(),
          pull_request: {
            merged_at: faker.date.past(),
            diff_url: faker.internet.url(),
            html_url: faker.internet.url(),
            patch_url: faker.internet.url(),
            url: faker.internet.url(),
          },
          closed_at: faker.date.past(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          draft: faker.datatype.boolean(),
          closed_by: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          body_html: faker.lorem.slug(1),
          body_text: faker.lorem.slug(1),
          timeline_url: faker.internet.url(),
          repository: {
            id: 42,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Team Environment',
            full_name: 'octocat/Hello-World',
            license: {
              key: 'mit',
              name: 'MIT License',
              url: 'https://api.github.com/licenses/mit',
              spdx_id: 'MIT',
              node_id: 'MDc6TGljZW5zZW1pdA==',
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: 'git:github.com/octocat/Hello-World.git',
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: 'git@github.com:octocat/Hello-World.git',
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: 'https://github.com/octocat/Hello-World.git',
            mirror_url: 'git:git.example.com/octocat/Hello-World',
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: 'https://svn.github.com/octocat/Hello-World',
            homepage: 'https://github.com',
            language: faker.lorem.slug(1),
            forks_count: 9,
            stargazers_count: 80,
            watchers_count: 80,
            size: 108,
            default_branch: 'master',
            open_issues_count: faker.datatype.number(),
            is_template: true,
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: true,
            has_projects: true,
            has_wiki: true,
            has_pages: faker.datatype.boolean(),
            has_downloads: true,
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            allow_rebase_merge: true,
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              full_name: faker.name.findName(),
              owner: {
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              git_url: faker.internet.url(),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              notifications_url: faker.internet.url(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              ssh_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: faker.date.past(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: true,
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: true,
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(1),
            starred_at: '"2020-07-09T00:17:42Z"',
            anonymous_access_enabled: faker.datatype.boolean(),
          },
          performed_via_github_app: {
            id: 37,
            slug: 'probot-owners',
            node_id: 'MDExOkludGVncmF0aW9uMQ==',
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            name: 'Probot Owners',
            description: 'The description of the app.',
            external_url: 'https://example.com',
            html_url: 'https://github.com/apps/super-ci',
            created_at: '2017-07-08T16:18:44-04:00',
            updated_at: '2017-07-08T16:18:44-04:00',
            permissions: { issues: 'read', deployments: 'write' },
            events: ['label', 'deployment'],
            installations_count: 5,
            client_id: '"Iv1.25b5d1e65ffc4022"',
            client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
            webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
            pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
          },
          author_association: 'OWNER',
          reactions: {
            url: faker.internet.url(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.lorem.slug(1),
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/issues/comments`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 42,
            node_id: faker.lorem.slug(1),
            url: 'https://api.github.com/repositories/42/issues/comments/1',
            body: 'What version of Safari were you using when you observed this bug?',
            body_text: faker.lorem.slug(1),
            body_html: faker.lorem.slug(1),
            html_url: faker.internet.url(),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: '2011-04-14T16:00:49Z',
            updated_at: '2011-04-14T16:00:49Z',
            issue_url: faker.internet.url(),
            author_association: 'OWNER',
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/issues/comments/:commentId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 42,
            node_id: faker.lorem.slug(1),
            url: 'https://api.github.com/repositories/42/issues/comments/1',
            body: 'What version of Safari were you using when you observed this bug?',
            body_text: faker.lorem.slug(1),
            body_html: faker.lorem.slug(1),
            html_url: faker.internet.url(),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: '2011-04-14T16:00:49Z',
            updated_at: '2011-04-14T16:00:49Z',
            issue_url: faker.internet.url(),
            author_association: 'OWNER',
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/repos/:owner/:repo/issues/comments/:commentId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 42,
            node_id: faker.lorem.slug(1),
            url: 'https://api.github.com/repositories/42/issues/comments/1',
            body: 'What version of Safari were you using when you observed this bug?',
            body_text: faker.lorem.slug(1),
            body_html: faker.lorem.slug(1),
            html_url: faker.internet.url(),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: '2011-04-14T16:00:49Z',
            updated_at: '2011-04-14T16:00:49Z',
            issue_url: faker.internet.url(),
            author_association: 'OWNER',
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/issues/comments/:commentId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/issues/comments/:commentId/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 1,
              node_id: 'MDg6UmVhY3Rpb24x',
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              content: 'heart',
              created_at: '2016-05-20T20:09:31Z',
            }))
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/issues/comments/:commentId/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 1,
            node_id: 'MDg6UmVhY3Rpb24x',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            content: 'heart',
            created_at: '2016-05-20T20:09:31Z',
          }),
        ],
        [
          ctx.status(201),
          ctx.json({
            id: 1,
            node_id: 'MDg6UmVhY3Rpb24x',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            content: 'heart',
            created_at: '2016-05-20T20:09:31Z',
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/issues/comments/:commentId/reactions/:reactionId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/issues/events`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 1,
            node_id: 'MDEwOklzc3VlRXZlbnQx',
            url: 'https://api.github.com/repos/octocat/Hello-World/issues/events/1',
            actor: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            event: 'closed',
            commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
            commit_url:
              'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            created_at: '2011-04-14T16:00:49Z',
            issue: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              url: 'https://api.github.com/repositories/42/issues/1',
              repository_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              events_url: faker.internet.url(),
              html_url: faker.internet.url(),
              number: 42,
              state: 'open',
              state_reason: 'not_planned',
              title: 'Widget creation fails in Safari on OS X 10.8',
              body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              labels: ['bug', 'registration'],
              assignee: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              assignees: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              })),
              milestone: {
                url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
                html_url:
                  'https://github.com/octocat/Hello-World/milestones/v1.0',
                labels_url:
                  'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
                id: 1002604,
                node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
                number: 42,
                state: 'open',
                title: 'v1.0',
                description: 'Tracking milestone for version 1.0',
                creator: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                open_issues: 4,
                closed_issues: 8,
                created_at: '2011-04-10T20:09:31Z',
                updated_at: '2014-03-03T18:58:10Z',
                closed_at: '2013-02-12T13:22:01Z',
                due_on: '2012-10-09T23:39:01Z',
              },
              locked: faker.datatype.boolean(),
              active_lock_reason: faker.lorem.slug(1),
              comments: faker.datatype.number(),
              pull_request: {
                merged_at: faker.date.past(),
                diff_url: faker.internet.url(),
                html_url: faker.internet.url(),
                patch_url: faker.internet.url(),
                url: faker.internet.url(),
              },
              closed_at: faker.date.past(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              draft: faker.datatype.boolean(),
              closed_by: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              body_html: faker.lorem.slug(1),
              body_text: faker.lorem.slug(1),
              timeline_url: faker.internet.url(),
              repository: {
                id: 42,
                node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                name: 'Team Environment',
                full_name: 'octocat/Hello-World',
                license: {
                  key: 'mit',
                  name: 'MIT License',
                  url: 'https://api.github.com/licenses/mit',
                  spdx_id: 'MIT',
                  node_id: 'MDc6TGljZW5zZW1pdA==',
                  html_url: faker.internet.url(),
                },
                organization: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                private: faker.datatype.boolean(),
                html_url: 'https://github.com/octocat/Hello-World',
                description: 'This your first repo!',
                fork: faker.datatype.boolean(),
                url: 'https://api.github.com/repos/octocat/Hello-World',
                archive_url:
                  'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                assignees_url:
                  'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                blobs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                branches_url:
                  'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                collaborators_url:
                  'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                comments_url:
                  'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                compare_url:
                  'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                contents_url:
                  'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                contributors_url:
                  'http://api.github.com/repos/octocat/Hello-World/contributors',
                deployments_url:
                  'http://api.github.com/repos/octocat/Hello-World/deployments',
                downloads_url:
                  'http://api.github.com/repos/octocat/Hello-World/downloads',
                events_url:
                  'http://api.github.com/repos/octocat/Hello-World/events',
                forks_url:
                  'http://api.github.com/repos/octocat/Hello-World/forks',
                git_commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                git_refs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                git_tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                git_url: 'git:github.com/octocat/Hello-World.git',
                issue_comment_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                issue_events_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                issues_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                keys_url:
                  'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                labels_url:
                  'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                languages_url:
                  'http://api.github.com/repos/octocat/Hello-World/languages',
                merges_url:
                  'http://api.github.com/repos/octocat/Hello-World/merges',
                milestones_url:
                  'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                notifications_url:
                  'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                pulls_url:
                  'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                releases_url:
                  'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                ssh_url: 'git@github.com:octocat/Hello-World.git',
                stargazers_url:
                  'http://api.github.com/repos/octocat/Hello-World/stargazers',
                statuses_url:
                  'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                subscribers_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscribers',
                subscription_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscription',
                tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/tags',
                teams_url:
                  'http://api.github.com/repos/octocat/Hello-World/teams',
                trees_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                clone_url: 'https://github.com/octocat/Hello-World.git',
                mirror_url: 'git:git.example.com/octocat/Hello-World',
                hooks_url:
                  'http://api.github.com/repos/octocat/Hello-World/hooks',
                svn_url: 'https://svn.github.com/octocat/Hello-World',
                homepage: 'https://github.com',
                language: faker.lorem.slug(1),
                forks_count: 9,
                stargazers_count: 80,
                watchers_count: 80,
                size: 108,
                default_branch: 'master',
                open_issues_count: faker.datatype.number(),
                is_template: true,
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: true,
                has_projects: true,
                has_wiki: true,
                has_pages: faker.datatype.boolean(),
                has_downloads: true,
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: '2011-01-26T19:06:43Z',
                created_at: '2011-01-26T19:01:12Z',
                updated_at: '2011-01-26T19:14:43Z',
                allow_rebase_merge: true,
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  name: faker.name.findName(),
                  full_name: faker.name.findName(),
                  owner: {
                    login: faker.lorem.slug(1),
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    avatar_url: faker.internet.url(),
                    gravatar_id: faker.lorem.slug(1),
                    url: faker.internet.url(),
                    html_url: faker.internet.url(),
                    followers_url: faker.internet.url(),
                    following_url: faker.internet.url(),
                    gists_url: faker.internet.url(),
                    starred_url: faker.internet.url(),
                    subscriptions_url: faker.internet.url(),
                    organizations_url: faker.internet.url(),
                    repos_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    received_events_url: faker.internet.url(),
                    type: faker.lorem.slug(1),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.internet.url(),
                  description: faker.lorem.slug(1),
                  fork: faker.datatype.boolean(),
                  url: faker.internet.url(),
                  archive_url: faker.internet.url(),
                  assignees_url: faker.internet.url(),
                  blobs_url: faker.internet.url(),
                  branches_url: faker.internet.url(),
                  collaborators_url: faker.internet.url(),
                  comments_url: faker.internet.url(),
                  commits_url: faker.internet.url(),
                  compare_url: faker.internet.url(),
                  contents_url: faker.internet.url(),
                  contributors_url: faker.internet.url(),
                  deployments_url: faker.internet.url(),
                  downloads_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  forks_url: faker.internet.url(),
                  git_commits_url: faker.internet.url(),
                  git_refs_url: faker.internet.url(),
                  git_tags_url: faker.internet.url(),
                  git_url: faker.internet.url(),
                  issue_comment_url: faker.internet.url(),
                  issue_events_url: faker.internet.url(),
                  issues_url: faker.internet.url(),
                  keys_url: faker.internet.url(),
                  labels_url: faker.internet.url(),
                  languages_url: faker.internet.url(),
                  merges_url: faker.internet.url(),
                  milestones_url: faker.internet.url(),
                  notifications_url: faker.internet.url(),
                  pulls_url: faker.internet.url(),
                  releases_url: faker.internet.url(),
                  ssh_url: faker.internet.url(),
                  stargazers_url: faker.internet.url(),
                  statuses_url: faker.internet.url(),
                  subscribers_url: faker.internet.url(),
                  subscription_url: faker.internet.url(),
                  tags_url: faker.internet.url(),
                  teams_url: faker.internet.url(),
                  trees_url: faker.internet.url(),
                  clone_url: faker.internet.url(),
                  mirror_url: faker.internet.url(),
                  hooks_url: faker.internet.url(),
                  svn_url: faker.internet.url(),
                  homepage: faker.lorem.slug(1),
                  language: faker.lorem.slug(1),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.lorem.slug(1),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: faker.date.past(),
                  created_at: faker.date.past(),
                  updated_at: faker.date.past(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: true,
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: true,
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.lorem.slug(1),
                starred_at: '"2020-07-09T00:17:42Z"',
                anonymous_access_enabled: faker.datatype.boolean(),
              },
              performed_via_github_app: {
                id: 37,
                slug: 'probot-owners',
                node_id: 'MDExOkludGVncmF0aW9uMQ==',
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                name: 'Probot Owners',
                description: 'The description of the app.',
                external_url: 'https://example.com',
                html_url: 'https://github.com/apps/super-ci',
                created_at: '2017-07-08T16:18:44-04:00',
                updated_at: '2017-07-08T16:18:44-04:00',
                permissions: { issues: 'read', deployments: 'write' },
                events: ['label', 'deployment'],
                installations_count: 5,
                client_id: '"Iv1.25b5d1e65ffc4022"',
                client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
              },
              author_association: 'OWNER',
              reactions: {
                url: faker.internet.url(),
                total_count: faker.datatype.number(),
                '+1': faker.datatype.number(),
                '-1': faker.datatype.number(),
                laugh: faker.datatype.number(),
                confused: faker.datatype.number(),
                heart: faker.datatype.number(),
                hooray: faker.datatype.number(),
                eyes: faker.datatype.number(),
                rocket: faker.datatype.number(),
              },
            },
            label: {
              name: faker.name.findName(),
              color: faker.lorem.slug(1),
            },
            assignee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assigner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            review_requester: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            requested_reviewer: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            requested_team: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              slug: faker.lorem.slug(1),
              description: faker.lorem.slug(1),
              privacy: faker.lorem.slug(1),
              permission: faker.lorem.slug(1),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.internet.url(),
              html_url: 'https://github.com/orgs/rails/teams/core',
              members_url: faker.internet.url(),
              repositories_url: faker.internet.url(),
              parent: {
                id: 1,
                node_id: 'MDQ6VGVhbTE=',
                url: 'https://api.github.com/organizations/1/team/1',
                members_url:
                  'https://api.github.com/organizations/1/team/1/members{/member}',
                name: 'Justice League',
                description: 'A great team.',
                permission: 'admin',
                privacy: 'closed',
                html_url: 'https://github.com/orgs/rails/teams/core',
                repositories_url:
                  'https://api.github.com/organizations/1/team/1/repos',
                slug: 'justice-league',
                ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
              },
            },
            dismissed_review: {
              state: faker.lorem.slug(1),
              review_id: faker.datatype.number(),
              dismissal_message: faker.lorem.slug(1),
              dismissal_commit_id: faker.lorem.slug(1),
            },
            milestone: {
              title: faker.lorem.slug(1),
            },
            project_card: {
              url: faker.internet.url(),
              id: faker.datatype.number(),
              project_url: faker.internet.url(),
              project_id: faker.datatype.number(),
              column_name: faker.name.findName(),
              previous_column_name: faker.name.findName(),
            },
            rename: {
              from: faker.lorem.slug(1),
              to: faker.lorem.slug(1),
            },
            author_association: 'OWNER',
            lock_reason: faker.lorem.slug(1),
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
          }))
        ),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/issues/events/:eventId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 1,
            node_id: 'MDEwOklzc3VlRXZlbnQx',
            url: 'https://api.github.com/repos/octocat/Hello-World/issues/events/1',
            actor: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            event: 'closed',
            commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
            commit_url:
              'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            created_at: '2011-04-14T16:00:49Z',
            issue: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              url: 'https://api.github.com/repositories/42/issues/1',
              repository_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              events_url: faker.internet.url(),
              html_url: faker.internet.url(),
              number: 42,
              state: 'open',
              state_reason: 'not_planned',
              title: 'Widget creation fails in Safari on OS X 10.8',
              body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              labels: ['bug', 'registration'],
              assignee: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              assignees: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              })),
              milestone: {
                url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
                html_url:
                  'https://github.com/octocat/Hello-World/milestones/v1.0',
                labels_url:
                  'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
                id: 1002604,
                node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
                number: 42,
                state: 'open',
                title: 'v1.0',
                description: 'Tracking milestone for version 1.0',
                creator: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                open_issues: 4,
                closed_issues: 8,
                created_at: '2011-04-10T20:09:31Z',
                updated_at: '2014-03-03T18:58:10Z',
                closed_at: '2013-02-12T13:22:01Z',
                due_on: '2012-10-09T23:39:01Z',
              },
              locked: faker.datatype.boolean(),
              active_lock_reason: faker.lorem.slug(1),
              comments: faker.datatype.number(),
              pull_request: {
                merged_at: faker.date.past(),
                diff_url: faker.internet.url(),
                html_url: faker.internet.url(),
                patch_url: faker.internet.url(),
                url: faker.internet.url(),
              },
              closed_at: faker.date.past(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              draft: faker.datatype.boolean(),
              closed_by: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              body_html: faker.lorem.slug(1),
              body_text: faker.lorem.slug(1),
              timeline_url: faker.internet.url(),
              repository: {
                id: 42,
                node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                name: 'Team Environment',
                full_name: 'octocat/Hello-World',
                license: {
                  key: 'mit',
                  name: 'MIT License',
                  url: 'https://api.github.com/licenses/mit',
                  spdx_id: 'MIT',
                  node_id: 'MDc6TGljZW5zZW1pdA==',
                  html_url: faker.internet.url(),
                },
                organization: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                private: faker.datatype.boolean(),
                html_url: 'https://github.com/octocat/Hello-World',
                description: 'This your first repo!',
                fork: faker.datatype.boolean(),
                url: 'https://api.github.com/repos/octocat/Hello-World',
                archive_url:
                  'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                assignees_url:
                  'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                blobs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                branches_url:
                  'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                collaborators_url:
                  'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                comments_url:
                  'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                compare_url:
                  'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                contents_url:
                  'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                contributors_url:
                  'http://api.github.com/repos/octocat/Hello-World/contributors',
                deployments_url:
                  'http://api.github.com/repos/octocat/Hello-World/deployments',
                downloads_url:
                  'http://api.github.com/repos/octocat/Hello-World/downloads',
                events_url:
                  'http://api.github.com/repos/octocat/Hello-World/events',
                forks_url:
                  'http://api.github.com/repos/octocat/Hello-World/forks',
                git_commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                git_refs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                git_tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                git_url: 'git:github.com/octocat/Hello-World.git',
                issue_comment_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                issue_events_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                issues_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                keys_url:
                  'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                labels_url:
                  'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                languages_url:
                  'http://api.github.com/repos/octocat/Hello-World/languages',
                merges_url:
                  'http://api.github.com/repos/octocat/Hello-World/merges',
                milestones_url:
                  'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                notifications_url:
                  'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                pulls_url:
                  'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                releases_url:
                  'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                ssh_url: 'git@github.com:octocat/Hello-World.git',
                stargazers_url:
                  'http://api.github.com/repos/octocat/Hello-World/stargazers',
                statuses_url:
                  'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                subscribers_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscribers',
                subscription_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscription',
                tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/tags',
                teams_url:
                  'http://api.github.com/repos/octocat/Hello-World/teams',
                trees_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                clone_url: 'https://github.com/octocat/Hello-World.git',
                mirror_url: 'git:git.example.com/octocat/Hello-World',
                hooks_url:
                  'http://api.github.com/repos/octocat/Hello-World/hooks',
                svn_url: 'https://svn.github.com/octocat/Hello-World',
                homepage: 'https://github.com',
                language: faker.lorem.slug(1),
                forks_count: 9,
                stargazers_count: 80,
                watchers_count: 80,
                size: 108,
                default_branch: 'master',
                open_issues_count: faker.datatype.number(),
                is_template: true,
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: true,
                has_projects: true,
                has_wiki: true,
                has_pages: faker.datatype.boolean(),
                has_downloads: true,
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: '2011-01-26T19:06:43Z',
                created_at: '2011-01-26T19:01:12Z',
                updated_at: '2011-01-26T19:14:43Z',
                allow_rebase_merge: true,
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  name: faker.name.findName(),
                  full_name: faker.name.findName(),
                  owner: {
                    login: faker.lorem.slug(1),
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    avatar_url: faker.internet.url(),
                    gravatar_id: faker.lorem.slug(1),
                    url: faker.internet.url(),
                    html_url: faker.internet.url(),
                    followers_url: faker.internet.url(),
                    following_url: faker.internet.url(),
                    gists_url: faker.internet.url(),
                    starred_url: faker.internet.url(),
                    subscriptions_url: faker.internet.url(),
                    organizations_url: faker.internet.url(),
                    repos_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    received_events_url: faker.internet.url(),
                    type: faker.lorem.slug(1),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.internet.url(),
                  description: faker.lorem.slug(1),
                  fork: faker.datatype.boolean(),
                  url: faker.internet.url(),
                  archive_url: faker.internet.url(),
                  assignees_url: faker.internet.url(),
                  blobs_url: faker.internet.url(),
                  branches_url: faker.internet.url(),
                  collaborators_url: faker.internet.url(),
                  comments_url: faker.internet.url(),
                  commits_url: faker.internet.url(),
                  compare_url: faker.internet.url(),
                  contents_url: faker.internet.url(),
                  contributors_url: faker.internet.url(),
                  deployments_url: faker.internet.url(),
                  downloads_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  forks_url: faker.internet.url(),
                  git_commits_url: faker.internet.url(),
                  git_refs_url: faker.internet.url(),
                  git_tags_url: faker.internet.url(),
                  git_url: faker.internet.url(),
                  issue_comment_url: faker.internet.url(),
                  issue_events_url: faker.internet.url(),
                  issues_url: faker.internet.url(),
                  keys_url: faker.internet.url(),
                  labels_url: faker.internet.url(),
                  languages_url: faker.internet.url(),
                  merges_url: faker.internet.url(),
                  milestones_url: faker.internet.url(),
                  notifications_url: faker.internet.url(),
                  pulls_url: faker.internet.url(),
                  releases_url: faker.internet.url(),
                  ssh_url: faker.internet.url(),
                  stargazers_url: faker.internet.url(),
                  statuses_url: faker.internet.url(),
                  subscribers_url: faker.internet.url(),
                  subscription_url: faker.internet.url(),
                  tags_url: faker.internet.url(),
                  teams_url: faker.internet.url(),
                  trees_url: faker.internet.url(),
                  clone_url: faker.internet.url(),
                  mirror_url: faker.internet.url(),
                  hooks_url: faker.internet.url(),
                  svn_url: faker.internet.url(),
                  homepage: faker.lorem.slug(1),
                  language: faker.lorem.slug(1),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.lorem.slug(1),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: faker.date.past(),
                  created_at: faker.date.past(),
                  updated_at: faker.date.past(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: true,
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: true,
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.lorem.slug(1),
                starred_at: '"2020-07-09T00:17:42Z"',
                anonymous_access_enabled: faker.datatype.boolean(),
              },
              performed_via_github_app: {
                id: 37,
                slug: 'probot-owners',
                node_id: 'MDExOkludGVncmF0aW9uMQ==',
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                name: 'Probot Owners',
                description: 'The description of the app.',
                external_url: 'https://example.com',
                html_url: 'https://github.com/apps/super-ci',
                created_at: '2017-07-08T16:18:44-04:00',
                updated_at: '2017-07-08T16:18:44-04:00',
                permissions: { issues: 'read', deployments: 'write' },
                events: ['label', 'deployment'],
                installations_count: 5,
                client_id: '"Iv1.25b5d1e65ffc4022"',
                client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
              },
              author_association: 'OWNER',
              reactions: {
                url: faker.internet.url(),
                total_count: faker.datatype.number(),
                '+1': faker.datatype.number(),
                '-1': faker.datatype.number(),
                laugh: faker.datatype.number(),
                confused: faker.datatype.number(),
                heart: faker.datatype.number(),
                hooray: faker.datatype.number(),
                eyes: faker.datatype.number(),
                rocket: faker.datatype.number(),
              },
            },
            label: {
              name: faker.name.findName(),
              color: faker.lorem.slug(1),
            },
            assignee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assigner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            review_requester: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            requested_reviewer: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            requested_team: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              slug: faker.lorem.slug(1),
              description: faker.lorem.slug(1),
              privacy: faker.lorem.slug(1),
              permission: faker.lorem.slug(1),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.internet.url(),
              html_url: 'https://github.com/orgs/rails/teams/core',
              members_url: faker.internet.url(),
              repositories_url: faker.internet.url(),
              parent: {
                id: 1,
                node_id: 'MDQ6VGVhbTE=',
                url: 'https://api.github.com/organizations/1/team/1',
                members_url:
                  'https://api.github.com/organizations/1/team/1/members{/member}',
                name: 'Justice League',
                description: 'A great team.',
                permission: 'admin',
                privacy: 'closed',
                html_url: 'https://github.com/orgs/rails/teams/core',
                repositories_url:
                  'https://api.github.com/organizations/1/team/1/repos',
                slug: 'justice-league',
                ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
              },
            },
            dismissed_review: {
              state: faker.lorem.slug(1),
              review_id: faker.datatype.number(),
              dismissal_message: faker.lorem.slug(1),
              dismissal_commit_id: faker.lorem.slug(1),
            },
            milestone: {
              title: faker.lorem.slug(1),
            },
            project_card: {
              url: faker.internet.url(),
              id: faker.datatype.number(),
              project_url: faker.internet.url(),
              project_id: faker.datatype.number(),
              column_name: faker.name.findName(),
              previous_column_name: faker.name.findName(),
            },
            rename: {
              from: faker.lorem.slug(1),
              to: faker.lorem.slug(1),
            },
            author_association: 'OWNER',
            lock_reason: faker.lorem.slug(1),
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            url: 'https://api.github.com/repositories/42/issues/1',
            repository_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            number: 42,
            state: 'open',
            state_reason: 'not_planned',
            title: 'Widget creation fails in Safari on OS X 10.8',
            body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            labels: ['bug', 'registration'],
            assignee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            milestone: {
              url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
              html_url:
                'https://github.com/octocat/Hello-World/milestones/v1.0',
              labels_url:
                'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
              id: 1002604,
              node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
              number: 42,
              state: 'open',
              title: 'v1.0',
              description: 'Tracking milestone for version 1.0',
              creator: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              open_issues: 4,
              closed_issues: 8,
              created_at: '2011-04-10T20:09:31Z',
              updated_at: '2014-03-03T18:58:10Z',
              closed_at: '2013-02-12T13:22:01Z',
              due_on: '2012-10-09T23:39:01Z',
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(1),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.date.past(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            closed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            timeline_url: faker.internet.url(),
            repository: {
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            },
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
            author_association: 'OWNER',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
        [
          ctx.status(301),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [ctx.status(304), ctx.json(null)],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            url: 'https://api.github.com/repositories/42/issues/1',
            repository_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            number: 42,
            state: 'open',
            state_reason: 'not_planned',
            title: 'Widget creation fails in Safari on OS X 10.8',
            body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            labels: ['bug', 'registration'],
            assignee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            milestone: {
              url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
              html_url:
                'https://github.com/octocat/Hello-World/milestones/v1.0',
              labels_url:
                'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
              id: 1002604,
              node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
              number: 42,
              state: 'open',
              title: 'v1.0',
              description: 'Tracking milestone for version 1.0',
              creator: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              open_issues: 4,
              closed_issues: 8,
              created_at: '2011-04-10T20:09:31Z',
              updated_at: '2014-03-03T18:58:10Z',
              closed_at: '2013-02-12T13:22:01Z',
              due_on: '2012-10-09T23:39:01Z',
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(1),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.date.past(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            closed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            timeline_url: faker.internet.url(),
            repository: {
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            },
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
            author_association: 'OWNER',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
        [
          ctx.status(301),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
        [
          ctx.status(503),
          ctx.json({
            code: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber/assignees`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            url: 'https://api.github.com/repositories/42/issues/1',
            repository_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            number: 42,
            state: 'open',
            state_reason: 'not_planned',
            title: 'Widget creation fails in Safari on OS X 10.8',
            body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            labels: ['bug', 'registration'],
            assignee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            milestone: {
              url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
              html_url:
                'https://github.com/octocat/Hello-World/milestones/v1.0',
              labels_url:
                'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
              id: 1002604,
              node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
              number: 42,
              state: 'open',
              title: 'v1.0',
              description: 'Tracking milestone for version 1.0',
              creator: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              open_issues: 4,
              closed_issues: 8,
              created_at: '2011-04-10T20:09:31Z',
              updated_at: '2014-03-03T18:58:10Z',
              closed_at: '2013-02-12T13:22:01Z',
              due_on: '2012-10-09T23:39:01Z',
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(1),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.date.past(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            closed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            timeline_url: faker.internet.url(),
            repository: {
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            },
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
            author_association: 'OWNER',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber/assignees`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            url: 'https://api.github.com/repositories/42/issues/1',
            repository_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            number: 42,
            state: 'open',
            state_reason: 'not_planned',
            title: 'Widget creation fails in Safari on OS X 10.8',
            body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            labels: ['bug', 'registration'],
            assignee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            milestone: {
              url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
              html_url:
                'https://github.com/octocat/Hello-World/milestones/v1.0',
              labels_url:
                'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
              id: 1002604,
              node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
              number: 42,
              state: 'open',
              title: 'v1.0',
              description: 'Tracking milestone for version 1.0',
              creator: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              open_issues: 4,
              closed_issues: 8,
              created_at: '2011-04-10T20:09:31Z',
              updated_at: '2014-03-03T18:58:10Z',
              closed_at: '2013-02-12T13:22:01Z',
              due_on: '2012-10-09T23:39:01Z',
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(1),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.date.past(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            closed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            timeline_url: faker.internet.url(),
            repository: {
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            },
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
            author_association: 'OWNER',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber/assignees/:assignee`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber/comments`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 42,
              node_id: faker.lorem.slug(1),
              url: 'https://api.github.com/repositories/42/issues/comments/1',
              body: 'What version of Safari were you using when you observed this bug?',
              body_text: faker.lorem.slug(1),
              body_html: faker.lorem.slug(1),
              html_url: faker.internet.url(),
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              created_at: '2011-04-14T16:00:49Z',
              updated_at: '2011-04-14T16:00:49Z',
              issue_url: faker.internet.url(),
              author_association: 'OWNER',
              performed_via_github_app: {
                id: 37,
                slug: 'probot-owners',
                node_id: 'MDExOkludGVncmF0aW9uMQ==',
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                name: 'Probot Owners',
                description: 'The description of the app.',
                external_url: 'https://example.com',
                html_url: 'https://github.com/apps/super-ci',
                created_at: '2017-07-08T16:18:44-04:00',
                updated_at: '2017-07-08T16:18:44-04:00',
                permissions: { issues: 'read', deployments: 'write' },
                events: ['label', 'deployment'],
                installations_count: 5,
                client_id: '"Iv1.25b5d1e65ffc4022"',
                client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
              },
              reactions: {
                url: faker.internet.url(),
                total_count: faker.datatype.number(),
                '+1': faker.datatype.number(),
                '-1': faker.datatype.number(),
                laugh: faker.datatype.number(),
                confused: faker.datatype.number(),
                heart: faker.datatype.number(),
                hooray: faker.datatype.number(),
                eyes: faker.datatype.number(),
                rocket: faker.datatype.number(),
              },
            }))
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber/comments`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            id: 42,
            node_id: faker.lorem.slug(1),
            url: 'https://api.github.com/repositories/42/issues/comments/1',
            body: 'What version of Safari were you using when you observed this bug?',
            body_text: faker.lorem.slug(1),
            body_html: faker.lorem.slug(1),
            html_url: faker.internet.url(),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: '2011-04-14T16:00:49Z',
            updated_at: '2011-04-14T16:00:49Z',
            issue_url: faker.internet.url(),
            author_association: 'OWNER',
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber/events`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null)
          ),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber/labels`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 208045946,
              node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
              url: 'https://api.github.com/repositories/42/labels/bug',
              name: 'bug',
              description: "Something isn't working",
              color: 'FFFFFF',
              default: true,
            }))
          ),
        ],
        [
          ctx.status(301),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber/labels`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 208045946,
              node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
              url: 'https://api.github.com/repositories/42/labels/bug',
              name: 'bug',
              description: "Something isn't working",
              color: 'FFFFFF',
              default: true,
            }))
          ),
        ],
        [
          ctx.status(301),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber/labels`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 208045946,
              node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
              url: 'https://api.github.com/repositories/42/labels/bug',
              name: 'bug',
              description: "Something isn't working",
              color: 'FFFFFF',
              default: true,
            }))
          ),
        ],
        [
          ctx.status(301),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber/labels`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(301),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber/labels/:name`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 208045946,
              node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
              url: 'https://api.github.com/repositories/42/labels/bug',
              name: 'bug',
              description: "Something isn't working",
              color: 'FFFFFF',
              default: true,
            }))
          ),
        ],
        [
          ctx.status(301),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber/lock`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber/lock`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 1,
              node_id: 'MDg6UmVhY3Rpb24x',
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              content: 'heart',
              created_at: '2016-05-20T20:09:31Z',
            }))
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 1,
            node_id: 'MDg6UmVhY3Rpb24x',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            content: 'heart',
            created_at: '2016-05-20T20:09:31Z',
          }),
        ],
        [
          ctx.status(201),
          ctx.json({
            id: 1,
            node_id: 'MDg6UmVhY3Rpb24x',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            content: 'heart',
            created_at: '2016-05-20T20:09:31Z',
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber/reactions/:reactionId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/issues/:issueNumber/timeline`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({}))
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/keys`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            key: faker.lorem.slug(1),
            url: faker.internet.url(),
            title: faker.lorem.slug(1),
            verified: faker.datatype.boolean(),
            created_at: faker.date.past(),
            read_only: faker.datatype.boolean(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/keys`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          key: faker.lorem.slug(1),
          url: faker.internet.url(),
          title: faker.lorem.slug(1),
          verified: faker.datatype.boolean(),
          created_at: faker.date.past(),
          read_only: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/keys/:keyId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          key: faker.lorem.slug(1),
          url: faker.internet.url(),
          title: faker.lorem.slug(1),
          verified: faker.datatype.boolean(),
          created_at: faker.date.past(),
          read_only: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/repos/:owner/:repo/keys/:keyId`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/labels`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 208045946,
            node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
            url: 'https://api.github.com/repositories/42/labels/bug',
            name: 'bug',
            description: "Something isn't working",
            color: 'FFFFFF',
            default: true,
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/labels`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: 208045946,
          node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
          url: 'https://api.github.com/repositories/42/labels/bug',
          name: 'bug',
          description: "Something isn't working",
          color: 'FFFFFF',
          default: true,
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/labels/:name`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 208045946,
          node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
          url: 'https://api.github.com/repositories/42/labels/bug',
          name: 'bug',
          description: "Something isn't working",
          color: 'FFFFFF',
          default: true,
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/repos/:owner/:repo/labels/:name`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 208045946,
          node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
          url: 'https://api.github.com/repositories/42/labels/bug',
          name: 'bug',
          description: "Something isn't working",
          color: 'FFFFFF',
          default: true,
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/repos/:owner/:repo/labels/:name`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/languages`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(5).keys()]
            .map(_ => ({ [faker.lorem.word()]: faker.datatype.number() }))
            .reduce((acc, next) => Object.assign(acc, next), {})
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/repos/:owner/:repo/lfs`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(202), ctx.json({})],
      [ctx.status(403), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/repos/:owner/:repo/lfs`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/license`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          name: faker.name.findName(),
          path: faker.lorem.slug(1),
          sha: faker.lorem.slug(1),
          size: faker.datatype.number(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          git_url: faker.internet.url(),
          download_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          content: faker.lorem.slug(1),
          encoding: faker.lorem.slug(1),
          _links: {
            git: faker.internet.url(),
            html: faker.internet.url(),
            self: faker.internet.url(),
          },
          license: {
            key: 'mit',
            name: 'MIT License',
            url: 'https://api.github.com/licenses/mit',
            spdx_id: 'MIT',
            node_id: 'MDc6TGljZW5zZW1pdA==',
            html_url: faker.internet.url(),
          },
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/merge-upstream`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          message: faker.lorem.slug(1),
          merge_type: faker.helpers.arrayElement([
            'merge',
            'fast-forward',
            'none',
          ]),
          base_branch: faker.lorem.slug(1),
        }),
      ],
      [ctx.status(409), ctx.json(null)],
      [ctx.status(422), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/merges`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
          sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
          node_id:
            'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
          html_url:
            'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
          comments_url:
            'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
          commit: {
            url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            author: {
              name: '"Chris Wanstrath"',
              email: '"chris@ozmm.org"',
              date: '"2007-10-29T02:42:39.000-07:00"',
            },
            committer: {
              name: '"Chris Wanstrath"',
              email: '"chris@ozmm.org"',
              date: '"2007-10-29T02:42:39.000-07:00"',
            },
            message: 'Fix all the bugs',
            comment_count: faker.datatype.number(),
            tree: {
              sha: '827efc6d56897b048c772eb4087f854f46256132',
              url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
            },
            verification: {
              verified: faker.datatype.boolean(),
              reason: faker.lorem.slug(1),
              payload: faker.lorem.slug(1),
              signature: faker.lorem.slug(1),
            },
          },
          author: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          committer: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          parents: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
            url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
            html_url:
              'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
          })),
          stats: {
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
            total: faker.datatype.number(),
          },
          files: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
            filename: 'file1.txt',
            status: 'added',
            additions: 103,
            deletions: 21,
            changes: 124,
            blob_url:
              'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
            raw_url:
              'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
            contents_url:
              'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
            patch:
              '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
            previous_filename: 'file.txt',
          })),
        }),
      ],
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [ctx.status(404), ctx.json(null)],
      [ctx.status(409), ctx.json(null)],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/milestones`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
            html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
            labels_url:
              'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
            id: 1002604,
            node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
            number: 42,
            state: 'open',
            title: 'v1.0',
            description: 'Tracking milestone for version 1.0',
            creator: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            open_issues: 4,
            closed_issues: 8,
            created_at: '2011-04-10T20:09:31Z',
            updated_at: '2014-03-03T18:58:10Z',
            closed_at: '2013-02-12T13:22:01Z',
            due_on: '2012-10-09T23:39:01Z',
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/milestones`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
          html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
          labels_url:
            'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
          id: 1002604,
          node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
          number: 42,
          state: 'open',
          title: 'v1.0',
          description: 'Tracking milestone for version 1.0',
          creator: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          open_issues: 4,
          closed_issues: 8,
          created_at: '2011-04-10T20:09:31Z',
          updated_at: '2014-03-03T18:58:10Z',
          closed_at: '2013-02-12T13:22:01Z',
          due_on: '2012-10-09T23:39:01Z',
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/milestones/:milestoneNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
            html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
            labels_url:
              'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
            id: 1002604,
            node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
            number: 42,
            state: 'open',
            title: 'v1.0',
            description: 'Tracking milestone for version 1.0',
            creator: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            open_issues: 4,
            closed_issues: 8,
            created_at: '2011-04-10T20:09:31Z',
            updated_at: '2014-03-03T18:58:10Z',
            closed_at: '2013-02-12T13:22:01Z',
            due_on: '2012-10-09T23:39:01Z',
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/repos/:owner/:repo/milestones/:milestoneNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
            html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
            labels_url:
              'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
            id: 1002604,
            node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
            number: 42,
            state: 'open',
            title: 'v1.0',
            description: 'Tracking milestone for version 1.0',
            creator: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            open_issues: 4,
            closed_issues: 8,
            created_at: '2011-04-10T20:09:31Z',
            updated_at: '2014-03-03T18:58:10Z',
            closed_at: '2013-02-12T13:22:01Z',
            due_on: '2012-10-09T23:39:01Z',
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/milestones/:milestoneNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/milestones/:milestoneNumber/labels`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 208045946,
              node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
              url: 'https://api.github.com/repositories/42/labels/bug',
              name: 'bug',
              description: "Something isn't working",
              color: 'FFFFFF',
              default: true,
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/notifications`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.lorem.slug(1),
            repository: {
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: faker.internet.url(),
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: faker.internet.url(),
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: 'contributor_covenant',
                name: 'Contributor Covenant',
                url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                html_url: faker.internet.url(),
              },
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                spdx_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                node_id: faker.lorem.slug(1),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            subject: {
              title: faker.lorem.slug(1),
              url: faker.internet.url(),
              latest_comment_url: faker.internet.url(),
              type: faker.lorem.slug(1),
            },
            reason: faker.lorem.slug(1),
            unread: faker.datatype.boolean(),
            updated_at: faker.date.past(),
            last_read_at: faker.date.past(),
            url: faker.internet.url(),
            subscription_url:
              'https://api.github.com/notifications/threads/2/subscription',
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/repos/:owner/:repo/notifications`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(202),
        ctx.json({
          message: faker.lorem.slug(1),
          url: faker.internet.url(),
        }),
      ],
      [ctx.status(205), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/pages`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: 'https://api.github.com/repos/github/hello-world/pages',
          status: 'built',
          cname: 'example.com',
          protected_domain_state: 'pending',
          pending_domain_unverified_at: faker.date.past(),
          custom_404: faker.datatype.boolean(),
          html_url: 'https://example.com',
          build_type: 'legacy',
          source: {
            branch: faker.lorem.slug(1),
            path: faker.lorem.slug(1),
          },
          public: true,
          https_certificate: {
            state: 'approved',
            description: 'Certificate is approved',
            domains: ['example.com', 'www.example.com'],
            expires_at: faker.date.past(),
          },
          https_enforced: true,
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/pages`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          url: 'https://api.github.com/repos/github/hello-world/pages',
          status: 'built',
          cname: 'example.com',
          protected_domain_state: 'pending',
          pending_domain_unverified_at: faker.date.past(),
          custom_404: faker.datatype.boolean(),
          html_url: 'https://example.com',
          build_type: 'legacy',
          source: {
            branch: faker.lorem.slug(1),
            path: faker.lorem.slug(1),
          },
          public: true,
          https_certificate: {
            state: 'approved',
            description: 'Certificate is approved',
            domains: ['example.com', 'www.example.com'],
            expires_at: faker.date.past(),
          },
          https_enforced: true,
        }),
      ],
      [
        ctx.status(409),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/repos/:owner/:repo/pages`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(400),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(409),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/repos/:owner/:repo/pages`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(409),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/pages/builds`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
            error: {
              message: faker.lorem.slug(1),
            },
            pusher: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            commit: faker.lorem.slug(1),
            duration: faker.datatype.number(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/pages/builds`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          url: 'https://api.github.com/repos/github/hello-world/pages/builds/latest',
          status: 'queued',
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/pages/builds/latest`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
            error: {
              message: faker.lorem.slug(1),
            },
            pusher: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            commit: faker.lorem.slug(1),
            duration: faker.datatype.number(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/pages/builds/:buildId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
            error: {
              message: faker.lorem.slug(1),
            },
            pusher: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            commit: faker.lorem.slug(1),
            duration: faker.datatype.number(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/pre-receive-hooks`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            enforcement: faker.lorem.slug(1),
            configuration_url: faker.internet.url(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/pre-receive-hooks/:preReceiveHookId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            enforcement: faker.lorem.slug(1),
            configuration_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/repos/:owner/:repo/pre-receive-hooks/:preReceiveHookId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            enforcement: faker.lorem.slug(1),
            configuration_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/pre-receive-hooks/:preReceiveHookId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.name.findName(),
            enforcement: faker.lorem.slug(1),
            configuration_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/projects`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            owner_url:
              'https://api.github.com/repos/api-playground/projects-test',
            url: 'https://api.github.com/projects/1002604',
            html_url:
              'https://github.com/api-playground/projects-test/projects/12',
            columns_url: 'https://api.github.com/projects/1002604/columns',
            id: 1002604,
            node_id: 'MDc6UHJvamVjdDEwMDI2MDQ=',
            name: 'Week One Sprint',
            body: 'This project represents the sprint of the first week in January',
            number: 1,
            state: 'open',
            creator: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: '2011-04-10T20:09:31Z',
            updated_at: '2014-03-03T18:58:10Z',
            organization_permission: faker.helpers.arrayElement([
              'read',
              'write',
              'admin',
              'none',
            ]),
            private: faker.datatype.boolean(),
          }))
        ),
      ],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/projects`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          owner_url:
            'https://api.github.com/repos/api-playground/projects-test',
          url: 'https://api.github.com/projects/1002604',
          html_url:
            'https://github.com/api-playground/projects-test/projects/12',
          columns_url: 'https://api.github.com/projects/1002604/columns',
          id: 1002604,
          node_id: 'MDc6UHJvamVjdDEwMDI2MDQ=',
          name: 'Week One Sprint',
          body: 'This project represents the sprint of the first week in January',
          number: 1,
          state: 'open',
          creator: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          created_at: '2011-04-10T20:09:31Z',
          updated_at: '2014-03-03T18:58:10Z',
          organization_permission: faker.helpers.arrayElement([
            'read',
            'write',
            'admin',
            'none',
          ]),
          private: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/pulls`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347',
            id: 1,
            node_id: 'MDExOlB1bGxSZXF1ZXN0MQ==',
            html_url: 'https://github.com/octocat/Hello-World/pull/1347',
            diff_url: 'https://github.com/octocat/Hello-World/pull/1347.diff',
            patch_url: 'https://github.com/octocat/Hello-World/pull/1347.patch',
            issue_url:
              'https://api.github.com/repos/octocat/Hello-World/issues/1347',
            commits_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits',
            review_comments_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments',
            review_comment_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}',
            comments_url:
              'https://api.github.com/repos/octocat/Hello-World/issues/1347/comments',
            statuses_url:
              'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            number: 1347,
            state: 'open',
            locked: true,
            title: 'new-feature',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'Please pull these awesome changes',
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              name: faker.name.findName(),
              description: faker.lorem.slug(1),
              color: faker.lorem.slug(1),
              default: faker.datatype.boolean(),
            })),
            milestone: {
              url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
              html_url:
                'https://github.com/octocat/Hello-World/milestones/v1.0',
              labels_url:
                'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
              id: 1002604,
              node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
              number: 42,
              state: 'open',
              title: 'v1.0',
              description: 'Tracking milestone for version 1.0',
              creator: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              open_issues: 4,
              closed_issues: 8,
              created_at: '2011-04-10T20:09:31Z',
              updated_at: '2014-03-03T18:58:10Z',
              closed_at: '2013-02-12T13:22:01Z',
              due_on: '2012-10-09T23:39:01Z',
            },
            active_lock_reason: 'too heated',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:01:12Z',
            closed_at: '2011-01-26T19:01:12Z',
            merged_at: '2011-01-26T19:01:12Z',
            merge_commit_sha: 'e5bd3914e2e596debea16f433f57875b5b90bcd6',
            assignee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            requested_reviewers: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            requested_teams: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              slug: faker.lorem.slug(1),
              description: faker.lorem.slug(1),
              privacy: faker.lorem.slug(1),
              permission: faker.lorem.slug(1),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.internet.url(),
              html_url: 'https://github.com/orgs/rails/teams/core',
              members_url: faker.internet.url(),
              repositories_url: faker.internet.url(),
              parent: {
                id: 1,
                node_id: 'MDQ6VGVhbTE=',
                url: 'https://api.github.com/organizations/1/team/1',
                members_url:
                  'https://api.github.com/organizations/1/team/1/members{/member}',
                name: 'Justice League',
                description: 'A great team.',
                permission: 'admin',
                privacy: 'closed',
                html_url: 'https://github.com/orgs/rails/teams/core',
                repositories_url:
                  'https://api.github.com/organizations/1/team/1/repos',
                slug: 'justice-league',
                ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
              },
            })),
            head: {
              label: faker.lorem.slug(1),
              ref: faker.lorem.slug(1),
              repo: {
                id: 42,
                node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                name: 'Team Environment',
                full_name: 'octocat/Hello-World',
                license: {
                  key: 'mit',
                  name: 'MIT License',
                  url: 'https://api.github.com/licenses/mit',
                  spdx_id: 'MIT',
                  node_id: 'MDc6TGljZW5zZW1pdA==',
                  html_url: faker.internet.url(),
                },
                organization: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                private: faker.datatype.boolean(),
                html_url: 'https://github.com/octocat/Hello-World',
                description: 'This your first repo!',
                fork: faker.datatype.boolean(),
                url: 'https://api.github.com/repos/octocat/Hello-World',
                archive_url:
                  'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                assignees_url:
                  'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                blobs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                branches_url:
                  'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                collaborators_url:
                  'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                comments_url:
                  'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                compare_url:
                  'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                contents_url:
                  'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                contributors_url:
                  'http://api.github.com/repos/octocat/Hello-World/contributors',
                deployments_url:
                  'http://api.github.com/repos/octocat/Hello-World/deployments',
                downloads_url:
                  'http://api.github.com/repos/octocat/Hello-World/downloads',
                events_url:
                  'http://api.github.com/repos/octocat/Hello-World/events',
                forks_url:
                  'http://api.github.com/repos/octocat/Hello-World/forks',
                git_commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                git_refs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                git_tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                git_url: 'git:github.com/octocat/Hello-World.git',
                issue_comment_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                issue_events_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                issues_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                keys_url:
                  'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                labels_url:
                  'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                languages_url:
                  'http://api.github.com/repos/octocat/Hello-World/languages',
                merges_url:
                  'http://api.github.com/repos/octocat/Hello-World/merges',
                milestones_url:
                  'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                notifications_url:
                  'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                pulls_url:
                  'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                releases_url:
                  'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                ssh_url: 'git@github.com:octocat/Hello-World.git',
                stargazers_url:
                  'http://api.github.com/repos/octocat/Hello-World/stargazers',
                statuses_url:
                  'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                subscribers_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscribers',
                subscription_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscription',
                tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/tags',
                teams_url:
                  'http://api.github.com/repos/octocat/Hello-World/teams',
                trees_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                clone_url: 'https://github.com/octocat/Hello-World.git',
                mirror_url: 'git:git.example.com/octocat/Hello-World',
                hooks_url:
                  'http://api.github.com/repos/octocat/Hello-World/hooks',
                svn_url: 'https://svn.github.com/octocat/Hello-World',
                homepage: 'https://github.com',
                language: faker.lorem.slug(1),
                forks_count: 9,
                stargazers_count: 80,
                watchers_count: 80,
                size: 108,
                default_branch: 'master',
                open_issues_count: faker.datatype.number(),
                is_template: true,
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: true,
                has_projects: true,
                has_wiki: true,
                has_pages: faker.datatype.boolean(),
                has_downloads: true,
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: '2011-01-26T19:06:43Z',
                created_at: '2011-01-26T19:01:12Z',
                updated_at: '2011-01-26T19:14:43Z',
                allow_rebase_merge: true,
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  name: faker.name.findName(),
                  full_name: faker.name.findName(),
                  owner: {
                    login: faker.lorem.slug(1),
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    avatar_url: faker.internet.url(),
                    gravatar_id: faker.lorem.slug(1),
                    url: faker.internet.url(),
                    html_url: faker.internet.url(),
                    followers_url: faker.internet.url(),
                    following_url: faker.internet.url(),
                    gists_url: faker.internet.url(),
                    starred_url: faker.internet.url(),
                    subscriptions_url: faker.internet.url(),
                    organizations_url: faker.internet.url(),
                    repos_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    received_events_url: faker.internet.url(),
                    type: faker.lorem.slug(1),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.internet.url(),
                  description: faker.lorem.slug(1),
                  fork: faker.datatype.boolean(),
                  url: faker.internet.url(),
                  archive_url: faker.internet.url(),
                  assignees_url: faker.internet.url(),
                  blobs_url: faker.internet.url(),
                  branches_url: faker.internet.url(),
                  collaborators_url: faker.internet.url(),
                  comments_url: faker.internet.url(),
                  commits_url: faker.internet.url(),
                  compare_url: faker.internet.url(),
                  contents_url: faker.internet.url(),
                  contributors_url: faker.internet.url(),
                  deployments_url: faker.internet.url(),
                  downloads_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  forks_url: faker.internet.url(),
                  git_commits_url: faker.internet.url(),
                  git_refs_url: faker.internet.url(),
                  git_tags_url: faker.internet.url(),
                  git_url: faker.internet.url(),
                  issue_comment_url: faker.internet.url(),
                  issue_events_url: faker.internet.url(),
                  issues_url: faker.internet.url(),
                  keys_url: faker.internet.url(),
                  labels_url: faker.internet.url(),
                  languages_url: faker.internet.url(),
                  merges_url: faker.internet.url(),
                  milestones_url: faker.internet.url(),
                  notifications_url: faker.internet.url(),
                  pulls_url: faker.internet.url(),
                  releases_url: faker.internet.url(),
                  ssh_url: faker.internet.url(),
                  stargazers_url: faker.internet.url(),
                  statuses_url: faker.internet.url(),
                  subscribers_url: faker.internet.url(),
                  subscription_url: faker.internet.url(),
                  tags_url: faker.internet.url(),
                  teams_url: faker.internet.url(),
                  trees_url: faker.internet.url(),
                  clone_url: faker.internet.url(),
                  mirror_url: faker.internet.url(),
                  hooks_url: faker.internet.url(),
                  svn_url: faker.internet.url(),
                  homepage: faker.lorem.slug(1),
                  language: faker.lorem.slug(1),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.lorem.slug(1),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: faker.date.past(),
                  created_at: faker.date.past(),
                  updated_at: faker.date.past(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: true,
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: true,
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.lorem.slug(1),
                starred_at: '"2020-07-09T00:17:42Z"',
                anonymous_access_enabled: faker.datatype.boolean(),
              },
              sha: faker.lorem.slug(1),
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            },
            base: {
              label: faker.lorem.slug(1),
              ref: faker.lorem.slug(1),
              repo: {
                id: 42,
                node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                name: 'Team Environment',
                full_name: 'octocat/Hello-World',
                license: {
                  key: 'mit',
                  name: 'MIT License',
                  url: 'https://api.github.com/licenses/mit',
                  spdx_id: 'MIT',
                  node_id: 'MDc6TGljZW5zZW1pdA==',
                  html_url: faker.internet.url(),
                },
                organization: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                private: faker.datatype.boolean(),
                html_url: 'https://github.com/octocat/Hello-World',
                description: 'This your first repo!',
                fork: faker.datatype.boolean(),
                url: 'https://api.github.com/repos/octocat/Hello-World',
                archive_url:
                  'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                assignees_url:
                  'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                blobs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                branches_url:
                  'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                collaborators_url:
                  'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                comments_url:
                  'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                compare_url:
                  'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                contents_url:
                  'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                contributors_url:
                  'http://api.github.com/repos/octocat/Hello-World/contributors',
                deployments_url:
                  'http://api.github.com/repos/octocat/Hello-World/deployments',
                downloads_url:
                  'http://api.github.com/repos/octocat/Hello-World/downloads',
                events_url:
                  'http://api.github.com/repos/octocat/Hello-World/events',
                forks_url:
                  'http://api.github.com/repos/octocat/Hello-World/forks',
                git_commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                git_refs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                git_tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                git_url: 'git:github.com/octocat/Hello-World.git',
                issue_comment_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                issue_events_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                issues_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                keys_url:
                  'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                labels_url:
                  'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                languages_url:
                  'http://api.github.com/repos/octocat/Hello-World/languages',
                merges_url:
                  'http://api.github.com/repos/octocat/Hello-World/merges',
                milestones_url:
                  'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                notifications_url:
                  'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                pulls_url:
                  'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                releases_url:
                  'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                ssh_url: 'git@github.com:octocat/Hello-World.git',
                stargazers_url:
                  'http://api.github.com/repos/octocat/Hello-World/stargazers',
                statuses_url:
                  'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                subscribers_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscribers',
                subscription_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscription',
                tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/tags',
                teams_url:
                  'http://api.github.com/repos/octocat/Hello-World/teams',
                trees_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                clone_url: 'https://github.com/octocat/Hello-World.git',
                mirror_url: 'git:git.example.com/octocat/Hello-World',
                hooks_url:
                  'http://api.github.com/repos/octocat/Hello-World/hooks',
                svn_url: 'https://svn.github.com/octocat/Hello-World',
                homepage: 'https://github.com',
                language: faker.lorem.slug(1),
                forks_count: 9,
                stargazers_count: 80,
                watchers_count: 80,
                size: 108,
                default_branch: 'master',
                open_issues_count: faker.datatype.number(),
                is_template: true,
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: true,
                has_projects: true,
                has_wiki: true,
                has_pages: faker.datatype.boolean(),
                has_downloads: true,
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: '2011-01-26T19:06:43Z',
                created_at: '2011-01-26T19:01:12Z',
                updated_at: '2011-01-26T19:14:43Z',
                allow_rebase_merge: true,
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  name: faker.name.findName(),
                  full_name: faker.name.findName(),
                  owner: {
                    login: faker.lorem.slug(1),
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    avatar_url: faker.internet.url(),
                    gravatar_id: faker.lorem.slug(1),
                    url: faker.internet.url(),
                    html_url: faker.internet.url(),
                    followers_url: faker.internet.url(),
                    following_url: faker.internet.url(),
                    gists_url: faker.internet.url(),
                    starred_url: faker.internet.url(),
                    subscriptions_url: faker.internet.url(),
                    organizations_url: faker.internet.url(),
                    repos_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    received_events_url: faker.internet.url(),
                    type: faker.lorem.slug(1),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.internet.url(),
                  description: faker.lorem.slug(1),
                  fork: faker.datatype.boolean(),
                  url: faker.internet.url(),
                  archive_url: faker.internet.url(),
                  assignees_url: faker.internet.url(),
                  blobs_url: faker.internet.url(),
                  branches_url: faker.internet.url(),
                  collaborators_url: faker.internet.url(),
                  comments_url: faker.internet.url(),
                  commits_url: faker.internet.url(),
                  compare_url: faker.internet.url(),
                  contents_url: faker.internet.url(),
                  contributors_url: faker.internet.url(),
                  deployments_url: faker.internet.url(),
                  downloads_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  forks_url: faker.internet.url(),
                  git_commits_url: faker.internet.url(),
                  git_refs_url: faker.internet.url(),
                  git_tags_url: faker.internet.url(),
                  git_url: faker.internet.url(),
                  issue_comment_url: faker.internet.url(),
                  issue_events_url: faker.internet.url(),
                  issues_url: faker.internet.url(),
                  keys_url: faker.internet.url(),
                  labels_url: faker.internet.url(),
                  languages_url: faker.internet.url(),
                  merges_url: faker.internet.url(),
                  milestones_url: faker.internet.url(),
                  notifications_url: faker.internet.url(),
                  pulls_url: faker.internet.url(),
                  releases_url: faker.internet.url(),
                  ssh_url: faker.internet.url(),
                  stargazers_url: faker.internet.url(),
                  statuses_url: faker.internet.url(),
                  subscribers_url: faker.internet.url(),
                  subscription_url: faker.internet.url(),
                  tags_url: faker.internet.url(),
                  teams_url: faker.internet.url(),
                  trees_url: faker.internet.url(),
                  clone_url: faker.internet.url(),
                  mirror_url: faker.internet.url(),
                  hooks_url: faker.internet.url(),
                  svn_url: faker.internet.url(),
                  homepage: faker.lorem.slug(1),
                  language: faker.lorem.slug(1),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.lorem.slug(1),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: faker.date.past(),
                  created_at: faker.date.past(),
                  updated_at: faker.date.past(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: true,
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: true,
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.lorem.slug(1),
                starred_at: '"2020-07-09T00:17:42Z"',
                anonymous_access_enabled: faker.datatype.boolean(),
              },
              sha: faker.lorem.slug(1),
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            },
            _links: {
              comments: {
                href: faker.lorem.slug(1),
              },
              commits: {
                href: faker.lorem.slug(1),
              },
              statuses: {
                href: faker.lorem.slug(1),
              },
              html: {
                href: faker.lorem.slug(1),
              },
              issue: {
                href: faker.lorem.slug(1),
              },
              review_comments: {
                href: faker.lorem.slug(1),
              },
              review_comment: {
                href: faker.lorem.slug(1),
              },
              self: {
                href: faker.lorem.slug(1),
              },
            },
            author_association: 'OWNER',
            auto_merge: {
              enabled_by: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              merge_method: faker.helpers.arrayElement([
                'merge',
                'squash',
                'rebase',
              ]),
              commit_title: faker.lorem.slug(1),
              commit_message: faker.lorem.slug(1),
            },
            draft: faker.datatype.boolean(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/pulls`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347',
          id: 1,
          node_id: 'MDExOlB1bGxSZXF1ZXN0MQ==',
          html_url: 'https://github.com/octocat/Hello-World/pull/1347',
          diff_url: 'https://github.com/octocat/Hello-World/pull/1347.diff',
          patch_url: 'https://github.com/octocat/Hello-World/pull/1347.patch',
          issue_url:
            'https://api.github.com/repos/octocat/Hello-World/issues/1347',
          commits_url:
            'https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits',
          review_comments_url:
            'https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments',
          review_comment_url:
            'https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}',
          comments_url:
            'https://api.github.com/repos/octocat/Hello-World/issues/1347/comments',
          statuses_url:
            'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e',
          number: 42,
          state: 'open',
          locked: true,
          title: 'Amazing new feature',
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          body: 'Please pull these awesome changes',
          labels: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            name: faker.name.findName(),
            description: faker.lorem.slug(1),
            color: faker.lorem.slug(1),
            default: faker.datatype.boolean(),
          })),
          milestone: {
            url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
            html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
            labels_url:
              'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
            id: 1002604,
            node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
            number: 42,
            state: 'open',
            title: 'v1.0',
            description: 'Tracking milestone for version 1.0',
            creator: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            open_issues: 4,
            closed_issues: 8,
            created_at: '2011-04-10T20:09:31Z',
            updated_at: '2014-03-03T18:58:10Z',
            closed_at: '2013-02-12T13:22:01Z',
            due_on: '2012-10-09T23:39:01Z',
          },
          active_lock_reason: 'too heated',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:01:12Z',
          closed_at: '2011-01-26T19:01:12Z',
          merged_at: '2011-01-26T19:01:12Z',
          merge_commit_sha: 'e5bd3914e2e596debea16f433f57875b5b90bcd6',
          assignee: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          assignees: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          })),
          requested_reviewers: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          })),
          requested_teams: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 1,
            node_id: 'MDQ6VGVhbTE=',
            url: 'https://api.github.com/organizations/1/team/1',
            members_url:
              'https://api.github.com/organizations/1/team/1/members{/member}',
            name: 'Justice League',
            description: 'A great team.',
            permission: 'admin',
            privacy: 'closed',
            html_url: 'https://github.com/orgs/rails/teams/core',
            repositories_url:
              'https://api.github.com/organizations/1/team/1/repos',
            slug: 'justice-league',
            ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
          })),
          head: {
            label: faker.lorem.slug(1),
            ref: faker.lorem.slug(1),
            repo: {
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              fork: faker.datatype.boolean(),
              forks_url: faker.internet.url(),
              full_name: faker.name.findName(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              html_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              name: faker.name.findName(),
              notifications_url: faker.internet.url(),
              owner: {
                avatar_url: faker.internet.url(),
                events_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                html_url: faker.internet.url(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                login: faker.lorem.slug(1),
                organizations_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                site_admin: faker.datatype.boolean(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                url: faker.internet.url(),
              },
              private: faker.datatype.boolean(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              url: faker.internet.url(),
              clone_url: faker.internet.url(),
              default_branch: faker.lorem.slug(1),
              forks: faker.datatype.number(),
              forks_count: faker.datatype.number(),
              git_url: faker.internet.url(),
              has_downloads: faker.datatype.boolean(),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_discussions: faker.datatype.boolean(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(1),
              master_branch: faker.lorem.slug(1),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              mirror_url: faker.internet.url(),
              open_issues: faker.datatype.number(),
              open_issues_count: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_merge_commit: faker.datatype.boolean(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_rebase_merge: faker.datatype.boolean(),
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(1),
                node_id: faker.lorem.slug(1),
              },
              pushed_at: faker.date.past(),
              size: faker.datatype.number(),
              ssh_url: faker.internet.url(),
              stargazers_count: faker.datatype.number(),
              svn_url: faker.internet.url(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              watchers: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              allow_forking: faker.datatype.boolean(),
              is_template: faker.datatype.boolean(),
            },
            sha: faker.lorem.slug(1),
            user: {
              avatar_url: faker.internet.url(),
              events_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              html_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              login: faker.lorem.slug(1),
              organizations_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              site_admin: faker.datatype.boolean(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              url: faker.internet.url(),
            },
          },
          base: {
            label: faker.lorem.slug(1),
            ref: faker.lorem.slug(1),
            repo: {
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              fork: faker.datatype.boolean(),
              forks_url: faker.internet.url(),
              full_name: faker.name.findName(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              html_url: faker.internet.url(),
              id: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              node_id: faker.lorem.slug(1),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              name: faker.name.findName(),
              notifications_url: faker.internet.url(),
              owner: {
                avatar_url: faker.internet.url(),
                events_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                html_url: faker.internet.url(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                login: faker.lorem.slug(1),
                organizations_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                site_admin: faker.datatype.boolean(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                url: faker.internet.url(),
              },
              private: faker.datatype.boolean(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              url: faker.internet.url(),
              clone_url: faker.internet.url(),
              default_branch: faker.lorem.slug(1),
              forks: faker.datatype.number(),
              forks_count: faker.datatype.number(),
              git_url: faker.internet.url(),
              has_downloads: faker.datatype.boolean(),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_discussions: faker.datatype.boolean(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(1),
              master_branch: faker.lorem.slug(1),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              mirror_url: faker.internet.url(),
              open_issues: faker.datatype.number(),
              open_issues_count: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_merge_commit: faker.datatype.boolean(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_rebase_merge: faker.datatype.boolean(),
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              pushed_at: faker.date.past(),
              size: faker.datatype.number(),
              ssh_url: faker.internet.url(),
              stargazers_count: faker.datatype.number(),
              svn_url: faker.internet.url(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              watchers: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              allow_forking: faker.datatype.boolean(),
            },
            sha: faker.lorem.slug(1),
            user: {
              avatar_url: faker.internet.url(),
              events_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              html_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              login: faker.lorem.slug(1),
              organizations_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              site_admin: faker.datatype.boolean(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              url: faker.internet.url(),
            },
          },
          _links: {
            comments: {
              href: faker.lorem.slug(1),
            },
            commits: {
              href: faker.lorem.slug(1),
            },
            statuses: {
              href: faker.lorem.slug(1),
            },
            html: {
              href: faker.lorem.slug(1),
            },
            issue: {
              href: faker.lorem.slug(1),
            },
            review_comments: {
              href: faker.lorem.slug(1),
            },
            review_comment: {
              href: faker.lorem.slug(1),
            },
            self: {
              href: faker.lorem.slug(1),
            },
          },
          author_association: 'OWNER',
          auto_merge: {
            enabled_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            merge_method: faker.helpers.arrayElement([
              'merge',
              'squash',
              'rebase',
            ]),
            commit_title: faker.lorem.slug(1),
            commit_message: faker.lorem.slug(1),
          },
          draft: faker.datatype.boolean(),
          merged: faker.datatype.boolean(),
          mergeable: true,
          rebaseable: true,
          mergeable_state: 'clean',
          merged_by: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          comments: 10,
          review_comments: faker.datatype.number(),
          maintainer_can_modify: true,
          commits: 3,
          additions: 100,
          deletions: 3,
          changed_files: 5,
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/pulls/comments`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
            pull_request_review_id: 42,
            id: 1,
            node_id: 'MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw',
            diff_hunk:
              '@@ -16,33 +16,40 @@ public class Connection : IConnection...',
            path: 'config/database.yaml',
            position: 1,
            original_position: 4,
            commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
            original_commit_id: '9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840',
            in_reply_to_id: 8,
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'We should probably include a check for null values here.',
            created_at: '2011-04-14T16:00:49Z',
            updated_at: '2011-04-14T16:00:49Z',
            html_url:
              'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
            pull_request_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/1',
            author_association: 'OWNER',
            _links: {
              self: {
                href: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
              },
              html: {
                href: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
              },
              pull_request: {
                href: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
              },
            },
            start_line: 2,
            original_start_line: 2,
            start_side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
            line: 2,
            original_line: 2,
            side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
            body_html: '"<p>comment body</p>"',
            body_text: '"comment body"',
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/pulls/comments/:commentId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
            pull_request_review_id: 42,
            id: 1,
            node_id: 'MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw',
            diff_hunk:
              '@@ -16,33 +16,40 @@ public class Connection : IConnection...',
            path: 'config/database.yaml',
            position: 1,
            original_position: 4,
            commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
            original_commit_id: '9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840',
            in_reply_to_id: 8,
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'We should probably include a check for null values here.',
            created_at: '2011-04-14T16:00:49Z',
            updated_at: '2011-04-14T16:00:49Z',
            html_url:
              'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
            pull_request_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/1',
            author_association: 'OWNER',
            _links: {
              self: {
                href: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
              },
              html: {
                href: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
              },
              pull_request: {
                href: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
              },
            },
            start_line: 2,
            original_start_line: 2,
            start_side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
            line: 2,
            original_line: 2,
            side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
            body_html: '"<p>comment body</p>"',
            body_text: '"comment body"',
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/repos/:owner/:repo/pulls/comments/:commentId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
            pull_request_review_id: 42,
            id: 1,
            node_id: 'MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw',
            diff_hunk:
              '@@ -16,33 +16,40 @@ public class Connection : IConnection...',
            path: 'config/database.yaml',
            position: 1,
            original_position: 4,
            commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
            original_commit_id: '9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840',
            in_reply_to_id: 8,
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'We should probably include a check for null values here.',
            created_at: '2011-04-14T16:00:49Z',
            updated_at: '2011-04-14T16:00:49Z',
            html_url:
              'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
            pull_request_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/1',
            author_association: 'OWNER',
            _links: {
              self: {
                href: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
              },
              html: {
                href: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
              },
              pull_request: {
                href: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
              },
            },
            start_line: 2,
            original_start_line: 2,
            start_side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
            line: 2,
            original_line: 2,
            side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
            body_html: '"<p>comment body</p>"',
            body_text: '"comment body"',
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/pulls/comments/:commentId`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/pulls/comments/:commentId/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 1,
              node_id: 'MDg6UmVhY3Rpb24x',
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              content: 'heart',
              created_at: '2016-05-20T20:09:31Z',
            }))
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/pulls/comments/:commentId/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 1,
            node_id: 'MDg6UmVhY3Rpb24x',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            content: 'heart',
            created_at: '2016-05-20T20:09:31Z',
          }),
        ],
        [
          ctx.status(201),
          ctx.json({
            id: 1,
            node_id: 'MDg6UmVhY3Rpb24x',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            content: 'heart',
            created_at: '2016-05-20T20:09:31Z',
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/pulls/comments/:commentId/reactions/:reactionId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347',
          id: 1,
          node_id: 'MDExOlB1bGxSZXF1ZXN0MQ==',
          html_url: 'https://github.com/octocat/Hello-World/pull/1347',
          diff_url: 'https://github.com/octocat/Hello-World/pull/1347.diff',
          patch_url: 'https://github.com/octocat/Hello-World/pull/1347.patch',
          issue_url:
            'https://api.github.com/repos/octocat/Hello-World/issues/1347',
          commits_url:
            'https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits',
          review_comments_url:
            'https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments',
          review_comment_url:
            'https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}',
          comments_url:
            'https://api.github.com/repos/octocat/Hello-World/issues/1347/comments',
          statuses_url:
            'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e',
          number: 42,
          state: 'open',
          locked: true,
          title: 'Amazing new feature',
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          body: 'Please pull these awesome changes',
          labels: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            name: faker.name.findName(),
            description: faker.lorem.slug(1),
            color: faker.lorem.slug(1),
            default: faker.datatype.boolean(),
          })),
          milestone: {
            url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
            html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
            labels_url:
              'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
            id: 1002604,
            node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
            number: 42,
            state: 'open',
            title: 'v1.0',
            description: 'Tracking milestone for version 1.0',
            creator: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            open_issues: 4,
            closed_issues: 8,
            created_at: '2011-04-10T20:09:31Z',
            updated_at: '2014-03-03T18:58:10Z',
            closed_at: '2013-02-12T13:22:01Z',
            due_on: '2012-10-09T23:39:01Z',
          },
          active_lock_reason: 'too heated',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:01:12Z',
          closed_at: '2011-01-26T19:01:12Z',
          merged_at: '2011-01-26T19:01:12Z',
          merge_commit_sha: 'e5bd3914e2e596debea16f433f57875b5b90bcd6',
          assignee: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          assignees: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          })),
          requested_reviewers: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          })),
          requested_teams: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 1,
            node_id: 'MDQ6VGVhbTE=',
            url: 'https://api.github.com/organizations/1/team/1',
            members_url:
              'https://api.github.com/organizations/1/team/1/members{/member}',
            name: 'Justice League',
            description: 'A great team.',
            permission: 'admin',
            privacy: 'closed',
            html_url: 'https://github.com/orgs/rails/teams/core',
            repositories_url:
              'https://api.github.com/organizations/1/team/1/repos',
            slug: 'justice-league',
            ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
          })),
          head: {
            label: faker.lorem.slug(1),
            ref: faker.lorem.slug(1),
            repo: {
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              fork: faker.datatype.boolean(),
              forks_url: faker.internet.url(),
              full_name: faker.name.findName(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              html_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              name: faker.name.findName(),
              notifications_url: faker.internet.url(),
              owner: {
                avatar_url: faker.internet.url(),
                events_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                html_url: faker.internet.url(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                login: faker.lorem.slug(1),
                organizations_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                site_admin: faker.datatype.boolean(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                url: faker.internet.url(),
              },
              private: faker.datatype.boolean(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              url: faker.internet.url(),
              clone_url: faker.internet.url(),
              default_branch: faker.lorem.slug(1),
              forks: faker.datatype.number(),
              forks_count: faker.datatype.number(),
              git_url: faker.internet.url(),
              has_downloads: faker.datatype.boolean(),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_discussions: faker.datatype.boolean(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(1),
              master_branch: faker.lorem.slug(1),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              mirror_url: faker.internet.url(),
              open_issues: faker.datatype.number(),
              open_issues_count: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_merge_commit: faker.datatype.boolean(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_rebase_merge: faker.datatype.boolean(),
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(1),
                node_id: faker.lorem.slug(1),
              },
              pushed_at: faker.date.past(),
              size: faker.datatype.number(),
              ssh_url: faker.internet.url(),
              stargazers_count: faker.datatype.number(),
              svn_url: faker.internet.url(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              watchers: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              allow_forking: faker.datatype.boolean(),
              is_template: faker.datatype.boolean(),
            },
            sha: faker.lorem.slug(1),
            user: {
              avatar_url: faker.internet.url(),
              events_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              html_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              login: faker.lorem.slug(1),
              organizations_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              site_admin: faker.datatype.boolean(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              url: faker.internet.url(),
            },
          },
          base: {
            label: faker.lorem.slug(1),
            ref: faker.lorem.slug(1),
            repo: {
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              fork: faker.datatype.boolean(),
              forks_url: faker.internet.url(),
              full_name: faker.name.findName(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              html_url: faker.internet.url(),
              id: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              node_id: faker.lorem.slug(1),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              name: faker.name.findName(),
              notifications_url: faker.internet.url(),
              owner: {
                avatar_url: faker.internet.url(),
                events_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                html_url: faker.internet.url(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                login: faker.lorem.slug(1),
                organizations_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                site_admin: faker.datatype.boolean(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                url: faker.internet.url(),
              },
              private: faker.datatype.boolean(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              url: faker.internet.url(),
              clone_url: faker.internet.url(),
              default_branch: faker.lorem.slug(1),
              forks: faker.datatype.number(),
              forks_count: faker.datatype.number(),
              git_url: faker.internet.url(),
              has_downloads: faker.datatype.boolean(),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_discussions: faker.datatype.boolean(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(1),
              master_branch: faker.lorem.slug(1),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              mirror_url: faker.internet.url(),
              open_issues: faker.datatype.number(),
              open_issues_count: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_merge_commit: faker.datatype.boolean(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_rebase_merge: faker.datatype.boolean(),
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              pushed_at: faker.date.past(),
              size: faker.datatype.number(),
              ssh_url: faker.internet.url(),
              stargazers_count: faker.datatype.number(),
              svn_url: faker.internet.url(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              watchers: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              allow_forking: faker.datatype.boolean(),
            },
            sha: faker.lorem.slug(1),
            user: {
              avatar_url: faker.internet.url(),
              events_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              html_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              login: faker.lorem.slug(1),
              organizations_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              site_admin: faker.datatype.boolean(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              url: faker.internet.url(),
            },
          },
          _links: {
            comments: {
              href: faker.lorem.slug(1),
            },
            commits: {
              href: faker.lorem.slug(1),
            },
            statuses: {
              href: faker.lorem.slug(1),
            },
            html: {
              href: faker.lorem.slug(1),
            },
            issue: {
              href: faker.lorem.slug(1),
            },
            review_comments: {
              href: faker.lorem.slug(1),
            },
            review_comment: {
              href: faker.lorem.slug(1),
            },
            self: {
              href: faker.lorem.slug(1),
            },
          },
          author_association: 'OWNER',
          auto_merge: {
            enabled_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            merge_method: faker.helpers.arrayElement([
              'merge',
              'squash',
              'rebase',
            ]),
            commit_title: faker.lorem.slug(1),
            commit_message: faker.lorem.slug(1),
          },
          draft: faker.datatype.boolean(),
          merged: faker.datatype.boolean(),
          mergeable: true,
          rebaseable: true,
          mergeable_state: 'clean',
          merged_by: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          comments: 10,
          review_comments: faker.datatype.number(),
          maintainer_can_modify: true,
          commits: 3,
          additions: 100,
          deletions: 3,
          changed_files: 5,
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(500),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.lorem.slug(1),
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347',
            id: 1,
            node_id: 'MDExOlB1bGxSZXF1ZXN0MQ==',
            html_url: 'https://github.com/octocat/Hello-World/pull/1347',
            diff_url: 'https://github.com/octocat/Hello-World/pull/1347.diff',
            patch_url: 'https://github.com/octocat/Hello-World/pull/1347.patch',
            issue_url:
              'https://api.github.com/repos/octocat/Hello-World/issues/1347',
            commits_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits',
            review_comments_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments',
            review_comment_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}',
            comments_url:
              'https://api.github.com/repos/octocat/Hello-World/issues/1347/comments',
            statuses_url:
              'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            number: 42,
            state: 'open',
            locked: true,
            title: 'Amazing new feature',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'Please pull these awesome changes',
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              name: faker.name.findName(),
              description: faker.lorem.slug(1),
              color: faker.lorem.slug(1),
              default: faker.datatype.boolean(),
            })),
            milestone: {
              url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
              html_url:
                'https://github.com/octocat/Hello-World/milestones/v1.0',
              labels_url:
                'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
              id: 1002604,
              node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
              number: 42,
              state: 'open',
              title: 'v1.0',
              description: 'Tracking milestone for version 1.0',
              creator: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              open_issues: 4,
              closed_issues: 8,
              created_at: '2011-04-10T20:09:31Z',
              updated_at: '2014-03-03T18:58:10Z',
              closed_at: '2013-02-12T13:22:01Z',
              due_on: '2012-10-09T23:39:01Z',
            },
            active_lock_reason: 'too heated',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:01:12Z',
            closed_at: '2011-01-26T19:01:12Z',
            merged_at: '2011-01-26T19:01:12Z',
            merge_commit_sha: 'e5bd3914e2e596debea16f433f57875b5b90bcd6',
            assignee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            requested_reviewers: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            requested_teams: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 1,
              node_id: 'MDQ6VGVhbTE=',
              url: 'https://api.github.com/organizations/1/team/1',
              members_url:
                'https://api.github.com/organizations/1/team/1/members{/member}',
              name: 'Justice League',
              description: 'A great team.',
              permission: 'admin',
              privacy: 'closed',
              html_url: 'https://github.com/orgs/rails/teams/core',
              repositories_url:
                'https://api.github.com/organizations/1/team/1/repos',
              slug: 'justice-league',
              ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
            })),
            head: {
              label: faker.lorem.slug(1),
              ref: faker.lorem.slug(1),
              repo: {
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                fork: faker.datatype.boolean(),
                forks_url: faker.internet.url(),
                full_name: faker.name.findName(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                html_url: faker.internet.url(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                name: faker.name.findName(),
                notifications_url: faker.internet.url(),
                owner: {
                  avatar_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  html_url: faker.internet.url(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  login: faker.lorem.slug(1),
                  organizations_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  site_admin: faker.datatype.boolean(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  url: faker.internet.url(),
                },
                private: faker.datatype.boolean(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                url: faker.internet.url(),
                clone_url: faker.internet.url(),
                default_branch: faker.lorem.slug(1),
                forks: faker.datatype.number(),
                forks_count: faker.datatype.number(),
                git_url: faker.internet.url(),
                has_downloads: faker.datatype.boolean(),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_discussions: faker.datatype.boolean(),
                homepage: faker.internet.url(),
                language: faker.lorem.slug(1),
                master_branch: faker.lorem.slug(1),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                mirror_url: faker.internet.url(),
                open_issues: faker.datatype.number(),
                open_issues_count: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                temp_clone_token: faker.lorem.slug(1),
                allow_merge_commit: faker.datatype.boolean(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_rebase_merge: faker.datatype.boolean(),
                license: {
                  key: faker.lorem.slug(1),
                  name: faker.name.findName(),
                  url: faker.internet.url(),
                  spdx_id: faker.lorem.slug(1),
                  node_id: faker.lorem.slug(1),
                },
                pushed_at: faker.date.past(),
                size: faker.datatype.number(),
                ssh_url: faker.internet.url(),
                stargazers_count: faker.datatype.number(),
                svn_url: faker.internet.url(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                watchers: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                allow_forking: faker.datatype.boolean(),
                is_template: faker.datatype.boolean(),
              },
              sha: faker.lorem.slug(1),
              user: {
                avatar_url: faker.internet.url(),
                events_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                html_url: faker.internet.url(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                login: faker.lorem.slug(1),
                organizations_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                site_admin: faker.datatype.boolean(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                url: faker.internet.url(),
              },
            },
            base: {
              label: faker.lorem.slug(1),
              ref: faker.lorem.slug(1),
              repo: {
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                fork: faker.datatype.boolean(),
                forks_url: faker.internet.url(),
                full_name: faker.name.findName(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                html_url: faker.internet.url(),
                id: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                node_id: faker.lorem.slug(1),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                name: faker.name.findName(),
                notifications_url: faker.internet.url(),
                owner: {
                  avatar_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  html_url: faker.internet.url(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  login: faker.lorem.slug(1),
                  organizations_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  site_admin: faker.datatype.boolean(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  url: faker.internet.url(),
                },
                private: faker.datatype.boolean(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                url: faker.internet.url(),
                clone_url: faker.internet.url(),
                default_branch: faker.lorem.slug(1),
                forks: faker.datatype.number(),
                forks_count: faker.datatype.number(),
                git_url: faker.internet.url(),
                has_downloads: faker.datatype.boolean(),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_discussions: faker.datatype.boolean(),
                homepage: faker.internet.url(),
                language: faker.lorem.slug(1),
                master_branch: faker.lorem.slug(1),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                mirror_url: faker.internet.url(),
                open_issues: faker.datatype.number(),
                open_issues_count: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                temp_clone_token: faker.lorem.slug(1),
                allow_merge_commit: faker.datatype.boolean(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_rebase_merge: faker.datatype.boolean(),
                license: {
                  key: 'mit',
                  name: 'MIT License',
                  url: 'https://api.github.com/licenses/mit',
                  spdx_id: 'MIT',
                  node_id: 'MDc6TGljZW5zZW1pdA==',
                  html_url: faker.internet.url(),
                },
                pushed_at: faker.date.past(),
                size: faker.datatype.number(),
                ssh_url: faker.internet.url(),
                stargazers_count: faker.datatype.number(),
                svn_url: faker.internet.url(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                watchers: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                allow_forking: faker.datatype.boolean(),
              },
              sha: faker.lorem.slug(1),
              user: {
                avatar_url: faker.internet.url(),
                events_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                html_url: faker.internet.url(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                login: faker.lorem.slug(1),
                organizations_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                site_admin: faker.datatype.boolean(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                url: faker.internet.url(),
              },
            },
            _links: {
              comments: {
                href: faker.lorem.slug(1),
              },
              commits: {
                href: faker.lorem.slug(1),
              },
              statuses: {
                href: faker.lorem.slug(1),
              },
              html: {
                href: faker.lorem.slug(1),
              },
              issue: {
                href: faker.lorem.slug(1),
              },
              review_comments: {
                href: faker.lorem.slug(1),
              },
              review_comment: {
                href: faker.lorem.slug(1),
              },
              self: {
                href: faker.lorem.slug(1),
              },
            },
            author_association: 'OWNER',
            auto_merge: {
              enabled_by: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              merge_method: faker.helpers.arrayElement([
                'merge',
                'squash',
                'rebase',
              ]),
              commit_title: faker.lorem.slug(1),
              commit_message: faker.lorem.slug(1),
            },
            draft: faker.datatype.boolean(),
            merged: faker.datatype.boolean(),
            mergeable: true,
            rebaseable: true,
            mergeable_state: 'clean',
            merged_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            comments: 10,
            review_comments: faker.datatype.number(),
            maintainer_can_modify: true,
            commits: 3,
            additions: 100,
            deletions: 3,
            changed_files: 5,
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/comments`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
              pull_request_review_id: 42,
              id: 1,
              node_id: 'MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw',
              diff_hunk:
                '@@ -16,33 +16,40 @@ public class Connection : IConnection...',
              path: 'config/database.yaml',
              position: 1,
              original_position: 4,
              commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
              original_commit_id: '9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840',
              in_reply_to_id: 8,
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              body: 'We should probably include a check for null values here.',
              created_at: '2011-04-14T16:00:49Z',
              updated_at: '2011-04-14T16:00:49Z',
              html_url:
                'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
              pull_request_url:
                'https://api.github.com/repos/octocat/Hello-World/pulls/1',
              author_association: 'OWNER',
              _links: {
                self: {
                  href: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
                },
                html: {
                  href: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
                },
                pull_request: {
                  href: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
                },
              },
              start_line: 2,
              original_start_line: 2,
              start_side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
              line: 2,
              original_line: 2,
              side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
              reactions: {
                url: faker.internet.url(),
                total_count: faker.datatype.number(),
                '+1': faker.datatype.number(),
                '-1': faker.datatype.number(),
                laugh: faker.datatype.number(),
                confused: faker.datatype.number(),
                heart: faker.datatype.number(),
                hooray: faker.datatype.number(),
                eyes: faker.datatype.number(),
                rocket: faker.datatype.number(),
              },
              body_html: '"<p>comment body</p>"',
              body_text: '"comment body"',
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/comments`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
            pull_request_review_id: 42,
            id: 1,
            node_id: 'MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw',
            diff_hunk:
              '@@ -16,33 +16,40 @@ public class Connection : IConnection...',
            path: 'config/database.yaml',
            position: 1,
            original_position: 4,
            commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
            original_commit_id: '9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840',
            in_reply_to_id: 8,
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'We should probably include a check for null values here.',
            created_at: '2011-04-14T16:00:49Z',
            updated_at: '2011-04-14T16:00:49Z',
            html_url:
              'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
            pull_request_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/1',
            author_association: 'OWNER',
            _links: {
              self: {
                href: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
              },
              html: {
                href: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
              },
              pull_request: {
                href: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
              },
            },
            start_line: 2,
            original_start_line: 2,
            start_side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
            line: 2,
            original_line: 2,
            side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
            body_html: '"<p>comment body</p>"',
            body_text: '"comment body"',
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/comments/:commentId/replies`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
            pull_request_review_id: 42,
            id: 1,
            node_id: 'MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw',
            diff_hunk:
              '@@ -16,33 +16,40 @@ public class Connection : IConnection...',
            path: 'config/database.yaml',
            position: 1,
            original_position: 4,
            commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
            original_commit_id: '9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840',
            in_reply_to_id: 8,
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'We should probably include a check for null values here.',
            created_at: '2011-04-14T16:00:49Z',
            updated_at: '2011-04-14T16:00:49Z',
            html_url:
              'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
            pull_request_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/1',
            author_association: 'OWNER',
            _links: {
              self: {
                href: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
              },
              html: {
                href: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
              },
              pull_request: {
                href: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
              },
            },
            start_line: 2,
            original_start_line: 2,
            start_side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
            line: 2,
            original_line: 2,
            side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
            body_html: '"<p>comment body</p>"',
            body_text: '"comment body"',
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/commits`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
              sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
              node_id:
                'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
              html_url:
                'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
              comments_url:
                'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
              commit: {
                url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
                author: {
                  name: '"Chris Wanstrath"',
                  email: '"chris@ozmm.org"',
                  date: '"2007-10-29T02:42:39.000-07:00"',
                },
                committer: {
                  name: '"Chris Wanstrath"',
                  email: '"chris@ozmm.org"',
                  date: '"2007-10-29T02:42:39.000-07:00"',
                },
                message: 'Fix all the bugs',
                comment_count: faker.datatype.number(),
                tree: {
                  sha: '827efc6d56897b048c772eb4087f854f46256132',
                  url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
                },
                verification: {
                  verified: faker.datatype.boolean(),
                  reason: faker.lorem.slug(1),
                  payload: faker.lorem.slug(1),
                  signature: faker.lorem.slug(1),
                },
              },
              author: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              committer: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              parents: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
                url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
                html_url:
                  'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
              })),
              stats: {
                additions: faker.datatype.number(),
                deletions: faker.datatype.number(),
                total: faker.datatype.number(),
              },
              files: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
                filename: 'file1.txt',
                status: 'added',
                additions: 103,
                deletions: 21,
                changes: 124,
                blob_url:
                  'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
                raw_url:
                  'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
                contents_url:
                  'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
                patch:
                  '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
                previous_filename: 'file.txt',
              })),
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/files`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
              filename: 'file1.txt',
              status: 'added',
              additions: 103,
              deletions: 21,
              changes: 124,
              blob_url:
                'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
              raw_url:
                'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
              contents_url:
                'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
              patch:
                '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
              previous_filename: 'file.txt',
            }))
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
        [
          ctx.status(500),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(503),
          ctx.json({
            code: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/merge`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/merge`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            sha: faker.lorem.slug(1),
            merged: faker.datatype.boolean(),
            message: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(405),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
        [
          ctx.status(409),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            users: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            teams: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              slug: faker.lorem.slug(1),
              description: faker.lorem.slug(1),
              privacy: faker.lorem.slug(1),
              permission: faker.lorem.slug(1),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.internet.url(),
              html_url: 'https://github.com/orgs/rails/teams/core',
              members_url: faker.internet.url(),
              repositories_url: faker.internet.url(),
              parent: {
                id: 1,
                node_id: 'MDQ6VGVhbTE=',
                url: 'https://api.github.com/organizations/1/team/1',
                members_url:
                  'https://api.github.com/organizations/1/team/1/members{/member}',
                name: 'Justice League',
                description: 'A great team.',
                permission: 'admin',
                privacy: 'closed',
                html_url: 'https://github.com/orgs/rails/teams/core',
                repositories_url:
                  'https://api.github.com/organizations/1/team/1/repos',
                slug: 'justice-league',
                ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
              },
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347',
            id: 1,
            node_id: 'MDExOlB1bGxSZXF1ZXN0MQ==',
            html_url: 'https://github.com/octocat/Hello-World/pull/1347',
            diff_url: 'https://github.com/octocat/Hello-World/pull/1347.diff',
            patch_url: 'https://github.com/octocat/Hello-World/pull/1347.patch',
            issue_url:
              'https://api.github.com/repos/octocat/Hello-World/issues/1347',
            commits_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits',
            review_comments_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments',
            review_comment_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}',
            comments_url:
              'https://api.github.com/repos/octocat/Hello-World/issues/1347/comments',
            statuses_url:
              'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            number: 1347,
            state: 'open',
            locked: true,
            title: 'new-feature',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'Please pull these awesome changes',
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              name: faker.name.findName(),
              description: faker.lorem.slug(1),
              color: faker.lorem.slug(1),
              default: faker.datatype.boolean(),
            })),
            milestone: {
              url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
              html_url:
                'https://github.com/octocat/Hello-World/milestones/v1.0',
              labels_url:
                'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
              id: 1002604,
              node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
              number: 42,
              state: 'open',
              title: 'v1.0',
              description: 'Tracking milestone for version 1.0',
              creator: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              open_issues: 4,
              closed_issues: 8,
              created_at: '2011-04-10T20:09:31Z',
              updated_at: '2014-03-03T18:58:10Z',
              closed_at: '2013-02-12T13:22:01Z',
              due_on: '2012-10-09T23:39:01Z',
            },
            active_lock_reason: 'too heated',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:01:12Z',
            closed_at: '2011-01-26T19:01:12Z',
            merged_at: '2011-01-26T19:01:12Z',
            merge_commit_sha: 'e5bd3914e2e596debea16f433f57875b5b90bcd6',
            assignee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            requested_reviewers: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            requested_teams: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              slug: faker.lorem.slug(1),
              description: faker.lorem.slug(1),
              privacy: faker.lorem.slug(1),
              permission: faker.lorem.slug(1),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.internet.url(),
              html_url: 'https://github.com/orgs/rails/teams/core',
              members_url: faker.internet.url(),
              repositories_url: faker.internet.url(),
              parent: {
                id: 1,
                node_id: 'MDQ6VGVhbTE=',
                url: 'https://api.github.com/organizations/1/team/1',
                members_url:
                  'https://api.github.com/organizations/1/team/1/members{/member}',
                name: 'Justice League',
                description: 'A great team.',
                permission: 'admin',
                privacy: 'closed',
                html_url: 'https://github.com/orgs/rails/teams/core',
                repositories_url:
                  'https://api.github.com/organizations/1/team/1/repos',
                slug: 'justice-league',
                ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
              },
            })),
            head: {
              label: faker.lorem.slug(1),
              ref: faker.lorem.slug(1),
              repo: {
                id: 42,
                node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                name: 'Team Environment',
                full_name: 'octocat/Hello-World',
                license: {
                  key: 'mit',
                  name: 'MIT License',
                  url: 'https://api.github.com/licenses/mit',
                  spdx_id: 'MIT',
                  node_id: 'MDc6TGljZW5zZW1pdA==',
                  html_url: faker.internet.url(),
                },
                organization: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                private: faker.datatype.boolean(),
                html_url: 'https://github.com/octocat/Hello-World',
                description: 'This your first repo!',
                fork: faker.datatype.boolean(),
                url: 'https://api.github.com/repos/octocat/Hello-World',
                archive_url:
                  'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                assignees_url:
                  'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                blobs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                branches_url:
                  'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                collaborators_url:
                  'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                comments_url:
                  'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                compare_url:
                  'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                contents_url:
                  'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                contributors_url:
                  'http://api.github.com/repos/octocat/Hello-World/contributors',
                deployments_url:
                  'http://api.github.com/repos/octocat/Hello-World/deployments',
                downloads_url:
                  'http://api.github.com/repos/octocat/Hello-World/downloads',
                events_url:
                  'http://api.github.com/repos/octocat/Hello-World/events',
                forks_url:
                  'http://api.github.com/repos/octocat/Hello-World/forks',
                git_commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                git_refs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                git_tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                git_url: 'git:github.com/octocat/Hello-World.git',
                issue_comment_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                issue_events_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                issues_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                keys_url:
                  'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                labels_url:
                  'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                languages_url:
                  'http://api.github.com/repos/octocat/Hello-World/languages',
                merges_url:
                  'http://api.github.com/repos/octocat/Hello-World/merges',
                milestones_url:
                  'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                notifications_url:
                  'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                pulls_url:
                  'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                releases_url:
                  'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                ssh_url: 'git@github.com:octocat/Hello-World.git',
                stargazers_url:
                  'http://api.github.com/repos/octocat/Hello-World/stargazers',
                statuses_url:
                  'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                subscribers_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscribers',
                subscription_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscription',
                tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/tags',
                teams_url:
                  'http://api.github.com/repos/octocat/Hello-World/teams',
                trees_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                clone_url: 'https://github.com/octocat/Hello-World.git',
                mirror_url: 'git:git.example.com/octocat/Hello-World',
                hooks_url:
                  'http://api.github.com/repos/octocat/Hello-World/hooks',
                svn_url: 'https://svn.github.com/octocat/Hello-World',
                homepage: 'https://github.com',
                language: faker.lorem.slug(1),
                forks_count: 9,
                stargazers_count: 80,
                watchers_count: 80,
                size: 108,
                default_branch: 'master',
                open_issues_count: faker.datatype.number(),
                is_template: true,
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: true,
                has_projects: true,
                has_wiki: true,
                has_pages: faker.datatype.boolean(),
                has_downloads: true,
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: '2011-01-26T19:06:43Z',
                created_at: '2011-01-26T19:01:12Z',
                updated_at: '2011-01-26T19:14:43Z',
                allow_rebase_merge: true,
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  name: faker.name.findName(),
                  full_name: faker.name.findName(),
                  owner: {
                    login: faker.lorem.slug(1),
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    avatar_url: faker.internet.url(),
                    gravatar_id: faker.lorem.slug(1),
                    url: faker.internet.url(),
                    html_url: faker.internet.url(),
                    followers_url: faker.internet.url(),
                    following_url: faker.internet.url(),
                    gists_url: faker.internet.url(),
                    starred_url: faker.internet.url(),
                    subscriptions_url: faker.internet.url(),
                    organizations_url: faker.internet.url(),
                    repos_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    received_events_url: faker.internet.url(),
                    type: faker.lorem.slug(1),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.internet.url(),
                  description: faker.lorem.slug(1),
                  fork: faker.datatype.boolean(),
                  url: faker.internet.url(),
                  archive_url: faker.internet.url(),
                  assignees_url: faker.internet.url(),
                  blobs_url: faker.internet.url(),
                  branches_url: faker.internet.url(),
                  collaborators_url: faker.internet.url(),
                  comments_url: faker.internet.url(),
                  commits_url: faker.internet.url(),
                  compare_url: faker.internet.url(),
                  contents_url: faker.internet.url(),
                  contributors_url: faker.internet.url(),
                  deployments_url: faker.internet.url(),
                  downloads_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  forks_url: faker.internet.url(),
                  git_commits_url: faker.internet.url(),
                  git_refs_url: faker.internet.url(),
                  git_tags_url: faker.internet.url(),
                  git_url: faker.internet.url(),
                  issue_comment_url: faker.internet.url(),
                  issue_events_url: faker.internet.url(),
                  issues_url: faker.internet.url(),
                  keys_url: faker.internet.url(),
                  labels_url: faker.internet.url(),
                  languages_url: faker.internet.url(),
                  merges_url: faker.internet.url(),
                  milestones_url: faker.internet.url(),
                  notifications_url: faker.internet.url(),
                  pulls_url: faker.internet.url(),
                  releases_url: faker.internet.url(),
                  ssh_url: faker.internet.url(),
                  stargazers_url: faker.internet.url(),
                  statuses_url: faker.internet.url(),
                  subscribers_url: faker.internet.url(),
                  subscription_url: faker.internet.url(),
                  tags_url: faker.internet.url(),
                  teams_url: faker.internet.url(),
                  trees_url: faker.internet.url(),
                  clone_url: faker.internet.url(),
                  mirror_url: faker.internet.url(),
                  hooks_url: faker.internet.url(),
                  svn_url: faker.internet.url(),
                  homepage: faker.lorem.slug(1),
                  language: faker.lorem.slug(1),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.lorem.slug(1),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: faker.date.past(),
                  created_at: faker.date.past(),
                  updated_at: faker.date.past(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: true,
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: true,
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.lorem.slug(1),
                starred_at: '"2020-07-09T00:17:42Z"',
                anonymous_access_enabled: faker.datatype.boolean(),
              },
              sha: faker.lorem.slug(1),
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            },
            base: {
              label: faker.lorem.slug(1),
              ref: faker.lorem.slug(1),
              repo: {
                id: 42,
                node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                name: 'Team Environment',
                full_name: 'octocat/Hello-World',
                license: {
                  key: 'mit',
                  name: 'MIT License',
                  url: 'https://api.github.com/licenses/mit',
                  spdx_id: 'MIT',
                  node_id: 'MDc6TGljZW5zZW1pdA==',
                  html_url: faker.internet.url(),
                },
                organization: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                private: faker.datatype.boolean(),
                html_url: 'https://github.com/octocat/Hello-World',
                description: 'This your first repo!',
                fork: faker.datatype.boolean(),
                url: 'https://api.github.com/repos/octocat/Hello-World',
                archive_url:
                  'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                assignees_url:
                  'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                blobs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                branches_url:
                  'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                collaborators_url:
                  'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                comments_url:
                  'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                compare_url:
                  'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                contents_url:
                  'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                contributors_url:
                  'http://api.github.com/repos/octocat/Hello-World/contributors',
                deployments_url:
                  'http://api.github.com/repos/octocat/Hello-World/deployments',
                downloads_url:
                  'http://api.github.com/repos/octocat/Hello-World/downloads',
                events_url:
                  'http://api.github.com/repos/octocat/Hello-World/events',
                forks_url:
                  'http://api.github.com/repos/octocat/Hello-World/forks',
                git_commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                git_refs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                git_tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                git_url: 'git:github.com/octocat/Hello-World.git',
                issue_comment_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                issue_events_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                issues_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                keys_url:
                  'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                labels_url:
                  'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                languages_url:
                  'http://api.github.com/repos/octocat/Hello-World/languages',
                merges_url:
                  'http://api.github.com/repos/octocat/Hello-World/merges',
                milestones_url:
                  'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                notifications_url:
                  'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                pulls_url:
                  'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                releases_url:
                  'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                ssh_url: 'git@github.com:octocat/Hello-World.git',
                stargazers_url:
                  'http://api.github.com/repos/octocat/Hello-World/stargazers',
                statuses_url:
                  'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                subscribers_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscribers',
                subscription_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscription',
                tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/tags',
                teams_url:
                  'http://api.github.com/repos/octocat/Hello-World/teams',
                trees_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                clone_url: 'https://github.com/octocat/Hello-World.git',
                mirror_url: 'git:git.example.com/octocat/Hello-World',
                hooks_url:
                  'http://api.github.com/repos/octocat/Hello-World/hooks',
                svn_url: 'https://svn.github.com/octocat/Hello-World',
                homepage: 'https://github.com',
                language: faker.lorem.slug(1),
                forks_count: 9,
                stargazers_count: 80,
                watchers_count: 80,
                size: 108,
                default_branch: 'master',
                open_issues_count: faker.datatype.number(),
                is_template: true,
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: true,
                has_projects: true,
                has_wiki: true,
                has_pages: faker.datatype.boolean(),
                has_downloads: true,
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: '2011-01-26T19:06:43Z',
                created_at: '2011-01-26T19:01:12Z',
                updated_at: '2011-01-26T19:14:43Z',
                allow_rebase_merge: true,
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  name: faker.name.findName(),
                  full_name: faker.name.findName(),
                  owner: {
                    login: faker.lorem.slug(1),
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    avatar_url: faker.internet.url(),
                    gravatar_id: faker.lorem.slug(1),
                    url: faker.internet.url(),
                    html_url: faker.internet.url(),
                    followers_url: faker.internet.url(),
                    following_url: faker.internet.url(),
                    gists_url: faker.internet.url(),
                    starred_url: faker.internet.url(),
                    subscriptions_url: faker.internet.url(),
                    organizations_url: faker.internet.url(),
                    repos_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    received_events_url: faker.internet.url(),
                    type: faker.lorem.slug(1),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.internet.url(),
                  description: faker.lorem.slug(1),
                  fork: faker.datatype.boolean(),
                  url: faker.internet.url(),
                  archive_url: faker.internet.url(),
                  assignees_url: faker.internet.url(),
                  blobs_url: faker.internet.url(),
                  branches_url: faker.internet.url(),
                  collaborators_url: faker.internet.url(),
                  comments_url: faker.internet.url(),
                  commits_url: faker.internet.url(),
                  compare_url: faker.internet.url(),
                  contents_url: faker.internet.url(),
                  contributors_url: faker.internet.url(),
                  deployments_url: faker.internet.url(),
                  downloads_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  forks_url: faker.internet.url(),
                  git_commits_url: faker.internet.url(),
                  git_refs_url: faker.internet.url(),
                  git_tags_url: faker.internet.url(),
                  git_url: faker.internet.url(),
                  issue_comment_url: faker.internet.url(),
                  issue_events_url: faker.internet.url(),
                  issues_url: faker.internet.url(),
                  keys_url: faker.internet.url(),
                  labels_url: faker.internet.url(),
                  languages_url: faker.internet.url(),
                  merges_url: faker.internet.url(),
                  milestones_url: faker.internet.url(),
                  notifications_url: faker.internet.url(),
                  pulls_url: faker.internet.url(),
                  releases_url: faker.internet.url(),
                  ssh_url: faker.internet.url(),
                  stargazers_url: faker.internet.url(),
                  statuses_url: faker.internet.url(),
                  subscribers_url: faker.internet.url(),
                  subscription_url: faker.internet.url(),
                  tags_url: faker.internet.url(),
                  teams_url: faker.internet.url(),
                  trees_url: faker.internet.url(),
                  clone_url: faker.internet.url(),
                  mirror_url: faker.internet.url(),
                  hooks_url: faker.internet.url(),
                  svn_url: faker.internet.url(),
                  homepage: faker.lorem.slug(1),
                  language: faker.lorem.slug(1),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.lorem.slug(1),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: faker.date.past(),
                  created_at: faker.date.past(),
                  updated_at: faker.date.past(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: true,
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: true,
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.lorem.slug(1),
                starred_at: '"2020-07-09T00:17:42Z"',
                anonymous_access_enabled: faker.datatype.boolean(),
              },
              sha: faker.lorem.slug(1),
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            },
            _links: {
              comments: {
                href: faker.lorem.slug(1),
              },
              commits: {
                href: faker.lorem.slug(1),
              },
              statuses: {
                href: faker.lorem.slug(1),
              },
              html: {
                href: faker.lorem.slug(1),
              },
              issue: {
                href: faker.lorem.slug(1),
              },
              review_comments: {
                href: faker.lorem.slug(1),
              },
              review_comment: {
                href: faker.lorem.slug(1),
              },
              self: {
                href: faker.lorem.slug(1),
              },
            },
            author_association: 'OWNER',
            auto_merge: {
              enabled_by: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              merge_method: faker.helpers.arrayElement([
                'merge',
                'squash',
                'rebase',
              ]),
              commit_title: faker.lorem.slug(1),
              commit_message: faker.lorem.slug(1),
            },
            draft: faker.datatype.boolean(),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [ctx.status(422), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347',
            id: 1,
            node_id: 'MDExOlB1bGxSZXF1ZXN0MQ==',
            html_url: 'https://github.com/octocat/Hello-World/pull/1347',
            diff_url: 'https://github.com/octocat/Hello-World/pull/1347.diff',
            patch_url: 'https://github.com/octocat/Hello-World/pull/1347.patch',
            issue_url:
              'https://api.github.com/repos/octocat/Hello-World/issues/1347',
            commits_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits',
            review_comments_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments',
            review_comment_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}',
            comments_url:
              'https://api.github.com/repos/octocat/Hello-World/issues/1347/comments',
            statuses_url:
              'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e',
            number: 1347,
            state: 'open',
            locked: true,
            title: 'new-feature',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'Please pull these awesome changes',
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              name: faker.name.findName(),
              description: faker.lorem.slug(1),
              color: faker.lorem.slug(1),
              default: faker.datatype.boolean(),
            })),
            milestone: {
              url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
              html_url:
                'https://github.com/octocat/Hello-World/milestones/v1.0',
              labels_url:
                'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
              id: 1002604,
              node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
              number: 42,
              state: 'open',
              title: 'v1.0',
              description: 'Tracking milestone for version 1.0',
              creator: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              open_issues: 4,
              closed_issues: 8,
              created_at: '2011-04-10T20:09:31Z',
              updated_at: '2014-03-03T18:58:10Z',
              closed_at: '2013-02-12T13:22:01Z',
              due_on: '2012-10-09T23:39:01Z',
            },
            active_lock_reason: 'too heated',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:01:12Z',
            closed_at: '2011-01-26T19:01:12Z',
            merged_at: '2011-01-26T19:01:12Z',
            merge_commit_sha: 'e5bd3914e2e596debea16f433f57875b5b90bcd6',
            assignee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            requested_reviewers: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            requested_teams: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              slug: faker.lorem.slug(1),
              description: faker.lorem.slug(1),
              privacy: faker.lorem.slug(1),
              permission: faker.lorem.slug(1),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.internet.url(),
              html_url: 'https://github.com/orgs/rails/teams/core',
              members_url: faker.internet.url(),
              repositories_url: faker.internet.url(),
              parent: {
                id: 1,
                node_id: 'MDQ6VGVhbTE=',
                url: 'https://api.github.com/organizations/1/team/1',
                members_url:
                  'https://api.github.com/organizations/1/team/1/members{/member}',
                name: 'Justice League',
                description: 'A great team.',
                permission: 'admin',
                privacy: 'closed',
                html_url: 'https://github.com/orgs/rails/teams/core',
                repositories_url:
                  'https://api.github.com/organizations/1/team/1/repos',
                slug: 'justice-league',
                ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
              },
            })),
            head: {
              label: faker.lorem.slug(1),
              ref: faker.lorem.slug(1),
              repo: {
                id: 42,
                node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                name: 'Team Environment',
                full_name: 'octocat/Hello-World',
                license: {
                  key: 'mit',
                  name: 'MIT License',
                  url: 'https://api.github.com/licenses/mit',
                  spdx_id: 'MIT',
                  node_id: 'MDc6TGljZW5zZW1pdA==',
                  html_url: faker.internet.url(),
                },
                organization: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                private: faker.datatype.boolean(),
                html_url: 'https://github.com/octocat/Hello-World',
                description: 'This your first repo!',
                fork: faker.datatype.boolean(),
                url: 'https://api.github.com/repos/octocat/Hello-World',
                archive_url:
                  'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                assignees_url:
                  'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                blobs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                branches_url:
                  'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                collaborators_url:
                  'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                comments_url:
                  'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                compare_url:
                  'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                contents_url:
                  'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                contributors_url:
                  'http://api.github.com/repos/octocat/Hello-World/contributors',
                deployments_url:
                  'http://api.github.com/repos/octocat/Hello-World/deployments',
                downloads_url:
                  'http://api.github.com/repos/octocat/Hello-World/downloads',
                events_url:
                  'http://api.github.com/repos/octocat/Hello-World/events',
                forks_url:
                  'http://api.github.com/repos/octocat/Hello-World/forks',
                git_commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                git_refs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                git_tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                git_url: 'git:github.com/octocat/Hello-World.git',
                issue_comment_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                issue_events_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                issues_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                keys_url:
                  'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                labels_url:
                  'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                languages_url:
                  'http://api.github.com/repos/octocat/Hello-World/languages',
                merges_url:
                  'http://api.github.com/repos/octocat/Hello-World/merges',
                milestones_url:
                  'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                notifications_url:
                  'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                pulls_url:
                  'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                releases_url:
                  'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                ssh_url: 'git@github.com:octocat/Hello-World.git',
                stargazers_url:
                  'http://api.github.com/repos/octocat/Hello-World/stargazers',
                statuses_url:
                  'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                subscribers_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscribers',
                subscription_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscription',
                tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/tags',
                teams_url:
                  'http://api.github.com/repos/octocat/Hello-World/teams',
                trees_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                clone_url: 'https://github.com/octocat/Hello-World.git',
                mirror_url: 'git:git.example.com/octocat/Hello-World',
                hooks_url:
                  'http://api.github.com/repos/octocat/Hello-World/hooks',
                svn_url: 'https://svn.github.com/octocat/Hello-World',
                homepage: 'https://github.com',
                language: faker.lorem.slug(1),
                forks_count: 9,
                stargazers_count: 80,
                watchers_count: 80,
                size: 108,
                default_branch: 'master',
                open_issues_count: faker.datatype.number(),
                is_template: true,
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: true,
                has_projects: true,
                has_wiki: true,
                has_pages: faker.datatype.boolean(),
                has_downloads: true,
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: '2011-01-26T19:06:43Z',
                created_at: '2011-01-26T19:01:12Z',
                updated_at: '2011-01-26T19:14:43Z',
                allow_rebase_merge: true,
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  name: faker.name.findName(),
                  full_name: faker.name.findName(),
                  owner: {
                    login: faker.lorem.slug(1),
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    avatar_url: faker.internet.url(),
                    gravatar_id: faker.lorem.slug(1),
                    url: faker.internet.url(),
                    html_url: faker.internet.url(),
                    followers_url: faker.internet.url(),
                    following_url: faker.internet.url(),
                    gists_url: faker.internet.url(),
                    starred_url: faker.internet.url(),
                    subscriptions_url: faker.internet.url(),
                    organizations_url: faker.internet.url(),
                    repos_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    received_events_url: faker.internet.url(),
                    type: faker.lorem.slug(1),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.internet.url(),
                  description: faker.lorem.slug(1),
                  fork: faker.datatype.boolean(),
                  url: faker.internet.url(),
                  archive_url: faker.internet.url(),
                  assignees_url: faker.internet.url(),
                  blobs_url: faker.internet.url(),
                  branches_url: faker.internet.url(),
                  collaborators_url: faker.internet.url(),
                  comments_url: faker.internet.url(),
                  commits_url: faker.internet.url(),
                  compare_url: faker.internet.url(),
                  contents_url: faker.internet.url(),
                  contributors_url: faker.internet.url(),
                  deployments_url: faker.internet.url(),
                  downloads_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  forks_url: faker.internet.url(),
                  git_commits_url: faker.internet.url(),
                  git_refs_url: faker.internet.url(),
                  git_tags_url: faker.internet.url(),
                  git_url: faker.internet.url(),
                  issue_comment_url: faker.internet.url(),
                  issue_events_url: faker.internet.url(),
                  issues_url: faker.internet.url(),
                  keys_url: faker.internet.url(),
                  labels_url: faker.internet.url(),
                  languages_url: faker.internet.url(),
                  merges_url: faker.internet.url(),
                  milestones_url: faker.internet.url(),
                  notifications_url: faker.internet.url(),
                  pulls_url: faker.internet.url(),
                  releases_url: faker.internet.url(),
                  ssh_url: faker.internet.url(),
                  stargazers_url: faker.internet.url(),
                  statuses_url: faker.internet.url(),
                  subscribers_url: faker.internet.url(),
                  subscription_url: faker.internet.url(),
                  tags_url: faker.internet.url(),
                  teams_url: faker.internet.url(),
                  trees_url: faker.internet.url(),
                  clone_url: faker.internet.url(),
                  mirror_url: faker.internet.url(),
                  hooks_url: faker.internet.url(),
                  svn_url: faker.internet.url(),
                  homepage: faker.lorem.slug(1),
                  language: faker.lorem.slug(1),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.lorem.slug(1),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: faker.date.past(),
                  created_at: faker.date.past(),
                  updated_at: faker.date.past(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: true,
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: true,
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.lorem.slug(1),
                starred_at: '"2020-07-09T00:17:42Z"',
                anonymous_access_enabled: faker.datatype.boolean(),
              },
              sha: faker.lorem.slug(1),
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            },
            base: {
              label: faker.lorem.slug(1),
              ref: faker.lorem.slug(1),
              repo: {
                id: 42,
                node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                name: 'Team Environment',
                full_name: 'octocat/Hello-World',
                license: {
                  key: 'mit',
                  name: 'MIT License',
                  url: 'https://api.github.com/licenses/mit',
                  spdx_id: 'MIT',
                  node_id: 'MDc6TGljZW5zZW1pdA==',
                  html_url: faker.internet.url(),
                },
                organization: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                private: faker.datatype.boolean(),
                html_url: 'https://github.com/octocat/Hello-World',
                description: 'This your first repo!',
                fork: faker.datatype.boolean(),
                url: 'https://api.github.com/repos/octocat/Hello-World',
                archive_url:
                  'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                assignees_url:
                  'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                blobs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                branches_url:
                  'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                collaborators_url:
                  'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                comments_url:
                  'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                compare_url:
                  'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                contents_url:
                  'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                contributors_url:
                  'http://api.github.com/repos/octocat/Hello-World/contributors',
                deployments_url:
                  'http://api.github.com/repos/octocat/Hello-World/deployments',
                downloads_url:
                  'http://api.github.com/repos/octocat/Hello-World/downloads',
                events_url:
                  'http://api.github.com/repos/octocat/Hello-World/events',
                forks_url:
                  'http://api.github.com/repos/octocat/Hello-World/forks',
                git_commits_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                git_refs_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                git_tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                git_url: 'git:github.com/octocat/Hello-World.git',
                issue_comment_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                issue_events_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                issues_url:
                  'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                keys_url:
                  'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                labels_url:
                  'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                languages_url:
                  'http://api.github.com/repos/octocat/Hello-World/languages',
                merges_url:
                  'http://api.github.com/repos/octocat/Hello-World/merges',
                milestones_url:
                  'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                notifications_url:
                  'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                pulls_url:
                  'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                releases_url:
                  'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                ssh_url: 'git@github.com:octocat/Hello-World.git',
                stargazers_url:
                  'http://api.github.com/repos/octocat/Hello-World/stargazers',
                statuses_url:
                  'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                subscribers_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscribers',
                subscription_url:
                  'http://api.github.com/repos/octocat/Hello-World/subscription',
                tags_url:
                  'http://api.github.com/repos/octocat/Hello-World/tags',
                teams_url:
                  'http://api.github.com/repos/octocat/Hello-World/teams',
                trees_url:
                  'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                clone_url: 'https://github.com/octocat/Hello-World.git',
                mirror_url: 'git:git.example.com/octocat/Hello-World',
                hooks_url:
                  'http://api.github.com/repos/octocat/Hello-World/hooks',
                svn_url: 'https://svn.github.com/octocat/Hello-World',
                homepage: 'https://github.com',
                language: faker.lorem.slug(1),
                forks_count: 9,
                stargazers_count: 80,
                watchers_count: 80,
                size: 108,
                default_branch: 'master',
                open_issues_count: faker.datatype.number(),
                is_template: true,
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: true,
                has_projects: true,
                has_wiki: true,
                has_pages: faker.datatype.boolean(),
                has_downloads: true,
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: '2011-01-26T19:06:43Z',
                created_at: '2011-01-26T19:01:12Z',
                updated_at: '2011-01-26T19:14:43Z',
                allow_rebase_merge: true,
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  name: faker.name.findName(),
                  full_name: faker.name.findName(),
                  owner: {
                    login: faker.lorem.slug(1),
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    avatar_url: faker.internet.url(),
                    gravatar_id: faker.lorem.slug(1),
                    url: faker.internet.url(),
                    html_url: faker.internet.url(),
                    followers_url: faker.internet.url(),
                    following_url: faker.internet.url(),
                    gists_url: faker.internet.url(),
                    starred_url: faker.internet.url(),
                    subscriptions_url: faker.internet.url(),
                    organizations_url: faker.internet.url(),
                    repos_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    received_events_url: faker.internet.url(),
                    type: faker.lorem.slug(1),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.internet.url(),
                  description: faker.lorem.slug(1),
                  fork: faker.datatype.boolean(),
                  url: faker.internet.url(),
                  archive_url: faker.internet.url(),
                  assignees_url: faker.internet.url(),
                  blobs_url: faker.internet.url(),
                  branches_url: faker.internet.url(),
                  collaborators_url: faker.internet.url(),
                  comments_url: faker.internet.url(),
                  commits_url: faker.internet.url(),
                  compare_url: faker.internet.url(),
                  contents_url: faker.internet.url(),
                  contributors_url: faker.internet.url(),
                  deployments_url: faker.internet.url(),
                  downloads_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  forks_url: faker.internet.url(),
                  git_commits_url: faker.internet.url(),
                  git_refs_url: faker.internet.url(),
                  git_tags_url: faker.internet.url(),
                  git_url: faker.internet.url(),
                  issue_comment_url: faker.internet.url(),
                  issue_events_url: faker.internet.url(),
                  issues_url: faker.internet.url(),
                  keys_url: faker.internet.url(),
                  labels_url: faker.internet.url(),
                  languages_url: faker.internet.url(),
                  merges_url: faker.internet.url(),
                  milestones_url: faker.internet.url(),
                  notifications_url: faker.internet.url(),
                  pulls_url: faker.internet.url(),
                  releases_url: faker.internet.url(),
                  ssh_url: faker.internet.url(),
                  stargazers_url: faker.internet.url(),
                  statuses_url: faker.internet.url(),
                  subscribers_url: faker.internet.url(),
                  subscription_url: faker.internet.url(),
                  tags_url: faker.internet.url(),
                  teams_url: faker.internet.url(),
                  trees_url: faker.internet.url(),
                  clone_url: faker.internet.url(),
                  mirror_url: faker.internet.url(),
                  hooks_url: faker.internet.url(),
                  svn_url: faker.internet.url(),
                  homepage: faker.lorem.slug(1),
                  language: faker.lorem.slug(1),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.lorem.slug(1),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: faker.date.past(),
                  created_at: faker.date.past(),
                  updated_at: faker.date.past(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: true,
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: true,
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.lorem.slug(1),
                starred_at: '"2020-07-09T00:17:42Z"',
                anonymous_access_enabled: faker.datatype.boolean(),
              },
              sha: faker.lorem.slug(1),
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            },
            _links: {
              comments: {
                href: faker.lorem.slug(1),
              },
              commits: {
                href: faker.lorem.slug(1),
              },
              statuses: {
                href: faker.lorem.slug(1),
              },
              html: {
                href: faker.lorem.slug(1),
              },
              issue: {
                href: faker.lorem.slug(1),
              },
              review_comments: {
                href: faker.lorem.slug(1),
              },
              review_comment: {
                href: faker.lorem.slug(1),
              },
              self: {
                href: faker.lorem.slug(1),
              },
            },
            author_association: 'OWNER',
            auto_merge: {
              enabled_by: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              merge_method: faker.helpers.arrayElement([
                'merge',
                'squash',
                'rebase',
              ]),
              commit_title: faker.lorem.slug(1),
              commit_message: faker.lorem.slug(1),
            },
            draft: faker.datatype.boolean(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/reviews`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 42,
              node_id: 'MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=',
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              body: 'This looks great.',
              state: 'CHANGES_REQUESTED',
              html_url:
                'https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80',
              pull_request_url:
                'https://api.github.com/repos/octocat/Hello-World/pulls/12',
              _links: {
                html: {
                  href: faker.lorem.slug(1),
                },
                pull_request: {
                  href: faker.lorem.slug(1),
                },
              },
              submitted_at: faker.date.past(),
              commit_id: '54bb654c9e6025347f57900a4a5c2313a96b8035',
              body_html: faker.lorem.slug(1),
              body_text: faker.lorem.slug(1),
              author_association: 'OWNER',
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/reviews`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 42,
            node_id: 'MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'This looks great.',
            state: 'CHANGES_REQUESTED',
            html_url:
              'https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80',
            pull_request_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/12',
            _links: {
              html: {
                href: faker.lorem.slug(1),
              },
              pull_request: {
                href: faker.lorem.slug(1),
              },
            },
            submitted_at: faker.date.past(),
            commit_id: '54bb654c9e6025347f57900a4a5c2313a96b8035',
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            author_association: 'OWNER',
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 42,
            node_id: 'MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'This looks great.',
            state: 'CHANGES_REQUESTED',
            html_url:
              'https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80',
            pull_request_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/12',
            _links: {
              html: {
                href: faker.lorem.slug(1),
              },
              pull_request: {
                href: faker.lorem.slug(1),
              },
            },
            submitted_at: faker.date.past(),
            commit_id: '54bb654c9e6025347f57900a4a5c2313a96b8035',
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            author_association: 'OWNER',
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 42,
            node_id: 'MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'This looks great.',
            state: 'CHANGES_REQUESTED',
            html_url:
              'https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80',
            pull_request_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/12',
            _links: {
              html: {
                href: faker.lorem.slug(1),
              },
              pull_request: {
                href: faker.lorem.slug(1),
              },
            },
            submitted_at: faker.date.past(),
            commit_id: '54bb654c9e6025347f57900a4a5c2313a96b8035',
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            author_association: 'OWNER',
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 42,
            node_id: 'MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'This looks great.',
            state: 'CHANGES_REQUESTED',
            html_url:
              'https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80',
            pull_request_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/12',
            _links: {
              html: {
                href: faker.lorem.slug(1),
              },
              pull_request: {
                href: faker.lorem.slug(1),
              },
            },
            submitted_at: faker.date.past(),
            commit_id: '54bb654c9e6025347f57900a4a5c2313a96b8035',
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            author_association: 'OWNER',
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/comments`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
              pull_request_review_id: 42,
              id: 10,
              node_id: 'MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw',
              diff_hunk:
                '@@ -16,33 +16,40 @@ public class Connection : IConnection...',
              path: 'file1.txt',
              position: 1,
              original_position: 4,
              commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
              original_commit_id: '9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840',
              in_reply_to_id: 8,
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              body: 'Great stuff',
              created_at: '2011-04-14T16:00:49Z',
              updated_at: '2011-04-14T16:00:49Z',
              html_url:
                'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
              pull_request_url:
                'https://api.github.com/repos/octocat/Hello-World/pulls/1',
              author_association: 'OWNER',
              _links: {
                self: {
                  href: faker.lorem.slug(1),
                },
                html: {
                  href: faker.lorem.slug(1),
                },
                pull_request: {
                  href: faker.lorem.slug(1),
                },
              },
              body_text: faker.lorem.slug(1),
              body_html: faker.lorem.slug(1),
              reactions: {
                url: faker.internet.url(),
                total_count: faker.datatype.number(),
                '+1': faker.datatype.number(),
                '-1': faker.datatype.number(),
                laugh: faker.datatype.number(),
                confused: faker.datatype.number(),
                heart: faker.datatype.number(),
                hooray: faker.datatype.number(),
                eyes: faker.datatype.number(),
                rocket: faker.datatype.number(),
              },
              side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
              start_side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
              line: 2,
              original_line: 2,
              start_line: 2,
              original_start_line: 2,
            }))
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/dismissals`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 42,
            node_id: 'MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'This looks great.',
            state: 'CHANGES_REQUESTED',
            html_url:
              'https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80',
            pull_request_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/12',
            _links: {
              html: {
                href: faker.lorem.slug(1),
              },
              pull_request: {
                href: faker.lorem.slug(1),
              },
            },
            submitted_at: faker.date.past(),
            commit_id: '54bb654c9e6025347f57900a4a5c2313a96b8035',
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            author_association: 'OWNER',
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/events`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 42,
            node_id: 'MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'This looks great.',
            state: 'CHANGES_REQUESTED',
            html_url:
              'https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80',
            pull_request_url:
              'https://api.github.com/repos/octocat/Hello-World/pulls/12',
            _links: {
              html: {
                href: faker.lorem.slug(1),
              },
              pull_request: {
                href: faker.lorem.slug(1),
              },
            },
            submitted_at: faker.date.past(),
            commit_id: '54bb654c9e6025347f57900a4a5c2313a96b8035',
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            author_association: 'OWNER',
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repos/:owner/:repo/pulls/:pullNumber/update-branch`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(202),
          ctx.json({
            message: faker.lorem.slug(1),
            url: faker.internet.url(),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/readme`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          type: faker.helpers.arrayElement(['file']),
          encoding: faker.lorem.slug(1),
          size: faker.datatype.number(),
          name: faker.name.findName(),
          path: faker.lorem.slug(1),
          content: faker.lorem.slug(1),
          sha: faker.lorem.slug(1),
          url: faker.internet.url(),
          git_url: faker.internet.url(),
          html_url: faker.internet.url(),
          download_url: faker.internet.url(),
          _links: {
            git: faker.internet.url(),
            html: faker.internet.url(),
            self: faker.internet.url(),
          },
          target: '"actual/actual.md"',
          submodule_git_url: '"git://example.com/defunkt/dotjs.git"',
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/readme/:dir`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          type: faker.helpers.arrayElement(['file']),
          encoding: faker.lorem.slug(1),
          size: faker.datatype.number(),
          name: faker.name.findName(),
          path: faker.lorem.slug(1),
          content: faker.lorem.slug(1),
          sha: faker.lorem.slug(1),
          url: faker.internet.url(),
          git_url: faker.internet.url(),
          html_url: faker.internet.url(),
          download_url: faker.internet.url(),
          _links: {
            git: faker.internet.url(),
            html: faker.internet.url(),
            self: faker.internet.url(),
          },
          target: '"actual/actual.md"',
          submodule_git_url: '"git://example.com/defunkt/dotjs.git"',
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/releases`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            assets_url: faker.internet.url(),
            upload_url: faker.internet.url(),
            tarball_url: faker.internet.url(),
            zipball_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            tag_name: 'v1.0.0',
            target_commitish: 'master',
            name: faker.name.findName(),
            body: faker.lorem.slug(1),
            draft: faker.datatype.boolean(),
            prerelease: faker.datatype.boolean(),
            created_at: faker.date.past(),
            published_at: faker.date.past(),
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assets: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              url: faker.internet.url(),
              browser_download_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: 'Team Environment',
              label: faker.lorem.slug(1),
              state: faker.helpers.arrayElement(['uploaded', 'open']),
              content_type: faker.lorem.slug(1),
              size: faker.datatype.number(),
              download_count: faker.datatype.number(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              uploader: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            })),
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            mentions_count: faker.datatype.number(),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/releases`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          assets_url: faker.internet.url(),
          upload_url: faker.internet.url(),
          tarball_url: faker.internet.url(),
          zipball_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(1),
          tag_name: 'v1.0.0',
          target_commitish: 'master',
          name: faker.name.findName(),
          body: faker.lorem.slug(1),
          draft: faker.datatype.boolean(),
          prerelease: faker.datatype.boolean(),
          created_at: faker.date.past(),
          published_at: faker.date.past(),
          author: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          assets: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: faker.internet.url(),
            browser_download_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            name: 'Team Environment',
            label: faker.lorem.slug(1),
            state: faker.helpers.arrayElement(['uploaded', 'open']),
            content_type: faker.lorem.slug(1),
            size: faker.datatype.number(),
            download_count: faker.datatype.number(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            uploader: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
          })),
          body_html: faker.lorem.slug(1),
          body_text: faker.lorem.slug(1),
          mentions_count: faker.datatype.number(),
          reactions: {
            url: faker.internet.url(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/releases/assets/:assetId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.internet.url(),
            browser_download_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            name: 'Team Environment',
            label: faker.lorem.slug(1),
            state: faker.helpers.arrayElement(['uploaded', 'open']),
            content_type: faker.lorem.slug(1),
            size: faker.datatype.number(),
            download_count: faker.datatype.number(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            uploader: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
          }),
        ],
        [ctx.status(302), ctx.json(null)],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/repos/:owner/:repo/releases/assets/:assetId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.internet.url(),
            browser_download_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            name: 'Team Environment',
            label: faker.lorem.slug(1),
            state: faker.helpers.arrayElement(['uploaded', 'open']),
            content_type: faker.lorem.slug(1),
            size: faker.datatype.number(),
            download_count: faker.datatype.number(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            uploader: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/releases/assets/:assetId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/releases/generate-notes`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            name: 'Release v1.0.0 is now available!',
            body: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/releases/latest`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          assets_url: faker.internet.url(),
          upload_url: faker.internet.url(),
          tarball_url: faker.internet.url(),
          zipball_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(1),
          tag_name: 'v1.0.0',
          target_commitish: 'master',
          name: faker.name.findName(),
          body: faker.lorem.slug(1),
          draft: faker.datatype.boolean(),
          prerelease: faker.datatype.boolean(),
          created_at: faker.date.past(),
          published_at: faker.date.past(),
          author: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          assets: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: faker.internet.url(),
            browser_download_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            name: 'Team Environment',
            label: faker.lorem.slug(1),
            state: faker.helpers.arrayElement(['uploaded', 'open']),
            content_type: faker.lorem.slug(1),
            size: faker.datatype.number(),
            download_count: faker.datatype.number(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            uploader: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
          })),
          body_html: faker.lorem.slug(1),
          body_text: faker.lorem.slug(1),
          mentions_count: faker.datatype.number(),
          reactions: {
            url: faker.internet.url(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/releases/tags/:tag`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            assets_url: faker.internet.url(),
            upload_url: faker.internet.url(),
            tarball_url: faker.internet.url(),
            zipball_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            tag_name: 'v1.0.0',
            target_commitish: 'master',
            name: faker.name.findName(),
            body: faker.lorem.slug(1),
            draft: faker.datatype.boolean(),
            prerelease: faker.datatype.boolean(),
            created_at: faker.date.past(),
            published_at: faker.date.past(),
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assets: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              url: faker.internet.url(),
              browser_download_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: 'Team Environment',
              label: faker.lorem.slug(1),
              state: faker.helpers.arrayElement(['uploaded', 'open']),
              content_type: faker.lorem.slug(1),
              size: faker.datatype.number(),
              download_count: faker.datatype.number(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              uploader: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            })),
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            mentions_count: faker.datatype.number(),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/releases/:releaseId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            assets_url: faker.internet.url(),
            upload_url: faker.internet.url(),
            tarball_url: faker.internet.url(),
            zipball_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            tag_name: 'v1.0.0',
            target_commitish: 'master',
            name: faker.name.findName(),
            body: faker.lorem.slug(1),
            draft: faker.datatype.boolean(),
            prerelease: faker.datatype.boolean(),
            created_at: faker.date.past(),
            published_at: faker.date.past(),
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assets: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              url: faker.internet.url(),
              browser_download_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: 'Team Environment',
              label: faker.lorem.slug(1),
              state: faker.helpers.arrayElement(['uploaded', 'open']),
              content_type: faker.lorem.slug(1),
              size: faker.datatype.number(),
              download_count: faker.datatype.number(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              uploader: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            })),
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            mentions_count: faker.datatype.number(),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/repos/:owner/:repo/releases/:releaseId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            assets_url: faker.internet.url(),
            upload_url: faker.internet.url(),
            tarball_url: faker.internet.url(),
            zipball_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            tag_name: 'v1.0.0',
            target_commitish: 'master',
            name: faker.name.findName(),
            body: faker.lorem.slug(1),
            draft: faker.datatype.boolean(),
            prerelease: faker.datatype.boolean(),
            created_at: faker.date.past(),
            published_at: faker.date.past(),
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assets: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              url: faker.internet.url(),
              browser_download_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: 'Team Environment',
              label: faker.lorem.slug(1),
              state: faker.helpers.arrayElement(['uploaded', 'open']),
              content_type: faker.lorem.slug(1),
              size: faker.datatype.number(),
              download_count: faker.datatype.number(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              uploader: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            })),
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            mentions_count: faker.datatype.number(),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/releases/:releaseId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/releases/:releaseId/assets`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              url: faker.internet.url(),
              browser_download_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: 'Team Environment',
              label: faker.lorem.slug(1),
              state: faker.helpers.arrayElement(['uploaded', 'open']),
              content_type: faker.lorem.slug(1),
              size: faker.datatype.number(),
              download_count: faker.datatype.number(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              uploader: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/releases/:releaseId/assets`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            url: faker.internet.url(),
            browser_download_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            name: 'Team Environment',
            label: faker.lorem.slug(1),
            state: faker.helpers.arrayElement(['uploaded', 'open']),
            content_type: faker.lorem.slug(1),
            size: faker.datatype.number(),
            download_count: faker.datatype.number(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            uploader: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
          }),
        ],
        [ctx.status(422), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/releases/:releaseId/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 1,
              node_id: 'MDg6UmVhY3Rpb24x',
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              content: 'heart',
              created_at: '2016-05-20T20:09:31Z',
            }))
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/repos/:owner/:repo/releases/:releaseId/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: 1,
            node_id: 'MDg6UmVhY3Rpb24x',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            content: 'heart',
            created_at: '2016-05-20T20:09:31Z',
          }),
        ],
        [
          ctx.status(201),
          ctx.json({
            id: 1,
            node_id: 'MDg6UmVhY3Rpb24x',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            content: 'heart',
            created_at: '2016-05-20T20:09:31Z',
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(1),
              field: faker.lorem.slug(1),
              message: faker.lorem.slug(1),
              code: faker.lorem.slug(1),
              index: faker.datatype.number(),
              value: null,
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repos/:owner/:repo/releases/:releaseId/reactions/:reactionId`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/secret-scanning/alerts`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              number: faker.datatype.number(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              locations_url: faker.internet.url(),
              state: faker.helpers.arrayElement(['open', 'resolved']),
              resolution: faker.helpers.arrayElement([
                null,
                'false_positive',
                'wont_fix',
                'revoked',
                'used_in_tests',
              ]),
              resolved_at: faker.date.past(),
              resolved_by: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              secret_type: faker.lorem.slug(1),
              secret: faker.lorem.slug(1),
            }))
          ),
        ],
        [ctx.status(404), ctx.json(null)],
        [
          ctx.status(503),
          ctx.json({
            code: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/secret-scanning/alerts/:alertNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            number: faker.datatype.number(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            locations_url: faker.internet.url(),
            state: faker.helpers.arrayElement(['open', 'resolved']),
            resolution: faker.helpers.arrayElement([
              null,
              'false_positive',
              'wont_fix',
              'revoked',
              'used_in_tests',
            ]),
            resolved_at: faker.date.past(),
            resolved_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            secret_type: faker.lorem.slug(1),
            secret: faker.lorem.slug(1),
          }),
        ],
        [ctx.status(304), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
        [
          ctx.status(503),
          ctx.json({
            code: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/repos/:owner/:repo/secret-scanning/alerts/:alertNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            number: faker.datatype.number(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            locations_url: faker.internet.url(),
            state: faker.helpers.arrayElement(['open', 'resolved']),
            resolution: faker.helpers.arrayElement([
              null,
              'false_positive',
              'wont_fix',
              'revoked',
              'used_in_tests',
            ]),
            resolved_at: faker.date.past(),
            resolved_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            secret_type: faker.lorem.slug(1),
            secret: faker.lorem.slug(1),
          }),
        ],
        [ctx.status(404), ctx.json(null)],
        [ctx.status(422), ctx.json(null)],
        [
          ctx.status(503),
          ctx.json({
            code: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/secret-scanning/alerts/:alertNumber/locations`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              type: 'commit',
              details: null,
            }))
          ),
        ],
        [ctx.status(404), ctx.json(null)],
        [
          ctx.status(503),
          ctx.json({
            code: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/stargazers`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(null)],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repos/:owner/:repo/stats/code_frequency`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ =>
              [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.datatype.number())
            )
          ),
        ],
        [ctx.status(202), ctx.json({})],
        [ctx.status(204), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/stats/commit_activity`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              days: [0, 3, 26, 20, 39, 1, 0],
              total: 89,
              week: 1336280400,
            }))
          ),
        ],
        [ctx.status(202), ctx.json({})],
        [ctx.status(204), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/stats/contributors`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              author: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              total: 135,
              weeks: [{ w: '1367712000', a: 6898, d: 77, c: 10 }],
            }))
          ),
        ],
        [ctx.status(202), ctx.json({})],
        [ctx.status(204), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repos/:owner/:repo/stats/participation`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            all: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.datatype.number()),
            owner: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.datatype.number()),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repos/:owner/:repo/stats/punch_card`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ =>
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.datatype.number())
          )
        ),
      ],
      [ctx.status(204), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/statuses/:sha`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(1),
          state: faker.lorem.slug(1),
          description: faker.lorem.slug(1),
          target_url: faker.internet.url(),
          context: faker.lorem.slug(1),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          creator: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/subscribers`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/subscription`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          subscribed: true,
          ignored: faker.datatype.boolean(),
          reason: faker.lorem.slug(1),
          created_at: '2012-10-06T21:34:12Z',
          url: 'https://api.github.com/repos/octocat/example/subscription',
          repository_url: 'https://api.github.com/repos/octocat/example',
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [ctx.status(404), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/repos/:owner/:repo/subscription`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          subscribed: true,
          ignored: faker.datatype.boolean(),
          reason: faker.lorem.slug(1),
          created_at: '2012-10-06T21:34:12Z',
          url: 'https://api.github.com/repos/octocat/example/subscription',
          repository_url: 'https://api.github.com/repos/octocat/example',
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/repos/:owner/:repo/subscription`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/tags`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: 'v0.1',
            commit: {
              sha: faker.lorem.slug(1),
              url: faker.internet.url(),
            },
            zipball_url: 'https://github.com/octocat/Hello-World/zipball/v0.1',
            tarball_url: 'https://github.com/octocat/Hello-World/tarball/v0.1',
            node_id: faker.lorem.slug(1),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/tarball/:ref`, (_, res, ctx) => {
    const resultArray = [[ctx.status(302), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/teams`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            slug: faker.lorem.slug(1),
            description: faker.lorem.slug(1),
            privacy: faker.lorem.slug(1),
            permission: faker.lorem.slug(1),
            permissions: {
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
            url: faker.internet.url(),
            html_url: 'https://github.com/orgs/rails/teams/core',
            members_url: faker.internet.url(),
            repositories_url: faker.internet.url(),
            parent: {
              id: 1,
              node_id: 'MDQ6VGVhbTE=',
              url: 'https://api.github.com/organizations/1/team/1',
              members_url:
                'https://api.github.com/organizations/1/team/1/members{/member}',
              name: 'Justice League',
              description: 'A great team.',
              permission: 'admin',
              privacy: 'closed',
              html_url: 'https://github.com/orgs/rails/teams/core',
              repositories_url:
                'https://api.github.com/organizations/1/team/1/repos',
              slug: 'justice-league',
              ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
            },
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/topics`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          names: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/repos/:owner/:repo/topics`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          names: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/repos/:owner/:repo/transfer`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(202),
        ctx.json({
          id: 1296269,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Hello-World',
          full_name: 'octocat/Hello-World',
          owner: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          private: faker.datatype.boolean(),
          html_url: 'https://github.com/octocat/Hello-World',
          description: 'This your first repo!',
          fork: faker.datatype.boolean(),
          url: 'https://api.github.com/repos/octocat/Hello-World',
          archive_url:
            'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
          assignees_url:
            'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
          blobs_url:
            'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
          branches_url:
            'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
          collaborators_url:
            'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
          comments_url:
            'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
          commits_url:
            'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
          compare_url:
            'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
          contents_url:
            'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
          contributors_url:
            'http://api.github.com/repos/octocat/Hello-World/contributors',
          deployments_url:
            'http://api.github.com/repos/octocat/Hello-World/deployments',
          downloads_url:
            'http://api.github.com/repos/octocat/Hello-World/downloads',
          events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
          forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
          git_commits_url:
            'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
          git_refs_url:
            'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
          git_tags_url:
            'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
          git_url: faker.internet.url(),
          issue_comment_url:
            'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
          issue_events_url:
            'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
          issues_url:
            'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
          keys_url:
            'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
          labels_url:
            'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
          languages_url:
            'http://api.github.com/repos/octocat/Hello-World/languages',
          merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
          milestones_url:
            'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
          notifications_url:
            'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
          pulls_url:
            'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
          releases_url:
            'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
          ssh_url: faker.internet.url(),
          stargazers_url:
            'http://api.github.com/repos/octocat/Hello-World/stargazers',
          statuses_url:
            'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
          subscribers_url:
            'http://api.github.com/repos/octocat/Hello-World/subscribers',
          subscription_url:
            'http://api.github.com/repos/octocat/Hello-World/subscription',
          tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
          teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
          trees_url:
            'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
          clone_url: faker.internet.url(),
          mirror_url: faker.internet.url(),
          hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
          svn_url: faker.internet.url(),
          homepage: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(1),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: '2011-01-26T19:06:43Z',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:14:43Z',
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          temp_clone_token: faker.lorem.slug(1),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: 'contributor_covenant',
            name: 'Contributor Covenant',
            url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
            body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(1),
            name: faker.name.findName(),
            spdx_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            node_id: faker.lorem.slug(1),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/repos/:owner/:repo/zipball/:ref`, (_, res, ctx) => {
    const resultArray = [[ctx.status(302), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(
    `${baseURL}/repos/:templateOwner/:templateRepo/generate`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            id: 42,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Team Environment',
            full_name: 'octocat/Hello-World',
            license: {
              key: 'mit',
              name: 'MIT License',
              url: 'https://api.github.com/licenses/mit',
              spdx_id: 'MIT',
              node_id: 'MDc6TGljZW5zZW1pdA==',
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: 'git:github.com/octocat/Hello-World.git',
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: 'git@github.com:octocat/Hello-World.git',
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: 'https://github.com/octocat/Hello-World.git',
            mirror_url: 'git:git.example.com/octocat/Hello-World',
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: 'https://svn.github.com/octocat/Hello-World',
            homepage: 'https://github.com',
            language: faker.lorem.slug(1),
            forks_count: 9,
            stargazers_count: 80,
            watchers_count: 80,
            size: 108,
            default_branch: 'master',
            open_issues_count: faker.datatype.number(),
            is_template: true,
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: true,
            has_projects: true,
            has_wiki: true,
            has_pages: faker.datatype.boolean(),
            has_downloads: true,
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            allow_rebase_merge: true,
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              full_name: faker.name.findName(),
              owner: {
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              git_url: faker.internet.url(),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              notifications_url: faker.internet.url(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              ssh_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: faker.date.past(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: true,
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: true,
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(1),
            starred_at: '"2020-07-09T00:17:42Z"',
            anonymous_access_enabled: faker.datatype.boolean(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/repositories`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 1296269,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Hello-World',
            full_name: 'octocat/Hello-World',
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: faker.internet.url(),
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: faker.internet.url(),
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(1),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: 'contributor_covenant',
              name: 'Contributor Covenant',
              url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
              body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(1),
              name: faker.name.findName(),
              spdx_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              node_id: faker.lorem.slug(1),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/repositories/:repositoryId/environments/:environmentName/secrets`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            secrets: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: 'SECRET_TOKEN',
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
            })),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repositories/:repositoryId/environments/:environmentName/secrets/public-key`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            key_id: '1234567',
            key: 'hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=',
            id: 2,
            url: 'https://api.github.com/user/keys/2',
            title: 'ssh-rsa AAAAB3NzaC1yc2EAAA',
            created_at: '2011-01-26T19:01:12Z',
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/repositories/:repositoryId/environments/:environmentName/secrets/:secretName`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            name: 'SECRET_TOKEN',
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/repositories/:repositoryId/environments/:environmentName/secrets/:secretName`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(201), ctx.json({})],
        [ctx.status(204), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/repositories/:repositoryId/environments/:environmentName/secrets/:secretName`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/search/code`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          incomplete_results: faker.datatype.boolean(),
          items: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            path: faker.lorem.slug(1),
            sha: faker.lorem.slug(1),
            url: faker.internet.url(),
            git_url: faker.internet.url(),
            html_url: faker.internet.url(),
            repository: {
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: faker.internet.url(),
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: faker.internet.url(),
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: 'contributor_covenant',
                name: 'Contributor Covenant',
                url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                html_url: faker.internet.url(),
              },
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                spdx_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                node_id: faker.lorem.slug(1),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            score: faker.datatype.number(),
            file_size: faker.datatype.number(),
            language: faker.lorem.slug(1),
            last_modified_at: faker.date.past(),
            line_numbers: ['73..77', '77..78'],
            text_matches: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              object_url: faker.internet.url(),
              object_type: faker.lorem.slug(1),
              property: faker.lorem.slug(1),
              fragment: faker.lorem.slug(1),
              matches: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                text: faker.lorem.slug(1),
                indices: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.datatype.number()),
              })),
            })),
          })),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.lorem.slug(1),
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/search/commits`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          incomplete_results: faker.datatype.boolean(),
          items: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: faker.internet.url(),
            sha: faker.lorem.slug(1),
            html_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            commit: {
              author: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                date: faker.date.past(),
              },
              committer: {
                name: '"Chris Wanstrath"',
                email: '"chris@ozmm.org"',
                date: '"2007-10-29T02:42:39.000-07:00"',
              },
              comment_count: faker.datatype.number(),
              message: faker.lorem.slug(1),
              tree: {
                sha: faker.lorem.slug(1),
                url: faker.internet.url(),
              },
              url: faker.internet.url(),
              verification: {
                verified: faker.datatype.boolean(),
                reason: faker.lorem.slug(1),
                payload: faker.lorem.slug(1),
                signature: faker.lorem.slug(1),
              },
            },
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            committer: {
              name: '"Chris Wanstrath"',
              email: '"chris@ozmm.org"',
              date: '"2007-10-29T02:42:39.000-07:00"',
            },
            parents: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              sha: faker.lorem.slug(1),
            })),
            repository: {
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: faker.internet.url(),
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: faker.internet.url(),
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: 'contributor_covenant',
                name: 'Contributor Covenant',
                url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                html_url: faker.internet.url(),
              },
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                spdx_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                node_id: faker.lorem.slug(1),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            score: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            text_matches: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              object_url: faker.internet.url(),
              object_type: faker.lorem.slug(1),
              property: faker.lorem.slug(1),
              fragment: faker.lorem.slug(1),
              matches: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                text: faker.lorem.slug(1),
                indices: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.datatype.number()),
              })),
            })),
          })),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/search/issues`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          incomplete_results: faker.datatype.boolean(),
          items: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: faker.internet.url(),
            repository_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            number: faker.datatype.number(),
            title: faker.lorem.slug(1),
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(1),
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              name: faker.name.findName(),
              color: faker.lorem.slug(1),
              default: faker.datatype.boolean(),
              description: faker.lorem.slug(1),
            })),
            state: faker.lorem.slug(1),
            state_reason: faker.lorem.slug(1),
            assignee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            milestone: {
              url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
              html_url:
                'https://github.com/octocat/Hello-World/milestones/v1.0',
              labels_url:
                'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
              id: 1002604,
              node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
              number: 42,
              state: 'open',
              title: 'v1.0',
              description: 'Tracking milestone for version 1.0',
              creator: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              open_issues: 4,
              closed_issues: 8,
              created_at: '2011-04-10T20:09:31Z',
              updated_at: '2014-03-03T18:58:10Z',
              closed_at: '2013-02-12T13:22:01Z',
              due_on: '2012-10-09T23:39:01Z',
            },
            comments: faker.datatype.number(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            closed_at: faker.date.past(),
            text_matches: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              object_url: faker.internet.url(),
              object_type: faker.lorem.slug(1),
              property: faker.lorem.slug(1),
              fragment: faker.lorem.slug(1),
              matches: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                text: faker.lorem.slug(1),
                indices: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.datatype.number()),
              })),
            })),
            pull_request: {
              merged_at: faker.date.past(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            body: faker.lorem.slug(1),
            score: faker.datatype.number(),
            author_association: 'OWNER',
            draft: faker.datatype.boolean(),
            repository: {
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            },
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            timeline_url: faker.internet.url(),
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          })),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.lorem.slug(1),
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/search/labels`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          incomplete_results: faker.datatype.boolean(),
          items: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            name: faker.name.findName(),
            color: faker.lorem.slug(1),
            default: faker.datatype.boolean(),
            description: faker.lorem.slug(1),
            score: faker.datatype.number(),
            text_matches: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              object_url: faker.internet.url(),
              object_type: faker.lorem.slug(1),
              property: faker.lorem.slug(1),
              fragment: faker.lorem.slug(1),
              matches: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                text: faker.lorem.slug(1),
                indices: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.datatype.number()),
              })),
            })),
          })),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/search/repositories`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          incomplete_results: faker.datatype.boolean(),
          items: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            full_name: faker.name.findName(),
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(1),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            pushed_at: faker.date.past(),
            homepage: faker.internet.url(),
            size: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            language: faker.lorem.slug(1),
            forks_count: faker.datatype.number(),
            open_issues_count: faker.datatype.number(),
            master_branch: faker.lorem.slug(1),
            default_branch: faker.lorem.slug(1),
            score: faker.datatype.number(),
            forks_url: faker.internet.url(),
            keys_url: faker.internet.url(),
            collaborators_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            issue_events_url: faker.internet.url(),
            events_url: faker.internet.url(),
            assignees_url: faker.internet.url(),
            branches_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            blobs_url: faker.internet.url(),
            git_tags_url: faker.internet.url(),
            git_refs_url: faker.internet.url(),
            trees_url: faker.internet.url(),
            statuses_url: faker.internet.url(),
            languages_url: faker.internet.url(),
            stargazers_url: faker.internet.url(),
            contributors_url: faker.internet.url(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            git_commits_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            issue_comment_url: faker.internet.url(),
            contents_url: faker.internet.url(),
            compare_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            archive_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            issues_url: faker.internet.url(),
            pulls_url: faker.internet.url(),
            milestones_url: faker.internet.url(),
            notifications_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            releases_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            git_url: faker.internet.url(),
            ssh_url: faker.internet.url(),
            clone_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            mirror_url: faker.internet.url(),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            license: {
              key: 'mit',
              name: 'MIT License',
              url: 'https://api.github.com/licenses/mit',
              spdx_id: 'MIT',
              node_id: 'MDc6TGljZW5zZW1pdA==',
              html_url: faker.internet.url(),
            },
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            text_matches: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              object_url: faker.internet.url(),
              object_type: faker.lorem.slug(1),
              property: faker.lorem.slug(1),
              fragment: faker.lorem.slug(1),
              matches: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                text: faker.lorem.slug(1),
                indices: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.datatype.number()),
              })),
            })),
            temp_clone_token: faker.lorem.slug(1),
            allow_merge_commit: faker.datatype.boolean(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_rebase_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            is_template: faker.datatype.boolean(),
          })),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.lorem.slug(1),
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/search/topics`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          incomplete_results: faker.datatype.boolean(),
          items: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            display_name: faker.name.findName(),
            short_description: faker.lorem.slug(1),
            description: faker.lorem.slug(1),
            created_by: faker.lorem.slug(1),
            released: faker.lorem.slug(1),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            featured: faker.datatype.boolean(),
            curated: faker.datatype.boolean(),
            score: faker.datatype.number(),
            repository_count: faker.datatype.number(),
            logo_url: faker.internet.url(),
            text_matches: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              object_url: faker.internet.url(),
              object_type: faker.lorem.slug(1),
              property: faker.lorem.slug(1),
              fragment: faker.lorem.slug(1),
              matches: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                text: faker.lorem.slug(1),
                indices: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.datatype.number()),
              })),
            })),
            related: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              topic_relation: {
                id: faker.datatype.number(),
                name: faker.name.findName(),
                topic_id: faker.datatype.number(),
                relation_type: faker.lorem.slug(1),
              },
            })),
            aliases: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              topic_relation: {
                id: faker.datatype.number(),
                name: faker.name.findName(),
                topic_id: faker.datatype.number(),
                relation_type: faker.lorem.slug(1),
              },
            })),
          })),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/search/users`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          incomplete_results: faker.datatype.boolean(),
          items: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            login: faker.lorem.slug(1),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(1),
            score: faker.datatype.number(),
            following_url: faker.internet.url(),
            gists_url: faker.internet.url(),
            starred_url: faker.internet.url(),
            events_url: faker.internet.url(),
            public_repos: faker.datatype.number(),
            public_gists: faker.datatype.number(),
            followers: faker.datatype.number(),
            following: faker.datatype.number(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            name: faker.name.findName(),
            bio: faker.lorem.slug(1),
            email: faker.internet.email(),
            location: faker.lorem.slug(1),
            site_admin: faker.datatype.boolean(),
            hireable: faker.datatype.boolean(),
            text_matches: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              object_url: faker.internet.url(),
              object_type: faker.lorem.slug(1),
              property: faker.lorem.slug(1),
              fragment: faker.lorem.slug(1),
              matches: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                text: faker.lorem.slug(1),
                indices: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.datatype.number()),
              })),
            })),
            blog: faker.lorem.slug(1),
            company: faker.lorem.slug(1),
            suspended_at: faker.date.past(),
          })),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.lorem.slug(1),
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/setup/api/configcheck`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          status: faker.lorem.slug(1),
          progress: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            status: faker.lorem.slug(1),
            key: faker.lorem.slug(1),
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/setup/api/configure`, (_, res, ctx) => {
    const resultArray = [[ctx.status(202), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/setup/api/maintenance`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          status: faker.lorem.slug(1),
          scheduled_time: faker.lorem.slug(1),
          connection_services: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            number: faker.datatype.number(),
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/setup/api/maintenance`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          status: faker.lorem.slug(1),
          scheduled_time: faker.lorem.slug(1),
          connection_services: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            number: faker.datatype.number(),
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/setup/api/settings`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          enterprise: {
            private_mode: faker.datatype.boolean(),
            public_pages: faker.datatype.boolean(),
            subdomain_isolation: faker.datatype.boolean(),
            signup_enabled: faker.datatype.boolean(),
            github_hostname: faker.name.findName(),
            identicons_host: faker.lorem.slug(1),
            http_proxy: faker.lorem.slug(1),
            auth_mode: faker.lorem.slug(1),
            expire_sessions: faker.datatype.boolean(),
            admin_password: faker.lorem.slug(1),
            configuration_id: faker.datatype.number(),
            configuration_run_count: faker.datatype.number(),
            avatar: {
              enabled: faker.datatype.boolean(),
              uri: faker.lorem.slug(1),
            },
            customer: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              uuid: faker.lorem.slug(1),
              secret_key_data: faker.lorem.slug(1),
              public_key_data: faker.lorem.slug(1),
            },
            license: {
              seats: faker.datatype.number(),
              evaluation: faker.datatype.boolean(),
              perpetual: faker.datatype.boolean(),
              unlimited_seating: faker.datatype.boolean(),
              support_key: faker.lorem.slug(1),
              ssh_allowed: faker.datatype.boolean(),
              cluster_support: faker.datatype.boolean(),
              expire_at: faker.date.past(),
            },
            github_ssl: {
              enabled: faker.datatype.boolean(),
              cert: faker.lorem.slug(1),
              key: faker.lorem.slug(1),
            },
            ldap: {
              host: faker.lorem.slug(1),
              port: faker.datatype.number(),
              base: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => null),
              uid: faker.lorem.slug(1),
              bind_dn: faker.lorem.slug(1),
              password: faker.lorem.slug(1),
              method: faker.lorem.slug(1),
              search_strategy: faker.lorem.slug(1),
              user_groups: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => null),
              admin_group: faker.lorem.slug(1),
              virtual_attribute_enabled: faker.datatype.boolean(),
              recursive_group_search: faker.datatype.boolean(),
              posix_support: faker.datatype.boolean(),
              user_sync_emails: faker.datatype.boolean(),
              user_sync_keys: faker.datatype.boolean(),
              user_sync_interval: faker.datatype.number(),
              team_sync_interval: faker.datatype.number(),
              sync_enabled: faker.datatype.boolean(),
              reconciliation: {
                user: faker.lorem.slug(1),
                org: faker.lorem.slug(1),
              },
              profile: {
                uid: faker.lorem.slug(1),
                name: faker.name.findName(),
                mail: faker.lorem.slug(1),
                key: faker.lorem.slug(1),
              },
            },
            cas: {
              url: faker.internet.url(),
            },
            saml: {
              sso_url: faker.internet.url(),
              certificate: faker.lorem.slug(1),
              certificate_path: faker.lorem.slug(1),
              issuer: faker.lorem.slug(1),
              idp_initiated_sso: faker.datatype.boolean(),
              disable_admin_demote: faker.datatype.boolean(),
            },
            github_oauth: {
              client_id: faker.lorem.slug(1),
              client_secret: faker.lorem.slug(1),
              organization_name: faker.name.findName(),
              organization_team: faker.lorem.slug(1),
            },
            smtp: {
              enabled: faker.datatype.boolean(),
              address: faker.lorem.slug(1),
              authentication: faker.lorem.slug(1),
              port: faker.lorem.slug(1),
              domain: faker.lorem.slug(1),
              username: faker.name.findName(),
              user_name: faker.name.findName(),
              enable_starttls_auto: faker.datatype.boolean(),
              password: faker.lorem.slug(1),
              'discard-to-noreply-address': faker.datatype.boolean(),
              support_address: faker.lorem.slug(1),
              support_address_type: faker.lorem.slug(1),
              noreply_address: faker.lorem.slug(1),
            },
            ntp: {
              primary_server: faker.lorem.slug(1),
              secondary_server: faker.lorem.slug(1),
            },
            timezone: faker.lorem.slug(1),
            snmp: {
              enabled: faker.datatype.boolean(),
              community: faker.lorem.slug(1),
            },
            syslog: {
              enabled: faker.datatype.boolean(),
              server: faker.lorem.slug(1),
              protocol_name: faker.name.findName(),
            },
            assets: faker.lorem.slug(1),
            pages: {
              enabled: faker.datatype.boolean(),
            },
            collectd: {
              enabled: faker.datatype.boolean(),
              server: faker.lorem.slug(1),
              port: faker.datatype.number(),
              encryption: faker.lorem.slug(1),
              username: faker.name.findName(),
              password: faker.lorem.slug(1),
            },
            mapping: {
              enabled: faker.datatype.boolean(),
              tileserver: faker.lorem.slug(1),
              basemap: faker.lorem.slug(1),
              token: faker.lorem.slug(1),
            },
            load_balancer: faker.lorem.slug(1),
          },
          run_list: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/setup/api/settings`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/setup/api/settings/authorized-keys`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            key: faker.lorem.slug(1),
            'pretty-print': faker.lorem.slug(1),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/setup/api/settings/authorized-keys`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            key: faker.lorem.slug(1),
            'pretty-print': faker.lorem.slug(1),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(
    `${baseURL}/setup/api/settings/authorized-keys`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              key: faker.lorem.slug(1),
              'pretty-print': faker.lorem.slug(1),
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(`${baseURL}/setup/api/start`, (_, res, ctx) => {
    const resultArray = [[ctx.status(202), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/setup/api/upgrade`, (_, res, ctx) => {
    const resultArray = [[ctx.status(202), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/teams/:teamId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 42,
          node_id: 'MDQ6VGVhbTE=',
          url: 'https://api.github.com/organizations/1/team/1',
          html_url: 'https://github.com/orgs/rails/teams/core',
          name: 'Developers',
          slug: 'justice-league',
          description: 'A great team.',
          privacy: 'closed',
          permission: 'push',
          members_url:
            'https://api.github.com/organizations/1/team/1/members{/member}',
          repositories_url:
            'https://api.github.com/organizations/1/team/1/repos',
          parent: {
            id: 1,
            node_id: 'MDQ6VGVhbTE=',
            url: 'https://api.github.com/organizations/1/team/1',
            members_url:
              'https://api.github.com/organizations/1/team/1/members{/member}',
            name: 'Justice League',
            description: 'A great team.',
            permission: 'admin',
            privacy: 'closed',
            html_url: 'https://github.com/orgs/rails/teams/core',
            repositories_url:
              'https://api.github.com/organizations/1/team/1/repos',
            slug: 'justice-league',
            ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
          },
          members_count: 3,
          repos_count: 10,
          created_at: '2017-07-14T16:53:42Z',
          updated_at: '2017-08-17T12:37:15Z',
          organization: {
            login: 'github',
            id: 1,
            node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
            url: 'https://api.github.com/orgs/github',
            repos_url: 'https://api.github.com/orgs/github/repos',
            events_url: 'https://api.github.com/orgs/github/events',
            hooks_url: 'https://api.github.com/orgs/github/hooks',
            issues_url: 'https://api.github.com/orgs/github/issues',
            members_url: 'https://api.github.com/orgs/github/members{/member}',
            public_members_url:
              'https://api.github.com/orgs/github/public_members{/member}',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            description: 'A great organization',
            name: 'github',
            company: 'GitHub',
            blog: 'https://github.com/blog',
            location: 'San Francisco',
            email: 'octocat@github.com',
            twitter_username: 'github',
            is_verified: true,
            has_organization_projects: true,
            has_repository_projects: true,
            public_repos: 2,
            public_gists: 1,
            followers: 20,
            following: faker.datatype.number(),
            html_url: 'https://github.com/octocat',
            created_at: '2008-01-14T04:33:35Z',
            type: 'Organization',
            total_private_repos: 100,
            owned_private_repos: 100,
            private_gists: 81,
            disk_usage: 10000,
            collaborators: 8,
            billing_email: 'org@example.com',
            plan: {
              name: faker.name.findName(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
              filled_seats: faker.datatype.number(),
              seats: faker.datatype.number(),
            },
            default_repository_permission: faker.lorem.slug(1),
            members_can_create_repositories: true,
            two_factor_requirement_enabled: true,
            members_allowed_repository_creation_type: 'all',
            members_can_create_public_repositories: true,
            members_can_create_private_repositories: true,
            members_can_create_internal_repositories: true,
            members_can_create_pages: true,
            members_can_create_public_pages: true,
            members_can_create_private_pages: true,
            updated_at: faker.date.past(),
          },
          ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/teams/:teamId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 42,
          node_id: 'MDQ6VGVhbTE=',
          url: 'https://api.github.com/organizations/1/team/1',
          html_url: 'https://github.com/orgs/rails/teams/core',
          name: 'Developers',
          slug: 'justice-league',
          description: 'A great team.',
          privacy: 'closed',
          permission: 'push',
          members_url:
            'https://api.github.com/organizations/1/team/1/members{/member}',
          repositories_url:
            'https://api.github.com/organizations/1/team/1/repos',
          parent: {
            id: 1,
            node_id: 'MDQ6VGVhbTE=',
            url: 'https://api.github.com/organizations/1/team/1',
            members_url:
              'https://api.github.com/organizations/1/team/1/members{/member}',
            name: 'Justice League',
            description: 'A great team.',
            permission: 'admin',
            privacy: 'closed',
            html_url: 'https://github.com/orgs/rails/teams/core',
            repositories_url:
              'https://api.github.com/organizations/1/team/1/repos',
            slug: 'justice-league',
            ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
          },
          members_count: 3,
          repos_count: 10,
          created_at: '2017-07-14T16:53:42Z',
          updated_at: '2017-08-17T12:37:15Z',
          organization: {
            login: 'github',
            id: 1,
            node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
            url: 'https://api.github.com/orgs/github',
            repos_url: 'https://api.github.com/orgs/github/repos',
            events_url: 'https://api.github.com/orgs/github/events',
            hooks_url: 'https://api.github.com/orgs/github/hooks',
            issues_url: 'https://api.github.com/orgs/github/issues',
            members_url: 'https://api.github.com/orgs/github/members{/member}',
            public_members_url:
              'https://api.github.com/orgs/github/public_members{/member}',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            description: 'A great organization',
            name: 'github',
            company: 'GitHub',
            blog: 'https://github.com/blog',
            location: 'San Francisco',
            email: 'octocat@github.com',
            twitter_username: 'github',
            is_verified: true,
            has_organization_projects: true,
            has_repository_projects: true,
            public_repos: 2,
            public_gists: 1,
            followers: 20,
            following: faker.datatype.number(),
            html_url: 'https://github.com/octocat',
            created_at: '2008-01-14T04:33:35Z',
            type: 'Organization',
            total_private_repos: 100,
            owned_private_repos: 100,
            private_gists: 81,
            disk_usage: 10000,
            collaborators: 8,
            billing_email: 'org@example.com',
            plan: {
              name: faker.name.findName(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
              filled_seats: faker.datatype.number(),
              seats: faker.datatype.number(),
            },
            default_repository_permission: faker.lorem.slug(1),
            members_can_create_repositories: true,
            two_factor_requirement_enabled: true,
            members_allowed_repository_creation_type: 'all',
            members_can_create_public_repositories: true,
            members_can_create_private_repositories: true,
            members_can_create_internal_repositories: true,
            members_can_create_pages: true,
            members_can_create_public_pages: true,
            members_can_create_private_pages: true,
            updated_at: faker.date.past(),
          },
          ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
        }),
      ],
      [
        ctx.status(201),
        ctx.json({
          id: 42,
          node_id: 'MDQ6VGVhbTE=',
          url: 'https://api.github.com/organizations/1/team/1',
          html_url: 'https://github.com/orgs/rails/teams/core',
          name: 'Developers',
          slug: 'justice-league',
          description: 'A great team.',
          privacy: 'closed',
          permission: 'push',
          members_url:
            'https://api.github.com/organizations/1/team/1/members{/member}',
          repositories_url:
            'https://api.github.com/organizations/1/team/1/repos',
          parent: {
            id: 1,
            node_id: 'MDQ6VGVhbTE=',
            url: 'https://api.github.com/organizations/1/team/1',
            members_url:
              'https://api.github.com/organizations/1/team/1/members{/member}',
            name: 'Justice League',
            description: 'A great team.',
            permission: 'admin',
            privacy: 'closed',
            html_url: 'https://github.com/orgs/rails/teams/core',
            repositories_url:
              'https://api.github.com/organizations/1/team/1/repos',
            slug: 'justice-league',
            ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
          },
          members_count: 3,
          repos_count: 10,
          created_at: '2017-07-14T16:53:42Z',
          updated_at: '2017-08-17T12:37:15Z',
          organization: {
            login: 'github',
            id: 1,
            node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
            url: 'https://api.github.com/orgs/github',
            repos_url: 'https://api.github.com/orgs/github/repos',
            events_url: 'https://api.github.com/orgs/github/events',
            hooks_url: 'https://api.github.com/orgs/github/hooks',
            issues_url: 'https://api.github.com/orgs/github/issues',
            members_url: 'https://api.github.com/orgs/github/members{/member}',
            public_members_url:
              'https://api.github.com/orgs/github/public_members{/member}',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            description: 'A great organization',
            name: 'github',
            company: 'GitHub',
            blog: 'https://github.com/blog',
            location: 'San Francisco',
            email: 'octocat@github.com',
            twitter_username: 'github',
            is_verified: true,
            has_organization_projects: true,
            has_repository_projects: true,
            public_repos: 2,
            public_gists: 1,
            followers: 20,
            following: faker.datatype.number(),
            html_url: 'https://github.com/octocat',
            created_at: '2008-01-14T04:33:35Z',
            type: 'Organization',
            total_private_repos: 100,
            owned_private_repos: 100,
            private_gists: 81,
            disk_usage: 10000,
            collaborators: 8,
            billing_email: 'org@example.com',
            plan: {
              name: faker.name.findName(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
              filled_seats: faker.datatype.number(),
              seats: faker.datatype.number(),
            },
            default_repository_permission: faker.lorem.slug(1),
            members_can_create_repositories: true,
            two_factor_requirement_enabled: true,
            members_allowed_repository_creation_type: 'all',
            members_can_create_public_repositories: true,
            members_can_create_private_repositories: true,
            members_can_create_internal_repositories: true,
            members_can_create_pages: true,
            members_can_create_public_pages: true,
            members_can_create_private_pages: true,
            updated_at: faker.date.past(),
          },
          ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/teams/:teamId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/teams/:teamId/discussions`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'Please suggest improvements to our workflow in comments.',
            body_html:
              '<p>Hi! This is an area for us to collaborate as a team</p>',
            body_version: '0307116bbf7ced493b8d8a346c650b71',
            comments_count: faker.datatype.number(),
            comments_url:
              'https://api.github.com/organizations/1/team/2343027/discussions/1/comments',
            created_at: '2018-01-25T18:56:31Z',
            last_edited_at: faker.date.past(),
            html_url:
              'https://github.com/orgs/github/teams/justice-league/discussions/1',
            node_id: 'MDE0OlRlYW1EaXNjdXNzaW9uMQ==',
            number: 42,
            pinned: true,
            private: true,
            team_url: 'https://api.github.com/organizations/1/team/2343027',
            title: 'How can we improve our workflow?',
            updated_at: '2018-01-25T18:56:31Z',
            url: 'https://api.github.com/organizations/1/team/2343027/discussions/1',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/teams/:teamId/discussions`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          author: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          body: 'Please suggest improvements to our workflow in comments.',
          body_html:
            '<p>Hi! This is an area for us to collaborate as a team</p>',
          body_version: '0307116bbf7ced493b8d8a346c650b71',
          comments_count: faker.datatype.number(),
          comments_url:
            'https://api.github.com/organizations/1/team/2343027/discussions/1/comments',
          created_at: '2018-01-25T18:56:31Z',
          last_edited_at: faker.date.past(),
          html_url:
            'https://github.com/orgs/github/teams/justice-league/discussions/1',
          node_id: 'MDE0OlRlYW1EaXNjdXNzaW9uMQ==',
          number: 42,
          pinned: true,
          private: true,
          team_url: 'https://api.github.com/organizations/1/team/2343027',
          title: 'How can we improve our workflow?',
          updated_at: '2018-01-25T18:56:31Z',
          url: 'https://api.github.com/organizations/1/team/2343027/discussions/1',
          reactions: {
            url: faker.internet.url(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/teams/:teamId/discussions/:discussionNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'Please suggest improvements to our workflow in comments.',
            body_html:
              '<p>Hi! This is an area for us to collaborate as a team</p>',
            body_version: '0307116bbf7ced493b8d8a346c650b71',
            comments_count: faker.datatype.number(),
            comments_url:
              'https://api.github.com/organizations/1/team/2343027/discussions/1/comments',
            created_at: '2018-01-25T18:56:31Z',
            last_edited_at: faker.date.past(),
            html_url:
              'https://github.com/orgs/github/teams/justice-league/discussions/1',
            node_id: 'MDE0OlRlYW1EaXNjdXNzaW9uMQ==',
            number: 42,
            pinned: true,
            private: true,
            team_url: 'https://api.github.com/organizations/1/team/2343027',
            title: 'How can we improve our workflow?',
            updated_at: '2018-01-25T18:56:31Z',
            url: 'https://api.github.com/organizations/1/team/2343027/discussions/1',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/teams/:teamId/discussions/:discussionNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'Please suggest improvements to our workflow in comments.',
            body_html:
              '<p>Hi! This is an area for us to collaborate as a team</p>',
            body_version: '0307116bbf7ced493b8d8a346c650b71',
            comments_count: faker.datatype.number(),
            comments_url:
              'https://api.github.com/organizations/1/team/2343027/discussions/1/comments',
            created_at: '2018-01-25T18:56:31Z',
            last_edited_at: faker.date.past(),
            html_url:
              'https://github.com/orgs/github/teams/justice-league/discussions/1',
            node_id: 'MDE0OlRlYW1EaXNjdXNzaW9uMQ==',
            number: 42,
            pinned: true,
            private: true,
            team_url: 'https://api.github.com/organizations/1/team/2343027',
            title: 'How can we improve our workflow?',
            updated_at: '2018-01-25T18:56:31Z',
            url: 'https://api.github.com/organizations/1/team/2343027/discussions/1',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/teams/:teamId/discussions/:discussionNumber`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/teams/:teamId/discussions/:discussionNumber/comments`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              author: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              body: 'I agree with this suggestion.',
              body_html: '<p>Do you like apples?</p>',
              body_version: '0307116bbf7ced493b8d8a346c650b71',
              created_at: '2018-01-15T23:53:58Z',
              last_edited_at: faker.date.past(),
              discussion_url:
                'https://api.github.com/organizations/1/team/2403582/discussions/1',
              html_url:
                'https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1',
              node_id: 'MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=',
              number: 42,
              updated_at: '2018-01-15T23:53:58Z',
              url: 'https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1',
              reactions: {
                url: faker.internet.url(),
                total_count: faker.datatype.number(),
                '+1': faker.datatype.number(),
                '-1': faker.datatype.number(),
                laugh: faker.datatype.number(),
                confused: faker.datatype.number(),
                heart: faker.datatype.number(),
                hooray: faker.datatype.number(),
                eyes: faker.datatype.number(),
                rocket: faker.datatype.number(),
              },
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/teams/:teamId/discussions/:discussionNumber/comments`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'I agree with this suggestion.',
            body_html: '<p>Do you like apples?</p>',
            body_version: '0307116bbf7ced493b8d8a346c650b71',
            created_at: '2018-01-15T23:53:58Z',
            last_edited_at: faker.date.past(),
            discussion_url:
              'https://api.github.com/organizations/1/team/2403582/discussions/1',
            html_url:
              'https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1',
            node_id: 'MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=',
            number: 42,
            updated_at: '2018-01-15T23:53:58Z',
            url: 'https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'I agree with this suggestion.',
            body_html: '<p>Do you like apples?</p>',
            body_version: '0307116bbf7ced493b8d8a346c650b71',
            created_at: '2018-01-15T23:53:58Z',
            last_edited_at: faker.date.past(),
            discussion_url:
              'https://api.github.com/organizations/1/team/2403582/discussions/1',
            html_url:
              'https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1',
            node_id: 'MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=',
            number: 42,
            updated_at: '2018-01-15T23:53:58Z',
            url: 'https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.patch(
    `${baseURL}/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            author: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body: 'I agree with this suggestion.',
            body_html: '<p>Do you like apples?</p>',
            body_version: '0307116bbf7ced493b8d8a346c650b71',
            created_at: '2018-01-15T23:53:58Z',
            last_edited_at: faker.date.past(),
            discussion_url:
              'https://api.github.com/organizations/1/team/2403582/discussions/1',
            html_url:
              'https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1',
            node_id: 'MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=',
            number: 42,
            updated_at: '2018-01-15T23:53:58Z',
            url: 'https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber`,
    (_, res, ctx) => {
      const resultArray = [[ctx.status(204), ctx.json(null)]];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 1,
              node_id: 'MDg6UmVhY3Rpb24x',
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              content: 'heart',
              created_at: '2016-05-20T20:09:31Z',
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            id: 1,
            node_id: 'MDg6UmVhY3Rpb24x',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            content: 'heart',
            created_at: '2016-05-20T20:09:31Z',
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(
    `${baseURL}/teams/:teamId/discussions/:discussionNumber/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 1,
              node_id: 'MDg6UmVhY3Rpb24x',
              user: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              content: 'heart',
              created_at: '2016-05-20T20:09:31Z',
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/teams/:teamId/discussions/:discussionNumber/reactions`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json({
            id: 1,
            node_id: 'MDg6UmVhY3Rpb24x',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            content: 'heart',
            created_at: '2016-05-20T20:09:31Z',
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/teams/:teamId/members`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/teams/:teamId/members/:username`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(404), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/teams/:teamId/members/:username`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [ctx.status(404), ctx.json(null)],
      [ctx.status(422), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/teams/:teamId/members/:username`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(404), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/teams/:teamId/memberships/:username`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.internet.url(),
          role: 'member',
          state: faker.helpers.arrayElement(['active', 'pending']),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/teams/:teamId/memberships/:username`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.internet.url(),
          role: 'member',
          state: faker.helpers.arrayElement(['active', 'pending']),
        }),
      ],
      [ctx.status(403), ctx.json(null)],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [ctx.status(422), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(
    `${baseURL}/teams/:teamId/memberships/:username`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/teams/:teamId/projects`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            owner_url: faker.internet.url(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            columns_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            body: faker.lorem.slug(1),
            number: faker.datatype.number(),
            state: faker.lorem.slug(1),
            creator: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            organization_permission: faker.lorem.slug(1),
            private: faker.datatype.boolean(),
            permissions: {
              read: faker.datatype.boolean(),
              write: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/teams/:teamId/projects/:projectId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          owner_url: faker.internet.url(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          columns_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(1),
          name: faker.name.findName(),
          body: faker.lorem.slug(1),
          number: faker.datatype.number(),
          state: faker.lorem.slug(1),
          creator: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          organization_permission: faker.lorem.slug(1),
          private: faker.datatype.boolean(),
          permissions: {
            read: faker.datatype.boolean(),
            write: faker.datatype.boolean(),
            admin: faker.datatype.boolean(),
          },
        }),
      ],
      [ctx.status(404), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/teams/:teamId/projects/:projectId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/teams/:teamId/projects/:projectId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/teams/:teamId/repos`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 1296269,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Hello-World',
            full_name: 'octocat/Hello-World',
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: faker.internet.url(),
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: faker.internet.url(),
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(1),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: 'contributor_covenant',
              name: 'Contributor Covenant',
              url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
              body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(1),
              name: faker.name.findName(),
              spdx_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              node_id: faker.lorem.slug(1),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/teams/:teamId/repos/:owner/:repo`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 42,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Team Environment',
          full_name: 'octocat/Hello-World',
          license: {
            key: 'mit',
            name: 'MIT License',
            url: 'https://api.github.com/licenses/mit',
            spdx_id: 'MIT',
            node_id: 'MDc6TGljZW5zZW1pdA==',
            html_url: faker.internet.url(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          private: faker.datatype.boolean(),
          html_url: 'https://github.com/octocat/Hello-World',
          description: 'This your first repo!',
          fork: faker.datatype.boolean(),
          url: 'https://api.github.com/repos/octocat/Hello-World',
          archive_url:
            'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
          assignees_url:
            'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
          blobs_url:
            'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
          branches_url:
            'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
          collaborators_url:
            'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
          comments_url:
            'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
          commits_url:
            'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
          compare_url:
            'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
          contents_url:
            'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
          contributors_url:
            'http://api.github.com/repos/octocat/Hello-World/contributors',
          deployments_url:
            'http://api.github.com/repos/octocat/Hello-World/deployments',
          downloads_url:
            'http://api.github.com/repos/octocat/Hello-World/downloads',
          events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
          forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
          git_commits_url:
            'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
          git_refs_url:
            'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
          git_tags_url:
            'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
          git_url: 'git:github.com/octocat/Hello-World.git',
          issue_comment_url:
            'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
          issue_events_url:
            'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
          issues_url:
            'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
          keys_url:
            'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
          labels_url:
            'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
          languages_url:
            'http://api.github.com/repos/octocat/Hello-World/languages',
          merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
          milestones_url:
            'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
          notifications_url:
            'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
          pulls_url:
            'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
          releases_url:
            'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
          ssh_url: 'git@github.com:octocat/Hello-World.git',
          stargazers_url:
            'http://api.github.com/repos/octocat/Hello-World/stargazers',
          statuses_url:
            'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
          subscribers_url:
            'http://api.github.com/repos/octocat/Hello-World/subscribers',
          subscription_url:
            'http://api.github.com/repos/octocat/Hello-World/subscription',
          tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
          teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
          trees_url:
            'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
          clone_url: 'https://github.com/octocat/Hello-World.git',
          mirror_url: 'git:git.example.com/octocat/Hello-World',
          hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
          svn_url: 'https://svn.github.com/octocat/Hello-World',
          homepage: 'https://github.com',
          language: faker.lorem.slug(1),
          forks_count: 9,
          stargazers_count: 80,
          watchers_count: 80,
          size: 108,
          default_branch: 'master',
          open_issues_count: faker.datatype.number(),
          is_template: true,
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          has_issues: true,
          has_projects: true,
          has_wiki: true,
          has_pages: faker.datatype.boolean(),
          has_downloads: true,
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: '2011-01-26T19:06:43Z',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:14:43Z',
          allow_rebase_merge: true,
          template_repository: {
            id: 42,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Team Environment',
            full_name: 'octocat/Hello-World',
            license: {
              key: 'mit',
              name: 'MIT License',
              url: 'https://api.github.com/licenses/mit',
              spdx_id: 'MIT',
              node_id: 'MDc6TGljZW5zZW1pdA==',
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: 'git:github.com/octocat/Hello-World.git',
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: 'git@github.com:octocat/Hello-World.git',
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: 'https://github.com/octocat/Hello-World.git',
            mirror_url: 'git:git.example.com/octocat/Hello-World',
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: 'https://svn.github.com/octocat/Hello-World',
            homepage: 'https://github.com',
            language: faker.lorem.slug(1),
            forks_count: 9,
            stargazers_count: 80,
            watchers_count: 80,
            size: 108,
            default_branch: 'master',
            open_issues_count: faker.datatype.number(),
            is_template: true,
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: true,
            has_projects: true,
            has_wiki: true,
            has_pages: faker.datatype.boolean(),
            has_downloads: true,
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            allow_rebase_merge: true,
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              full_name: faker.name.findName(),
              owner: {
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              git_url: faker.internet.url(),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              notifications_url: faker.internet.url(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              ssh_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: faker.date.past(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: true,
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: true,
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(1),
            starred_at: '"2020-07-09T00:17:42Z"',
            anonymous_access_enabled: faker.datatype.boolean(),
          },
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: true,
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: true,
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(1),
        }),
      ],
      [ctx.status(204), ctx.json(null)],
      [ctx.status(404), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/teams/:teamId/repos/:owner/:repo`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/teams/:teamId/repos/:owner/:repo`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/teams/:teamId/teams`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            slug: faker.lorem.slug(1),
            description: faker.lorem.slug(1),
            privacy: faker.lorem.slug(1),
            permission: faker.lorem.slug(1),
            permissions: {
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
            url: faker.internet.url(),
            html_url: 'https://github.com/orgs/rails/teams/core',
            members_url: faker.internet.url(),
            repositories_url: faker.internet.url(),
            parent: {
              id: 1,
              node_id: 'MDQ6VGVhbTE=',
              url: 'https://api.github.com/organizations/1/team/1',
              members_url:
                'https://api.github.com/organizations/1/team/1/members{/member}',
              name: 'Justice League',
              description: 'A great team.',
              permission: 'admin',
              privacy: 'closed',
              html_url: 'https://github.com/orgs/rails/teams/core',
              repositories_url:
                'https://api.github.com/organizations/1/team/1/repos',
              slug: 'justice-league',
              ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
            },
          }))
        ),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/user`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url:
            'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url:
            'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url:
            'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url:
            'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          name: 'monalisa octocat',
          company: 'GitHub',
          blog: 'https://github.com/blog',
          location: 'San Francisco',
          email: 'octocat@github.com',
          hireable: faker.datatype.boolean(),
          bio: 'There once was...',
          twitter_username: 'monalisa',
          public_repos: 2,
          public_gists: 1,
          followers: 20,
          following: faker.datatype.number(),
          created_at: '2008-01-14T04:33:35Z',
          updated_at: '2008-01-14T04:33:35Z',
          private_gists: 81,
          total_private_repos: 100,
          owned_private_repos: 100,
          disk_usage: 10000,
          collaborators: 8,
          two_factor_authentication: true,
          plan: {
            collaborators: faker.datatype.number(),
            name: faker.name.findName(),
            space: faker.datatype.number(),
            private_repos: faker.datatype.number(),
          },
          suspended_at: faker.date.past(),
          business_plus: faker.datatype.boolean(),
          ldap_dn: faker.lorem.slug(1),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/emails`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            email: 'octocat@github.com',
            primary: true,
            verified: true,
            visibility: 'public',
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/user/emails`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            email: 'octocat@github.com',
            primary: true,
            verified: true,
            visibility: 'public',
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/user/emails`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/followers`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/following`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/following/:username`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/user/following/:username`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/user/following/:username`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/gpg_keys`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 3,
            primary_key_id: faker.datatype.number(),
            key_id: '3262EFF25BA0D270',
            public_key: 'xsBNBFayYZ...',
            emails: [
              { email: 'octocat@users.noreply.github.com', verified: true },
            ],
            subkeys: [
              {
                id: 4,
                primary_key_id: 3,
                key_id: '4A595D4C72EE49C7',
                public_key: 'zsBNBFayYZ...',
                emails: [],
                subkeys: [],
                can_sign: false,
                can_encrypt_comms: true,
                can_encrypt_storage: true,
                can_certify: false,
                created_at: '2016-03-24T11:31:04-06:00',
                expires_at: null,
              },
            ],
            can_sign: true,
            can_encrypt_comms: faker.datatype.boolean(),
            can_encrypt_storage: faker.datatype.boolean(),
            can_certify: true,
            created_at: '2016-03-24T11:31:04-06:00',
            expires_at: faker.date.past(),
            raw_key: faker.lorem.slug(1),
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/user/gpg_keys`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: 3,
          primary_key_id: faker.datatype.number(),
          key_id: '3262EFF25BA0D270',
          public_key: 'xsBNBFayYZ...',
          emails: [
            { email: 'octocat@users.noreply.github.com', verified: true },
          ],
          subkeys: [
            {
              id: 4,
              primary_key_id: 3,
              key_id: '4A595D4C72EE49C7',
              public_key: 'zsBNBFayYZ...',
              emails: [],
              subkeys: [],
              can_sign: false,
              can_encrypt_comms: true,
              can_encrypt_storage: true,
              can_certify: false,
              created_at: '2016-03-24T11:31:04-06:00',
              expires_at: null,
            },
          ],
          can_sign: true,
          can_encrypt_comms: faker.datatype.boolean(),
          can_encrypt_storage: faker.datatype.boolean(),
          can_certify: true,
          created_at: '2016-03-24T11:31:04-06:00',
          expires_at: faker.date.past(),
          raw_key: faker.lorem.slug(1),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/gpg_keys/:gpgKeyId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 3,
          primary_key_id: faker.datatype.number(),
          key_id: '3262EFF25BA0D270',
          public_key: 'xsBNBFayYZ...',
          emails: [
            { email: 'octocat@users.noreply.github.com', verified: true },
          ],
          subkeys: [
            {
              id: 4,
              primary_key_id: 3,
              key_id: '4A595D4C72EE49C7',
              public_key: 'zsBNBFayYZ...',
              emails: [],
              subkeys: [],
              can_sign: false,
              can_encrypt_comms: true,
              can_encrypt_storage: true,
              can_certify: false,
              created_at: '2016-03-24T11:31:04-06:00',
              expires_at: null,
            },
          ],
          can_sign: true,
          can_encrypt_comms: faker.datatype.boolean(),
          can_encrypt_storage: faker.datatype.boolean(),
          can_certify: true,
          created_at: '2016-03-24T11:31:04-06:00',
          expires_at: faker.date.past(),
          raw_key: faker.lorem.slug(1),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/user/gpg_keys/:gpgKeyId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/installations`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          installations: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 1,
            account: null,
            repository_selection: faker.helpers.arrayElement([
              'all',
              'selected',
            ]),
            access_tokens_url:
              'https://api.github.com/installations/1/access_tokens',
            repositories_url:
              'https://api.github.com/installation/repositories',
            html_url:
              'https://github.com/organizations/github/settings/installations/1',
            app_id: 1,
            target_id: faker.datatype.number(),
            target_type: 'Organization',
            permissions: {
              contents: 'read',
              issues: 'read',
              deployments: 'write',
              single_file: 'read',
            },
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            single_file_name: 'config.yaml',
            has_multiple_single_files: true,
            single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
            app_slug: 'github-actions',
            suspended_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            suspended_at: faker.date.past(),
            contact_email: '"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"',
          })),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/user/installations/:installationId/repositories`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            repository_selection: faker.lorem.slug(1),
            repositories: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            })),
          }),
        ],
        [ctx.status(304), ctx.json(null)],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.put(
    `${baseURL}/user/installations/:installationId/repositories/:repositoryId`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [ctx.status(304), ctx.json(null)],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/user/installations/:installationId/repositories/:repositoryId`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [ctx.status(304), ctx.json(null)],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/user/issues`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            url: 'https://api.github.com/repositories/42/issues/1',
            repository_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            number: 42,
            state: 'open',
            state_reason: 'not_planned',
            title: 'Widget creation fails in Safari on OS X 10.8',
            body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            labels: ['bug', 'registration'],
            assignee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            })),
            milestone: {
              url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
              html_url:
                'https://github.com/octocat/Hello-World/milestones/v1.0',
              labels_url:
                'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
              id: 1002604,
              node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
              number: 42,
              state: 'open',
              title: 'v1.0',
              description: 'Tracking milestone for version 1.0',
              creator: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              open_issues: 4,
              closed_issues: 8,
              created_at: '2011-04-10T20:09:31Z',
              updated_at: '2014-03-03T18:58:10Z',
              closed_at: '2013-02-12T13:22:01Z',
              due_on: '2012-10-09T23:39:01Z',
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(1),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.date.past(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            closed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            body_html: faker.lorem.slug(1),
            body_text: faker.lorem.slug(1),
            timeline_url: faker.internet.url(),
            repository: {
              id: 42,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Team Environment',
              full_name: 'octocat/Hello-World',
              license: {
                key: 'mit',
                name: 'MIT License',
                url: 'https://api.github.com/licenses/mit',
                spdx_id: 'MIT',
                node_id: 'MDc6TGljZW5zZW1pdA==',
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: 'git:github.com/octocat/Hello-World.git',
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: 'git@github.com:octocat/Hello-World.git',
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: 'https://github.com/octocat/Hello-World.git',
              mirror_url: 'git:git.example.com/octocat/Hello-World',
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: 'https://svn.github.com/octocat/Hello-World',
              homepage: 'https://github.com',
              language: faker.lorem.slug(1),
              forks_count: 9,
              stargazers_count: 80,
              watchers_count: 80,
              size: 108,
              default_branch: 'master',
              open_issues_count: faker.datatype.number(),
              is_template: true,
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: true,
              has_projects: true,
              has_wiki: true,
              has_pages: faker.datatype.boolean(),
              has_downloads: true,
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              allow_rebase_merge: true,
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                name: faker.name.findName(),
                full_name: faker.name.findName(),
                owner: {
                  login: faker.lorem.slug(1),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  avatar_url: faker.internet.url(),
                  gravatar_id: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  followers_url: faker.internet.url(),
                  following_url: faker.internet.url(),
                  gists_url: faker.internet.url(),
                  starred_url: faker.internet.url(),
                  subscriptions_url: faker.internet.url(),
                  organizations_url: faker.internet.url(),
                  repos_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  received_events_url: faker.internet.url(),
                  type: faker.lorem.slug(1),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.internet.url(),
                description: faker.lorem.slug(1),
                fork: faker.datatype.boolean(),
                url: faker.internet.url(),
                archive_url: faker.internet.url(),
                assignees_url: faker.internet.url(),
                blobs_url: faker.internet.url(),
                branches_url: faker.internet.url(),
                collaborators_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                commits_url: faker.internet.url(),
                compare_url: faker.internet.url(),
                contents_url: faker.internet.url(),
                contributors_url: faker.internet.url(),
                deployments_url: faker.internet.url(),
                downloads_url: faker.internet.url(),
                events_url: faker.internet.url(),
                forks_url: faker.internet.url(),
                git_commits_url: faker.internet.url(),
                git_refs_url: faker.internet.url(),
                git_tags_url: faker.internet.url(),
                git_url: faker.internet.url(),
                issue_comment_url: faker.internet.url(),
                issue_events_url: faker.internet.url(),
                issues_url: faker.internet.url(),
                keys_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                languages_url: faker.internet.url(),
                merges_url: faker.internet.url(),
                milestones_url: faker.internet.url(),
                notifications_url: faker.internet.url(),
                pulls_url: faker.internet.url(),
                releases_url: faker.internet.url(),
                ssh_url: faker.internet.url(),
                stargazers_url: faker.internet.url(),
                statuses_url: faker.internet.url(),
                subscribers_url: faker.internet.url(),
                subscription_url: faker.internet.url(),
                tags_url: faker.internet.url(),
                teams_url: faker.internet.url(),
                trees_url: faker.internet.url(),
                clone_url: faker.internet.url(),
                mirror_url: faker.internet.url(),
                hooks_url: faker.internet.url(),
                svn_url: faker.internet.url(),
                homepage: faker.lorem.slug(1),
                language: faker.lorem.slug(1),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(1),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug(1)),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(1),
                pushed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(1),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: true,
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: true,
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(1),
              starred_at: '"2020-07-09T00:17:42Z"',
              anonymous_access_enabled: faker.datatype.boolean(),
            },
            performed_via_github_app: {
              id: 37,
              slug: 'probot-owners',
              node_id: 'MDExOkludGVncmF0aW9uMQ==',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              name: 'Probot Owners',
              description: 'The description of the app.',
              external_url: 'https://example.com',
              html_url: 'https://github.com/apps/super-ci',
              created_at: '2017-07-08T16:18:44-04:00',
              updated_at: '2017-07-08T16:18:44-04:00',
              permissions: { issues: 'read', deployments: 'write' },
              events: ['label', 'deployment'],
              installations_count: 5,
              client_id: '"Iv1.25b5d1e65ffc4022"',
              client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
              webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
              pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
            },
            author_association: 'OWNER',
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/keys`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            key: faker.lorem.slug(1),
            id: faker.datatype.number(),
            url: faker.internet.url(),
            title: faker.lorem.slug(1),
            created_at: faker.date.past(),
            verified: faker.datatype.boolean(),
            read_only: faker.datatype.boolean(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/user/keys`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          key: faker.lorem.slug(1),
          id: faker.datatype.number(),
          url: faker.internet.url(),
          title: faker.lorem.slug(1),
          created_at: faker.date.past(),
          verified: faker.datatype.boolean(),
          read_only: faker.datatype.boolean(),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/keys/:keyId`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          key: faker.lorem.slug(1),
          id: faker.datatype.number(),
          url: faker.internet.url(),
          title: faker.lorem.slug(1),
          created_at: faker.date.past(),
          verified: faker.datatype.boolean(),
          read_only: faker.datatype.boolean(),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/user/keys/:keyId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/memberships/orgs`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: 'https://api.github.com/orgs/octocat/memberships/defunkt',
            state: 'active',
            role: 'admin',
            organization_url: 'https://api.github.com/orgs/octocat',
            organization: {
              login: 'github',
              id: 1,
              node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
              url: 'https://api.github.com/orgs/github',
              repos_url: 'https://api.github.com/orgs/github/repos',
              events_url: 'https://api.github.com/orgs/github/events',
              hooks_url: 'https://api.github.com/orgs/github/hooks',
              issues_url: 'https://api.github.com/orgs/github/issues',
              members_url:
                'https://api.github.com/orgs/github/members{/member}',
              public_members_url:
                'https://api.github.com/orgs/github/public_members{/member}',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              description: 'A great organization',
            },
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            permissions: {
              can_create_repository: faker.datatype.boolean(),
            },
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/memberships/orgs/:org`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: 'https://api.github.com/orgs/octocat/memberships/defunkt',
          state: 'active',
          role: 'admin',
          organization_url: 'https://api.github.com/orgs/octocat',
          organization: {
            login: 'github',
            id: 1,
            node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
            url: 'https://api.github.com/orgs/github',
            repos_url: 'https://api.github.com/orgs/github/repos',
            events_url: 'https://api.github.com/orgs/github/events',
            hooks_url: 'https://api.github.com/orgs/github/hooks',
            issues_url: 'https://api.github.com/orgs/github/issues',
            members_url: 'https://api.github.com/orgs/github/members{/member}',
            public_members_url:
              'https://api.github.com/orgs/github/public_members{/member}',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            description: 'A great organization',
          },
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          permissions: {
            can_create_repository: faker.datatype.boolean(),
          },
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/user/memberships/orgs/:org`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          url: 'https://api.github.com/orgs/octocat/memberships/defunkt',
          state: 'active',
          role: 'admin',
          organization_url: 'https://api.github.com/orgs/octocat',
          organization: {
            login: 'github',
            id: 1,
            node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
            url: 'https://api.github.com/orgs/github',
            repos_url: 'https://api.github.com/orgs/github/repos',
            events_url: 'https://api.github.com/orgs/github/events',
            hooks_url: 'https://api.github.com/orgs/github/hooks',
            issues_url: 'https://api.github.com/orgs/github/issues',
            members_url: 'https://api.github.com/orgs/github/members{/member}',
            public_members_url:
              'https://api.github.com/orgs/github/public_members{/member}',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            description: 'A great organization',
          },
          user: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          permissions: {
            can_create_repository: faker.datatype.boolean(),
          },
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/orgs`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            login: 'github',
            id: 1,
            node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
            url: 'https://api.github.com/orgs/github',
            repos_url: 'https://api.github.com/orgs/github/repos',
            events_url: 'https://api.github.com/orgs/github/events',
            hooks_url: 'https://api.github.com/orgs/github/hooks',
            issues_url: 'https://api.github.com/orgs/github/issues',
            members_url: 'https://api.github.com/orgs/github/members{/member}',
            public_members_url:
              'https://api.github.com/orgs/github/public_members{/member}',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            description: 'A great organization',
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/user/projects`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          owner_url:
            'https://api.github.com/repos/api-playground/projects-test',
          url: 'https://api.github.com/projects/1002604',
          html_url:
            'https://github.com/api-playground/projects-test/projects/12',
          columns_url: 'https://api.github.com/projects/1002604/columns',
          id: 1002604,
          node_id: 'MDc6UHJvamVjdDEwMDI2MDQ=',
          name: 'Week One Sprint',
          body: 'This project represents the sprint of the first week in January',
          number: 1,
          state: 'open',
          creator: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          created_at: '2011-04-10T20:09:31Z',
          updated_at: '2014-03-03T18:58:10Z',
          organization_permission: faker.helpers.arrayElement([
            'read',
            'write',
            'admin',
            'none',
          ]),
          private: faker.datatype.boolean(),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/public_emails`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            email: 'octocat@github.com',
            primary: true,
            verified: true,
            visibility: 'public',
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/repos`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 42,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Team Environment',
            full_name: 'octocat/Hello-World',
            license: {
              key: 'mit',
              name: 'MIT License',
              url: 'https://api.github.com/licenses/mit',
              spdx_id: 'MIT',
              node_id: 'MDc6TGljZW5zZW1pdA==',
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: 'git:github.com/octocat/Hello-World.git',
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: 'git@github.com:octocat/Hello-World.git',
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: 'https://github.com/octocat/Hello-World.git',
            mirror_url: 'git:git.example.com/octocat/Hello-World',
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: 'https://svn.github.com/octocat/Hello-World',
            homepage: 'https://github.com',
            language: faker.lorem.slug(1),
            forks_count: 9,
            stargazers_count: 80,
            watchers_count: 80,
            size: 108,
            default_branch: 'master',
            open_issues_count: faker.datatype.number(),
            is_template: true,
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: true,
            has_projects: true,
            has_wiki: true,
            has_pages: faker.datatype.boolean(),
            has_downloads: true,
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            allow_rebase_merge: true,
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              full_name: faker.name.findName(),
              owner: {
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              git_url: faker.internet.url(),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              notifications_url: faker.internet.url(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              ssh_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: faker.date.past(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: true,
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: true,
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(1),
            starred_at: '"2020-07-09T00:17:42Z"',
            anonymous_access_enabled: faker.datatype.boolean(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/user/repos`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: 42,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Team Environment',
          full_name: 'octocat/Hello-World',
          license: {
            key: 'mit',
            name: 'MIT License',
            url: 'https://api.github.com/licenses/mit',
            spdx_id: 'MIT',
            node_id: 'MDc6TGljZW5zZW1pdA==',
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          private: faker.datatype.boolean(),
          html_url: 'https://github.com/octocat/Hello-World',
          description: 'This your first repo!',
          fork: faker.datatype.boolean(),
          url: 'https://api.github.com/repos/octocat/Hello-World',
          archive_url:
            'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
          assignees_url:
            'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
          blobs_url:
            'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
          branches_url:
            'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
          collaborators_url:
            'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
          comments_url:
            'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
          commits_url:
            'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
          compare_url:
            'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
          contents_url:
            'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
          contributors_url:
            'http://api.github.com/repos/octocat/Hello-World/contributors',
          deployments_url:
            'http://api.github.com/repos/octocat/Hello-World/deployments',
          downloads_url:
            'http://api.github.com/repos/octocat/Hello-World/downloads',
          events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
          forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
          git_commits_url:
            'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
          git_refs_url:
            'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
          git_tags_url:
            'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
          git_url: 'git:github.com/octocat/Hello-World.git',
          issue_comment_url:
            'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
          issue_events_url:
            'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
          issues_url:
            'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
          keys_url:
            'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
          labels_url:
            'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
          languages_url:
            'http://api.github.com/repos/octocat/Hello-World/languages',
          merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
          milestones_url:
            'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
          notifications_url:
            'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
          pulls_url:
            'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
          releases_url:
            'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
          ssh_url: 'git@github.com:octocat/Hello-World.git',
          stargazers_url:
            'http://api.github.com/repos/octocat/Hello-World/stargazers',
          statuses_url:
            'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
          subscribers_url:
            'http://api.github.com/repos/octocat/Hello-World/subscribers',
          subscription_url:
            'http://api.github.com/repos/octocat/Hello-World/subscription',
          tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
          teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
          trees_url:
            'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
          clone_url: 'https://github.com/octocat/Hello-World.git',
          mirror_url: 'git:git.example.com/octocat/Hello-World',
          hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
          svn_url: 'https://svn.github.com/octocat/Hello-World',
          homepage: 'https://github.com',
          language: faker.lorem.slug(1),
          forks_count: 9,
          stargazers_count: 80,
          watchers_count: 80,
          size: 108,
          default_branch: 'master',
          open_issues_count: faker.datatype.number(),
          is_template: true,
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          has_issues: true,
          has_projects: true,
          has_wiki: true,
          has_pages: faker.datatype.boolean(),
          has_downloads: true,
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: '2011-01-26T19:06:43Z',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:14:43Z',
          allow_rebase_merge: true,
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(1),
            name: faker.name.findName(),
            full_name: faker.name.findName(),
            owner: {
              login: faker.lorem.slug(1),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(1),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.internet.url(),
            assignees_url: faker.internet.url(),
            blobs_url: faker.internet.url(),
            branches_url: faker.internet.url(),
            collaborators_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            compare_url: faker.internet.url(),
            contents_url: faker.internet.url(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.internet.url(),
            git_refs_url: faker.internet.url(),
            git_tags_url: faker.internet.url(),
            git_url: faker.internet.url(),
            issue_comment_url: faker.internet.url(),
            issue_events_url: faker.internet.url(),
            issues_url: faker.internet.url(),
            keys_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.internet.url(),
            notifications_url: faker.internet.url(),
            pulls_url: faker.internet.url(),
            releases_url: faker.internet.url(),
            ssh_url: faker.internet.url(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.internet.url(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.internet.url(),
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: true,
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: true,
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(1),
          starred_at: '"2020-07-09T00:17:42Z"',
          anonymous_access_enabled: faker.datatype.boolean(),
        }),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(400),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/repository_invitations`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 42,
            repository: {
              id: 1296269,
              node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
              name: 'Hello-World',
              full_name: 'octocat/Hello-World',
              owner: {
                name: faker.name.findName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url:
                  'https://api.github.com/users/octocat/following{/other_user}',
                gists_url:
                  'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url:
                  'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url:
                  'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url:
                  'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url:
                  'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              private: faker.datatype.boolean(),
              html_url: 'https://github.com/octocat/Hello-World',
              description: 'This your first repo!',
              fork: faker.datatype.boolean(),
              url: 'https://api.github.com/repos/octocat/Hello-World',
              archive_url:
                'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
              assignees_url:
                'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
              blobs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
              branches_url:
                'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
              collaborators_url:
                'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
              comments_url:
                'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
              commits_url:
                'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
              compare_url:
                'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
              contents_url:
                'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
              contributors_url:
                'http://api.github.com/repos/octocat/Hello-World/contributors',
              deployments_url:
                'http://api.github.com/repos/octocat/Hello-World/deployments',
              downloads_url:
                'http://api.github.com/repos/octocat/Hello-World/downloads',
              events_url:
                'http://api.github.com/repos/octocat/Hello-World/events',
              forks_url:
                'http://api.github.com/repos/octocat/Hello-World/forks',
              git_commits_url:
                'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
              git_refs_url:
                'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
              git_tags_url:
                'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
              git_url: faker.internet.url(),
              issue_comment_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
              issue_events_url:
                'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
              issues_url:
                'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
              keys_url:
                'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
              labels_url:
                'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
              languages_url:
                'http://api.github.com/repos/octocat/Hello-World/languages',
              merges_url:
                'http://api.github.com/repos/octocat/Hello-World/merges',
              milestones_url:
                'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
              notifications_url:
                'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
              pulls_url:
                'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
              releases_url:
                'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
              ssh_url: faker.internet.url(),
              stargazers_url:
                'http://api.github.com/repos/octocat/Hello-World/stargazers',
              statuses_url:
                'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
              subscribers_url:
                'http://api.github.com/repos/octocat/Hello-World/subscribers',
              subscription_url:
                'http://api.github.com/repos/octocat/Hello-World/subscription',
              tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
              teams_url:
                'http://api.github.com/repos/octocat/Hello-World/teams',
              trees_url:
                'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url:
                'http://api.github.com/repos/octocat/Hello-World/hooks',
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: '2011-01-26T19:06:43Z',
              created_at: '2011-01-26T19:01:12Z',
              updated_at: '2011-01-26T19:14:43Z',
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.lorem.slug(1),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: 'contributor_covenant',
                name: 'Contributor Covenant',
                url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
                body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                html_url: faker.internet.url(),
              },
              license: {
                key: faker.lorem.slug(1),
                name: faker.name.findName(),
                spdx_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                node_id: faker.lorem.slug(1),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            invitee: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            inviter: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            permissions: 'read',
            created_at: '2016-06-13T14:52:50-05:00',
            expired: faker.datatype.boolean(),
            url: 'https://api.github.com/user/repository-invitations/1',
            html_url: 'https://github.com/octocat/Hello-World/invitations',
            node_id: faker.lorem.slug(1),
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(
    `${baseURL}/user/repository_invitations/:invitationId`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [ctx.status(304), ctx.json(null)],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(409),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/user/repository_invitations/:invitationId`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [ctx.status(304), ctx.json(null)],
        [
          ctx.status(403),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
        [
          ctx.status(409),
          ctx.json({
            message: faker.lorem.slug(1),
            documentation_url: faker.internet.url(),
            url: faker.internet.url(),
            status: faker.lorem.slug(1),
          }),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/user/starred`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 42,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Team Environment',
            full_name: 'octocat/Hello-World',
            license: {
              key: 'mit',
              name: 'MIT License',
              url: 'https://api.github.com/licenses/mit',
              spdx_id: 'MIT',
              node_id: 'MDc6TGljZW5zZW1pdA==',
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: 'git:github.com/octocat/Hello-World.git',
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: 'git@github.com:octocat/Hello-World.git',
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: 'https://github.com/octocat/Hello-World.git',
            mirror_url: 'git:git.example.com/octocat/Hello-World',
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: 'https://svn.github.com/octocat/Hello-World',
            homepage: 'https://github.com',
            language: faker.lorem.slug(1),
            forks_count: 9,
            stargazers_count: 80,
            watchers_count: 80,
            size: 108,
            default_branch: 'master',
            open_issues_count: faker.datatype.number(),
            is_template: true,
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: true,
            has_projects: true,
            has_wiki: true,
            has_pages: faker.datatype.boolean(),
            has_downloads: true,
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            allow_rebase_merge: true,
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(1),
              name: faker.name.findName(),
              full_name: faker.name.findName(),
              owner: {
                login: faker.lorem.slug(1),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.internet.url(),
                gists_url: faker.internet.url(),
                starred_url: faker.internet.url(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.internet.url(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(1),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(1),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.internet.url(),
              assignees_url: faker.internet.url(),
              blobs_url: faker.internet.url(),
              branches_url: faker.internet.url(),
              collaborators_url: faker.internet.url(),
              comments_url: faker.internet.url(),
              commits_url: faker.internet.url(),
              compare_url: faker.internet.url(),
              contents_url: faker.internet.url(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.internet.url(),
              git_refs_url: faker.internet.url(),
              git_tags_url: faker.internet.url(),
              git_url: faker.internet.url(),
              issue_comment_url: faker.internet.url(),
              issue_events_url: faker.internet.url(),
              issues_url: faker.internet.url(),
              keys_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.internet.url(),
              notifications_url: faker.internet.url(),
              pulls_url: faker.internet.url(),
              releases_url: faker.internet.url(),
              ssh_url: faker.internet.url(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.internet.url(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.internet.url(),
              clone_url: faker.internet.url(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.lorem.slug(1),
              language: faker.lorem.slug(1),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(1),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug(1)),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(1),
              pushed_at: faker.date.past(),
              created_at: faker.date.past(),
              updated_at: faker.date.past(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(1),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: true,
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: true,
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(1),
            starred_at: '"2020-07-09T00:17:42Z"',
            anonymous_access_enabled: faker.datatype.boolean(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/starred/:owner/:repo`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/user/starred/:owner/:repo`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/user/starred/:owner/:repo`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json(null)],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/subscriptions`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 1296269,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Hello-World',
            full_name: 'octocat/Hello-World',
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: faker.internet.url(),
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: faker.internet.url(),
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(1),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: 'contributor_covenant',
              name: 'Contributor Covenant',
              url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
              body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(1),
              name: faker.name.findName(),
              spdx_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              node_id: faker.lorem.slug(1),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(401),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/teams`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 42,
            node_id: 'MDQ6VGVhbTE=',
            url: 'https://api.github.com/organizations/1/team/1',
            html_url: 'https://github.com/orgs/rails/teams/core',
            name: 'Developers',
            slug: 'justice-league',
            description: 'A great team.',
            privacy: 'closed',
            permission: 'push',
            members_url:
              'https://api.github.com/organizations/1/team/1/members{/member}',
            repositories_url:
              'https://api.github.com/organizations/1/team/1/repos',
            parent: {
              id: 1,
              node_id: 'MDQ6VGVhbTE=',
              url: 'https://api.github.com/organizations/1/team/1',
              members_url:
                'https://api.github.com/organizations/1/team/1/members{/member}',
              name: 'Justice League',
              description: 'A great team.',
              permission: 'admin',
              privacy: 'closed',
              html_url: 'https://github.com/orgs/rails/teams/core',
              repositories_url:
                'https://api.github.com/organizations/1/team/1/repos',
              slug: 'justice-league',
              ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
            },
            members_count: 3,
            repos_count: 10,
            created_at: '2017-07-14T16:53:42Z',
            updated_at: '2017-08-17T12:37:15Z',
            organization: {
              login: 'github',
              id: 1,
              node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
              url: 'https://api.github.com/orgs/github',
              repos_url: 'https://api.github.com/orgs/github/repos',
              events_url: 'https://api.github.com/orgs/github/events',
              hooks_url: 'https://api.github.com/orgs/github/hooks',
              issues_url: 'https://api.github.com/orgs/github/issues',
              members_url:
                'https://api.github.com/orgs/github/members{/member}',
              public_members_url:
                'https://api.github.com/orgs/github/public_members{/member}',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              description: 'A great organization',
              name: 'github',
              company: 'GitHub',
              blog: 'https://github.com/blog',
              location: 'San Francisco',
              email: 'octocat@github.com',
              twitter_username: 'github',
              is_verified: true,
              has_organization_projects: true,
              has_repository_projects: true,
              public_repos: 2,
              public_gists: 1,
              followers: 20,
              following: faker.datatype.number(),
              html_url: 'https://github.com/octocat',
              created_at: '2008-01-14T04:33:35Z',
              type: 'Organization',
              total_private_repos: 100,
              owned_private_repos: 100,
              private_gists: 81,
              disk_usage: 10000,
              collaborators: 8,
              billing_email: 'org@example.com',
              plan: {
                name: faker.name.findName(),
                space: faker.datatype.number(),
                private_repos: faker.datatype.number(),
                filled_seats: faker.datatype.number(),
                seats: faker.datatype.number(),
              },
              default_repository_permission: faker.lorem.slug(1),
              members_can_create_repositories: true,
              two_factor_requirement_enabled: true,
              members_allowed_repository_creation_type: 'all',
              members_can_create_public_repositories: true,
              members_can_create_private_repositories: true,
              members_can_create_internal_repositories: true,
              members_can_create_pages: true,
              members_can_create_public_pages: true,
              members_can_create_private_pages: true,
              updated_at: faker.date.past(),
            },
            ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
      [
        ctx.status(403),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          }))
        ),
      ],
      [ctx.status(304), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/:username`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(null)],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/:username/events`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.lorem.slug(1),
            type: faker.lorem.slug(1),
            actor: {
              id: faker.datatype.number(),
              login: faker.lorem.slug(1),
              display_login: faker.lorem.slug(1),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              avatar_url: faker.internet.url(),
            },
            repo: {
              id: faker.datatype.number(),
              name: faker.name.findName(),
              url: faker.internet.url(),
            },
            org: {
              id: faker.datatype.number(),
              login: faker.lorem.slug(1),
              display_login: faker.lorem.slug(1),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              avatar_url: faker.internet.url(),
            },
            payload: {
              action: faker.lorem.slug(1),
              issue: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                url: 'https://api.github.com/repositories/42/issues/1',
                repository_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                events_url: faker.internet.url(),
                html_url: faker.internet.url(),
                number: 42,
                state: 'open',
                state_reason: 'not_planned',
                title: 'Widget creation fails in Safari on OS X 10.8',
                body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                labels: ['bug', 'registration'],
                assignee: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                assignees: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                })),
                milestone: {
                  url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
                  html_url:
                    'https://github.com/octocat/Hello-World/milestones/v1.0',
                  labels_url:
                    'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
                  id: 1002604,
                  node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
                  number: 42,
                  state: 'open',
                  title: 'v1.0',
                  description: 'Tracking milestone for version 1.0',
                  creator: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  open_issues: 4,
                  closed_issues: 8,
                  created_at: '2011-04-10T20:09:31Z',
                  updated_at: '2014-03-03T18:58:10Z',
                  closed_at: '2013-02-12T13:22:01Z',
                  due_on: '2012-10-09T23:39:01Z',
                },
                locked: faker.datatype.boolean(),
                active_lock_reason: faker.lorem.slug(1),
                comments: faker.datatype.number(),
                pull_request: {
                  merged_at: faker.date.past(),
                  diff_url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  patch_url: faker.internet.url(),
                  url: faker.internet.url(),
                },
                closed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                draft: faker.datatype.boolean(),
                closed_by: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                body_html: faker.lorem.slug(1),
                body_text: faker.lorem.slug(1),
                timeline_url: faker.internet.url(),
                repository: {
                  id: 42,
                  node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                  name: 'Team Environment',
                  full_name: 'octocat/Hello-World',
                  license: {
                    key: 'mit',
                    name: 'MIT License',
                    url: 'https://api.github.com/licenses/mit',
                    spdx_id: 'MIT',
                    node_id: 'MDc6TGljZW5zZW1pdA==',
                    html_url: faker.internet.url(),
                  },
                  organization: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  forks: faker.datatype.number(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                  },
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  private: faker.datatype.boolean(),
                  html_url: 'https://github.com/octocat/Hello-World',
                  description: 'This your first repo!',
                  fork: faker.datatype.boolean(),
                  url: 'https://api.github.com/repos/octocat/Hello-World',
                  archive_url:
                    'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                  assignees_url:
                    'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                  blobs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                  branches_url:
                    'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                  collaborators_url:
                    'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                  comments_url:
                    'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                  commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                  compare_url:
                    'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                  contents_url:
                    'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                  contributors_url:
                    'http://api.github.com/repos/octocat/Hello-World/contributors',
                  deployments_url:
                    'http://api.github.com/repos/octocat/Hello-World/deployments',
                  downloads_url:
                    'http://api.github.com/repos/octocat/Hello-World/downloads',
                  events_url:
                    'http://api.github.com/repos/octocat/Hello-World/events',
                  forks_url:
                    'http://api.github.com/repos/octocat/Hello-World/forks',
                  git_commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                  git_refs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                  git_tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                  git_url: 'git:github.com/octocat/Hello-World.git',
                  issue_comment_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                  issue_events_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                  issues_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                  keys_url:
                    'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                  labels_url:
                    'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                  languages_url:
                    'http://api.github.com/repos/octocat/Hello-World/languages',
                  merges_url:
                    'http://api.github.com/repos/octocat/Hello-World/merges',
                  milestones_url:
                    'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                  notifications_url:
                    'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                  pulls_url:
                    'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                  releases_url:
                    'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                  ssh_url: 'git@github.com:octocat/Hello-World.git',
                  stargazers_url:
                    'http://api.github.com/repos/octocat/Hello-World/stargazers',
                  statuses_url:
                    'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                  subscribers_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscribers',
                  subscription_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscription',
                  tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/tags',
                  teams_url:
                    'http://api.github.com/repos/octocat/Hello-World/teams',
                  trees_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                  clone_url: 'https://github.com/octocat/Hello-World.git',
                  mirror_url: 'git:git.example.com/octocat/Hello-World',
                  hooks_url:
                    'http://api.github.com/repos/octocat/Hello-World/hooks',
                  svn_url: 'https://svn.github.com/octocat/Hello-World',
                  homepage: 'https://github.com',
                  language: faker.lorem.slug(1),
                  forks_count: 9,
                  stargazers_count: 80,
                  watchers_count: 80,
                  size: 108,
                  default_branch: 'master',
                  open_issues_count: faker.datatype.number(),
                  is_template: true,
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: true,
                  has_projects: true,
                  has_wiki: true,
                  has_pages: faker.datatype.boolean(),
                  has_downloads: true,
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: '2011-01-26T19:06:43Z',
                  created_at: '2011-01-26T19:01:12Z',
                  updated_at: '2011-01-26T19:14:43Z',
                  allow_rebase_merge: true,
                  template_repository: {
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    name: faker.name.findName(),
                    full_name: faker.name.findName(),
                    owner: {
                      login: faker.lorem.slug(1),
                      id: faker.datatype.number(),
                      node_id: faker.lorem.slug(1),
                      avatar_url: faker.internet.url(),
                      gravatar_id: faker.lorem.slug(1),
                      url: faker.internet.url(),
                      html_url: faker.internet.url(),
                      followers_url: faker.internet.url(),
                      following_url: faker.internet.url(),
                      gists_url: faker.internet.url(),
                      starred_url: faker.internet.url(),
                      subscriptions_url: faker.internet.url(),
                      organizations_url: faker.internet.url(),
                      repos_url: faker.internet.url(),
                      events_url: faker.internet.url(),
                      received_events_url: faker.internet.url(),
                      type: faker.lorem.slug(1),
                      site_admin: faker.datatype.boolean(),
                    },
                    private: faker.datatype.boolean(),
                    html_url: faker.internet.url(),
                    description: faker.lorem.slug(1),
                    fork: faker.datatype.boolean(),
                    url: faker.internet.url(),
                    archive_url: faker.internet.url(),
                    assignees_url: faker.internet.url(),
                    blobs_url: faker.internet.url(),
                    branches_url: faker.internet.url(),
                    collaborators_url: faker.internet.url(),
                    comments_url: faker.internet.url(),
                    commits_url: faker.internet.url(),
                    compare_url: faker.internet.url(),
                    contents_url: faker.internet.url(),
                    contributors_url: faker.internet.url(),
                    deployments_url: faker.internet.url(),
                    downloads_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    forks_url: faker.internet.url(),
                    git_commits_url: faker.internet.url(),
                    git_refs_url: faker.internet.url(),
                    git_tags_url: faker.internet.url(),
                    git_url: faker.internet.url(),
                    issue_comment_url: faker.internet.url(),
                    issue_events_url: faker.internet.url(),
                    issues_url: faker.internet.url(),
                    keys_url: faker.internet.url(),
                    labels_url: faker.internet.url(),
                    languages_url: faker.internet.url(),
                    merges_url: faker.internet.url(),
                    milestones_url: faker.internet.url(),
                    notifications_url: faker.internet.url(),
                    pulls_url: faker.internet.url(),
                    releases_url: faker.internet.url(),
                    ssh_url: faker.internet.url(),
                    stargazers_url: faker.internet.url(),
                    statuses_url: faker.internet.url(),
                    subscribers_url: faker.internet.url(),
                    subscription_url: faker.internet.url(),
                    tags_url: faker.internet.url(),
                    teams_url: faker.internet.url(),
                    trees_url: faker.internet.url(),
                    clone_url: faker.internet.url(),
                    mirror_url: faker.internet.url(),
                    hooks_url: faker.internet.url(),
                    svn_url: faker.internet.url(),
                    homepage: faker.lorem.slug(1),
                    language: faker.lorem.slug(1),
                    forks_count: faker.datatype.number(),
                    stargazers_count: faker.datatype.number(),
                    watchers_count: faker.datatype.number(),
                    size: faker.datatype.number(),
                    default_branch: faker.lorem.slug(1),
                    open_issues_count: faker.datatype.number(),
                    is_template: faker.datatype.boolean(),
                    topics: [
                      ...new Array(
                        faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                      ).keys(),
                    ].map(_ => faker.lorem.slug(1)),
                    has_issues: faker.datatype.boolean(),
                    has_projects: faker.datatype.boolean(),
                    has_wiki: faker.datatype.boolean(),
                    has_pages: faker.datatype.boolean(),
                    has_downloads: faker.datatype.boolean(),
                    archived: faker.datatype.boolean(),
                    disabled: faker.datatype.boolean(),
                    visibility: faker.lorem.slug(1),
                    pushed_at: faker.date.past(),
                    created_at: faker.date.past(),
                    updated_at: faker.date.past(),
                    permissions: {
                      admin: faker.datatype.boolean(),
                      maintain: faker.datatype.boolean(),
                      push: faker.datatype.boolean(),
                      triage: faker.datatype.boolean(),
                      pull: faker.datatype.boolean(),
                    },
                    allow_rebase_merge: faker.datatype.boolean(),
                    temp_clone_token: faker.lorem.slug(1),
                    allow_squash_merge: faker.datatype.boolean(),
                    allow_auto_merge: faker.datatype.boolean(),
                    delete_branch_on_merge: faker.datatype.boolean(),
                    allow_update_branch: faker.datatype.boolean(),
                    allow_merge_commit: faker.datatype.boolean(),
                    subscribers_count: faker.datatype.number(),
                    network_count: faker.datatype.number(),
                  },
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: true,
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: true,
                  allow_forking: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                  open_issues: faker.datatype.number(),
                  watchers: faker.datatype.number(),
                  master_branch: faker.lorem.slug(1),
                  starred_at: '"2020-07-09T00:17:42Z"',
                  anonymous_access_enabled: faker.datatype.boolean(),
                },
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
                author_association: 'OWNER',
                reactions: {
                  url: faker.internet.url(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              },
              comment: {
                id: 42,
                node_id: faker.lorem.slug(1),
                url: 'https://api.github.com/repositories/42/issues/comments/1',
                body: 'What version of Safari were you using when you observed this bug?',
                body_text: faker.lorem.slug(1),
                body_html: faker.lorem.slug(1),
                html_url: faker.internet.url(),
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                created_at: '2011-04-14T16:00:49Z',
                updated_at: '2011-04-14T16:00:49Z',
                issue_url: faker.internet.url(),
                author_association: 'OWNER',
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
                reactions: {
                  url: faker.internet.url(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              },
              pages: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                page_name: faker.name.findName(),
                title: faker.lorem.slug(1),
                summary: faker.lorem.slug(1),
                action: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                html_url: faker.internet.url(),
              })),
            },
            public: faker.datatype.boolean(),
            created_at: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/:username/events/orgs/:org`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.lorem.slug(1),
            type: faker.lorem.slug(1),
            actor: {
              id: faker.datatype.number(),
              login: faker.lorem.slug(1),
              display_login: faker.lorem.slug(1),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              avatar_url: faker.internet.url(),
            },
            repo: {
              id: faker.datatype.number(),
              name: faker.name.findName(),
              url: faker.internet.url(),
            },
            org: {
              id: faker.datatype.number(),
              login: faker.lorem.slug(1),
              display_login: faker.lorem.slug(1),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              avatar_url: faker.internet.url(),
            },
            payload: {
              action: faker.lorem.slug(1),
              issue: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                url: 'https://api.github.com/repositories/42/issues/1',
                repository_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                events_url: faker.internet.url(),
                html_url: faker.internet.url(),
                number: 42,
                state: 'open',
                state_reason: 'not_planned',
                title: 'Widget creation fails in Safari on OS X 10.8',
                body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                labels: ['bug', 'registration'],
                assignee: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                assignees: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                })),
                milestone: {
                  url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
                  html_url:
                    'https://github.com/octocat/Hello-World/milestones/v1.0',
                  labels_url:
                    'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
                  id: 1002604,
                  node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
                  number: 42,
                  state: 'open',
                  title: 'v1.0',
                  description: 'Tracking milestone for version 1.0',
                  creator: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  open_issues: 4,
                  closed_issues: 8,
                  created_at: '2011-04-10T20:09:31Z',
                  updated_at: '2014-03-03T18:58:10Z',
                  closed_at: '2013-02-12T13:22:01Z',
                  due_on: '2012-10-09T23:39:01Z',
                },
                locked: faker.datatype.boolean(),
                active_lock_reason: faker.lorem.slug(1),
                comments: faker.datatype.number(),
                pull_request: {
                  merged_at: faker.date.past(),
                  diff_url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  patch_url: faker.internet.url(),
                  url: faker.internet.url(),
                },
                closed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                draft: faker.datatype.boolean(),
                closed_by: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                body_html: faker.lorem.slug(1),
                body_text: faker.lorem.slug(1),
                timeline_url: faker.internet.url(),
                repository: {
                  id: 42,
                  node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                  name: 'Team Environment',
                  full_name: 'octocat/Hello-World',
                  license: {
                    key: 'mit',
                    name: 'MIT License',
                    url: 'https://api.github.com/licenses/mit',
                    spdx_id: 'MIT',
                    node_id: 'MDc6TGljZW5zZW1pdA==',
                    html_url: faker.internet.url(),
                  },
                  organization: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  forks: faker.datatype.number(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                  },
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  private: faker.datatype.boolean(),
                  html_url: 'https://github.com/octocat/Hello-World',
                  description: 'This your first repo!',
                  fork: faker.datatype.boolean(),
                  url: 'https://api.github.com/repos/octocat/Hello-World',
                  archive_url:
                    'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                  assignees_url:
                    'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                  blobs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                  branches_url:
                    'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                  collaborators_url:
                    'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                  comments_url:
                    'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                  commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                  compare_url:
                    'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                  contents_url:
                    'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                  contributors_url:
                    'http://api.github.com/repos/octocat/Hello-World/contributors',
                  deployments_url:
                    'http://api.github.com/repos/octocat/Hello-World/deployments',
                  downloads_url:
                    'http://api.github.com/repos/octocat/Hello-World/downloads',
                  events_url:
                    'http://api.github.com/repos/octocat/Hello-World/events',
                  forks_url:
                    'http://api.github.com/repos/octocat/Hello-World/forks',
                  git_commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                  git_refs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                  git_tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                  git_url: 'git:github.com/octocat/Hello-World.git',
                  issue_comment_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                  issue_events_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                  issues_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                  keys_url:
                    'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                  labels_url:
                    'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                  languages_url:
                    'http://api.github.com/repos/octocat/Hello-World/languages',
                  merges_url:
                    'http://api.github.com/repos/octocat/Hello-World/merges',
                  milestones_url:
                    'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                  notifications_url:
                    'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                  pulls_url:
                    'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                  releases_url:
                    'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                  ssh_url: 'git@github.com:octocat/Hello-World.git',
                  stargazers_url:
                    'http://api.github.com/repos/octocat/Hello-World/stargazers',
                  statuses_url:
                    'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                  subscribers_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscribers',
                  subscription_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscription',
                  tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/tags',
                  teams_url:
                    'http://api.github.com/repos/octocat/Hello-World/teams',
                  trees_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                  clone_url: 'https://github.com/octocat/Hello-World.git',
                  mirror_url: 'git:git.example.com/octocat/Hello-World',
                  hooks_url:
                    'http://api.github.com/repos/octocat/Hello-World/hooks',
                  svn_url: 'https://svn.github.com/octocat/Hello-World',
                  homepage: 'https://github.com',
                  language: faker.lorem.slug(1),
                  forks_count: 9,
                  stargazers_count: 80,
                  watchers_count: 80,
                  size: 108,
                  default_branch: 'master',
                  open_issues_count: faker.datatype.number(),
                  is_template: true,
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: true,
                  has_projects: true,
                  has_wiki: true,
                  has_pages: faker.datatype.boolean(),
                  has_downloads: true,
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: '2011-01-26T19:06:43Z',
                  created_at: '2011-01-26T19:01:12Z',
                  updated_at: '2011-01-26T19:14:43Z',
                  allow_rebase_merge: true,
                  template_repository: {
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    name: faker.name.findName(),
                    full_name: faker.name.findName(),
                    owner: {
                      login: faker.lorem.slug(1),
                      id: faker.datatype.number(),
                      node_id: faker.lorem.slug(1),
                      avatar_url: faker.internet.url(),
                      gravatar_id: faker.lorem.slug(1),
                      url: faker.internet.url(),
                      html_url: faker.internet.url(),
                      followers_url: faker.internet.url(),
                      following_url: faker.internet.url(),
                      gists_url: faker.internet.url(),
                      starred_url: faker.internet.url(),
                      subscriptions_url: faker.internet.url(),
                      organizations_url: faker.internet.url(),
                      repos_url: faker.internet.url(),
                      events_url: faker.internet.url(),
                      received_events_url: faker.internet.url(),
                      type: faker.lorem.slug(1),
                      site_admin: faker.datatype.boolean(),
                    },
                    private: faker.datatype.boolean(),
                    html_url: faker.internet.url(),
                    description: faker.lorem.slug(1),
                    fork: faker.datatype.boolean(),
                    url: faker.internet.url(),
                    archive_url: faker.internet.url(),
                    assignees_url: faker.internet.url(),
                    blobs_url: faker.internet.url(),
                    branches_url: faker.internet.url(),
                    collaborators_url: faker.internet.url(),
                    comments_url: faker.internet.url(),
                    commits_url: faker.internet.url(),
                    compare_url: faker.internet.url(),
                    contents_url: faker.internet.url(),
                    contributors_url: faker.internet.url(),
                    deployments_url: faker.internet.url(),
                    downloads_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    forks_url: faker.internet.url(),
                    git_commits_url: faker.internet.url(),
                    git_refs_url: faker.internet.url(),
                    git_tags_url: faker.internet.url(),
                    git_url: faker.internet.url(),
                    issue_comment_url: faker.internet.url(),
                    issue_events_url: faker.internet.url(),
                    issues_url: faker.internet.url(),
                    keys_url: faker.internet.url(),
                    labels_url: faker.internet.url(),
                    languages_url: faker.internet.url(),
                    merges_url: faker.internet.url(),
                    milestones_url: faker.internet.url(),
                    notifications_url: faker.internet.url(),
                    pulls_url: faker.internet.url(),
                    releases_url: faker.internet.url(),
                    ssh_url: faker.internet.url(),
                    stargazers_url: faker.internet.url(),
                    statuses_url: faker.internet.url(),
                    subscribers_url: faker.internet.url(),
                    subscription_url: faker.internet.url(),
                    tags_url: faker.internet.url(),
                    teams_url: faker.internet.url(),
                    trees_url: faker.internet.url(),
                    clone_url: faker.internet.url(),
                    mirror_url: faker.internet.url(),
                    hooks_url: faker.internet.url(),
                    svn_url: faker.internet.url(),
                    homepage: faker.lorem.slug(1),
                    language: faker.lorem.slug(1),
                    forks_count: faker.datatype.number(),
                    stargazers_count: faker.datatype.number(),
                    watchers_count: faker.datatype.number(),
                    size: faker.datatype.number(),
                    default_branch: faker.lorem.slug(1),
                    open_issues_count: faker.datatype.number(),
                    is_template: faker.datatype.boolean(),
                    topics: [
                      ...new Array(
                        faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                      ).keys(),
                    ].map(_ => faker.lorem.slug(1)),
                    has_issues: faker.datatype.boolean(),
                    has_projects: faker.datatype.boolean(),
                    has_wiki: faker.datatype.boolean(),
                    has_pages: faker.datatype.boolean(),
                    has_downloads: faker.datatype.boolean(),
                    archived: faker.datatype.boolean(),
                    disabled: faker.datatype.boolean(),
                    visibility: faker.lorem.slug(1),
                    pushed_at: faker.date.past(),
                    created_at: faker.date.past(),
                    updated_at: faker.date.past(),
                    permissions: {
                      admin: faker.datatype.boolean(),
                      maintain: faker.datatype.boolean(),
                      push: faker.datatype.boolean(),
                      triage: faker.datatype.boolean(),
                      pull: faker.datatype.boolean(),
                    },
                    allow_rebase_merge: faker.datatype.boolean(),
                    temp_clone_token: faker.lorem.slug(1),
                    allow_squash_merge: faker.datatype.boolean(),
                    allow_auto_merge: faker.datatype.boolean(),
                    delete_branch_on_merge: faker.datatype.boolean(),
                    allow_update_branch: faker.datatype.boolean(),
                    allow_merge_commit: faker.datatype.boolean(),
                    subscribers_count: faker.datatype.number(),
                    network_count: faker.datatype.number(),
                  },
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: true,
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: true,
                  allow_forking: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                  open_issues: faker.datatype.number(),
                  watchers: faker.datatype.number(),
                  master_branch: faker.lorem.slug(1),
                  starred_at: '"2020-07-09T00:17:42Z"',
                  anonymous_access_enabled: faker.datatype.boolean(),
                },
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
                author_association: 'OWNER',
                reactions: {
                  url: faker.internet.url(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              },
              comment: {
                id: 42,
                node_id: faker.lorem.slug(1),
                url: 'https://api.github.com/repositories/42/issues/comments/1',
                body: 'What version of Safari were you using when you observed this bug?',
                body_text: faker.lorem.slug(1),
                body_html: faker.lorem.slug(1),
                html_url: faker.internet.url(),
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                created_at: '2011-04-14T16:00:49Z',
                updated_at: '2011-04-14T16:00:49Z',
                issue_url: faker.internet.url(),
                author_association: 'OWNER',
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
                reactions: {
                  url: faker.internet.url(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              },
              pages: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                page_name: faker.name.findName(),
                title: faker.lorem.slug(1),
                summary: faker.lorem.slug(1),
                action: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                html_url: faker.internet.url(),
              })),
            },
            public: faker.datatype.boolean(),
            created_at: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/:username/events/public`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.lorem.slug(1),
            type: faker.lorem.slug(1),
            actor: {
              id: faker.datatype.number(),
              login: faker.lorem.slug(1),
              display_login: faker.lorem.slug(1),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              avatar_url: faker.internet.url(),
            },
            repo: {
              id: faker.datatype.number(),
              name: faker.name.findName(),
              url: faker.internet.url(),
            },
            org: {
              id: faker.datatype.number(),
              login: faker.lorem.slug(1),
              display_login: faker.lorem.slug(1),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              avatar_url: faker.internet.url(),
            },
            payload: {
              action: faker.lorem.slug(1),
              issue: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                url: 'https://api.github.com/repositories/42/issues/1',
                repository_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                events_url: faker.internet.url(),
                html_url: faker.internet.url(),
                number: 42,
                state: 'open',
                state_reason: 'not_planned',
                title: 'Widget creation fails in Safari on OS X 10.8',
                body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                labels: ['bug', 'registration'],
                assignee: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                assignees: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                })),
                milestone: {
                  url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
                  html_url:
                    'https://github.com/octocat/Hello-World/milestones/v1.0',
                  labels_url:
                    'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
                  id: 1002604,
                  node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
                  number: 42,
                  state: 'open',
                  title: 'v1.0',
                  description: 'Tracking milestone for version 1.0',
                  creator: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  open_issues: 4,
                  closed_issues: 8,
                  created_at: '2011-04-10T20:09:31Z',
                  updated_at: '2014-03-03T18:58:10Z',
                  closed_at: '2013-02-12T13:22:01Z',
                  due_on: '2012-10-09T23:39:01Z',
                },
                locked: faker.datatype.boolean(),
                active_lock_reason: faker.lorem.slug(1),
                comments: faker.datatype.number(),
                pull_request: {
                  merged_at: faker.date.past(),
                  diff_url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  patch_url: faker.internet.url(),
                  url: faker.internet.url(),
                },
                closed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                draft: faker.datatype.boolean(),
                closed_by: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                body_html: faker.lorem.slug(1),
                body_text: faker.lorem.slug(1),
                timeline_url: faker.internet.url(),
                repository: {
                  id: 42,
                  node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                  name: 'Team Environment',
                  full_name: 'octocat/Hello-World',
                  license: {
                    key: 'mit',
                    name: 'MIT License',
                    url: 'https://api.github.com/licenses/mit',
                    spdx_id: 'MIT',
                    node_id: 'MDc6TGljZW5zZW1pdA==',
                    html_url: faker.internet.url(),
                  },
                  organization: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  forks: faker.datatype.number(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                  },
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  private: faker.datatype.boolean(),
                  html_url: 'https://github.com/octocat/Hello-World',
                  description: 'This your first repo!',
                  fork: faker.datatype.boolean(),
                  url: 'https://api.github.com/repos/octocat/Hello-World',
                  archive_url:
                    'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                  assignees_url:
                    'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                  blobs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                  branches_url:
                    'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                  collaborators_url:
                    'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                  comments_url:
                    'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                  commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                  compare_url:
                    'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                  contents_url:
                    'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                  contributors_url:
                    'http://api.github.com/repos/octocat/Hello-World/contributors',
                  deployments_url:
                    'http://api.github.com/repos/octocat/Hello-World/deployments',
                  downloads_url:
                    'http://api.github.com/repos/octocat/Hello-World/downloads',
                  events_url:
                    'http://api.github.com/repos/octocat/Hello-World/events',
                  forks_url:
                    'http://api.github.com/repos/octocat/Hello-World/forks',
                  git_commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                  git_refs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                  git_tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                  git_url: 'git:github.com/octocat/Hello-World.git',
                  issue_comment_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                  issue_events_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                  issues_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                  keys_url:
                    'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                  labels_url:
                    'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                  languages_url:
                    'http://api.github.com/repos/octocat/Hello-World/languages',
                  merges_url:
                    'http://api.github.com/repos/octocat/Hello-World/merges',
                  milestones_url:
                    'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                  notifications_url:
                    'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                  pulls_url:
                    'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                  releases_url:
                    'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                  ssh_url: 'git@github.com:octocat/Hello-World.git',
                  stargazers_url:
                    'http://api.github.com/repos/octocat/Hello-World/stargazers',
                  statuses_url:
                    'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                  subscribers_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscribers',
                  subscription_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscription',
                  tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/tags',
                  teams_url:
                    'http://api.github.com/repos/octocat/Hello-World/teams',
                  trees_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                  clone_url: 'https://github.com/octocat/Hello-World.git',
                  mirror_url: 'git:git.example.com/octocat/Hello-World',
                  hooks_url:
                    'http://api.github.com/repos/octocat/Hello-World/hooks',
                  svn_url: 'https://svn.github.com/octocat/Hello-World',
                  homepage: 'https://github.com',
                  language: faker.lorem.slug(1),
                  forks_count: 9,
                  stargazers_count: 80,
                  watchers_count: 80,
                  size: 108,
                  default_branch: 'master',
                  open_issues_count: faker.datatype.number(),
                  is_template: true,
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: true,
                  has_projects: true,
                  has_wiki: true,
                  has_pages: faker.datatype.boolean(),
                  has_downloads: true,
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: '2011-01-26T19:06:43Z',
                  created_at: '2011-01-26T19:01:12Z',
                  updated_at: '2011-01-26T19:14:43Z',
                  allow_rebase_merge: true,
                  template_repository: {
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    name: faker.name.findName(),
                    full_name: faker.name.findName(),
                    owner: {
                      login: faker.lorem.slug(1),
                      id: faker.datatype.number(),
                      node_id: faker.lorem.slug(1),
                      avatar_url: faker.internet.url(),
                      gravatar_id: faker.lorem.slug(1),
                      url: faker.internet.url(),
                      html_url: faker.internet.url(),
                      followers_url: faker.internet.url(),
                      following_url: faker.internet.url(),
                      gists_url: faker.internet.url(),
                      starred_url: faker.internet.url(),
                      subscriptions_url: faker.internet.url(),
                      organizations_url: faker.internet.url(),
                      repos_url: faker.internet.url(),
                      events_url: faker.internet.url(),
                      received_events_url: faker.internet.url(),
                      type: faker.lorem.slug(1),
                      site_admin: faker.datatype.boolean(),
                    },
                    private: faker.datatype.boolean(),
                    html_url: faker.internet.url(),
                    description: faker.lorem.slug(1),
                    fork: faker.datatype.boolean(),
                    url: faker.internet.url(),
                    archive_url: faker.internet.url(),
                    assignees_url: faker.internet.url(),
                    blobs_url: faker.internet.url(),
                    branches_url: faker.internet.url(),
                    collaborators_url: faker.internet.url(),
                    comments_url: faker.internet.url(),
                    commits_url: faker.internet.url(),
                    compare_url: faker.internet.url(),
                    contents_url: faker.internet.url(),
                    contributors_url: faker.internet.url(),
                    deployments_url: faker.internet.url(),
                    downloads_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    forks_url: faker.internet.url(),
                    git_commits_url: faker.internet.url(),
                    git_refs_url: faker.internet.url(),
                    git_tags_url: faker.internet.url(),
                    git_url: faker.internet.url(),
                    issue_comment_url: faker.internet.url(),
                    issue_events_url: faker.internet.url(),
                    issues_url: faker.internet.url(),
                    keys_url: faker.internet.url(),
                    labels_url: faker.internet.url(),
                    languages_url: faker.internet.url(),
                    merges_url: faker.internet.url(),
                    milestones_url: faker.internet.url(),
                    notifications_url: faker.internet.url(),
                    pulls_url: faker.internet.url(),
                    releases_url: faker.internet.url(),
                    ssh_url: faker.internet.url(),
                    stargazers_url: faker.internet.url(),
                    statuses_url: faker.internet.url(),
                    subscribers_url: faker.internet.url(),
                    subscription_url: faker.internet.url(),
                    tags_url: faker.internet.url(),
                    teams_url: faker.internet.url(),
                    trees_url: faker.internet.url(),
                    clone_url: faker.internet.url(),
                    mirror_url: faker.internet.url(),
                    hooks_url: faker.internet.url(),
                    svn_url: faker.internet.url(),
                    homepage: faker.lorem.slug(1),
                    language: faker.lorem.slug(1),
                    forks_count: faker.datatype.number(),
                    stargazers_count: faker.datatype.number(),
                    watchers_count: faker.datatype.number(),
                    size: faker.datatype.number(),
                    default_branch: faker.lorem.slug(1),
                    open_issues_count: faker.datatype.number(),
                    is_template: faker.datatype.boolean(),
                    topics: [
                      ...new Array(
                        faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                      ).keys(),
                    ].map(_ => faker.lorem.slug(1)),
                    has_issues: faker.datatype.boolean(),
                    has_projects: faker.datatype.boolean(),
                    has_wiki: faker.datatype.boolean(),
                    has_pages: faker.datatype.boolean(),
                    has_downloads: faker.datatype.boolean(),
                    archived: faker.datatype.boolean(),
                    disabled: faker.datatype.boolean(),
                    visibility: faker.lorem.slug(1),
                    pushed_at: faker.date.past(),
                    created_at: faker.date.past(),
                    updated_at: faker.date.past(),
                    permissions: {
                      admin: faker.datatype.boolean(),
                      maintain: faker.datatype.boolean(),
                      push: faker.datatype.boolean(),
                      triage: faker.datatype.boolean(),
                      pull: faker.datatype.boolean(),
                    },
                    allow_rebase_merge: faker.datatype.boolean(),
                    temp_clone_token: faker.lorem.slug(1),
                    allow_squash_merge: faker.datatype.boolean(),
                    allow_auto_merge: faker.datatype.boolean(),
                    delete_branch_on_merge: faker.datatype.boolean(),
                    allow_update_branch: faker.datatype.boolean(),
                    allow_merge_commit: faker.datatype.boolean(),
                    subscribers_count: faker.datatype.number(),
                    network_count: faker.datatype.number(),
                  },
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: true,
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: true,
                  allow_forking: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                  open_issues: faker.datatype.number(),
                  watchers: faker.datatype.number(),
                  master_branch: faker.lorem.slug(1),
                  starred_at: '"2020-07-09T00:17:42Z"',
                  anonymous_access_enabled: faker.datatype.boolean(),
                },
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
                author_association: 'OWNER',
                reactions: {
                  url: faker.internet.url(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              },
              comment: {
                id: 42,
                node_id: faker.lorem.slug(1),
                url: 'https://api.github.com/repositories/42/issues/comments/1',
                body: 'What version of Safari were you using when you observed this bug?',
                body_text: faker.lorem.slug(1),
                body_html: faker.lorem.slug(1),
                html_url: faker.internet.url(),
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                created_at: '2011-04-14T16:00:49Z',
                updated_at: '2011-04-14T16:00:49Z',
                issue_url: faker.internet.url(),
                author_association: 'OWNER',
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
                reactions: {
                  url: faker.internet.url(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              },
              pages: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                page_name: faker.name.findName(),
                title: faker.lorem.slug(1),
                summary: faker.lorem.slug(1),
                action: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                html_url: faker.internet.url(),
              })),
            },
            public: faker.datatype.boolean(),
            created_at: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/:username/followers`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/:username/following`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/users/:username/following/:targetUser`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/users/:username/gists`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: faker.internet.url(),
            forks_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            id: faker.lorem.slug(1),
            node_id: faker.lorem.slug(1),
            git_pull_url: faker.internet.url(),
            git_push_url: faker.internet.url(),
            html_url: faker.internet.url(),
            files: [...new Array(5).keys()]
              .map(_ => ({
                [faker.lorem.word()]: {
                  filename: faker.name.findName(),
                  type: faker.lorem.slug(1),
                  language: faker.lorem.slug(1),
                  raw_url: faker.internet.url(),
                  size: faker.datatype.number(),
                },
              }))
              .reduce((acc, next) => Object.assign(acc, next), {}),
            public: faker.datatype.boolean(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            description: faker.lorem.slug(1),
            comments: faker.datatype.number(),
            user: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            comments_url: faker.internet.url(),
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            truncated: faker.datatype.boolean(),
            forks: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            history: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
          }))
        ),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/:username/gpg_keys`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 3,
            primary_key_id: faker.datatype.number(),
            key_id: '3262EFF25BA0D270',
            public_key: 'xsBNBFayYZ...',
            emails: [
              { email: 'octocat@users.noreply.github.com', verified: true },
            ],
            subkeys: [
              {
                id: 4,
                primary_key_id: 3,
                key_id: '4A595D4C72EE49C7',
                public_key: 'zsBNBFayYZ...',
                emails: [],
                subkeys: [],
                can_sign: false,
                can_encrypt_comms: true,
                can_encrypt_storage: true,
                can_certify: false,
                created_at: '2016-03-24T11:31:04-06:00',
                expires_at: null,
              },
            ],
            can_sign: true,
            can_encrypt_comms: faker.datatype.boolean(),
            can_encrypt_storage: faker.datatype.boolean(),
            can_certify: true,
            created_at: '2016-03-24T11:31:04-06:00',
            expires_at: faker.date.past(),
            raw_key: faker.lorem.slug(1),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/:username/hovercard`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          contexts: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            message: faker.lorem.slug(1),
            octicon: faker.lorem.slug(1),
          })),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          url: faker.internet.url(),
          status: faker.lorem.slug(1),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/:username/installation`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 1,
          account: null,
          repository_selection: faker.helpers.arrayElement(['all', 'selected']),
          access_tokens_url:
            'https://api.github.com/installations/1/access_tokens',
          repositories_url: 'https://api.github.com/installation/repositories',
          html_url:
            'https://github.com/organizations/github/settings/installations/1',
          app_id: 1,
          target_id: faker.datatype.number(),
          target_type: 'Organization',
          permissions: {
            contents: 'read',
            issues: 'read',
            deployments: 'write',
            single_file: 'read',
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug(1)),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          single_file_name: 'config.yaml',
          has_multiple_single_files: true,
          single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
          app_slug: 'github-actions',
          suspended_by: {
            name: faker.name.findName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url:
              'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url:
              'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url:
              'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url:
              'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          suspended_at: faker.date.past(),
          contact_email: '"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"',
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/:username/keys`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            key: faker.lorem.slug(1),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/:username/orgs`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            login: 'github',
            id: 1,
            node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
            url: 'https://api.github.com/orgs/github',
            repos_url: 'https://api.github.com/orgs/github/repos',
            events_url: 'https://api.github.com/orgs/github/events',
            hooks_url: 'https://api.github.com/orgs/github/hooks',
            issues_url: 'https://api.github.com/orgs/github/issues',
            members_url: 'https://api.github.com/orgs/github/members{/member}',
            public_members_url:
              'https://api.github.com/orgs/github/public_members{/member}',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            description: 'A great organization',
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/:username/projects`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            owner_url:
              'https://api.github.com/repos/api-playground/projects-test',
            url: 'https://api.github.com/projects/1002604',
            html_url:
              'https://github.com/api-playground/projects-test/projects/12',
            columns_url: 'https://api.github.com/projects/1002604/columns',
            id: 1002604,
            node_id: 'MDc6UHJvamVjdDEwMDI2MDQ=',
            name: 'Week One Sprint',
            body: 'This project represents the sprint of the first week in January',
            number: 1,
            state: 'open',
            creator: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            created_at: '2011-04-10T20:09:31Z',
            updated_at: '2014-03-03T18:58:10Z',
            organization_permission: faker.helpers.arrayElement([
              'read',
              'write',
              'admin',
              'none',
            ]),
            private: faker.datatype.boolean(),
          }))
        ),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.lorem.slug(1),
          documentation_url: faker.internet.url(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(1),
            field: faker.lorem.slug(1),
            message: faker.lorem.slug(1),
            code: faker.lorem.slug(1),
            index: faker.datatype.number(),
            value: null,
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/:username/received_events`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.lorem.slug(1),
            type: faker.lorem.slug(1),
            actor: {
              id: faker.datatype.number(),
              login: faker.lorem.slug(1),
              display_login: faker.lorem.slug(1),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              avatar_url: faker.internet.url(),
            },
            repo: {
              id: faker.datatype.number(),
              name: faker.name.findName(),
              url: faker.internet.url(),
            },
            org: {
              id: faker.datatype.number(),
              login: faker.lorem.slug(1),
              display_login: faker.lorem.slug(1),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              avatar_url: faker.internet.url(),
            },
            payload: {
              action: faker.lorem.slug(1),
              issue: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(1),
                url: 'https://api.github.com/repositories/42/issues/1',
                repository_url: faker.internet.url(),
                labels_url: faker.internet.url(),
                comments_url: faker.internet.url(),
                events_url: faker.internet.url(),
                html_url: faker.internet.url(),
                number: 42,
                state: 'open',
                state_reason: 'not_planned',
                title: 'Widget creation fails in Safari on OS X 10.8',
                body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                labels: ['bug', 'registration'],
                assignee: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                assignees: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                })),
                milestone: {
                  url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
                  html_url:
                    'https://github.com/octocat/Hello-World/milestones/v1.0',
                  labels_url:
                    'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
                  id: 1002604,
                  node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
                  number: 42,
                  state: 'open',
                  title: 'v1.0',
                  description: 'Tracking milestone for version 1.0',
                  creator: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  open_issues: 4,
                  closed_issues: 8,
                  created_at: '2011-04-10T20:09:31Z',
                  updated_at: '2014-03-03T18:58:10Z',
                  closed_at: '2013-02-12T13:22:01Z',
                  due_on: '2012-10-09T23:39:01Z',
                },
                locked: faker.datatype.boolean(),
                active_lock_reason: faker.lorem.slug(1),
                comments: faker.datatype.number(),
                pull_request: {
                  merged_at: faker.date.past(),
                  diff_url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  patch_url: faker.internet.url(),
                  url: faker.internet.url(),
                },
                closed_at: faker.date.past(),
                created_at: faker.date.past(),
                updated_at: faker.date.past(),
                draft: faker.datatype.boolean(),
                closed_by: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                body_html: faker.lorem.slug(1),
                body_text: faker.lorem.slug(1),
                timeline_url: faker.internet.url(),
                repository: {
                  id: 42,
                  node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                  name: 'Team Environment',
                  full_name: 'octocat/Hello-World',
                  license: {
                    key: 'mit',
                    name: 'MIT License',
                    url: 'https://api.github.com/licenses/mit',
                    spdx_id: 'MIT',
                    node_id: 'MDc6TGljZW5zZW1pdA==',
                    html_url: faker.internet.url(),
                  },
                  organization: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  forks: faker.datatype.number(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                  },
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  private: faker.datatype.boolean(),
                  html_url: 'https://github.com/octocat/Hello-World',
                  description: 'This your first repo!',
                  fork: faker.datatype.boolean(),
                  url: 'https://api.github.com/repos/octocat/Hello-World',
                  archive_url:
                    'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                  assignees_url:
                    'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                  blobs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                  branches_url:
                    'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                  collaborators_url:
                    'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                  comments_url:
                    'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                  commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                  compare_url:
                    'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                  contents_url:
                    'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                  contributors_url:
                    'http://api.github.com/repos/octocat/Hello-World/contributors',
                  deployments_url:
                    'http://api.github.com/repos/octocat/Hello-World/deployments',
                  downloads_url:
                    'http://api.github.com/repos/octocat/Hello-World/downloads',
                  events_url:
                    'http://api.github.com/repos/octocat/Hello-World/events',
                  forks_url:
                    'http://api.github.com/repos/octocat/Hello-World/forks',
                  git_commits_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                  git_refs_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                  git_tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                  git_url: 'git:github.com/octocat/Hello-World.git',
                  issue_comment_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                  issue_events_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                  issues_url:
                    'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                  keys_url:
                    'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                  labels_url:
                    'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                  languages_url:
                    'http://api.github.com/repos/octocat/Hello-World/languages',
                  merges_url:
                    'http://api.github.com/repos/octocat/Hello-World/merges',
                  milestones_url:
                    'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                  notifications_url:
                    'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                  pulls_url:
                    'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                  releases_url:
                    'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                  ssh_url: 'git@github.com:octocat/Hello-World.git',
                  stargazers_url:
                    'http://api.github.com/repos/octocat/Hello-World/stargazers',
                  statuses_url:
                    'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                  subscribers_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscribers',
                  subscription_url:
                    'http://api.github.com/repos/octocat/Hello-World/subscription',
                  tags_url:
                    'http://api.github.com/repos/octocat/Hello-World/tags',
                  teams_url:
                    'http://api.github.com/repos/octocat/Hello-World/teams',
                  trees_url:
                    'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                  clone_url: 'https://github.com/octocat/Hello-World.git',
                  mirror_url: 'git:git.example.com/octocat/Hello-World',
                  hooks_url:
                    'http://api.github.com/repos/octocat/Hello-World/hooks',
                  svn_url: 'https://svn.github.com/octocat/Hello-World',
                  homepage: 'https://github.com',
                  language: faker.lorem.slug(1),
                  forks_count: 9,
                  stargazers_count: 80,
                  watchers_count: 80,
                  size: 108,
                  default_branch: 'master',
                  open_issues_count: faker.datatype.number(),
                  is_template: true,
                  topics: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => faker.lorem.slug(1)),
                  has_issues: true,
                  has_projects: true,
                  has_wiki: true,
                  has_pages: faker.datatype.boolean(),
                  has_downloads: true,
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.lorem.slug(1),
                  pushed_at: '2011-01-26T19:06:43Z',
                  created_at: '2011-01-26T19:01:12Z',
                  updated_at: '2011-01-26T19:14:43Z',
                  allow_rebase_merge: true,
                  template_repository: {
                    id: faker.datatype.number(),
                    node_id: faker.lorem.slug(1),
                    name: faker.name.findName(),
                    full_name: faker.name.findName(),
                    owner: {
                      login: faker.lorem.slug(1),
                      id: faker.datatype.number(),
                      node_id: faker.lorem.slug(1),
                      avatar_url: faker.internet.url(),
                      gravatar_id: faker.lorem.slug(1),
                      url: faker.internet.url(),
                      html_url: faker.internet.url(),
                      followers_url: faker.internet.url(),
                      following_url: faker.internet.url(),
                      gists_url: faker.internet.url(),
                      starred_url: faker.internet.url(),
                      subscriptions_url: faker.internet.url(),
                      organizations_url: faker.internet.url(),
                      repos_url: faker.internet.url(),
                      events_url: faker.internet.url(),
                      received_events_url: faker.internet.url(),
                      type: faker.lorem.slug(1),
                      site_admin: faker.datatype.boolean(),
                    },
                    private: faker.datatype.boolean(),
                    html_url: faker.internet.url(),
                    description: faker.lorem.slug(1),
                    fork: faker.datatype.boolean(),
                    url: faker.internet.url(),
                    archive_url: faker.internet.url(),
                    assignees_url: faker.internet.url(),
                    blobs_url: faker.internet.url(),
                    branches_url: faker.internet.url(),
                    collaborators_url: faker.internet.url(),
                    comments_url: faker.internet.url(),
                    commits_url: faker.internet.url(),
                    compare_url: faker.internet.url(),
                    contents_url: faker.internet.url(),
                    contributors_url: faker.internet.url(),
                    deployments_url: faker.internet.url(),
                    downloads_url: faker.internet.url(),
                    events_url: faker.internet.url(),
                    forks_url: faker.internet.url(),
                    git_commits_url: faker.internet.url(),
                    git_refs_url: faker.internet.url(),
                    git_tags_url: faker.internet.url(),
                    git_url: faker.internet.url(),
                    issue_comment_url: faker.internet.url(),
                    issue_events_url: faker.internet.url(),
                    issues_url: faker.internet.url(),
                    keys_url: faker.internet.url(),
                    labels_url: faker.internet.url(),
                    languages_url: faker.internet.url(),
                    merges_url: faker.internet.url(),
                    milestones_url: faker.internet.url(),
                    notifications_url: faker.internet.url(),
                    pulls_url: faker.internet.url(),
                    releases_url: faker.internet.url(),
                    ssh_url: faker.internet.url(),
                    stargazers_url: faker.internet.url(),
                    statuses_url: faker.internet.url(),
                    subscribers_url: faker.internet.url(),
                    subscription_url: faker.internet.url(),
                    tags_url: faker.internet.url(),
                    teams_url: faker.internet.url(),
                    trees_url: faker.internet.url(),
                    clone_url: faker.internet.url(),
                    mirror_url: faker.internet.url(),
                    hooks_url: faker.internet.url(),
                    svn_url: faker.internet.url(),
                    homepage: faker.lorem.slug(1),
                    language: faker.lorem.slug(1),
                    forks_count: faker.datatype.number(),
                    stargazers_count: faker.datatype.number(),
                    watchers_count: faker.datatype.number(),
                    size: faker.datatype.number(),
                    default_branch: faker.lorem.slug(1),
                    open_issues_count: faker.datatype.number(),
                    is_template: faker.datatype.boolean(),
                    topics: [
                      ...new Array(
                        faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                      ).keys(),
                    ].map(_ => faker.lorem.slug(1)),
                    has_issues: faker.datatype.boolean(),
                    has_projects: faker.datatype.boolean(),
                    has_wiki: faker.datatype.boolean(),
                    has_pages: faker.datatype.boolean(),
                    has_downloads: faker.datatype.boolean(),
                    archived: faker.datatype.boolean(),
                    disabled: faker.datatype.boolean(),
                    visibility: faker.lorem.slug(1),
                    pushed_at: faker.date.past(),
                    created_at: faker.date.past(),
                    updated_at: faker.date.past(),
                    permissions: {
                      admin: faker.datatype.boolean(),
                      maintain: faker.datatype.boolean(),
                      push: faker.datatype.boolean(),
                      triage: faker.datatype.boolean(),
                      pull: faker.datatype.boolean(),
                    },
                    allow_rebase_merge: faker.datatype.boolean(),
                    temp_clone_token: faker.lorem.slug(1),
                    allow_squash_merge: faker.datatype.boolean(),
                    allow_auto_merge: faker.datatype.boolean(),
                    delete_branch_on_merge: faker.datatype.boolean(),
                    allow_update_branch: faker.datatype.boolean(),
                    allow_merge_commit: faker.datatype.boolean(),
                    subscribers_count: faker.datatype.number(),
                    network_count: faker.datatype.number(),
                  },
                  temp_clone_token: faker.lorem.slug(1),
                  allow_squash_merge: true,
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: true,
                  allow_forking: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                  open_issues: faker.datatype.number(),
                  watchers: faker.datatype.number(),
                  master_branch: faker.lorem.slug(1),
                  starred_at: '"2020-07-09T00:17:42Z"',
                  anonymous_access_enabled: faker.datatype.boolean(),
                },
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
                author_association: 'OWNER',
                reactions: {
                  url: faker.internet.url(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              },
              comment: {
                id: 42,
                node_id: faker.lorem.slug(1),
                url: 'https://api.github.com/repositories/42/issues/comments/1',
                body: 'What version of Safari were you using when you observed this bug?',
                body_text: faker.lorem.slug(1),
                body_html: faker.lorem.slug(1),
                html_url: faker.internet.url(),
                user: {
                  name: faker.name.findName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url:
                    'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url:
                    'https://api.github.com/users/octocat/followers',
                  following_url:
                    'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url:
                    'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url:
                    'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url:
                    'https://api.github.com/users/octocat/subscriptions',
                  organizations_url:
                    'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url:
                    'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url:
                    'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                created_at: '2011-04-14T16:00:49Z',
                updated_at: '2011-04-14T16:00:49Z',
                issue_url: faker.internet.url(),
                author_association: 'OWNER',
                performed_via_github_app: {
                  id: 37,
                  slug: 'probot-owners',
                  node_id: 'MDExOkludGVncmF0aW9uMQ==',
                  owner: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  name: 'Probot Owners',
                  description: 'The description of the app.',
                  external_url: 'https://example.com',
                  html_url: 'https://github.com/apps/super-ci',
                  created_at: '2017-07-08T16:18:44-04:00',
                  updated_at: '2017-07-08T16:18:44-04:00',
                  permissions: { issues: 'read', deployments: 'write' },
                  events: ['label', 'deployment'],
                  installations_count: 5,
                  client_id: '"Iv1.25b5d1e65ffc4022"',
                  client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                  webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                  pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                },
                reactions: {
                  url: faker.internet.url(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              },
              pages: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                page_name: faker.name.findName(),
                title: faker.lorem.slug(1),
                summary: faker.lorem.slug(1),
                action: faker.lorem.slug(1),
                sha: faker.lorem.slug(1),
                html_url: faker.internet.url(),
              })),
            },
            public: faker.datatype.boolean(),
            created_at: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(
    `${baseURL}/users/:username/received_events/public`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.lorem.slug(1),
              type: faker.lorem.slug(1),
              actor: {
                id: faker.datatype.number(),
                login: faker.lorem.slug(1),
                display_login: faker.lorem.slug(1),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                avatar_url: faker.internet.url(),
              },
              repo: {
                id: faker.datatype.number(),
                name: faker.name.findName(),
                url: faker.internet.url(),
              },
              org: {
                id: faker.datatype.number(),
                login: faker.lorem.slug(1),
                display_login: faker.lorem.slug(1),
                gravatar_id: faker.lorem.slug(1),
                url: faker.internet.url(),
                avatar_url: faker.internet.url(),
              },
              payload: {
                action: faker.lorem.slug(1),
                issue: {
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(1),
                  url: 'https://api.github.com/repositories/42/issues/1',
                  repository_url: faker.internet.url(),
                  labels_url: faker.internet.url(),
                  comments_url: faker.internet.url(),
                  events_url: faker.internet.url(),
                  html_url: faker.internet.url(),
                  number: 42,
                  state: 'open',
                  state_reason: 'not_planned',
                  title: 'Widget creation fails in Safari on OS X 10.8',
                  body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
                  user: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  labels: ['bug', 'registration'],
                  assignee: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  assignees: [
                    ...new Array(
                      faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                    ).keys(),
                  ].map(_ => ({
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  })),
                  milestone: {
                    url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
                    html_url:
                      'https://github.com/octocat/Hello-World/milestones/v1.0',
                    labels_url:
                      'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
                    id: 1002604,
                    node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
                    number: 42,
                    state: 'open',
                    title: 'v1.0',
                    description: 'Tracking milestone for version 1.0',
                    creator: {
                      name: faker.name.findName(),
                      email: faker.internet.email(),
                      login: 'octocat',
                      id: 1,
                      node_id: 'MDQ6VXNlcjE=',
                      avatar_url:
                        'https://github.com/images/error/octocat_happy.gif',
                      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                      url: 'https://api.github.com/users/octocat',
                      html_url: 'https://github.com/octocat',
                      followers_url:
                        'https://api.github.com/users/octocat/followers',
                      following_url:
                        'https://api.github.com/users/octocat/following{/other_user}',
                      gists_url:
                        'https://api.github.com/users/octocat/gists{/gist_id}',
                      starred_url:
                        'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                      subscriptions_url:
                        'https://api.github.com/users/octocat/subscriptions',
                      organizations_url:
                        'https://api.github.com/users/octocat/orgs',
                      repos_url: 'https://api.github.com/users/octocat/repos',
                      events_url:
                        'https://api.github.com/users/octocat/events{/privacy}',
                      received_events_url:
                        'https://api.github.com/users/octocat/received_events',
                      type: 'User',
                      site_admin: faker.datatype.boolean(),
                      starred_at: '"2020-07-09T00:17:55Z"',
                    },
                    open_issues: 4,
                    closed_issues: 8,
                    created_at: '2011-04-10T20:09:31Z',
                    updated_at: '2014-03-03T18:58:10Z',
                    closed_at: '2013-02-12T13:22:01Z',
                    due_on: '2012-10-09T23:39:01Z',
                  },
                  locked: faker.datatype.boolean(),
                  active_lock_reason: faker.lorem.slug(1),
                  comments: faker.datatype.number(),
                  pull_request: {
                    merged_at: faker.date.past(),
                    diff_url: faker.internet.url(),
                    html_url: faker.internet.url(),
                    patch_url: faker.internet.url(),
                    url: faker.internet.url(),
                  },
                  closed_at: faker.date.past(),
                  created_at: faker.date.past(),
                  updated_at: faker.date.past(),
                  draft: faker.datatype.boolean(),
                  closed_by: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  body_html: faker.lorem.slug(1),
                  body_text: faker.lorem.slug(1),
                  timeline_url: faker.internet.url(),
                  repository: {
                    id: 42,
                    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
                    name: 'Team Environment',
                    full_name: 'octocat/Hello-World',
                    license: {
                      key: 'mit',
                      name: 'MIT License',
                      url: 'https://api.github.com/licenses/mit',
                      spdx_id: 'MIT',
                      node_id: 'MDc6TGljZW5zZW1pdA==',
                      html_url: faker.internet.url(),
                    },
                    organization: {
                      name: faker.name.findName(),
                      email: faker.internet.email(),
                      login: 'octocat',
                      id: 1,
                      node_id: 'MDQ6VXNlcjE=',
                      avatar_url:
                        'https://github.com/images/error/octocat_happy.gif',
                      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                      url: 'https://api.github.com/users/octocat',
                      html_url: 'https://github.com/octocat',
                      followers_url:
                        'https://api.github.com/users/octocat/followers',
                      following_url:
                        'https://api.github.com/users/octocat/following{/other_user}',
                      gists_url:
                        'https://api.github.com/users/octocat/gists{/gist_id}',
                      starred_url:
                        'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                      subscriptions_url:
                        'https://api.github.com/users/octocat/subscriptions',
                      organizations_url:
                        'https://api.github.com/users/octocat/orgs',
                      repos_url: 'https://api.github.com/users/octocat/repos',
                      events_url:
                        'https://api.github.com/users/octocat/events{/privacy}',
                      received_events_url:
                        'https://api.github.com/users/octocat/received_events',
                      type: 'User',
                      site_admin: faker.datatype.boolean(),
                      starred_at: '"2020-07-09T00:17:55Z"',
                    },
                    forks: faker.datatype.number(),
                    permissions: {
                      admin: faker.datatype.boolean(),
                      pull: faker.datatype.boolean(),
                      triage: faker.datatype.boolean(),
                      push: faker.datatype.boolean(),
                      maintain: faker.datatype.boolean(),
                    },
                    owner: {
                      name: faker.name.findName(),
                      email: faker.internet.email(),
                      login: 'octocat',
                      id: 1,
                      node_id: 'MDQ6VXNlcjE=',
                      avatar_url:
                        'https://github.com/images/error/octocat_happy.gif',
                      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                      url: 'https://api.github.com/users/octocat',
                      html_url: 'https://github.com/octocat',
                      followers_url:
                        'https://api.github.com/users/octocat/followers',
                      following_url:
                        'https://api.github.com/users/octocat/following{/other_user}',
                      gists_url:
                        'https://api.github.com/users/octocat/gists{/gist_id}',
                      starred_url:
                        'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                      subscriptions_url:
                        'https://api.github.com/users/octocat/subscriptions',
                      organizations_url:
                        'https://api.github.com/users/octocat/orgs',
                      repos_url: 'https://api.github.com/users/octocat/repos',
                      events_url:
                        'https://api.github.com/users/octocat/events{/privacy}',
                      received_events_url:
                        'https://api.github.com/users/octocat/received_events',
                      type: 'User',
                      site_admin: faker.datatype.boolean(),
                      starred_at: '"2020-07-09T00:17:55Z"',
                    },
                    private: faker.datatype.boolean(),
                    html_url: 'https://github.com/octocat/Hello-World',
                    description: 'This your first repo!',
                    fork: faker.datatype.boolean(),
                    url: 'https://api.github.com/repos/octocat/Hello-World',
                    archive_url:
                      'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
                    assignees_url:
                      'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
                    blobs_url:
                      'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
                    branches_url:
                      'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
                    collaborators_url:
                      'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
                    comments_url:
                      'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
                    commits_url:
                      'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
                    compare_url:
                      'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
                    contents_url:
                      'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
                    contributors_url:
                      'http://api.github.com/repos/octocat/Hello-World/contributors',
                    deployments_url:
                      'http://api.github.com/repos/octocat/Hello-World/deployments',
                    downloads_url:
                      'http://api.github.com/repos/octocat/Hello-World/downloads',
                    events_url:
                      'http://api.github.com/repos/octocat/Hello-World/events',
                    forks_url:
                      'http://api.github.com/repos/octocat/Hello-World/forks',
                    git_commits_url:
                      'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
                    git_refs_url:
                      'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
                    git_tags_url:
                      'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
                    git_url: 'git:github.com/octocat/Hello-World.git',
                    issue_comment_url:
                      'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
                    issue_events_url:
                      'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
                    issues_url:
                      'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
                    keys_url:
                      'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
                    labels_url:
                      'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
                    languages_url:
                      'http://api.github.com/repos/octocat/Hello-World/languages',
                    merges_url:
                      'http://api.github.com/repos/octocat/Hello-World/merges',
                    milestones_url:
                      'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
                    notifications_url:
                      'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
                    pulls_url:
                      'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
                    releases_url:
                      'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
                    ssh_url: 'git@github.com:octocat/Hello-World.git',
                    stargazers_url:
                      'http://api.github.com/repos/octocat/Hello-World/stargazers',
                    statuses_url:
                      'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
                    subscribers_url:
                      'http://api.github.com/repos/octocat/Hello-World/subscribers',
                    subscription_url:
                      'http://api.github.com/repos/octocat/Hello-World/subscription',
                    tags_url:
                      'http://api.github.com/repos/octocat/Hello-World/tags',
                    teams_url:
                      'http://api.github.com/repos/octocat/Hello-World/teams',
                    trees_url:
                      'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
                    clone_url: 'https://github.com/octocat/Hello-World.git',
                    mirror_url: 'git:git.example.com/octocat/Hello-World',
                    hooks_url:
                      'http://api.github.com/repos/octocat/Hello-World/hooks',
                    svn_url: 'https://svn.github.com/octocat/Hello-World',
                    homepage: 'https://github.com',
                    language: faker.lorem.slug(1),
                    forks_count: 9,
                    stargazers_count: 80,
                    watchers_count: 80,
                    size: 108,
                    default_branch: 'master',
                    open_issues_count: faker.datatype.number(),
                    is_template: true,
                    topics: [
                      ...new Array(
                        faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                      ).keys(),
                    ].map(_ => faker.lorem.slug(1)),
                    has_issues: true,
                    has_projects: true,
                    has_wiki: true,
                    has_pages: faker.datatype.boolean(),
                    has_downloads: true,
                    archived: faker.datatype.boolean(),
                    disabled: faker.datatype.boolean(),
                    visibility: faker.lorem.slug(1),
                    pushed_at: '2011-01-26T19:06:43Z',
                    created_at: '2011-01-26T19:01:12Z',
                    updated_at: '2011-01-26T19:14:43Z',
                    allow_rebase_merge: true,
                    template_repository: {
                      id: faker.datatype.number(),
                      node_id: faker.lorem.slug(1),
                      name: faker.name.findName(),
                      full_name: faker.name.findName(),
                      owner: {
                        login: faker.lorem.slug(1),
                        id: faker.datatype.number(),
                        node_id: faker.lorem.slug(1),
                        avatar_url: faker.internet.url(),
                        gravatar_id: faker.lorem.slug(1),
                        url: faker.internet.url(),
                        html_url: faker.internet.url(),
                        followers_url: faker.internet.url(),
                        following_url: faker.internet.url(),
                        gists_url: faker.internet.url(),
                        starred_url: faker.internet.url(),
                        subscriptions_url: faker.internet.url(),
                        organizations_url: faker.internet.url(),
                        repos_url: faker.internet.url(),
                        events_url: faker.internet.url(),
                        received_events_url: faker.internet.url(),
                        type: faker.lorem.slug(1),
                        site_admin: faker.datatype.boolean(),
                      },
                      private: faker.datatype.boolean(),
                      html_url: faker.internet.url(),
                      description: faker.lorem.slug(1),
                      fork: faker.datatype.boolean(),
                      url: faker.internet.url(),
                      archive_url: faker.internet.url(),
                      assignees_url: faker.internet.url(),
                      blobs_url: faker.internet.url(),
                      branches_url: faker.internet.url(),
                      collaborators_url: faker.internet.url(),
                      comments_url: faker.internet.url(),
                      commits_url: faker.internet.url(),
                      compare_url: faker.internet.url(),
                      contents_url: faker.internet.url(),
                      contributors_url: faker.internet.url(),
                      deployments_url: faker.internet.url(),
                      downloads_url: faker.internet.url(),
                      events_url: faker.internet.url(),
                      forks_url: faker.internet.url(),
                      git_commits_url: faker.internet.url(),
                      git_refs_url: faker.internet.url(),
                      git_tags_url: faker.internet.url(),
                      git_url: faker.internet.url(),
                      issue_comment_url: faker.internet.url(),
                      issue_events_url: faker.internet.url(),
                      issues_url: faker.internet.url(),
                      keys_url: faker.internet.url(),
                      labels_url: faker.internet.url(),
                      languages_url: faker.internet.url(),
                      merges_url: faker.internet.url(),
                      milestones_url: faker.internet.url(),
                      notifications_url: faker.internet.url(),
                      pulls_url: faker.internet.url(),
                      releases_url: faker.internet.url(),
                      ssh_url: faker.internet.url(),
                      stargazers_url: faker.internet.url(),
                      statuses_url: faker.internet.url(),
                      subscribers_url: faker.internet.url(),
                      subscription_url: faker.internet.url(),
                      tags_url: faker.internet.url(),
                      teams_url: faker.internet.url(),
                      trees_url: faker.internet.url(),
                      clone_url: faker.internet.url(),
                      mirror_url: faker.internet.url(),
                      hooks_url: faker.internet.url(),
                      svn_url: faker.internet.url(),
                      homepage: faker.lorem.slug(1),
                      language: faker.lorem.slug(1),
                      forks_count: faker.datatype.number(),
                      stargazers_count: faker.datatype.number(),
                      watchers_count: faker.datatype.number(),
                      size: faker.datatype.number(),
                      default_branch: faker.lorem.slug(1),
                      open_issues_count: faker.datatype.number(),
                      is_template: faker.datatype.boolean(),
                      topics: [
                        ...new Array(
                          faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                        ).keys(),
                      ].map(_ => faker.lorem.slug(1)),
                      has_issues: faker.datatype.boolean(),
                      has_projects: faker.datatype.boolean(),
                      has_wiki: faker.datatype.boolean(),
                      has_pages: faker.datatype.boolean(),
                      has_downloads: faker.datatype.boolean(),
                      archived: faker.datatype.boolean(),
                      disabled: faker.datatype.boolean(),
                      visibility: faker.lorem.slug(1),
                      pushed_at: faker.date.past(),
                      created_at: faker.date.past(),
                      updated_at: faker.date.past(),
                      permissions: {
                        admin: faker.datatype.boolean(),
                        maintain: faker.datatype.boolean(),
                        push: faker.datatype.boolean(),
                        triage: faker.datatype.boolean(),
                        pull: faker.datatype.boolean(),
                      },
                      allow_rebase_merge: faker.datatype.boolean(),
                      temp_clone_token: faker.lorem.slug(1),
                      allow_squash_merge: faker.datatype.boolean(),
                      allow_auto_merge: faker.datatype.boolean(),
                      delete_branch_on_merge: faker.datatype.boolean(),
                      allow_update_branch: faker.datatype.boolean(),
                      allow_merge_commit: faker.datatype.boolean(),
                      subscribers_count: faker.datatype.number(),
                      network_count: faker.datatype.number(),
                    },
                    temp_clone_token: faker.lorem.slug(1),
                    allow_squash_merge: true,
                    allow_auto_merge: faker.datatype.boolean(),
                    delete_branch_on_merge: faker.datatype.boolean(),
                    allow_update_branch: faker.datatype.boolean(),
                    allow_merge_commit: true,
                    allow_forking: faker.datatype.boolean(),
                    subscribers_count: faker.datatype.number(),
                    network_count: faker.datatype.number(),
                    open_issues: faker.datatype.number(),
                    watchers: faker.datatype.number(),
                    master_branch: faker.lorem.slug(1),
                    starred_at: '"2020-07-09T00:17:42Z"',
                    anonymous_access_enabled: faker.datatype.boolean(),
                  },
                  performed_via_github_app: {
                    id: 37,
                    slug: 'probot-owners',
                    node_id: 'MDExOkludGVncmF0aW9uMQ==',
                    owner: {
                      name: faker.name.findName(),
                      email: faker.internet.email(),
                      login: 'octocat',
                      id: 1,
                      node_id: 'MDQ6VXNlcjE=',
                      avatar_url:
                        'https://github.com/images/error/octocat_happy.gif',
                      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                      url: 'https://api.github.com/users/octocat',
                      html_url: 'https://github.com/octocat',
                      followers_url:
                        'https://api.github.com/users/octocat/followers',
                      following_url:
                        'https://api.github.com/users/octocat/following{/other_user}',
                      gists_url:
                        'https://api.github.com/users/octocat/gists{/gist_id}',
                      starred_url:
                        'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                      subscriptions_url:
                        'https://api.github.com/users/octocat/subscriptions',
                      organizations_url:
                        'https://api.github.com/users/octocat/orgs',
                      repos_url: 'https://api.github.com/users/octocat/repos',
                      events_url:
                        'https://api.github.com/users/octocat/events{/privacy}',
                      received_events_url:
                        'https://api.github.com/users/octocat/received_events',
                      type: 'User',
                      site_admin: faker.datatype.boolean(),
                      starred_at: '"2020-07-09T00:17:55Z"',
                    },
                    name: 'Probot Owners',
                    description: 'The description of the app.',
                    external_url: 'https://example.com',
                    html_url: 'https://github.com/apps/super-ci',
                    created_at: '2017-07-08T16:18:44-04:00',
                    updated_at: '2017-07-08T16:18:44-04:00',
                    permissions: { issues: 'read', deployments: 'write' },
                    events: ['label', 'deployment'],
                    installations_count: 5,
                    client_id: '"Iv1.25b5d1e65ffc4022"',
                    client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                    webhook_secret:
                      '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                    pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                  },
                  author_association: 'OWNER',
                  reactions: {
                    url: faker.internet.url(),
                    total_count: faker.datatype.number(),
                    '+1': faker.datatype.number(),
                    '-1': faker.datatype.number(),
                    laugh: faker.datatype.number(),
                    confused: faker.datatype.number(),
                    heart: faker.datatype.number(),
                    hooray: faker.datatype.number(),
                    eyes: faker.datatype.number(),
                    rocket: faker.datatype.number(),
                  },
                },
                comment: {
                  id: 42,
                  node_id: faker.lorem.slug(1),
                  url: 'https://api.github.com/repositories/42/issues/comments/1',
                  body: 'What version of Safari were you using when you observed this bug?',
                  body_text: faker.lorem.slug(1),
                  body_html: faker.lorem.slug(1),
                  html_url: faker.internet.url(),
                  user: {
                    name: faker.name.findName(),
                    email: faker.internet.email(),
                    login: 'octocat',
                    id: 1,
                    node_id: 'MDQ6VXNlcjE=',
                    avatar_url:
                      'https://github.com/images/error/octocat_happy.gif',
                    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                    url: 'https://api.github.com/users/octocat',
                    html_url: 'https://github.com/octocat',
                    followers_url:
                      'https://api.github.com/users/octocat/followers',
                    following_url:
                      'https://api.github.com/users/octocat/following{/other_user}',
                    gists_url:
                      'https://api.github.com/users/octocat/gists{/gist_id}',
                    starred_url:
                      'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                    subscriptions_url:
                      'https://api.github.com/users/octocat/subscriptions',
                    organizations_url:
                      'https://api.github.com/users/octocat/orgs',
                    repos_url: 'https://api.github.com/users/octocat/repos',
                    events_url:
                      'https://api.github.com/users/octocat/events{/privacy}',
                    received_events_url:
                      'https://api.github.com/users/octocat/received_events',
                    type: 'User',
                    site_admin: faker.datatype.boolean(),
                    starred_at: '"2020-07-09T00:17:55Z"',
                  },
                  created_at: '2011-04-14T16:00:49Z',
                  updated_at: '2011-04-14T16:00:49Z',
                  issue_url: faker.internet.url(),
                  author_association: 'OWNER',
                  performed_via_github_app: {
                    id: 37,
                    slug: 'probot-owners',
                    node_id: 'MDExOkludGVncmF0aW9uMQ==',
                    owner: {
                      name: faker.name.findName(),
                      email: faker.internet.email(),
                      login: 'octocat',
                      id: 1,
                      node_id: 'MDQ6VXNlcjE=',
                      avatar_url:
                        'https://github.com/images/error/octocat_happy.gif',
                      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                      url: 'https://api.github.com/users/octocat',
                      html_url: 'https://github.com/octocat',
                      followers_url:
                        'https://api.github.com/users/octocat/followers',
                      following_url:
                        'https://api.github.com/users/octocat/following{/other_user}',
                      gists_url:
                        'https://api.github.com/users/octocat/gists{/gist_id}',
                      starred_url:
                        'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                      subscriptions_url:
                        'https://api.github.com/users/octocat/subscriptions',
                      organizations_url:
                        'https://api.github.com/users/octocat/orgs',
                      repos_url: 'https://api.github.com/users/octocat/repos',
                      events_url:
                        'https://api.github.com/users/octocat/events{/privacy}',
                      received_events_url:
                        'https://api.github.com/users/octocat/received_events',
                      type: 'User',
                      site_admin: faker.datatype.boolean(),
                      starred_at: '"2020-07-09T00:17:55Z"',
                    },
                    name: 'Probot Owners',
                    description: 'The description of the app.',
                    external_url: 'https://example.com',
                    html_url: 'https://github.com/apps/super-ci',
                    created_at: '2017-07-08T16:18:44-04:00',
                    updated_at: '2017-07-08T16:18:44-04:00',
                    permissions: { issues: 'read', deployments: 'write' },
                    events: ['label', 'deployment'],
                    installations_count: 5,
                    client_id: '"Iv1.25b5d1e65ffc4022"',
                    client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
                    webhook_secret:
                      '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
                    pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
                  },
                  reactions: {
                    url: faker.internet.url(),
                    total_count: faker.datatype.number(),
                    '+1': faker.datatype.number(),
                    '-1': faker.datatype.number(),
                    laugh: faker.datatype.number(),
                    confused: faker.datatype.number(),
                    heart: faker.datatype.number(),
                    hooray: faker.datatype.number(),
                    eyes: faker.datatype.number(),
                    rocket: faker.datatype.number(),
                  },
                },
                pages: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => ({
                  page_name: faker.name.findName(),
                  title: faker.lorem.slug(1),
                  summary: faker.lorem.slug(1),
                  action: faker.lorem.slug(1),
                  sha: faker.lorem.slug(1),
                  html_url: faker.internet.url(),
                })),
              },
              public: faker.datatype.boolean(),
              created_at: faker.date.past(),
            }))
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/users/:username/repos`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 1296269,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Hello-World',
            full_name: 'octocat/Hello-World',
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: faker.internet.url(),
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: faker.internet.url(),
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(1),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: 'contributor_covenant',
              name: 'Contributor Covenant',
              url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
              body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(1),
              name: faker.name.findName(),
              spdx_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              node_id: faker.lorem.slug(1),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/users/:username/site_admin`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/users/:username/site_admin`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/:username/starred`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/:username/subscriptions`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: 1296269,
            node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
            name: 'Hello-World',
            full_name: 'octocat/Hello-World',
            owner: {
              name: faker.name.findName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url:
                'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url:
                'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url:
                'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url:
                'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url:
                'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            private: faker.datatype.boolean(),
            html_url: 'https://github.com/octocat/Hello-World',
            description: 'This your first repo!',
            fork: faker.datatype.boolean(),
            url: 'https://api.github.com/repos/octocat/Hello-World',
            archive_url:
              'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
            assignees_url:
              'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
            blobs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
            branches_url:
              'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
            collaborators_url:
              'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
            comments_url:
              'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
            commits_url:
              'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
            compare_url:
              'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
            contents_url:
              'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
            contributors_url:
              'http://api.github.com/repos/octocat/Hello-World/contributors',
            deployments_url:
              'http://api.github.com/repos/octocat/Hello-World/deployments',
            downloads_url:
              'http://api.github.com/repos/octocat/Hello-World/downloads',
            events_url:
              'http://api.github.com/repos/octocat/Hello-World/events',
            forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
            git_commits_url:
              'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
            git_refs_url:
              'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
            git_tags_url:
              'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
            git_url: faker.internet.url(),
            issue_comment_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
            issue_events_url:
              'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
            issues_url:
              'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
            keys_url:
              'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
            labels_url:
              'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
            languages_url:
              'http://api.github.com/repos/octocat/Hello-World/languages',
            merges_url:
              'http://api.github.com/repos/octocat/Hello-World/merges',
            milestones_url:
              'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
            notifications_url:
              'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
            pulls_url:
              'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
            releases_url:
              'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
            ssh_url: faker.internet.url(),
            stargazers_url:
              'http://api.github.com/repos/octocat/Hello-World/stargazers',
            statuses_url:
              'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
            subscribers_url:
              'http://api.github.com/repos/octocat/Hello-World/subscribers',
            subscription_url:
              'http://api.github.com/repos/octocat/Hello-World/subscription',
            tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
            teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
            trees_url:
              'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug(1)),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: '2011-01-26T19:06:43Z',
            created_at: '2011-01-26T19:01:12Z',
            updated_at: '2011-01-26T19:14:43Z',
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(1),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: 'contributor_covenant',
              name: 'Contributor Covenant',
              url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
              body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(1),
              name: faker.name.findName(),
              spdx_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              node_id: faker.lorem.slug(1),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/users/:username/suspended`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/users/:username/suspended`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/zen`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
];

// This configures a Service Worker with the given request handlers.
export const startWorker = () => {
  const worker = setupWorker(...handlers);
  worker.start();
};
