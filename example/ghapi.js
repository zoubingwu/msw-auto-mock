/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
import { HttpResponse, http } from 'msw';
import { faker } from '@faker-js/faker';
import { setupWorker } from 'msw/browser';

faker.seed(1);

const baseURL = '';
const MAX_ARRAY_LENGTH = 20;

let i = 0;
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
};

export const handlers = [
  http.get(`${baseURL}/`, () => {
    const resultArray = [[getMetaRoot200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/admin/hooks`, () => {
    const resultArray = [[getEnterpriseAdminListGlobalWebhooks200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/admin/hooks`, () => {
    const resultArray = [[getEnterpriseAdminCreateGlobalWebhook201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/admin/hooks/:hookId`, () => {
    const resultArray = [[getEnterpriseAdminGetGlobalWebhook200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/admin/hooks/:hookId`, () => {
    const resultArray = [[getEnterpriseAdminUpdateGlobalWebhook200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/admin/hooks/:hookId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/admin/hooks/:hookId/pings`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/admin/keys`, () => {
    const resultArray = [[getEnterpriseAdminListPublicKeys200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/admin/keys/:keyIds`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/admin/ldap/teams/:teamId/mapping`, () => {
    const resultArray = [[getEnterpriseAdminUpdateLdapMappingForTeam200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/admin/ldap/teams/:teamId/sync`, () => {
    const resultArray = [[getEnterpriseAdminSyncLdapMappingForTeam201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/admin/ldap/users/:username/mapping`, () => {
    const resultArray = [[getEnterpriseAdminUpdateLdapMappingForUser200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/admin/ldap/users/:username/sync`, () => {
    const resultArray = [[getEnterpriseAdminSyncLdapMappingForUser201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/admin/organizations`, () => {
    const resultArray = [[getEnterpriseAdminCreateOrg201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/admin/organizations/:org`, () => {
    const resultArray = [[getEnterpriseAdminUpdateOrgName202Response(), { status: 202 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/admin/pre-receive-environments`, () => {
    const resultArray = [[getEnterpriseAdminListPreReceiveEnvironments200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/admin/pre-receive-environments`, () => {
    const resultArray = [[getEnterpriseAdminCreatePreReceiveEnvironment201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/admin/pre-receive-environments/:preReceiveEnvironmentId`, () => {
    const resultArray = [[getEnterpriseAdminGetPreReceiveEnvironment200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/admin/pre-receive-environments/:preReceiveEnvironmentId`, () => {
    const resultArray = [
      [getEnterpriseAdminUpdatePreReceiveEnvironment200Response(), { status: 200 }],
      [getEnterpriseAdminUpdatePreReceiveEnvironment422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/admin/pre-receive-environments/:preReceiveEnvironmentId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getEnterpriseAdminDeletePreReceiveEnvironment422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/admin/pre-receive-environments/:preReceiveEnvironmentId/downloads`, () => {
    const resultArray = [
      [getEnterpriseAdminStartPreReceiveEnvironmentDownload202Response(), { status: 202 }],
      [getEnterpriseAdminStartPreReceiveEnvironmentDownload422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/admin/pre-receive-environments/:preReceiveEnvironmentId/downloads/latest`, () => {
    const resultArray = [[getEnterpriseAdminGetDownloadStatusForPreReceiveEnvironment200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/admin/pre-receive-hooks`, () => {
    const resultArray = [[getEnterpriseAdminListPreReceiveHooks200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/admin/pre-receive-hooks`, () => {
    const resultArray = [[getEnterpriseAdminCreatePreReceiveHook201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/admin/pre-receive-hooks/:preReceiveHookId`, () => {
    const resultArray = [[getEnterpriseAdminGetPreReceiveHook200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/admin/pre-receive-hooks/:preReceiveHookId`, () => {
    const resultArray = [[getEnterpriseAdminUpdatePreReceiveHook200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/admin/pre-receive-hooks/:preReceiveHookId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/admin/tokens`, () => {
    const resultArray = [[getEnterpriseAdminListPersonalAccessTokens200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/admin/tokens/:tokenId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/admin/users`, () => {
    const resultArray = [[getEnterpriseAdminCreateUser201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/admin/users/:username`, () => {
    const resultArray = [[getEnterpriseAdminUpdateUsernameForUser202Response(), { status: 202 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/admin/users/:username`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/admin/users/:username/authorizations`, () => {
    const resultArray = [
      [getEnterpriseAdminCreateImpersonationOAuthToken200Response(), { status: 200 }],
      [getEnterpriseAdminCreateImpersonationOAuthToken201Response(), { status: 201 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/admin/users/:username/authorizations`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/app`, () => {
    const resultArray = [[getAppsGetAuthenticated200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/app-manifests/:code/conversions`, () => {
    const resultArray = [
      [getAppsCreateFromManifest201Response(), { status: 201 }],
      [getAppsCreateFromManifest404Response(), { status: 404 }],
      [getAppsCreateFromManifest422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/app/hook/config`, () => {
    const resultArray = [[getAppsGetWebhookConfigForApp200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/app/hook/config`, () => {
    const resultArray = [[getAppsUpdateWebhookConfigForApp200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/app/hook/deliveries`, () => {
    const resultArray = [
      [getAppsListWebhookDeliveries200Response(), { status: 200 }],
      [getAppsListWebhookDeliveries400Response(), { status: 400 }],
      [getAppsListWebhookDeliveries422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/app/hook/deliveries/:deliveryId`, () => {
    const resultArray = [
      [getAppsGetWebhookDelivery200Response(), { status: 200 }],
      [getAppsGetWebhookDelivery400Response(), { status: 400 }],
      [getAppsGetWebhookDelivery422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/app/hook/deliveries/:deliveryId/attempts`, () => {
    const resultArray = [
      [getAppsRedeliverWebhookDelivery202Response(), { status: 202 }],
      [getAppsRedeliverWebhookDelivery400Response(), { status: 400 }],
      [getAppsRedeliverWebhookDelivery422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/app/installations`, () => {
    const resultArray = [[getAppsListInstallations200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/app/installations/:installationId`, () => {
    const resultArray = [
      [getAppsGetInstallation200Response(), { status: 200 }],
      [getAppsGetInstallation404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/app/installations/:installationId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getAppsDeleteInstallation404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/app/installations/:installationId/access_tokens`, () => {
    const resultArray = [
      [getAppsCreateInstallationAccessToken201Response(), { status: 201 }],
      [getAppsCreateInstallationAccessToken401Response(), { status: 401 }],
      [getAppsCreateInstallationAccessToken403Response(), { status: 403 }],
      [getAppsCreateInstallationAccessToken404Response(), { status: 404 }],
      [getAppsCreateInstallationAccessToken422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/app/installations/:installationId/suspended`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getAppsSuspendInstallation404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/app/installations/:installationId/suspended`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getAppsUnsuspendInstallation404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/applications/grants`, () => {
    const resultArray = [
      [getOauthAuthorizationsListGrants200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getOauthAuthorizationsListGrants401Response(), { status: 401 }],
      [getOauthAuthorizationsListGrants403Response(), { status: 403 }],
      [getOauthAuthorizationsListGrants404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/applications/grants/:grantId`, () => {
    const resultArray = [
      [getOauthAuthorizationsGetGrant200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getOauthAuthorizationsGetGrant401Response(), { status: 401 }],
      [getOauthAuthorizationsGetGrant403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/applications/grants/:grantId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getOauthAuthorizationsDeleteGrant401Response(), { status: 401 }],
      [getOauthAuthorizationsDeleteGrant403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/applications/:clientId/grant`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getAppsDeleteAuthorization422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/applications/:clientId/grants/:accessToken`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/applications/:clientId/token`, () => {
    const resultArray = [
      [getAppsCheckToken200Response(), { status: 200 }],
      [getAppsCheckToken404Response(), { status: 404 }],
      [getAppsCheckToken422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/applications/:clientId/token`, () => {
    const resultArray = [
      [getAppsResetToken200Response(), { status: 200 }],
      [getAppsResetToken422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/applications/:clientId/token`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getAppsDeleteToken422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/applications/:clientId/token/scoped`, () => {
    const resultArray = [
      [getAppsScopeToken200Response(), { status: 200 }],
      [getAppsScopeToken401Response(), { status: 401 }],
      [getAppsScopeToken403Response(), { status: 403 }],
      [getAppsScopeToken404Response(), { status: 404 }],
      [getAppsScopeToken422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/applications/:clientId/tokens/:accessToken`, () => {
    const resultArray = [
      [getAppsCheckAuthorization200Response(), { status: 200 }],
      [getAppsCheckAuthorization404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/applications/:clientId/tokens/:accessToken`, () => {
    const resultArray = [[getAppsResetAuthorization200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/applications/:clientId/tokens/:accessToken`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/apps/:appSlug`, () => {
    const resultArray = [
      [getAppsGetBySlug200Response(), { status: 200 }],
      [getAppsGetBySlug403Response(), { status: 403 }],
      [getAppsGetBySlug404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/authorizations`, () => {
    const resultArray = [
      [getOauthAuthorizationsListAuthorizations200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getOauthAuthorizationsListAuthorizations401Response(), { status: 401 }],
      [getOauthAuthorizationsListAuthorizations403Response(), { status: 403 }],
      [getOauthAuthorizationsListAuthorizations404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/authorizations`, () => {
    const resultArray = [
      [getOauthAuthorizationsCreateAuthorization201Response(), { status: 201 }],
      [null, { status: 304 }],
      [getOauthAuthorizationsCreateAuthorization401Response(), { status: 401 }],
      [getOauthAuthorizationsCreateAuthorization403Response(), { status: 403 }],
      [getOauthAuthorizationsCreateAuthorization410Response(), { status: 410 }],
      [getOauthAuthorizationsCreateAuthorization422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/authorizations/clients/:clientId`, () => {
    const resultArray = [
      [getOauthAuthorizationsGetOrCreateAuthorizationForApp200Response(), { status: 200 }],
      [getOauthAuthorizationsGetOrCreateAuthorizationForApp201Response(), { status: 201 }],
      [null, { status: 304 }],
      [getOauthAuthorizationsGetOrCreateAuthorizationForApp401Response(), { status: 401 }],
      [getOauthAuthorizationsGetOrCreateAuthorizationForApp403Response(), { status: 403 }],
      [getOauthAuthorizationsGetOrCreateAuthorizationForApp422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/authorizations/clients/:clientId/:fingerprint`, () => {
    const resultArray = [
      [getOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint200Response(), { status: 200 }],
      [getOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint201Response(), { status: 201 }],
      [getOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/authorizations/:authorizationId`, () => {
    const resultArray = [
      [getOauthAuthorizationsGetAuthorization200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getOauthAuthorizationsGetAuthorization401Response(), { status: 401 }],
      [getOauthAuthorizationsGetAuthorization403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/authorizations/:authorizationId`, () => {
    const resultArray = [
      [getOauthAuthorizationsUpdateAuthorization200Response(), { status: 200 }],
      [getOauthAuthorizationsUpdateAuthorization422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/authorizations/:authorizationId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getOauthAuthorizationsDeleteAuthorization401Response(), { status: 401 }],
      [getOauthAuthorizationsDeleteAuthorization403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/codes_of_conduct`, () => {
    const resultArray = [
      [getCodesOfConductGetAllCodesOfConduct200Response(), { status: 200 }],
      [null, { status: 304 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/codes_of_conduct/:key`, () => {
    const resultArray = [
      [getCodesOfConductGetConductCode200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getCodesOfConductGetConductCode404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/emojis`, () => {
    const resultArray = [
      [getEmojisGet200Response(), { status: 200 }],
      [null, { status: 304 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprise/announcement`, () => {
    const resultArray = [[getEnterpriseAdminGetAnnouncement200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/enterprise/announcement`, () => {
    const resultArray = [[getEnterpriseAdminSetAnnouncement200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/enterprise/announcement`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprise/settings/license`, () => {
    const resultArray = [[getEnterpriseAdminGetLicenseInformation200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprise/stats/all`, () => {
    const resultArray = [[getEnterpriseAdminGetAllStats200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprise/stats/comments`, () => {
    const resultArray = [[getEnterpriseAdminGetCommentStats200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprise/stats/gists`, () => {
    const resultArray = [[getEnterpriseAdminGetGistStats200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprise/stats/hooks`, () => {
    const resultArray = [[getEnterpriseAdminGetHooksStats200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprise/stats/issues`, () => {
    const resultArray = [[getEnterpriseAdminGetIssueStats200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprise/stats/milestones`, () => {
    const resultArray = [[getEnterpriseAdminGetMilestoneStats200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprise/stats/orgs`, () => {
    const resultArray = [[getEnterpriseAdminGetOrgStats200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprise/stats/pages`, () => {
    const resultArray = [[getEnterpriseAdminGetPagesStats200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprise/stats/pulls`, () => {
    const resultArray = [[getEnterpriseAdminGetPullRequestStats200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprise/stats/repos`, () => {
    const resultArray = [[getEnterpriseAdminGetRepoStats200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprise/stats/users`, () => {
    const resultArray = [[getEnterpriseAdminGetUserStats200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprises/:enterprise/actions/permissions`, () => {
    const resultArray = [[getEnterpriseAdminGetGithubActionsPermissionsEnterprise200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/enterprises/:enterprise/actions/permissions`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprises/:enterprise/actions/permissions/organizations`, () => {
    const resultArray = [
      [getEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response(), { status: 200 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/enterprises/:enterprise/actions/permissions/organizations`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/enterprises/:enterprise/actions/permissions/organizations/:orgId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/enterprises/:enterprise/actions/permissions/organizations/:orgId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprises/:enterprise/actions/permissions/selected-actions`, () => {
    const resultArray = [[getEnterpriseAdminGetAllowedActionsEnterprise200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/enterprises/:enterprise/actions/permissions/selected-actions`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprises/:enterprise/actions/runner-groups`, () => {
    const resultArray = [[getEnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/enterprises/:enterprise/actions/runner-groups`, () => {
    const resultArray = [[getEnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId`, () => {
    const resultArray = [[getEnterpriseAdminGetSelfHostedRunnerGroupForEnterprise200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId`, () => {
    const resultArray = [[getEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/organizations`, () => {
    const resultArray = [
      [getEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise200Response(), { status: 200 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/organizations`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/organizations/:orgId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/organizations/:orgId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/runners`, () => {
    const resultArray = [[getEnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/runners`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/runners/:runnerId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/runners/:runnerId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprises/:enterprise/actions/runners`, () => {
    const resultArray = [[getEnterpriseAdminListSelfHostedRunnersForEnterprise200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprises/:enterprise/actions/runners/downloads`, () => {
    const resultArray = [[getEnterpriseAdminListRunnerApplicationsForEnterprise200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/enterprises/:enterprise/actions/runners/registration-token`, () => {
    const resultArray = [[getEnterpriseAdminCreateRegistrationTokenForEnterprise201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/enterprises/:enterprise/actions/runners/remove-token`, () => {
    const resultArray = [[getEnterpriseAdminCreateRemoveTokenForEnterprise201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprises/:enterprise/actions/runners/:runnerId`, () => {
    const resultArray = [[getEnterpriseAdminGetSelfHostedRunnerForEnterprise200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/enterprises/:enterprise/actions/runners/:runnerId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/enterprises/:enterprise/audit-log`, () => {
    const resultArray = [[getEnterpriseAdminGetAuditLog200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/events`, () => {
    const resultArray = [
      [getActivityListPublicEvents200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getActivityListPublicEvents403Response(), { status: 403 }],
      [getActivityListPublicEvents503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/feeds`, () => {
    const resultArray = [[getActivityGetFeeds200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/gists`, () => {
    const resultArray = [
      [getGistsList200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getGistsList403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/gists`, () => {
    const resultArray = [
      [getGistsCreate201Response(), { status: 201 }],
      [null, { status: 304 }],
      [getGistsCreate403Response(), { status: 403 }],
      [getGistsCreate404Response(), { status: 404 }],
      [getGistsCreate422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/gists/public`, () => {
    const resultArray = [
      [getGistsListPublic200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getGistsListPublic403Response(), { status: 403 }],
      [getGistsListPublic422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/gists/starred`, () => {
    const resultArray = [
      [getGistsListStarred200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getGistsListStarred401Response(), { status: 401 }],
      [getGistsListStarred403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/gists/:gistId`, () => {
    const resultArray = [
      [getGistsGet200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getGistsGet403Response(), { status: 403 }],
      [getGistsGet404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/gists/:gistId`, () => {
    const resultArray = [
      [getGistsUpdate200Response(), { status: 200 }],
      [getGistsUpdate404Response(), { status: 404 }],
      [getGistsUpdate422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/gists/:gistId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getGistsDelete403Response(), { status: 403 }],
      [getGistsDelete404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/gists/:gistId/comments`, () => {
    const resultArray = [
      [getGistsListComments200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getGistsListComments403Response(), { status: 403 }],
      [getGistsListComments404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/gists/:gistId/comments`, () => {
    const resultArray = [
      [getGistsCreateComment201Response(), { status: 201 }],
      [null, { status: 304 }],
      [getGistsCreateComment403Response(), { status: 403 }],
      [getGistsCreateComment404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/gists/:gistId/comments/:commentId`, () => {
    const resultArray = [
      [getGistsGetComment200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getGistsGetComment403Response(), { status: 403 }],
      [getGistsGetComment404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/gists/:gistId/comments/:commentId`, () => {
    const resultArray = [
      [getGistsUpdateComment200Response(), { status: 200 }],
      [getGistsUpdateComment404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/gists/:gistId/comments/:commentId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getGistsDeleteComment403Response(), { status: 403 }],
      [getGistsDeleteComment404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/gists/:gistId/commits`, () => {
    const resultArray = [
      [getGistsListCommits200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getGistsListCommits403Response(), { status: 403 }],
      [getGistsListCommits404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/gists/:gistId/forks`, () => {
    const resultArray = [
      [getGistsListForks200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getGistsListForks403Response(), { status: 403 }],
      [getGistsListForks404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/gists/:gistId/forks`, () => {
    const resultArray = [
      [getGistsFork201Response(), { status: 201 }],
      [null, { status: 304 }],
      [getGistsFork403Response(), { status: 403 }],
      [getGistsFork404Response(), { status: 404 }],
      [getGistsFork422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/gists/:gistId/star`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getGistsCheckIsStarred403Response(), { status: 403 }],
      [getGistsCheckIsStarred404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/gists/:gistId/star`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getGistsStar403Response(), { status: 403 }],
      [getGistsStar404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/gists/:gistId/star`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getGistsUnstar403Response(), { status: 403 }],
      [getGistsUnstar404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/gists/:gistId/:sha`, () => {
    const resultArray = [
      [getGistsGetRevision200Response(), { status: 200 }],
      [getGistsGetRevision403Response(), { status: 403 }],
      [getGistsGetRevision404Response(), { status: 404 }],
      [getGistsGetRevision422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/gitignore/templates`, () => {
    const resultArray = [
      [getGitignoreGetAllTemplates200Response(), { status: 200 }],
      [null, { status: 304 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/gitignore/templates/:name`, () => {
    const resultArray = [
      [getGitignoreGetTemplate200Response(), { status: 200 }],
      [null, { status: 304 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/installation/repositories`, () => {
    const resultArray = [
      [getAppsListReposAccessibleToInstallation200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getAppsListReposAccessibleToInstallation401Response(), { status: 401 }],
      [getAppsListReposAccessibleToInstallation403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/installation/token`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/issues`, () => {
    const resultArray = [
      [getIssuesList200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getIssuesList404Response(), { status: 404 }],
      [getIssuesList422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/licenses`, () => {
    const resultArray = [
      [getLicensesGetAllCommonlyUsed200Response(), { status: 200 }],
      [null, { status: 304 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/licenses/:license`, () => {
    const resultArray = [
      [getLicensesGet200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getLicensesGet403Response(), { status: 403 }],
      [getLicensesGet404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/markdown`, () => {
    const resultArray = [
      [getMarkdownRender200Response(), { status: 200 }],
      [null, { status: 304 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/markdown/raw`, () => {
    const resultArray = [
      [getMarkdownRenderRaw200Response(), { status: 200 }],
      [null, { status: 304 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/meta`, () => {
    const resultArray = [
      [getMetaGet200Response(), { status: 200 }],
      [null, { status: 304 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/networks/:owner/:repo/events`, () => {
    const resultArray = [
      [getActivityListPublicEventsForRepoNetwork200Response(), { status: 200 }],
      [getActivityListPublicEventsForRepoNetwork301Response(), { status: 301 }],
      [null, { status: 304 }],
      [getActivityListPublicEventsForRepoNetwork403Response(), { status: 403 }],
      [getActivityListPublicEventsForRepoNetwork404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/notifications`, () => {
    const resultArray = [
      [getActivityListNotificationsForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getActivityListNotificationsForAuthenticatedUser401Response(), { status: 401 }],
      [getActivityListNotificationsForAuthenticatedUser403Response(), { status: 403 }],
      [getActivityListNotificationsForAuthenticatedUser422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/notifications`, () => {
    const resultArray = [
      [getActivityMarkNotificationsAsRead202Response(), { status: 202 }],
      [null, { status: 205 }],
      [null, { status: 304 }],
      [getActivityMarkNotificationsAsRead401Response(), { status: 401 }],
      [getActivityMarkNotificationsAsRead403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/notifications/threads/:threadId`, () => {
    const resultArray = [
      [getActivityGetThread200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getActivityGetThread401Response(), { status: 401 }],
      [getActivityGetThread403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/notifications/threads/:threadId`, () => {
    const resultArray = [
      [null, { status: 205 }],
      [null, { status: 304 }],
      [getActivityMarkThreadAsRead403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/notifications/threads/:threadId/subscription`, () => {
    const resultArray = [
      [getActivityGetThreadSubscriptionForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getActivityGetThreadSubscriptionForAuthenticatedUser401Response(), { status: 401 }],
      [getActivityGetThreadSubscriptionForAuthenticatedUser403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/notifications/threads/:threadId/subscription`, () => {
    const resultArray = [
      [getActivitySetThreadSubscription200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getActivitySetThreadSubscription401Response(), { status: 401 }],
      [getActivitySetThreadSubscription403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/notifications/threads/:threadId/subscription`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getActivityDeleteThreadSubscription401Response(), { status: 401 }],
      [getActivityDeleteThreadSubscription403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/octocat`, () => {
    const resultArray = [[getMetaGetOctocat200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/organizations`, () => {
    const resultArray = [
      [getOrgsList200Response(), { status: 200 }],
      [null, { status: 304 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org`, () => {
    const resultArray = [
      [getOrgsGet200Response(), { status: 200 }],
      [getOrgsGet404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/orgs/:org`, () => {
    const resultArray = [
      [getOrgsUpdate200Response(), { status: 200 }],
      [getOrgsUpdate409Response(), { status: 409 }],
      [getOrgsUpdate422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/actions/permissions`, () => {
    const resultArray = [[getActionsGetGithubActionsPermissionsOrganization200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/orgs/:org/actions/permissions`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/actions/permissions/repositories`, () => {
    const resultArray = [
      [getActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response(), { status: 200 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/orgs/:org/actions/permissions/repositories`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/orgs/:org/actions/permissions/repositories/:repositoryId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/actions/permissions/repositories/:repositoryId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/actions/permissions/selected-actions`, () => {
    const resultArray = [[getActionsGetAllowedActionsOrganization200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/orgs/:org/actions/permissions/selected-actions`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/actions/runner-groups`, () => {
    const resultArray = [[getActionsListSelfHostedRunnerGroupsForOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/orgs/:org/actions/runner-groups`, () => {
    const resultArray = [[getActionsCreateSelfHostedRunnerGroupForOrg201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId`, () => {
    const resultArray = [[getActionsGetSelfHostedRunnerGroupForOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId`, () => {
    const resultArray = [[getActionsUpdateSelfHostedRunnerGroupForOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId/repositories`, () => {
    const resultArray = [[getActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId/repositories`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId/repositories/:repositoryId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId/repositories/:repositoryId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId/runners`, () => {
    const resultArray = [[getActionsListSelfHostedRunnersInGroupForOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId/runners`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId/runners/:runnerId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/actions/runner-groups/:runnerGroupId/runners/:runnerId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/actions/runners`, () => {
    const resultArray = [[getActionsListSelfHostedRunnersForOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/actions/runners/downloads`, () => {
    const resultArray = [[getActionsListRunnerApplicationsForOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/orgs/:org/actions/runners/registration-token`, () => {
    const resultArray = [[getActionsCreateRegistrationTokenForOrg201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/orgs/:org/actions/runners/remove-token`, () => {
    const resultArray = [[getActionsCreateRemoveTokenForOrg201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/actions/runners/:runnerId`, () => {
    const resultArray = [[getActionsGetSelfHostedRunnerForOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/actions/runners/:runnerId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/actions/secrets`, () => {
    const resultArray = [[getActionsListOrgSecrets200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/actions/secrets/public-key`, () => {
    const resultArray = [[getActionsGetOrgPublicKey200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/actions/secrets/:secretName`, () => {
    const resultArray = [[getActionsGetOrgSecret200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/orgs/:org/actions/secrets/:secretName`, () => {
    const resultArray = [
      [getActionsCreateOrUpdateOrgSecret201Response(), { status: 201 }],
      [null, { status: 204 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/actions/secrets/:secretName`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/actions/secrets/:secretName/repositories`, () => {
    const resultArray = [[getActionsListSelectedReposForOrgSecret200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/orgs/:org/actions/secrets/:secretName/repositories`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/orgs/:org/actions/secrets/:secretName/repositories/:repositoryId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 409 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/actions/secrets/:secretName/repositories/:repositoryId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 409 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/audit-log`, () => {
    const resultArray = [[getOrgsGetAuditLog200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/events`, () => {
    const resultArray = [[getActivityListPublicOrgEvents200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/hooks`, () => {
    const resultArray = [
      [getOrgsListWebhooks200Response(), { status: 200 }],
      [getOrgsListWebhooks404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/orgs/:org/hooks`, () => {
    const resultArray = [
      [getOrgsCreateWebhook201Response(), { status: 201 }],
      [getOrgsCreateWebhook404Response(), { status: 404 }],
      [getOrgsCreateWebhook422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/hooks/:hookId`, () => {
    const resultArray = [
      [getOrgsGetWebhook200Response(), { status: 200 }],
      [getOrgsGetWebhook404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/orgs/:org/hooks/:hookId`, () => {
    const resultArray = [
      [getOrgsUpdateWebhook200Response(), { status: 200 }],
      [getOrgsUpdateWebhook404Response(), { status: 404 }],
      [getOrgsUpdateWebhook422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/hooks/:hookId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getOrgsDeleteWebhook404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/hooks/:hookId/config`, () => {
    const resultArray = [[getOrgsGetWebhookConfigForOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/orgs/:org/hooks/:hookId/config`, () => {
    const resultArray = [[getOrgsUpdateWebhookConfigForOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/hooks/:hookId/deliveries`, () => {
    const resultArray = [
      [getOrgsListWebhookDeliveries200Response(), { status: 200 }],
      [getOrgsListWebhookDeliveries400Response(), { status: 400 }],
      [getOrgsListWebhookDeliveries422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/hooks/:hookId/deliveries/:deliveryId`, () => {
    const resultArray = [
      [getOrgsGetWebhookDelivery200Response(), { status: 200 }],
      [getOrgsGetWebhookDelivery400Response(), { status: 400 }],
      [getOrgsGetWebhookDelivery422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/orgs/:org/hooks/:hookId/deliveries/:deliveryId/attempts`, () => {
    const resultArray = [
      [getOrgsRedeliverWebhookDelivery202Response(), { status: 202 }],
      [getOrgsRedeliverWebhookDelivery400Response(), { status: 400 }],
      [getOrgsRedeliverWebhookDelivery422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/orgs/:org/hooks/:hookId/pings`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getOrgsPingWebhook404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/installation`, () => {
    const resultArray = [[getAppsGetOrgInstallation200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/installations`, () => {
    const resultArray = [[getOrgsListAppInstallations200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/issues`, () => {
    const resultArray = [
      [getIssuesListForOrg200Response(), { status: 200 }],
      [getIssuesListForOrg404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/members`, () => {
    const resultArray = [
      [getOrgsListMembers200Response(), { status: 200 }],
      [getOrgsListMembers422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/members/:username`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 302 }],
      [null, { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/members/:username`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getOrgsRemoveMember403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/memberships/:username`, () => {
    const resultArray = [
      [getOrgsGetMembershipForUser200Response(), { status: 200 }],
      [getOrgsGetMembershipForUser403Response(), { status: 403 }],
      [getOrgsGetMembershipForUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/orgs/:org/memberships/:username`, () => {
    const resultArray = [
      [getOrgsSetMembershipForUser200Response(), { status: 200 }],
      [getOrgsSetMembershipForUser403Response(), { status: 403 }],
      [getOrgsSetMembershipForUser422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/memberships/:username`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getOrgsRemoveMembershipForUser403Response(), { status: 403 }],
      [getOrgsRemoveMembershipForUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/outside_collaborators`, () => {
    const resultArray = [[getOrgsListOutsideCollaborators200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/orgs/:org/outside_collaborators/:username`, () => {
    const resultArray = [
      [getOrgsConvertMemberToOutsideCollaborator202Response(), { status: 202 }],
      [null, { status: 204 }],
      [null, { status: 403 }],
      [getOrgsConvertMemberToOutsideCollaborator404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/outside_collaborators/:username`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getOrgsRemoveOutsideCollaborator422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/pre-receive-hooks`, () => {
    const resultArray = [[getEnterpriseAdminListPreReceiveHooksForOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/pre-receive-hooks/:preReceiveHookId`, () => {
    const resultArray = [[getEnterpriseAdminGetPreReceiveHookForOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/orgs/:org/pre-receive-hooks/:preReceiveHookId`, () => {
    const resultArray = [[getEnterpriseAdminUpdatePreReceiveHookEnforcementForOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/pre-receive-hooks/:preReceiveHookId`, () => {
    const resultArray = [[getEnterpriseAdminRemovePreReceiveHookEnforcementForOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/projects`, () => {
    const resultArray = [
      [getProjectsListForOrg200Response(), { status: 200 }],
      [getProjectsListForOrg422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/orgs/:org/projects`, () => {
    const resultArray = [
      [getProjectsCreateForOrg201Response(), { status: 201 }],
      [getProjectsCreateForOrg401Response(), { status: 401 }],
      [getProjectsCreateForOrg403Response(), { status: 403 }],
      [getProjectsCreateForOrg404Response(), { status: 404 }],
      [getProjectsCreateForOrg410Response(), { status: 410 }],
      [getProjectsCreateForOrg422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/public_members`, () => {
    const resultArray = [[getOrgsListPublicMembers200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/public_members/:username`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/orgs/:org/public_members/:username`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getOrgsSetPublicMembershipForAuthenticatedUser403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/public_members/:username`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/repos`, () => {
    const resultArray = [[getReposListForOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/orgs/:org/repos`, () => {
    const resultArray = [
      [getReposCreateInOrg201Response(), { status: 201 }],
      [getReposCreateInOrg403Response(), { status: 403 }],
      [getReposCreateInOrg422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/secret-scanning/alerts`, () => {
    const resultArray = [
      [getSecretScanningListAlertsForOrg200Response(), { status: 200 }],
      [getSecretScanningListAlertsForOrg404Response(), { status: 404 }],
      [getSecretScanningListAlertsForOrg503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/teams`, () => {
    const resultArray = [
      [getTeamsList200Response(), { status: 200 }],
      [getTeamsList403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/orgs/:org/teams`, () => {
    const resultArray = [
      [getTeamsCreate201Response(), { status: 201 }],
      [getTeamsCreate403Response(), { status: 403 }],
      [getTeamsCreate422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/teams/:teamSlug`, () => {
    const resultArray = [
      [getTeamsGetByName200Response(), { status: 200 }],
      [getTeamsGetByName404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/orgs/:org/teams/:teamSlug`, () => {
    const resultArray = [
      [getTeamsUpdateInOrg200Response(), { status: 200 }],
      [getTeamsUpdateInOrg201Response(), { status: 201 }],
      [getTeamsUpdateInOrg403Response(), { status: 403 }],
      [getTeamsUpdateInOrg404Response(), { status: 404 }],
      [getTeamsUpdateInOrg422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/teams/:teamSlug`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/teams/:teamSlug/discussions`, () => {
    const resultArray = [[getTeamsListDiscussionsInOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/orgs/:org/teams/:teamSlug/discussions`, () => {
    const resultArray = [[getTeamsCreateDiscussionInOrg201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber`, () => {
    const resultArray = [[getTeamsGetDiscussionInOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber`, () => {
    const resultArray = [[getTeamsUpdateDiscussionInOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments`, () => {
    const resultArray = [[getTeamsListDiscussionCommentsInOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments`, () => {
    const resultArray = [[getTeamsCreateDiscussionCommentInOrg201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber`, () => {
    const resultArray = [[getTeamsGetDiscussionCommentInOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber`, () => {
    const resultArray = [[getTeamsUpdateDiscussionCommentInOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions`,
    () => {
      const resultArray = [[getReactionsListForTeamDiscussionCommentInOrg200Response(), { status: 200 }]];

      return HttpResponse.json(...resultArray[next() % resultArray.length]);
    }
  ),
  http.post(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions`,
    () => {
      const resultArray = [
        [getReactionsCreateForTeamDiscussionCommentInOrg200Response(), { status: 200 }],
        [getReactionsCreateForTeamDiscussionCommentInOrg201Response(), { status: 201 }],
      ];

      return HttpResponse.json(...resultArray[next() % resultArray.length]);
    }
  ),
  http.delete(
    `${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions/:reactionId`,
    () => {
      const resultArray = [[null, { status: 204 }]];

      return HttpResponse.json(...resultArray[next() % resultArray.length]);
    }
  ),
  http.get(`${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions`, () => {
    const resultArray = [[getReactionsListForTeamDiscussionInOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions`, () => {
    const resultArray = [
      [getReactionsCreateForTeamDiscussionInOrg200Response(), { status: 200 }],
      [getReactionsCreateForTeamDiscussionInOrg201Response(), { status: 201 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions/:reactionId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/teams/:teamSlug/members`, () => {
    const resultArray = [[getTeamsListMembersInOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/teams/:teamSlug/memberships/:username`, () => {
    const resultArray = [
      [getTeamsGetMembershipForUserInOrg200Response(), { status: 200 }],
      [null, { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/orgs/:org/teams/:teamSlug/memberships/:username`, () => {
    const resultArray = [
      [getTeamsAddOrUpdateMembershipForUserInOrg200Response(), { status: 200 }],
      [null, { status: 403 }],
      [null, { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/teams/:teamSlug/memberships/:username`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/teams/:teamSlug/projects`, () => {
    const resultArray = [[getTeamsListProjectsInOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/teams/:teamSlug/projects/:projectId`, () => {
    const resultArray = [
      [getTeamsCheckPermissionsForProjectInOrg200Response(), { status: 200 }],
      [null, { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/orgs/:org/teams/:teamSlug/projects/:projectId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getTeamsAddOrUpdateProjectPermissionsInOrg403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/teams/:teamSlug/projects/:projectId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/teams/:teamSlug/repos`, () => {
    const resultArray = [[getTeamsListReposInOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/teams/:teamSlug/repos/:owner/:repo`, () => {
    const resultArray = [
      [getTeamsCheckPermissionsForRepoInOrg200Response(), { status: 200 }],
      [null, { status: 204 }],
      [null, { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/orgs/:org/teams/:teamSlug/repos/:owner/:repo`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/orgs/:org/teams/:teamSlug/repos/:owner/:repo`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/orgs/:org/teams/:teamSlug/teams`, () => {
    const resultArray = [[getTeamsListChildInOrg200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/projects/columns/cards/:cardId`, () => {
    const resultArray = [
      [getProjectsGetCard200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getProjectsGetCard401Response(), { status: 401 }],
      [getProjectsGetCard403Response(), { status: 403 }],
      [getProjectsGetCard404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/projects/columns/cards/:cardId`, () => {
    const resultArray = [
      [getProjectsUpdateCard200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getProjectsUpdateCard401Response(), { status: 401 }],
      [getProjectsUpdateCard403Response(), { status: 403 }],
      [getProjectsUpdateCard404Response(), { status: 404 }],
      [getProjectsUpdateCard422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/projects/columns/cards/:cardId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getProjectsDeleteCard401Response(), { status: 401 }],
      [getProjectsDeleteCard403Response(), { status: 403 }],
      [getProjectsDeleteCard404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/projects/columns/cards/:cardId/moves`, () => {
    const resultArray = [
      [getProjectsMoveCard201Response(), { status: 201 }],
      [null, { status: 304 }],
      [getProjectsMoveCard401Response(), { status: 401 }],
      [getProjectsMoveCard403Response(), { status: 403 }],
      [getProjectsMoveCard422Response(), { status: 422 }],
      [getProjectsMoveCard503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/projects/columns/:columnId`, () => {
    const resultArray = [
      [getProjectsGetColumn200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getProjectsGetColumn401Response(), { status: 401 }],
      [getProjectsGetColumn403Response(), { status: 403 }],
      [getProjectsGetColumn404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/projects/columns/:columnId`, () => {
    const resultArray = [
      [getProjectsUpdateColumn200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getProjectsUpdateColumn401Response(), { status: 401 }],
      [getProjectsUpdateColumn403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/projects/columns/:columnId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getProjectsDeleteColumn401Response(), { status: 401 }],
      [getProjectsDeleteColumn403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/projects/columns/:columnId/cards`, () => {
    const resultArray = [
      [getProjectsListCards200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getProjectsListCards401Response(), { status: 401 }],
      [getProjectsListCards403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/projects/columns/:columnId/cards`, () => {
    const resultArray = [
      [getProjectsCreateCard201Response(), { status: 201 }],
      [null, { status: 304 }],
      [getProjectsCreateCard401Response(), { status: 401 }],
      [getProjectsCreateCard403Response(), { status: 403 }],
      [getProjectsCreateCard422Response(), { status: 422 }],
      [getProjectsCreateCard503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/projects/columns/:columnId/moves`, () => {
    const resultArray = [
      [getProjectsMoveColumn201Response(), { status: 201 }],
      [null, { status: 304 }],
      [getProjectsMoveColumn401Response(), { status: 401 }],
      [getProjectsMoveColumn403Response(), { status: 403 }],
      [getProjectsMoveColumn422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/projects/:projectId`, () => {
    const resultArray = [
      [getProjectsGet200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getProjectsGet401Response(), { status: 401 }],
      [getProjectsGet403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/projects/:projectId`, () => {
    const resultArray = [
      [getProjectsUpdate200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getProjectsUpdate401Response(), { status: 401 }],
      [getProjectsUpdate403Response(), { status: 403 }],
      [null, { status: 404 }],
      [getProjectsUpdate410Response(), { status: 410 }],
      [getProjectsUpdate422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/projects/:projectId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getProjectsDelete401Response(), { status: 401 }],
      [getProjectsDelete403Response(), { status: 403 }],
      [getProjectsDelete404Response(), { status: 404 }],
      [getProjectsDelete410Response(), { status: 410 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/projects/:projectId/collaborators`, () => {
    const resultArray = [
      [getProjectsListCollaborators200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getProjectsListCollaborators401Response(), { status: 401 }],
      [getProjectsListCollaborators403Response(), { status: 403 }],
      [getProjectsListCollaborators404Response(), { status: 404 }],
      [getProjectsListCollaborators422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/projects/:projectId/collaborators/:username`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getProjectsAddCollaborator401Response(), { status: 401 }],
      [getProjectsAddCollaborator403Response(), { status: 403 }],
      [getProjectsAddCollaborator404Response(), { status: 404 }],
      [getProjectsAddCollaborator422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/projects/:projectId/collaborators/:username`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getProjectsRemoveCollaborator401Response(), { status: 401 }],
      [getProjectsRemoveCollaborator403Response(), { status: 403 }],
      [getProjectsRemoveCollaborator404Response(), { status: 404 }],
      [getProjectsRemoveCollaborator422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/projects/:projectId/collaborators/:username/permission`, () => {
    const resultArray = [
      [getProjectsGetPermissionForUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getProjectsGetPermissionForUser401Response(), { status: 401 }],
      [getProjectsGetPermissionForUser403Response(), { status: 403 }],
      [getProjectsGetPermissionForUser404Response(), { status: 404 }],
      [getProjectsGetPermissionForUser422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/projects/:projectId/columns`, () => {
    const resultArray = [
      [getProjectsListColumns200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getProjectsListColumns401Response(), { status: 401 }],
      [getProjectsListColumns403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/projects/:projectId/columns`, () => {
    const resultArray = [
      [getProjectsCreateColumn201Response(), { status: 201 }],
      [null, { status: 304 }],
      [getProjectsCreateColumn401Response(), { status: 401 }],
      [getProjectsCreateColumn403Response(), { status: 403 }],
      [getProjectsCreateColumn422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/rate_limit`, () => {
    const resultArray = [
      [getRateLimitGet200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getRateLimitGet404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/reactions/:reactionId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getReactionsDeleteLegacy401Response(), { status: 401 }],
      [getReactionsDeleteLegacy403Response(), { status: 403 }],
      [getReactionsDeleteLegacy410Response(), { status: 410 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo`, () => {
    const resultArray = [
      [getReposGet200Response(), { status: 200 }],
      [getReposGet301Response(), { status: 301 }],
      [getReposGet403Response(), { status: 403 }],
      [getReposGet404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo`, () => {
    const resultArray = [
      [getReposUpdate200Response(), { status: 200 }],
      [getReposUpdate307Response(), { status: 307 }],
      [getReposUpdate403Response(), { status: 403 }],
      [getReposUpdate404Response(), { status: 404 }],
      [getReposUpdate422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getReposDelete307Response(), { status: 307 }],
      [getReposDelete403Response(), { status: 403 }],
      [getReposDelete404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/artifacts`, () => {
    const resultArray = [[getActionsListArtifactsForRepo200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/artifacts/:artifactId`, () => {
    const resultArray = [[getActionsGetArtifact200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/actions/artifacts/:artifactId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/artifacts/:artifactId/:archiveFormat`, () => {
    const resultArray = [
      [null, { status: 302 }],
      [getActionsDownloadArtifact410Response(), { status: 410 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/jobs/:jobId`, () => {
    const resultArray = [[getActionsGetJobForWorkflowRun200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/jobs/:jobId/logs`, () => {
    const resultArray = [[null, { status: 302 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/permissions`, () => {
    const resultArray = [[getActionsGetGithubActionsPermissionsRepository200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/actions/permissions`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/permissions/selected-actions`, () => {
    const resultArray = [[getActionsGetAllowedActionsRepository200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/actions/permissions/selected-actions`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/runners`, () => {
    const resultArray = [[getActionsListSelfHostedRunnersForRepo200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/runners/downloads`, () => {
    const resultArray = [[getActionsListRunnerApplicationsForRepo200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/actions/runners/registration-token`, () => {
    const resultArray = [[getActionsCreateRegistrationTokenForRepo201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/actions/runners/remove-token`, () => {
    const resultArray = [[getActionsCreateRemoveTokenForRepo201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/runners/:runnerId`, () => {
    const resultArray = [[getActionsGetSelfHostedRunnerForRepo200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/actions/runners/:runnerId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/runs`, () => {
    const resultArray = [[getActionsListWorkflowRunsForRepo200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/runs/:runId`, () => {
    const resultArray = [[getActionsGetWorkflowRun200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/actions/runs/:runId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/runs/:runId/approvals`, () => {
    const resultArray = [[getActionsGetReviewsForRun200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/runs/:runId/artifacts`, () => {
    const resultArray = [[getActionsListWorkflowRunArtifacts200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/actions/runs/:runId/cancel`, () => {
    const resultArray = [
      [getActionsCancelWorkflowRun202Response(), { status: 202 }],
      [getActionsCancelWorkflowRun409Response(), { status: 409 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/runs/:runId/jobs`, () => {
    const resultArray = [[getActionsListJobsForWorkflowRun200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/runs/:runId/logs`, () => {
    const resultArray = [[null, { status: 302 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/actions/runs/:runId/logs`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getActionsDeleteWorkflowRunLogs403Response(), { status: 403 }],
      [getActionsDeleteWorkflowRunLogs500Response(), { status: 500 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/runs/:runId/pending_deployments`, () => {
    const resultArray = [[getActionsGetPendingDeploymentsForRun200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/actions/runs/:runId/pending_deployments`, () => {
    const resultArray = [[getActionsReviewPendingDeploymentsForRun200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/actions/runs/:runId/rerun`, () => {
    const resultArray = [[getActionsReRunWorkflow201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/secrets`, () => {
    const resultArray = [[getActionsListRepoSecrets200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/secrets/public-key`, () => {
    const resultArray = [[getActionsGetRepoPublicKey200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/secrets/:secretName`, () => {
    const resultArray = [[getActionsGetRepoSecret200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/actions/secrets/:secretName`, () => {
    const resultArray = [
      [getActionsCreateOrUpdateRepoSecret201Response(), { status: 201 }],
      [null, { status: 204 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/actions/secrets/:secretName`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/workflows`, () => {
    const resultArray = [[getActionsListRepoWorkflows200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/workflows/:workflowId`, () => {
    const resultArray = [[getActionsGetWorkflow200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/actions/workflows/:workflowId/disable`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/actions/workflows/:workflowId/dispatches`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/actions/workflows/:workflowId/enable`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/actions/workflows/:workflowId/runs`, () => {
    const resultArray = [[getActionsListWorkflowRuns200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/assignees`, () => {
    const resultArray = [
      [getIssuesListAssignees200Response(), { status: 200 }],
      [getIssuesListAssignees404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/assignees/:assignee`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getIssuesCheckUserCanBeAssigned404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/autolinks`, () => {
    const resultArray = [[getReposListAutolinks200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/autolinks`, () => {
    const resultArray = [
      [getReposCreateAutolink201Response(), { status: 201 }],
      [getReposCreateAutolink422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/autolinks/:autolinkId`, () => {
    const resultArray = [
      [getReposGetAutolink200Response(), { status: 200 }],
      [getReposGetAutolink404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/autolinks/:autolinkId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getReposDeleteAutolink404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/branches`, () => {
    const resultArray = [
      [getReposListBranches200Response(), { status: 200 }],
      [getReposListBranches404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/branches/:branch`, () => {
    const resultArray = [
      [getReposGetBranch200Response(), { status: 200 }],
      [getReposGetBranch301Response(), { status: 301 }],
      [getReposGetBranch404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/branches/:branch/protection`, () => {
    const resultArray = [
      [getReposGetBranchProtection200Response(), { status: 200 }],
      [getReposGetBranchProtection404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/branches/:branch/protection`, () => {
    const resultArray = [
      [getReposUpdateBranchProtection200Response(), { status: 200 }],
      [getReposUpdateBranchProtection403Response(), { status: 403 }],
      [getReposUpdateBranchProtection404Response(), { status: 404 }],
      [getReposUpdateBranchProtection422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/branches/:branch/protection`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getReposDeleteBranchProtection403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/enforce_admins`, () => {
    const resultArray = [[getReposGetAdminBranchProtection200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/enforce_admins`, () => {
    const resultArray = [[getReposSetAdminBranchProtection200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/enforce_admins`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getReposDeleteAdminBranchProtection404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews`, () => {
    const resultArray = [[getReposGetPullRequestReviewProtection200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews`, () => {
    const resultArray = [
      [getReposUpdatePullRequestReviewProtection200Response(), { status: 200 }],
      [getReposUpdatePullRequestReviewProtection422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getReposDeletePullRequestReviewProtection404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_signatures`, () => {
    const resultArray = [
      [getReposGetCommitSignatureProtection200Response(), { status: 200 }],
      [getReposGetCommitSignatureProtection404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_signatures`, () => {
    const resultArray = [
      [getReposCreateCommitSignatureProtection200Response(), { status: 200 }],
      [getReposCreateCommitSignatureProtection404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_signatures`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getReposDeleteCommitSignatureProtection404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_status_checks`, () => {
    const resultArray = [
      [getReposGetStatusChecksProtection200Response(), { status: 200 }],
      [getReposGetStatusChecksProtection404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_status_checks`, () => {
    const resultArray = [
      [getReposUpdateStatusCheckProtection200Response(), { status: 200 }],
      [getReposUpdateStatusCheckProtection404Response(), { status: 404 }],
      [getReposUpdateStatusCheckProtection422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_status_checks`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts`, () => {
    const resultArray = [
      [getReposGetAllStatusCheckContexts200Response(), { status: 200 }],
      [getReposGetAllStatusCheckContexts404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts`, () => {
    const resultArray = [
      [getReposAddStatusCheckContexts200Response(), { status: 200 }],
      [getReposAddStatusCheckContexts403Response(), { status: 403 }],
      [getReposAddStatusCheckContexts404Response(), { status: 404 }],
      [getReposAddStatusCheckContexts422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts`, () => {
    const resultArray = [
      [getReposSetStatusCheckContexts200Response(), { status: 200 }],
      [getReposSetStatusCheckContexts404Response(), { status: 404 }],
      [getReposSetStatusCheckContexts422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts`, () => {
    const resultArray = [
      [getReposRemoveStatusCheckContexts200Response(), { status: 200 }],
      [getReposRemoveStatusCheckContexts404Response(), { status: 404 }],
      [getReposRemoveStatusCheckContexts422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions`, () => {
    const resultArray = [
      [getReposGetAccessRestrictions200Response(), { status: 200 }],
      [getReposGetAccessRestrictions404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/apps`, () => {
    const resultArray = [
      [getReposGetAppsWithAccessToProtectedBranch200Response(), { status: 200 }],
      [getReposGetAppsWithAccessToProtectedBranch404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/apps`, () => {
    const resultArray = [
      [getReposAddAppAccessRestrictions200Response(), { status: 200 }],
      [getReposAddAppAccessRestrictions422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/apps`, () => {
    const resultArray = [
      [getReposSetAppAccessRestrictions200Response(), { status: 200 }],
      [getReposSetAppAccessRestrictions422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/apps`, () => {
    const resultArray = [
      [getReposRemoveAppAccessRestrictions200Response(), { status: 200 }],
      [getReposRemoveAppAccessRestrictions422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/teams`, () => {
    const resultArray = [
      [getReposGetTeamsWithAccessToProtectedBranch200Response(), { status: 200 }],
      [getReposGetTeamsWithAccessToProtectedBranch404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/teams`, () => {
    const resultArray = [
      [getReposAddTeamAccessRestrictions200Response(), { status: 200 }],
      [getReposAddTeamAccessRestrictions422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/teams`, () => {
    const resultArray = [
      [getReposSetTeamAccessRestrictions200Response(), { status: 200 }],
      [getReposSetTeamAccessRestrictions422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/teams`, () => {
    const resultArray = [
      [getReposRemoveTeamAccessRestrictions200Response(), { status: 200 }],
      [getReposRemoveTeamAccessRestrictions422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/users`, () => {
    const resultArray = [
      [getReposGetUsersWithAccessToProtectedBranch200Response(), { status: 200 }],
      [getReposGetUsersWithAccessToProtectedBranch404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/users`, () => {
    const resultArray = [
      [getReposAddUserAccessRestrictions200Response(), { status: 200 }],
      [getReposAddUserAccessRestrictions422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/users`, () => {
    const resultArray = [
      [getReposSetUserAccessRestrictions200Response(), { status: 200 }],
      [getReposSetUserAccessRestrictions422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/branches/:branch/protection/restrictions/users`, () => {
    const resultArray = [
      [getReposRemoveUserAccessRestrictions200Response(), { status: 200 }],
      [getReposRemoveUserAccessRestrictions422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/branches/:branch/rename`, () => {
    const resultArray = [
      [getReposRenameBranch201Response(), { status: 201 }],
      [getReposRenameBranch403Response(), { status: 403 }],
      [getReposRenameBranch404Response(), { status: 404 }],
      [getReposRenameBranch422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/check-runs`, () => {
    const resultArray = [[getChecksCreate201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/check-runs/:checkRunId`, () => {
    const resultArray = [[getChecksGet200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/check-runs/:checkRunId`, () => {
    const resultArray = [[getChecksUpdate200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/check-runs/:checkRunId/annotations`, () => {
    const resultArray = [[getChecksListAnnotations200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/check-runs/:checkRunId/rerequest`, () => {
    const resultArray = [
      [getChecksRerequestRun201Response(), { status: 201 }],
      [getChecksRerequestRun403Response(), { status: 403 }],
      [getChecksRerequestRun404Response(), { status: 404 }],
      [getChecksRerequestRun422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/check-suites`, () => {
    const resultArray = [
      [getChecksCreateSuite200Response(), { status: 200 }],
      [getChecksCreateSuite201Response(), { status: 201 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/check-suites/preferences`, () => {
    const resultArray = [[getChecksSetSuitesPreferences200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/check-suites/:checkSuiteId`, () => {
    const resultArray = [[getChecksGetSuite200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/check-suites/:checkSuiteId/check-runs`, () => {
    const resultArray = [[getChecksListForSuite200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/check-suites/:checkSuiteId/rerequest`, () => {
    const resultArray = [[getChecksRerequestSuite201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/code-scanning/alerts`, () => {
    const resultArray = [
      [getCodeScanningListAlertsForRepo200Response(), { status: 200 }],
      [getCodeScanningListAlertsForRepo403Response(), { status: 403 }],
      [getCodeScanningListAlertsForRepo404Response(), { status: 404 }],
      [getCodeScanningListAlertsForRepo503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/code-scanning/alerts/:alertNumber`, () => {
    const resultArray = [
      [getCodeScanningGetAlert200Response(), { status: 200 }],
      [getCodeScanningGetAlert403Response(), { status: 403 }],
      [getCodeScanningGetAlert404Response(), { status: 404 }],
      [getCodeScanningGetAlert503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/code-scanning/alerts/:alertNumber`, () => {
    const resultArray = [
      [getCodeScanningUpdateAlert200Response(), { status: 200 }],
      [getCodeScanningUpdateAlert403Response(), { status: 403 }],
      [getCodeScanningUpdateAlert404Response(), { status: 404 }],
      [getCodeScanningUpdateAlert503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/code-scanning/alerts/:alertNumber/instances`, () => {
    const resultArray = [
      [getCodeScanningListAlertInstances200Response(), { status: 200 }],
      [getCodeScanningListAlertInstances403Response(), { status: 403 }],
      [getCodeScanningListAlertInstances404Response(), { status: 404 }],
      [getCodeScanningListAlertInstances503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/code-scanning/analyses`, () => {
    const resultArray = [
      [getCodeScanningListRecentAnalyses200Response(), { status: 200 }],
      [getCodeScanningListRecentAnalyses403Response(), { status: 403 }],
      [getCodeScanningListRecentAnalyses404Response(), { status: 404 }],
      [getCodeScanningListRecentAnalyses503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/code-scanning/analyses/:analysisId`, () => {
    const resultArray = [
      [getCodeScanningGetAnalysis200Response(), { status: 200 }],
      [getCodeScanningGetAnalysis403Response(), { status: 403 }],
      [getCodeScanningGetAnalysis404Response(), { status: 404 }],
      [getCodeScanningGetAnalysis503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/code-scanning/analyses/:analysisId`, () => {
    const resultArray = [
      [getCodeScanningDeleteAnalysis200Response(), { status: 200 }],
      [getCodeScanningDeleteAnalysis400Response(), { status: 400 }],
      [getCodeScanningDeleteAnalysis403Response(), { status: 403 }],
      [getCodeScanningDeleteAnalysis404Response(), { status: 404 }],
      [getCodeScanningDeleteAnalysis503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/code-scanning/sarifs`, () => {
    const resultArray = [
      [getCodeScanningUploadSarif202Response(), { status: 202 }],
      [null, { status: 400 }],
      [getCodeScanningUploadSarif403Response(), { status: 403 }],
      [getCodeScanningUploadSarif404Response(), { status: 404 }],
      [null, { status: 413 }],
      [getCodeScanningUploadSarif503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/code-scanning/sarifs/:sarifId`, () => {
    const resultArray = [
      [getCodeScanningGetSarif200Response(), { status: 200 }],
      [getCodeScanningGetSarif403Response(), { status: 403 }],
      [null, { status: 404 }],
      [getCodeScanningGetSarif503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/collaborators`, () => {
    const resultArray = [
      [getReposListCollaborators200Response(), { status: 200 }],
      [getReposListCollaborators404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/collaborators/:username`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/collaborators/:username`, () => {
    const resultArray = [
      [getReposAddCollaborator201Response(), { status: 201 }],
      [null, { status: 204 }],
      [getReposAddCollaborator403Response(), { status: 403 }],
      [getReposAddCollaborator422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/collaborators/:username`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/collaborators/:username/permission`, () => {
    const resultArray = [
      [getReposGetCollaboratorPermissionLevel200Response(), { status: 200 }],
      [getReposGetCollaboratorPermissionLevel404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/comments`, () => {
    const resultArray = [[getReposListCommitCommentsForRepo200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/comments/:commentId`, () => {
    const resultArray = [
      [getReposGetCommitComment200Response(), { status: 200 }],
      [getReposGetCommitComment404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/comments/:commentId`, () => {
    const resultArray = [
      [getReposUpdateCommitComment200Response(), { status: 200 }],
      [getReposUpdateCommitComment404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/comments/:commentId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getReposDeleteCommitComment404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/comments/:commentId/reactions`, () => {
    const resultArray = [
      [getReactionsListForCommitComment200Response(), { status: 200 }],
      [getReactionsListForCommitComment404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/comments/:commentId/reactions`, () => {
    const resultArray = [
      [getReactionsCreateForCommitComment200Response(), { status: 200 }],
      [getReactionsCreateForCommitComment201Response(), { status: 201 }],
      [getReactionsCreateForCommitComment422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/comments/:commentId/reactions/:reactionId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/commits`, () => {
    const resultArray = [
      [getReposListCommits200Response(), { status: 200 }],
      [getReposListCommits400Response(), { status: 400 }],
      [getReposListCommits404Response(), { status: 404 }],
      [getReposListCommits409Response(), { status: 409 }],
      [getReposListCommits500Response(), { status: 500 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/commits/:commitSha/branches-where-head`, () => {
    const resultArray = [
      [getReposListBranchesForHeadCommit200Response(), { status: 200 }],
      [getReposListBranchesForHeadCommit422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/commits/:commitSha/comments`, () => {
    const resultArray = [[getReposListCommentsForCommit200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/commits/:commitSha/comments`, () => {
    const resultArray = [
      [getReposCreateCommitComment201Response(), { status: 201 }],
      [getReposCreateCommitComment403Response(), { status: 403 }],
      [getReposCreateCommitComment422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/commits/:commitSha/pulls`, () => {
    const resultArray = [[getReposListPullRequestsAssociatedWithCommit200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/commits/:ref`, () => {
    const resultArray = [
      [getReposGetCommit200Response(), { status: 200 }],
      [getReposGetCommit404Response(), { status: 404 }],
      [getReposGetCommit422Response(), { status: 422 }],
      [getReposGetCommit500Response(), { status: 500 }],
      [getReposGetCommit503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/commits/:ref/check-runs`, () => {
    const resultArray = [[getChecksListForRef200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/commits/:ref/check-suites`, () => {
    const resultArray = [[getChecksListSuitesForRef200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/commits/:ref/status`, () => {
    const resultArray = [
      [getReposGetCombinedStatusForRef200Response(), { status: 200 }],
      [getReposGetCombinedStatusForRef404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/commits/:ref/statuses`, () => {
    const resultArray = [
      [getReposListCommitStatusesForRef200Response(), { status: 200 }],
      [getReposListCommitStatusesForRef301Response(), { status: 301 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/compare/:basehead`, () => {
    const resultArray = [
      [getReposCompareCommits200Response(), { status: 200 }],
      [getReposCompareCommits404Response(), { status: 404 }],
      [getReposCompareCommits500Response(), { status: 500 }],
      [getReposCompareCommits503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/content_references/:contentReferenceId/attachments`, () => {
    const resultArray = [
      [getAppsCreateContentAttachment200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getAppsCreateContentAttachment403Response(), { status: 403 }],
      [getAppsCreateContentAttachment404Response(), { status: 404 }],
      [getAppsCreateContentAttachment410Response(), { status: 410 }],
      [getAppsCreateContentAttachment415Response(), { status: 415 }],
      [getAppsCreateContentAttachment422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/contents/:path`, () => {
    const resultArray = [
      [getReposGetContent200Response(), { status: 200 }],
      [null, { status: 302 }],
      [getReposGetContent403Response(), { status: 403 }],
      [getReposGetContent404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/contents/:path`, () => {
    const resultArray = [
      [getReposCreateOrUpdateFileContents200Response(), { status: 200 }],
      [getReposCreateOrUpdateFileContents201Response(), { status: 201 }],
      [getReposCreateOrUpdateFileContents404Response(), { status: 404 }],
      [getReposCreateOrUpdateFileContents409Response(), { status: 409 }],
      [getReposCreateOrUpdateFileContents422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/contents/:path`, () => {
    const resultArray = [
      [getReposDeleteFile200Response(), { status: 200 }],
      [getReposDeleteFile404Response(), { status: 404 }],
      [getReposDeleteFile409Response(), { status: 409 }],
      [getReposDeleteFile422Response(), { status: 422 }],
      [getReposDeleteFile503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/contributors`, () => {
    const resultArray = [
      [getReposListContributors200Response(), { status: 200 }],
      [null, { status: 204 }],
      [getReposListContributors403Response(), { status: 403 }],
      [getReposListContributors404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/deployments`, () => {
    const resultArray = [[getReposListDeployments200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/deployments`, () => {
    const resultArray = [
      [getReposCreateDeployment201Response(), { status: 201 }],
      [getReposCreateDeployment202Response(), { status: 202 }],
      [null, { status: 409 }],
      [getReposCreateDeployment422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/deployments/:deploymentId`, () => {
    const resultArray = [
      [getReposGetDeployment200Response(), { status: 200 }],
      [getReposGetDeployment404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/deployments/:deploymentId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getReposDeleteDeployment404Response(), { status: 404 }],
      [getReposDeleteDeployment422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/deployments/:deploymentId/statuses`, () => {
    const resultArray = [
      [getReposListDeploymentStatuses200Response(), { status: 200 }],
      [getReposListDeploymentStatuses404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/deployments/:deploymentId/statuses`, () => {
    const resultArray = [
      [getReposCreateDeploymentStatus201Response(), { status: 201 }],
      [getReposCreateDeploymentStatus422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/deployments/:deploymentId/statuses/:statusId`, () => {
    const resultArray = [
      [getReposGetDeploymentStatus200Response(), { status: 200 }],
      [getReposGetDeploymentStatus404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/dispatches`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getReposCreateDispatchEvent422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/environments`, () => {
    const resultArray = [[getReposGetAllEnvironments200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/environments/:environmentName`, () => {
    const resultArray = [[getReposGetEnvironment200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/environments/:environmentName`, () => {
    const resultArray = [
      [getReposCreateOrUpdateEnvironment200Response(), { status: 200 }],
      [getReposCreateOrUpdateEnvironment422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/environments/:environmentName`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/environments/:environmentName/deployment-branch-policies`, () => {
    const resultArray = [[getReposListDeploymentBranchPolicies200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/environments/:environmentName/deployment-branch-policies`, () => {
    const resultArray = [
      [getReposCreateDeploymentBranchPolicy200Response(), { status: 200 }],
      [null, { status: 303 }],
      [null, { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(
    `${baseURL}/repos/:owner/:repo/environments/:environmentName/deployment-branch-policies/:branchPolicyId`,
    () => {
      const resultArray = [[getReposGetDeploymentBranchPolicy200Response(), { status: 200 }]];

      return HttpResponse.json(...resultArray[next() % resultArray.length]);
    }
  ),
  http.put(
    `${baseURL}/repos/:owner/:repo/environments/:environmentName/deployment-branch-policies/:branchPolicyId`,
    () => {
      const resultArray = [[getReposUpdateDeploymentBranchPolicy200Response(), { status: 200 }]];

      return HttpResponse.json(...resultArray[next() % resultArray.length]);
    }
  ),
  http.delete(
    `${baseURL}/repos/:owner/:repo/environments/:environmentName/deployment-branch-policies/:branchPolicyId`,
    () => {
      const resultArray = [[null, { status: 204 }]];

      return HttpResponse.json(...resultArray[next() % resultArray.length]);
    }
  ),
  http.get(`${baseURL}/repos/:owner/:repo/events`, () => {
    const resultArray = [[getActivityListRepoEvents200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/forks`, () => {
    const resultArray = [
      [getReposListForks200Response(), { status: 200 }],
      [getReposListForks400Response(), { status: 400 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/forks`, () => {
    const resultArray = [
      [getReposCreateFork202Response(), { status: 202 }],
      [getReposCreateFork400Response(), { status: 400 }],
      [getReposCreateFork403Response(), { status: 403 }],
      [getReposCreateFork404Response(), { status: 404 }],
      [getReposCreateFork422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/git/blobs`, () => {
    const resultArray = [
      [getGitCreateBlob201Response(), { status: 201 }],
      [getGitCreateBlob403Response(), { status: 403 }],
      [getGitCreateBlob404Response(), { status: 404 }],
      [getGitCreateBlob409Response(), { status: 409 }],
      [getGitCreateBlob422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/git/blobs/:fileSha`, () => {
    const resultArray = [
      [getGitGetBlob200Response(), { status: 200 }],
      [getGitGetBlob403Response(), { status: 403 }],
      [getGitGetBlob404Response(), { status: 404 }],
      [getGitGetBlob422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/git/commits`, () => {
    const resultArray = [
      [getGitCreateCommit201Response(), { status: 201 }],
      [getGitCreateCommit404Response(), { status: 404 }],
      [getGitCreateCommit422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/git/commits/:commitSha`, () => {
    const resultArray = [
      [getGitGetCommit200Response(), { status: 200 }],
      [getGitGetCommit404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/git/matching-refs/:ref`, () => {
    const resultArray = [[getGitListMatchingRefs200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/git/ref/:ref`, () => {
    const resultArray = [
      [getGitGetRef200Response(), { status: 200 }],
      [getGitGetRef404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/git/refs`, () => {
    const resultArray = [
      [getGitCreateRef201Response(), { status: 201 }],
      [getGitCreateRef422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/git/refs/:ref`, () => {
    const resultArray = [
      [getGitUpdateRef200Response(), { status: 200 }],
      [getGitUpdateRef422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/git/refs/:ref`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getGitDeleteRef422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/git/tags`, () => {
    const resultArray = [
      [getGitCreateTag201Response(), { status: 201 }],
      [getGitCreateTag422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/git/tags/:tagSha`, () => {
    const resultArray = [
      [getGitGetTag200Response(), { status: 200 }],
      [getGitGetTag404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/git/trees`, () => {
    const resultArray = [
      [getGitCreateTree201Response(), { status: 201 }],
      [getGitCreateTree403Response(), { status: 403 }],
      [getGitCreateTree404Response(), { status: 404 }],
      [getGitCreateTree422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/git/trees/:treeSha`, () => {
    const resultArray = [
      [getGitGetTree200Response(), { status: 200 }],
      [getGitGetTree404Response(), { status: 404 }],
      [getGitGetTree422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/hooks`, () => {
    const resultArray = [
      [getReposListWebhooks200Response(), { status: 200 }],
      [getReposListWebhooks404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/hooks`, () => {
    const resultArray = [
      [getReposCreateWebhook201Response(), { status: 201 }],
      [getReposCreateWebhook403Response(), { status: 403 }],
      [getReposCreateWebhook404Response(), { status: 404 }],
      [getReposCreateWebhook422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/hooks/:hookId`, () => {
    const resultArray = [
      [getReposGetWebhook200Response(), { status: 200 }],
      [getReposGetWebhook404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/hooks/:hookId`, () => {
    const resultArray = [
      [getReposUpdateWebhook200Response(), { status: 200 }],
      [getReposUpdateWebhook404Response(), { status: 404 }],
      [getReposUpdateWebhook422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/hooks/:hookId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getReposDeleteWebhook404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/hooks/:hookId/config`, () => {
    const resultArray = [[getReposGetWebhookConfigForRepo200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/hooks/:hookId/config`, () => {
    const resultArray = [[getReposUpdateWebhookConfigForRepo200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/hooks/:hookId/deliveries`, () => {
    const resultArray = [
      [getReposListWebhookDeliveries200Response(), { status: 200 }],
      [getReposListWebhookDeliveries400Response(), { status: 400 }],
      [getReposListWebhookDeliveries422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/hooks/:hookId/deliveries/:deliveryId`, () => {
    const resultArray = [
      [getReposGetWebhookDelivery200Response(), { status: 200 }],
      [getReposGetWebhookDelivery400Response(), { status: 400 }],
      [getReposGetWebhookDelivery422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/hooks/:hookId/deliveries/:deliveryId/attempts`, () => {
    const resultArray = [
      [getReposRedeliverWebhookDelivery202Response(), { status: 202 }],
      [getReposRedeliverWebhookDelivery400Response(), { status: 400 }],
      [getReposRedeliverWebhookDelivery422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/hooks/:hookId/pings`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getReposPingWebhook404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/hooks/:hookId/tests`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getReposTestPushWebhook404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/installation`, () => {
    const resultArray = [
      [getAppsGetRepoInstallation200Response(), { status: 200 }],
      [getAppsGetRepoInstallation301Response(), { status: 301 }],
      [getAppsGetRepoInstallation404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/invitations`, () => {
    const resultArray = [[getReposListInvitations200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/invitations/:invitationId`, () => {
    const resultArray = [[getReposUpdateInvitation200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/invitations/:invitationId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/issues`, () => {
    const resultArray = [
      [getIssuesListForRepo200Response(), { status: 200 }],
      [getIssuesListForRepo301Response(), { status: 301 }],
      [getIssuesListForRepo404Response(), { status: 404 }],
      [getIssuesListForRepo422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/issues`, () => {
    const resultArray = [
      [getIssuesCreate201Response(), { status: 201 }],
      [getIssuesCreate403Response(), { status: 403 }],
      [getIssuesCreate404Response(), { status: 404 }],
      [getIssuesCreate410Response(), { status: 410 }],
      [getIssuesCreate422Response(), { status: 422 }],
      [getIssuesCreate503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/issues/comments`, () => {
    const resultArray = [
      [getIssuesListCommentsForRepo200Response(), { status: 200 }],
      [getIssuesListCommentsForRepo404Response(), { status: 404 }],
      [getIssuesListCommentsForRepo422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/issues/comments/:commentId`, () => {
    const resultArray = [
      [getIssuesGetComment200Response(), { status: 200 }],
      [getIssuesGetComment404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/issues/comments/:commentId`, () => {
    const resultArray = [
      [getIssuesUpdateComment200Response(), { status: 200 }],
      [getIssuesUpdateComment422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/issues/comments/:commentId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/issues/comments/:commentId/reactions`, () => {
    const resultArray = [
      [getReactionsListForIssueComment200Response(), { status: 200 }],
      [getReactionsListForIssueComment404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/issues/comments/:commentId/reactions`, () => {
    const resultArray = [
      [getReactionsCreateForIssueComment200Response(), { status: 200 }],
      [getReactionsCreateForIssueComment201Response(), { status: 201 }],
      [getReactionsCreateForIssueComment422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/issues/comments/:commentId/reactions/:reactionId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/issues/events`, () => {
    const resultArray = [
      [getIssuesListEventsForRepo200Response(), { status: 200 }],
      [getIssuesListEventsForRepo422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/issues/events/:eventId`, () => {
    const resultArray = [
      [getIssuesGetEvent200Response(), { status: 200 }],
      [getIssuesGetEvent403Response(), { status: 403 }],
      [getIssuesGetEvent404Response(), { status: 404 }],
      [getIssuesGetEvent410Response(), { status: 410 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/issues/:issueNumber`, () => {
    const resultArray = [
      [getIssuesGet200Response(), { status: 200 }],
      [getIssuesGet301Response(), { status: 301 }],
      [null, { status: 304 }],
      [getIssuesGet404Response(), { status: 404 }],
      [getIssuesGet410Response(), { status: 410 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/issues/:issueNumber`, () => {
    const resultArray = [
      [getIssuesUpdate200Response(), { status: 200 }],
      [getIssuesUpdate301Response(), { status: 301 }],
      [getIssuesUpdate403Response(), { status: 403 }],
      [getIssuesUpdate404Response(), { status: 404 }],
      [getIssuesUpdate410Response(), { status: 410 }],
      [getIssuesUpdate422Response(), { status: 422 }],
      [getIssuesUpdate503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/issues/:issueNumber/assignees`, () => {
    const resultArray = [[getIssuesAddAssignees201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/issues/:issueNumber/assignees`, () => {
    const resultArray = [[getIssuesRemoveAssignees200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/issues/:issueNumber/assignees/:assignee`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getIssuesCheckUserCanBeAssignedToIssue404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/issues/:issueNumber/comments`, () => {
    const resultArray = [
      [getIssuesListComments200Response(), { status: 200 }],
      [getIssuesListComments404Response(), { status: 404 }],
      [getIssuesListComments410Response(), { status: 410 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/issues/:issueNumber/comments`, () => {
    const resultArray = [
      [getIssuesCreateComment201Response(), { status: 201 }],
      [getIssuesCreateComment403Response(), { status: 403 }],
      [getIssuesCreateComment404Response(), { status: 404 }],
      [getIssuesCreateComment410Response(), { status: 410 }],
      [getIssuesCreateComment422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/issues/:issueNumber/events`, () => {
    const resultArray = [
      [getIssuesListEvents200Response(), { status: 200 }],
      [getIssuesListEvents410Response(), { status: 410 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/issues/:issueNumber/labels`, () => {
    const resultArray = [
      [getIssuesListLabelsOnIssue200Response(), { status: 200 }],
      [getIssuesListLabelsOnIssue301Response(), { status: 301 }],
      [getIssuesListLabelsOnIssue404Response(), { status: 404 }],
      [getIssuesListLabelsOnIssue410Response(), { status: 410 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/issues/:issueNumber/labels`, () => {
    const resultArray = [
      [getIssuesAddLabels200Response(), { status: 200 }],
      [getIssuesAddLabels301Response(), { status: 301 }],
      [getIssuesAddLabels404Response(), { status: 404 }],
      [getIssuesAddLabels410Response(), { status: 410 }],
      [getIssuesAddLabels422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/issues/:issueNumber/labels`, () => {
    const resultArray = [
      [getIssuesSetLabels200Response(), { status: 200 }],
      [getIssuesSetLabels301Response(), { status: 301 }],
      [getIssuesSetLabels404Response(), { status: 404 }],
      [getIssuesSetLabels410Response(), { status: 410 }],
      [getIssuesSetLabels422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/issues/:issueNumber/labels`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getIssuesRemoveAllLabels301Response(), { status: 301 }],
      [getIssuesRemoveAllLabels404Response(), { status: 404 }],
      [getIssuesRemoveAllLabels410Response(), { status: 410 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/issues/:issueNumber/labels/:name`, () => {
    const resultArray = [
      [getIssuesRemoveLabel200Response(), { status: 200 }],
      [getIssuesRemoveLabel301Response(), { status: 301 }],
      [getIssuesRemoveLabel404Response(), { status: 404 }],
      [getIssuesRemoveLabel410Response(), { status: 410 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/issues/:issueNumber/lock`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getIssuesLock403Response(), { status: 403 }],
      [getIssuesLock404Response(), { status: 404 }],
      [getIssuesLock410Response(), { status: 410 }],
      [getIssuesLock422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/issues/:issueNumber/lock`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getIssuesUnlock403Response(), { status: 403 }],
      [getIssuesUnlock404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/issues/:issueNumber/reactions`, () => {
    const resultArray = [
      [getReactionsListForIssue200Response(), { status: 200 }],
      [getReactionsListForIssue404Response(), { status: 404 }],
      [getReactionsListForIssue410Response(), { status: 410 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/issues/:issueNumber/reactions`, () => {
    const resultArray = [
      [getReactionsCreateForIssue200Response(), { status: 200 }],
      [getReactionsCreateForIssue201Response(), { status: 201 }],
      [getReactionsCreateForIssue422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/issues/:issueNumber/reactions/:reactionId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/issues/:issueNumber/timeline`, () => {
    const resultArray = [
      [getIssuesListEventsForTimeline200Response(), { status: 200 }],
      [getIssuesListEventsForTimeline404Response(), { status: 404 }],
      [getIssuesListEventsForTimeline410Response(), { status: 410 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/keys`, () => {
    const resultArray = [[getReposListDeployKeys200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/keys`, () => {
    const resultArray = [
      [getReposCreateDeployKey201Response(), { status: 201 }],
      [getReposCreateDeployKey422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/keys/:keyId`, () => {
    const resultArray = [
      [getReposGetDeployKey200Response(), { status: 200 }],
      [getReposGetDeployKey404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/keys/:keyId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/labels`, () => {
    const resultArray = [
      [getIssuesListLabelsForRepo200Response(), { status: 200 }],
      [getIssuesListLabelsForRepo404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/labels`, () => {
    const resultArray = [
      [getIssuesCreateLabel201Response(), { status: 201 }],
      [getIssuesCreateLabel404Response(), { status: 404 }],
      [getIssuesCreateLabel422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/labels/:name`, () => {
    const resultArray = [
      [getIssuesGetLabel200Response(), { status: 200 }],
      [getIssuesGetLabel404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/labels/:name`, () => {
    const resultArray = [[getIssuesUpdateLabel200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/labels/:name`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/languages`, () => {
    const resultArray = [[getReposListLanguages200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/lfs`, () => {
    const resultArray = [
      [getReposEnableLfsForRepo202Response(), { status: 202 }],
      [null, { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/lfs`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/license`, () => {
    const resultArray = [[getLicensesGetForRepo200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/merge-upstream`, () => {
    const resultArray = [
      [getReposMergeUpstream200Response(), { status: 200 }],
      [null, { status: 409 }],
      [null, { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/merges`, () => {
    const resultArray = [
      [getReposMerge201Response(), { status: 201 }],
      [null, { status: 204 }],
      [getReposMerge403Response(), { status: 403 }],
      [null, { status: 404 }],
      [null, { status: 409 }],
      [getReposMerge422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/milestones`, () => {
    const resultArray = [
      [getIssuesListMilestones200Response(), { status: 200 }],
      [getIssuesListMilestones404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/milestones`, () => {
    const resultArray = [
      [getIssuesCreateMilestone201Response(), { status: 201 }],
      [getIssuesCreateMilestone404Response(), { status: 404 }],
      [getIssuesCreateMilestone422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/milestones/:milestoneNumber`, () => {
    const resultArray = [
      [getIssuesGetMilestone200Response(), { status: 200 }],
      [getIssuesGetMilestone404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/milestones/:milestoneNumber`, () => {
    const resultArray = [[getIssuesUpdateMilestone200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/milestones/:milestoneNumber`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getIssuesDeleteMilestone404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/milestones/:milestoneNumber/labels`, () => {
    const resultArray = [[getIssuesListLabelsForMilestone200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/notifications`, () => {
    const resultArray = [[getActivityListRepoNotificationsForAuthenticatedUser200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/notifications`, () => {
    const resultArray = [
      [getActivityMarkRepoNotificationsAsRead202Response(), { status: 202 }],
      [null, { status: 205 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pages`, () => {
    const resultArray = [
      [getReposGetPages200Response(), { status: 200 }],
      [getReposGetPages404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/pages`, () => {
    const resultArray = [
      [getReposCreatePagesSite201Response(), { status: 201 }],
      [getReposCreatePagesSite409Response(), { status: 409 }],
      [getReposCreatePagesSite422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/pages`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getReposUpdateInformationAboutPagesSite400Response(), { status: 400 }],
      [getReposUpdateInformationAboutPagesSite409Response(), { status: 409 }],
      [getReposUpdateInformationAboutPagesSite422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/pages`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getReposDeletePagesSite404Response(), { status: 404 }],
      [getReposDeletePagesSite409Response(), { status: 409 }],
      [getReposDeletePagesSite422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pages/builds`, () => {
    const resultArray = [[getReposListPagesBuilds200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/pages/builds`, () => {
    const resultArray = [[getReposRequestPagesBuild201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pages/builds/latest`, () => {
    const resultArray = [[getReposGetLatestPagesBuild200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pages/builds/:buildId`, () => {
    const resultArray = [[getReposGetPagesBuild200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pre-receive-hooks`, () => {
    const resultArray = [[getEnterpriseAdminListPreReceiveHooksForRepo200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pre-receive-hooks/:preReceiveHookId`, () => {
    const resultArray = [[getEnterpriseAdminGetPreReceiveHookForRepo200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/pre-receive-hooks/:preReceiveHookId`, () => {
    const resultArray = [[getEnterpriseAdminUpdatePreReceiveHookEnforcementForRepo200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/pre-receive-hooks/:preReceiveHookId`, () => {
    const resultArray = [[getEnterpriseAdminRemovePreReceiveHookEnforcementForRepo200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/projects`, () => {
    const resultArray = [
      [getProjectsListForRepo200Response(), { status: 200 }],
      [getProjectsListForRepo401Response(), { status: 401 }],
      [getProjectsListForRepo403Response(), { status: 403 }],
      [getProjectsListForRepo404Response(), { status: 404 }],
      [getProjectsListForRepo410Response(), { status: 410 }],
      [getProjectsListForRepo422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/projects`, () => {
    const resultArray = [
      [getProjectsCreateForRepo201Response(), { status: 201 }],
      [getProjectsCreateForRepo401Response(), { status: 401 }],
      [getProjectsCreateForRepo403Response(), { status: 403 }],
      [getProjectsCreateForRepo404Response(), { status: 404 }],
      [getProjectsCreateForRepo410Response(), { status: 410 }],
      [getProjectsCreateForRepo422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pulls`, () => {
    const resultArray = [
      [getPullsList200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getPullsList422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/pulls`, () => {
    const resultArray = [
      [getPullsCreate201Response(), { status: 201 }],
      [getPullsCreate403Response(), { status: 403 }],
      [getPullsCreate422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pulls/comments`, () => {
    const resultArray = [[getPullsListReviewCommentsForRepo200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pulls/comments/:commentId`, () => {
    const resultArray = [
      [getPullsGetReviewComment200Response(), { status: 200 }],
      [getPullsGetReviewComment404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/pulls/comments/:commentId`, () => {
    const resultArray = [[getPullsUpdateReviewComment200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/pulls/comments/:commentId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getPullsDeleteReviewComment404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pulls/comments/:commentId/reactions`, () => {
    const resultArray = [
      [getReactionsListForPullRequestReviewComment200Response(), { status: 200 }],
      [getReactionsListForPullRequestReviewComment404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/pulls/comments/:commentId/reactions`, () => {
    const resultArray = [
      [getReactionsCreateForPullRequestReviewComment200Response(), { status: 200 }],
      [getReactionsCreateForPullRequestReviewComment201Response(), { status: 201 }],
      [getReactionsCreateForPullRequestReviewComment422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/pulls/comments/:commentId/reactions/:reactionId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber`, () => {
    const resultArray = [
      [getPullsGet200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getPullsGet404Response(), { status: 404 }],
      [getPullsGet500Response(), { status: 500 }],
      [getPullsGet503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber`, () => {
    const resultArray = [
      [getPullsUpdate200Response(), { status: 200 }],
      [getPullsUpdate403Response(), { status: 403 }],
      [getPullsUpdate422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/comments`, () => {
    const resultArray = [[getPullsListReviewComments200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/comments`, () => {
    const resultArray = [
      [getPullsCreateReviewComment201Response(), { status: 201 }],
      [getPullsCreateReviewComment403Response(), { status: 403 }],
      [getPullsCreateReviewComment422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/comments/:commentId/replies`, () => {
    const resultArray = [
      [getPullsCreateReplyForReviewComment201Response(), { status: 201 }],
      [getPullsCreateReplyForReviewComment404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/commits`, () => {
    const resultArray = [[getPullsListCommits200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/files`, () => {
    const resultArray = [
      [getPullsListFiles200Response(), { status: 200 }],
      [getPullsListFiles422Response(), { status: 422 }],
      [getPullsListFiles500Response(), { status: 500 }],
      [getPullsListFiles503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/merge`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/merge`, () => {
    const resultArray = [
      [getPullsMerge200Response(), { status: 200 }],
      [getPullsMerge403Response(), { status: 403 }],
      [getPullsMerge404Response(), { status: 404 }],
      [getPullsMerge405Response(), { status: 405 }],
      [getPullsMerge409Response(), { status: 409 }],
      [getPullsMerge422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers`, () => {
    const resultArray = [[getPullsListRequestedReviewers200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers`, () => {
    const resultArray = [
      [getPullsRequestReviewers201Response(), { status: 201 }],
      [getPullsRequestReviewers403Response(), { status: 403 }],
      [null, { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers`, () => {
    const resultArray = [
      [getPullsRemoveRequestedReviewers200Response(), { status: 200 }],
      [getPullsRemoveRequestedReviewers422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/reviews`, () => {
    const resultArray = [[getPullsListReviews200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/reviews`, () => {
    const resultArray = [
      [getPullsCreateReview200Response(), { status: 200 }],
      [getPullsCreateReview403Response(), { status: 403 }],
      [getPullsCreateReview422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId`, () => {
    const resultArray = [
      [getPullsGetReview200Response(), { status: 200 }],
      [getPullsGetReview404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId`, () => {
    const resultArray = [
      [getPullsUpdateReview200Response(), { status: 200 }],
      [getPullsUpdateReview422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId`, () => {
    const resultArray = [
      [getPullsDeletePendingReview200Response(), { status: 200 }],
      [getPullsDeletePendingReview404Response(), { status: 404 }],
      [getPullsDeletePendingReview422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/comments`, () => {
    const resultArray = [
      [getPullsListCommentsForReview200Response(), { status: 200 }],
      [getPullsListCommentsForReview404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/dismissals`, () => {
    const resultArray = [
      [getPullsDismissReview200Response(), { status: 200 }],
      [getPullsDismissReview404Response(), { status: 404 }],
      [getPullsDismissReview422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/events`, () => {
    const resultArray = [
      [getPullsSubmitReview200Response(), { status: 200 }],
      [getPullsSubmitReview403Response(), { status: 403 }],
      [getPullsSubmitReview404Response(), { status: 404 }],
      [getPullsSubmitReview422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/pulls/:pullNumber/update-branch`, () => {
    const resultArray = [
      [getPullsUpdateBranch202Response(), { status: 202 }],
      [getPullsUpdateBranch403Response(), { status: 403 }],
      [getPullsUpdateBranch422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/readme`, () => {
    const resultArray = [
      [getReposGetReadme200Response(), { status: 200 }],
      [getReposGetReadme404Response(), { status: 404 }],
      [getReposGetReadme422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/readme/:dir`, () => {
    const resultArray = [
      [getReposGetReadmeInDirectory200Response(), { status: 200 }],
      [getReposGetReadmeInDirectory404Response(), { status: 404 }],
      [getReposGetReadmeInDirectory422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/releases`, () => {
    const resultArray = [
      [getReposListReleases200Response(), { status: 200 }],
      [getReposListReleases404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/releases`, () => {
    const resultArray = [
      [getReposCreateRelease201Response(), { status: 201 }],
      [getReposCreateRelease422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/releases/assets/:assetId`, () => {
    const resultArray = [
      [getReposGetReleaseAsset200Response(), { status: 200 }],
      [null, { status: 302 }],
      [getReposGetReleaseAsset404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/releases/assets/:assetId`, () => {
    const resultArray = [[getReposUpdateReleaseAsset200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/releases/assets/:assetId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/releases/generate-notes`, () => {
    const resultArray = [
      [getReposGenerateReleaseNotes200Response(), { status: 200 }],
      [getReposGenerateReleaseNotes404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/releases/latest`, () => {
    const resultArray = [[getReposGetLatestRelease200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/releases/tags/:tag`, () => {
    const resultArray = [
      [getReposGetReleaseByTag200Response(), { status: 200 }],
      [getReposGetReleaseByTag404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/releases/:releaseId`, () => {
    const resultArray = [
      [getReposGetRelease200Response(), { status: 200 }],
      [getReposGetRelease404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/releases/:releaseId`, () => {
    const resultArray = [[getReposUpdateRelease200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/releases/:releaseId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/releases/:releaseId/assets`, () => {
    const resultArray = [[getReposListReleaseAssets200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/releases/:releaseId/assets`, () => {
    const resultArray = [
      [getReposUploadReleaseAsset201Response(), { status: 201 }],
      [null, { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/releases/:releaseId/reactions`, () => {
    const resultArray = [
      [getReactionsListForRelease200Response(), { status: 200 }],
      [getReactionsListForRelease404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/releases/:releaseId/reactions`, () => {
    const resultArray = [
      [getReactionsCreateForRelease200Response(), { status: 200 }],
      [getReactionsCreateForRelease201Response(), { status: 201 }],
      [getReactionsCreateForRelease422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/releases/:releaseId/reactions/:reactionId`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/secret-scanning/alerts`, () => {
    const resultArray = [
      [getSecretScanningListAlertsForRepo200Response(), { status: 200 }],
      [null, { status: 404 }],
      [getSecretScanningListAlertsForRepo503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/secret-scanning/alerts/:alertNumber`, () => {
    const resultArray = [
      [getSecretScanningGetAlert200Response(), { status: 200 }],
      [null, { status: 304 }],
      [null, { status: 404 }],
      [getSecretScanningGetAlert503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/repos/:owner/:repo/secret-scanning/alerts/:alertNumber`, () => {
    const resultArray = [
      [getSecretScanningUpdateAlert200Response(), { status: 200 }],
      [null, { status: 404 }],
      [null, { status: 422 }],
      [getSecretScanningUpdateAlert503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/secret-scanning/alerts/:alertNumber/locations`, () => {
    const resultArray = [
      [getSecretScanningListLocationsForAlert200Response(), { status: 200 }],
      [null, { status: 404 }],
      [getSecretScanningListLocationsForAlert503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/stargazers`, () => {
    const resultArray = [
      [getActivityListStargazersForRepo200Response(), { status: 200 }],
      [getActivityListStargazersForRepo422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/stats/code_frequency`, () => {
    const resultArray = [
      [getReposGetCodeFrequencyStats200Response(), { status: 200 }],
      [getReposGetCodeFrequencyStats202Response(), { status: 202 }],
      [null, { status: 204 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/stats/commit_activity`, () => {
    const resultArray = [
      [getReposGetCommitActivityStats200Response(), { status: 200 }],
      [getReposGetCommitActivityStats202Response(), { status: 202 }],
      [null, { status: 204 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/stats/contributors`, () => {
    const resultArray = [
      [getReposGetContributorsStats200Response(), { status: 200 }],
      [getReposGetContributorsStats202Response(), { status: 202 }],
      [null, { status: 204 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/stats/participation`, () => {
    const resultArray = [
      [getReposGetParticipationStats200Response(), { status: 200 }],
      [getReposGetParticipationStats404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/stats/punch_card`, () => {
    const resultArray = [
      [getReposGetPunchCardStats200Response(), { status: 200 }],
      [null, { status: 204 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/statuses/:sha`, () => {
    const resultArray = [[getReposCreateCommitStatus201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/subscribers`, () => {
    const resultArray = [[getActivityListWatchersForRepo200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/subscription`, () => {
    const resultArray = [
      [getActivityGetRepoSubscription200Response(), { status: 200 }],
      [getActivityGetRepoSubscription403Response(), { status: 403 }],
      [null, { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/subscription`, () => {
    const resultArray = [[getActivitySetRepoSubscription200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repos/:owner/:repo/subscription`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/tags`, () => {
    const resultArray = [[getReposListTags200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/tarball/:ref`, () => {
    const resultArray = [[null, { status: 302 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/teams`, () => {
    const resultArray = [[getReposListTeams200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/topics`, () => {
    const resultArray = [
      [getReposGetAllTopics200Response(), { status: 200 }],
      [getReposGetAllTopics404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repos/:owner/:repo/topics`, () => {
    const resultArray = [
      [getReposReplaceAllTopics200Response(), { status: 200 }],
      [getReposReplaceAllTopics404Response(), { status: 404 }],
      [getReposReplaceAllTopics422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:owner/:repo/transfer`, () => {
    const resultArray = [[getReposTransfer202Response(), { status: 202 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repos/:owner/:repo/zipball/:ref`, () => {
    const resultArray = [[null, { status: 302 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/repos/:templateOwner/:templateRepo/generate`, () => {
    const resultArray = [[getReposCreateUsingTemplate201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repositories`, () => {
    const resultArray = [
      [getReposListPublic200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getReposListPublic422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repositories/:repositoryId/environments/:environmentName/secrets`, () => {
    const resultArray = [[getActionsListEnvironmentSecrets200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repositories/:repositoryId/environments/:environmentName/secrets/public-key`, () => {
    const resultArray = [[getActionsGetEnvironmentPublicKey200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/repositories/:repositoryId/environments/:environmentName/secrets/:secretName`, () => {
    const resultArray = [[getActionsGetEnvironmentSecret200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/repositories/:repositoryId/environments/:environmentName/secrets/:secretName`, () => {
    const resultArray = [
      [getActionsCreateOrUpdateEnvironmentSecret201Response(), { status: 201 }],
      [null, { status: 204 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/repositories/:repositoryId/environments/:environmentName/secrets/:secretName`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/search/code`, () => {
    const resultArray = [
      [getSearchCode200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getSearchCode403Response(), { status: 403 }],
      [getSearchCode422Response(), { status: 422 }],
      [getSearchCode503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/search/commits`, () => {
    const resultArray = [
      [getSearchCommits200Response(), { status: 200 }],
      [null, { status: 304 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/search/issues`, () => {
    const resultArray = [
      [getSearchIssuesAndPullRequests200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getSearchIssuesAndPullRequests403Response(), { status: 403 }],
      [getSearchIssuesAndPullRequests422Response(), { status: 422 }],
      [getSearchIssuesAndPullRequests503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/search/labels`, () => {
    const resultArray = [
      [getSearchLabels200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getSearchLabels403Response(), { status: 403 }],
      [getSearchLabels404Response(), { status: 404 }],
      [getSearchLabels422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/search/repositories`, () => {
    const resultArray = [
      [getSearchRepos200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getSearchRepos422Response(), { status: 422 }],
      [getSearchRepos503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/search/topics`, () => {
    const resultArray = [
      [getSearchTopics200Response(), { status: 200 }],
      [null, { status: 304 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/search/users`, () => {
    const resultArray = [
      [getSearchUsers200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getSearchUsers422Response(), { status: 422 }],
      [getSearchUsers503Response(), { status: 503 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/setup/api/configcheck`, () => {
    const resultArray = [[getEnterpriseAdminGetConfigurationStatus200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/setup/api/configure`, () => {
    const resultArray = [[null, { status: 202 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/setup/api/maintenance`, () => {
    const resultArray = [[getEnterpriseAdminGetMaintenanceStatus200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/setup/api/maintenance`, () => {
    const resultArray = [[getEnterpriseAdminEnableOrDisableMaintenanceMode200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/setup/api/settings`, () => {
    const resultArray = [[getEnterpriseAdminGetSettings200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/setup/api/settings`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/setup/api/settings/authorized-keys`, () => {
    const resultArray = [[getEnterpriseAdminGetAllAuthorizedSshKeys200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/setup/api/settings/authorized-keys`, () => {
    const resultArray = [[getEnterpriseAdminAddAuthorizedSshKey201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/setup/api/settings/authorized-keys`, () => {
    const resultArray = [[getEnterpriseAdminRemoveAuthorizedSshKey200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/setup/api/start`, () => {
    const resultArray = [[null, { status: 202 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/setup/api/upgrade`, () => {
    const resultArray = [[null, { status: 202 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/teams/:teamId`, () => {
    const resultArray = [
      [getTeamsGetLegacy200Response(), { status: 200 }],
      [getTeamsGetLegacy404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/teams/:teamId`, () => {
    const resultArray = [
      [getTeamsUpdateLegacy200Response(), { status: 200 }],
      [getTeamsUpdateLegacy201Response(), { status: 201 }],
      [getTeamsUpdateLegacy403Response(), { status: 403 }],
      [getTeamsUpdateLegacy404Response(), { status: 404 }],
      [getTeamsUpdateLegacy422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/teams/:teamId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getTeamsDeleteLegacy404Response(), { status: 404 }],
      [getTeamsDeleteLegacy422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/teams/:teamId/discussions`, () => {
    const resultArray = [[getTeamsListDiscussionsLegacy200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/teams/:teamId/discussions`, () => {
    const resultArray = [[getTeamsCreateDiscussionLegacy201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/teams/:teamId/discussions/:discussionNumber`, () => {
    const resultArray = [[getTeamsGetDiscussionLegacy200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/teams/:teamId/discussions/:discussionNumber`, () => {
    const resultArray = [[getTeamsUpdateDiscussionLegacy200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/teams/:teamId/discussions/:discussionNumber`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/teams/:teamId/discussions/:discussionNumber/comments`, () => {
    const resultArray = [[getTeamsListDiscussionCommentsLegacy200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/teams/:teamId/discussions/:discussionNumber/comments`, () => {
    const resultArray = [[getTeamsCreateDiscussionCommentLegacy201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber`, () => {
    const resultArray = [[getTeamsGetDiscussionCommentLegacy200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber`, () => {
    const resultArray = [[getTeamsUpdateDiscussionCommentLegacy200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber/reactions`, () => {
    const resultArray = [[getReactionsListForTeamDiscussionCommentLegacy200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber/reactions`, () => {
    const resultArray = [[getReactionsCreateForTeamDiscussionCommentLegacy201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/teams/:teamId/discussions/:discussionNumber/reactions`, () => {
    const resultArray = [[getReactionsListForTeamDiscussionLegacy200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/teams/:teamId/discussions/:discussionNumber/reactions`, () => {
    const resultArray = [[getReactionsCreateForTeamDiscussionLegacy201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/teams/:teamId/members`, () => {
    const resultArray = [
      [getTeamsListMembersLegacy200Response(), { status: 200 }],
      [getTeamsListMembersLegacy404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/teams/:teamId/members/:username`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/teams/:teamId/members/:username`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getTeamsAddMemberLegacy403Response(), { status: 403 }],
      [null, { status: 404 }],
      [null, { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/teams/:teamId/members/:username`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/teams/:teamId/memberships/:username`, () => {
    const resultArray = [
      [getTeamsGetMembershipForUserLegacy200Response(), { status: 200 }],
      [getTeamsGetMembershipForUserLegacy404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/teams/:teamId/memberships/:username`, () => {
    const resultArray = [
      [getTeamsAddOrUpdateMembershipForUserLegacy200Response(), { status: 200 }],
      [null, { status: 403 }],
      [getTeamsAddOrUpdateMembershipForUserLegacy404Response(), { status: 404 }],
      [null, { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/teams/:teamId/memberships/:username`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/teams/:teamId/projects`, () => {
    const resultArray = [
      [getTeamsListProjectsLegacy200Response(), { status: 200 }],
      [getTeamsListProjectsLegacy404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/teams/:teamId/projects/:projectId`, () => {
    const resultArray = [
      [getTeamsCheckPermissionsForProjectLegacy200Response(), { status: 200 }],
      [null, { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/teams/:teamId/projects/:projectId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getTeamsAddOrUpdateProjectPermissionsLegacy403Response(), { status: 403 }],
      [getTeamsAddOrUpdateProjectPermissionsLegacy404Response(), { status: 404 }],
      [getTeamsAddOrUpdateProjectPermissionsLegacy422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/teams/:teamId/projects/:projectId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getTeamsRemoveProjectLegacy404Response(), { status: 404 }],
      [getTeamsRemoveProjectLegacy422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/teams/:teamId/repos`, () => {
    const resultArray = [
      [getTeamsListReposLegacy200Response(), { status: 200 }],
      [getTeamsListReposLegacy404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/teams/:teamId/repos/:owner/:repo`, () => {
    const resultArray = [
      [getTeamsCheckPermissionsForRepoLegacy200Response(), { status: 200 }],
      [null, { status: 204 }],
      [null, { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/teams/:teamId/repos/:owner/:repo`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [getTeamsAddOrUpdateRepoPermissionsLegacy403Response(), { status: 403 }],
      [getTeamsAddOrUpdateRepoPermissionsLegacy422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/teams/:teamId/repos/:owner/:repo`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/teams/:teamId/teams`, () => {
    const resultArray = [
      [getTeamsListChildLegacy200Response(), { status: 200 }],
      [getTeamsListChildLegacy403Response(), { status: 403 }],
      [getTeamsListChildLegacy404Response(), { status: 404 }],
      [getTeamsListChildLegacy422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user`, () => {
    const resultArray = [
      [getUsersGetAuthenticated200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getUsersGetAuthenticated401Response(), { status: 401 }],
      [getUsersGetAuthenticated403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/user`, () => {
    const resultArray = [
      [getUsersUpdateAuthenticated200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getUsersUpdateAuthenticated401Response(), { status: 401 }],
      [getUsersUpdateAuthenticated403Response(), { status: 403 }],
      [getUsersUpdateAuthenticated404Response(), { status: 404 }],
      [getUsersUpdateAuthenticated422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/emails`, () => {
    const resultArray = [
      [getUsersListEmailsForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getUsersListEmailsForAuthenticatedUser401Response(), { status: 401 }],
      [getUsersListEmailsForAuthenticatedUser403Response(), { status: 403 }],
      [getUsersListEmailsForAuthenticatedUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/user/emails`, () => {
    const resultArray = [
      [getUsersAddEmailForAuthenticatedUser201Response(), { status: 201 }],
      [null, { status: 304 }],
      [getUsersAddEmailForAuthenticatedUser401Response(), { status: 401 }],
      [getUsersAddEmailForAuthenticatedUser403Response(), { status: 403 }],
      [getUsersAddEmailForAuthenticatedUser404Response(), { status: 404 }],
      [getUsersAddEmailForAuthenticatedUser422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/user/emails`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getUsersDeleteEmailForAuthenticatedUser401Response(), { status: 401 }],
      [getUsersDeleteEmailForAuthenticatedUser403Response(), { status: 403 }],
      [getUsersDeleteEmailForAuthenticatedUser404Response(), { status: 404 }],
      [getUsersDeleteEmailForAuthenticatedUser422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/followers`, () => {
    const resultArray = [
      [getUsersListFollowersForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getUsersListFollowersForAuthenticatedUser401Response(), { status: 401 }],
      [getUsersListFollowersForAuthenticatedUser403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/following`, () => {
    const resultArray = [
      [getUsersListFollowedByAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getUsersListFollowedByAuthenticatedUser401Response(), { status: 401 }],
      [getUsersListFollowedByAuthenticatedUser403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/following/:username`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getUsersCheckPersonIsFollowedByAuthenticated401Response(), { status: 401 }],
      [getUsersCheckPersonIsFollowedByAuthenticated403Response(), { status: 403 }],
      [getUsersCheckPersonIsFollowedByAuthenticated404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/user/following/:username`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getUsersFollow401Response(), { status: 401 }],
      [getUsersFollow403Response(), { status: 403 }],
      [getUsersFollow404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/user/following/:username`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getUsersUnfollow401Response(), { status: 401 }],
      [getUsersUnfollow403Response(), { status: 403 }],
      [getUsersUnfollow404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/gpg_keys`, () => {
    const resultArray = [
      [getUsersListGpgKeysForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getUsersListGpgKeysForAuthenticatedUser401Response(), { status: 401 }],
      [getUsersListGpgKeysForAuthenticatedUser403Response(), { status: 403 }],
      [getUsersListGpgKeysForAuthenticatedUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/user/gpg_keys`, () => {
    const resultArray = [
      [getUsersCreateGpgKeyForAuthenticatedUser201Response(), { status: 201 }],
      [null, { status: 304 }],
      [getUsersCreateGpgKeyForAuthenticatedUser401Response(), { status: 401 }],
      [getUsersCreateGpgKeyForAuthenticatedUser403Response(), { status: 403 }],
      [getUsersCreateGpgKeyForAuthenticatedUser404Response(), { status: 404 }],
      [getUsersCreateGpgKeyForAuthenticatedUser422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/gpg_keys/:gpgKeyId`, () => {
    const resultArray = [
      [getUsersGetGpgKeyForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getUsersGetGpgKeyForAuthenticatedUser401Response(), { status: 401 }],
      [getUsersGetGpgKeyForAuthenticatedUser403Response(), { status: 403 }],
      [getUsersGetGpgKeyForAuthenticatedUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/user/gpg_keys/:gpgKeyId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getUsersDeleteGpgKeyForAuthenticatedUser401Response(), { status: 401 }],
      [getUsersDeleteGpgKeyForAuthenticatedUser403Response(), { status: 403 }],
      [getUsersDeleteGpgKeyForAuthenticatedUser404Response(), { status: 404 }],
      [getUsersDeleteGpgKeyForAuthenticatedUser422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/installations`, () => {
    const resultArray = [
      [getAppsListInstallationsForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getAppsListInstallationsForAuthenticatedUser401Response(), { status: 401 }],
      [getAppsListInstallationsForAuthenticatedUser403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/installations/:installationId/repositories`, () => {
    const resultArray = [
      [getAppsListInstallationReposForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getAppsListInstallationReposForAuthenticatedUser403Response(), { status: 403 }],
      [getAppsListInstallationReposForAuthenticatedUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/user/installations/:installationId/repositories/:repositoryId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getAppsAddRepoToInstallationForAuthenticatedUser403Response(), { status: 403 }],
      [getAppsAddRepoToInstallationForAuthenticatedUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/user/installations/:installationId/repositories/:repositoryId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getAppsRemoveRepoFromInstallationForAuthenticatedUser403Response(), { status: 403 }],
      [getAppsRemoveRepoFromInstallationForAuthenticatedUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/issues`, () => {
    const resultArray = [
      [getIssuesListForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getIssuesListForAuthenticatedUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/keys`, () => {
    const resultArray = [
      [getUsersListPublicSshKeysForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getUsersListPublicSshKeysForAuthenticatedUser401Response(), { status: 401 }],
      [getUsersListPublicSshKeysForAuthenticatedUser403Response(), { status: 403 }],
      [getUsersListPublicSshKeysForAuthenticatedUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/user/keys`, () => {
    const resultArray = [
      [getUsersCreatePublicSshKeyForAuthenticatedUser201Response(), { status: 201 }],
      [null, { status: 304 }],
      [getUsersCreatePublicSshKeyForAuthenticatedUser401Response(), { status: 401 }],
      [getUsersCreatePublicSshKeyForAuthenticatedUser403Response(), { status: 403 }],
      [getUsersCreatePublicSshKeyForAuthenticatedUser404Response(), { status: 404 }],
      [getUsersCreatePublicSshKeyForAuthenticatedUser422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/keys/:keyId`, () => {
    const resultArray = [
      [getUsersGetPublicSshKeyForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getUsersGetPublicSshKeyForAuthenticatedUser401Response(), { status: 401 }],
      [getUsersGetPublicSshKeyForAuthenticatedUser403Response(), { status: 403 }],
      [getUsersGetPublicSshKeyForAuthenticatedUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/user/keys/:keyId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getUsersDeletePublicSshKeyForAuthenticatedUser401Response(), { status: 401 }],
      [getUsersDeletePublicSshKeyForAuthenticatedUser403Response(), { status: 403 }],
      [getUsersDeletePublicSshKeyForAuthenticatedUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/memberships/orgs`, () => {
    const resultArray = [
      [getOrgsListMembershipsForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getOrgsListMembershipsForAuthenticatedUser401Response(), { status: 401 }],
      [getOrgsListMembershipsForAuthenticatedUser403Response(), { status: 403 }],
      [getOrgsListMembershipsForAuthenticatedUser422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/memberships/orgs/:org`, () => {
    const resultArray = [
      [getOrgsGetMembershipForAuthenticatedUser200Response(), { status: 200 }],
      [getOrgsGetMembershipForAuthenticatedUser403Response(), { status: 403 }],
      [getOrgsGetMembershipForAuthenticatedUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/user/memberships/orgs/:org`, () => {
    const resultArray = [
      [getOrgsUpdateMembershipForAuthenticatedUser200Response(), { status: 200 }],
      [getOrgsUpdateMembershipForAuthenticatedUser403Response(), { status: 403 }],
      [getOrgsUpdateMembershipForAuthenticatedUser404Response(), { status: 404 }],
      [getOrgsUpdateMembershipForAuthenticatedUser422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/orgs`, () => {
    const resultArray = [
      [getOrgsListForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getOrgsListForAuthenticatedUser401Response(), { status: 401 }],
      [getOrgsListForAuthenticatedUser403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/user/projects`, () => {
    const resultArray = [
      [getProjectsCreateForAuthenticatedUser201Response(), { status: 201 }],
      [null, { status: 304 }],
      [getProjectsCreateForAuthenticatedUser401Response(), { status: 401 }],
      [getProjectsCreateForAuthenticatedUser403Response(), { status: 403 }],
      [getProjectsCreateForAuthenticatedUser422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/public_emails`, () => {
    const resultArray = [
      [getUsersListPublicEmailsForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getUsersListPublicEmailsForAuthenticatedUser401Response(), { status: 401 }],
      [getUsersListPublicEmailsForAuthenticatedUser403Response(), { status: 403 }],
      [getUsersListPublicEmailsForAuthenticatedUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/repos`, () => {
    const resultArray = [
      [getReposListForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getReposListForAuthenticatedUser401Response(), { status: 401 }],
      [getReposListForAuthenticatedUser403Response(), { status: 403 }],
      [getReposListForAuthenticatedUser422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/user/repos`, () => {
    const resultArray = [
      [getReposCreateForAuthenticatedUser201Response(), { status: 201 }],
      [null, { status: 304 }],
      [getReposCreateForAuthenticatedUser400Response(), { status: 400 }],
      [getReposCreateForAuthenticatedUser401Response(), { status: 401 }],
      [getReposCreateForAuthenticatedUser403Response(), { status: 403 }],
      [getReposCreateForAuthenticatedUser404Response(), { status: 404 }],
      [getReposCreateForAuthenticatedUser422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/repository_invitations`, () => {
    const resultArray = [
      [getReposListInvitationsForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getReposListInvitationsForAuthenticatedUser401Response(), { status: 401 }],
      [getReposListInvitationsForAuthenticatedUser403Response(), { status: 403 }],
      [getReposListInvitationsForAuthenticatedUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/user/repository_invitations/:invitationId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getReposAcceptInvitationForAuthenticatedUser403Response(), { status: 403 }],
      [getReposAcceptInvitationForAuthenticatedUser404Response(), { status: 404 }],
      [getReposAcceptInvitationForAuthenticatedUser409Response(), { status: 409 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/user/repository_invitations/:invitationId`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getReposDeclineInvitationForAuthenticatedUser403Response(), { status: 403 }],
      [getReposDeclineInvitationForAuthenticatedUser404Response(), { status: 404 }],
      [getReposDeclineInvitationForAuthenticatedUser409Response(), { status: 409 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/starred`, () => {
    const resultArray = [
      [getActivityListReposStarredByAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getActivityListReposStarredByAuthenticatedUser401Response(), { status: 401 }],
      [getActivityListReposStarredByAuthenticatedUser403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/starred/:owner/:repo`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getActivityCheckRepoIsStarredByAuthenticatedUser401Response(), { status: 401 }],
      [getActivityCheckRepoIsStarredByAuthenticatedUser403Response(), { status: 403 }],
      [getActivityCheckRepoIsStarredByAuthenticatedUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/user/starred/:owner/:repo`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getActivityStarRepoForAuthenticatedUser401Response(), { status: 401 }],
      [getActivityStarRepoForAuthenticatedUser403Response(), { status: 403 }],
      [getActivityStarRepoForAuthenticatedUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/user/starred/:owner/:repo`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 304 }],
      [getActivityUnstarRepoForAuthenticatedUser401Response(), { status: 401 }],
      [getActivityUnstarRepoForAuthenticatedUser403Response(), { status: 403 }],
      [getActivityUnstarRepoForAuthenticatedUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/subscriptions`, () => {
    const resultArray = [
      [getActivityListWatchedReposForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getActivityListWatchedReposForAuthenticatedUser401Response(), { status: 401 }],
      [getActivityListWatchedReposForAuthenticatedUser403Response(), { status: 403 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user/teams`, () => {
    const resultArray = [
      [getTeamsListForAuthenticatedUser200Response(), { status: 200 }],
      [null, { status: 304 }],
      [getTeamsListForAuthenticatedUser403Response(), { status: 403 }],
      [getTeamsListForAuthenticatedUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users`, () => {
    const resultArray = [
      [getUsersList200Response(), { status: 200 }],
      [null, { status: 304 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username`, () => {
    const resultArray = [
      [getUsersGetByUsername200Response(), { status: 200 }],
      [getUsersGetByUsername404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/events`, () => {
    const resultArray = [[getActivityListEventsForAuthenticatedUser200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/events/orgs/:org`, () => {
    const resultArray = [[getActivityListOrgEventsForAuthenticatedUser200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/events/public`, () => {
    const resultArray = [[getActivityListPublicEventsForUser200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/followers`, () => {
    const resultArray = [[getUsersListFollowersForUser200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/following`, () => {
    const resultArray = [[getUsersListFollowingForUser200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/following/:targetUser`, () => {
    const resultArray = [
      [null, { status: 204 }],
      [null, { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/gists`, () => {
    const resultArray = [
      [getGistsListForUser200Response(), { status: 200 }],
      [getGistsListForUser422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/gpg_keys`, () => {
    const resultArray = [[getUsersListGpgKeysForUser200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/hovercard`, () => {
    const resultArray = [
      [getUsersGetContextForUser200Response(), { status: 200 }],
      [getUsersGetContextForUser404Response(), { status: 404 }],
      [getUsersGetContextForUser422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/installation`, () => {
    const resultArray = [[getAppsGetUserInstallation200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/keys`, () => {
    const resultArray = [[getUsersListPublicKeysForUser200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/orgs`, () => {
    const resultArray = [[getOrgsListForUser200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/projects`, () => {
    const resultArray = [
      [getProjectsListForUser200Response(), { status: 200 }],
      [getProjectsListForUser422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/received_events`, () => {
    const resultArray = [[getActivityListReceivedEventsForUser200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/received_events/public`, () => {
    const resultArray = [[getActivityListReceivedPublicEventsForUser200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/repos`, () => {
    const resultArray = [[getReposListForUser200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/users/:username/site_admin`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/users/:username/site_admin`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/starred`, () => {
    const resultArray = [[getActivityListReposStarredByUser200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:username/subscriptions`, () => {
    const resultArray = [[getActivityListReposWatchedByUser200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/users/:username/suspended`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/users/:username/suspended`, () => {
    const resultArray = [[null, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/zen`, () => {
    const resultArray = [[getMetaGetZen200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
];

export function getMetaRoot200Response() {
  return {
    current_user_url: faker.internet.url(),
    current_user_authorizations_html_url: faker.internet.url(),
    authorizations_url: faker.internet.url(),
    code_search_url: faker.internet.url(),
    commit_search_url: faker.internet.url(),
    emails_url: faker.internet.url(),
    emojis_url: faker.internet.url(),
    events_url: faker.internet.url(),
    feeds_url: faker.internet.url(),
    followers_url: faker.internet.url(),
    following_url: faker.internet.url(),
    gists_url: faker.internet.url(),
    hub_url: faker.internet.url(),
    issue_search_url: faker.internet.url(),
    issues_url: faker.internet.url(),
    keys_url: faker.internet.url(),
    label_search_url: faker.internet.url(),
    notifications_url: faker.internet.url(),
    organization_url: faker.internet.url(),
    organization_repositories_url: faker.internet.url(),
    organization_teams_url: faker.internet.url(),
    public_gists_url: faker.internet.url(),
    rate_limit_url: faker.internet.url(),
    repository_url: faker.internet.url(),
    repository_search_url: faker.internet.url(),
    current_user_repositories_url: faker.internet.url(),
    starred_url: faker.internet.url(),
    starred_gists_url: faker.internet.url(),
    topic_search_url: faker.internet.url(),
    user_url: faker.internet.url(),
    user_organizations_url: faker.internet.url(),
    user_repositories_url: faker.internet.url(),
    user_search_url: faker.internet.url(),
  };
}

export function getEnterpriseAdminListGlobalWebhooks200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    type: faker.lorem.slug(1),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    active: faker.datatype.boolean(),
    events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    config: {
      url: faker.internet.url(),
      content_type: faker.lorem.slug(1),
      insecure_ssl: faker.lorem.slug(1),
      secret: faker.lorem.slug(1),
    },
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    url: faker.internet.url(),
    ping_url: faker.internet.url(),
  }));
}

export function getEnterpriseAdminCreateGlobalWebhook201Response() {
  return {
    type: faker.lorem.slug(1),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    active: faker.datatype.boolean(),
    events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    config: {
      url: faker.internet.url(),
      content_type: faker.lorem.slug(1),
      insecure_ssl: faker.lorem.slug(1),
      secret: faker.lorem.slug(1),
    },
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    url: faker.internet.url(),
    ping_url: faker.internet.url(),
  };
}

export function getEnterpriseAdminGetGlobalWebhook200Response() {
  return {
    type: faker.lorem.slug(1),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    active: faker.datatype.boolean(),
    events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    config: {
      url: faker.internet.url(),
      content_type: faker.lorem.slug(1),
      insecure_ssl: faker.lorem.slug(1),
      secret: faker.lorem.slug(1),
    },
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    url: faker.internet.url(),
    ping_url: faker.internet.url(),
  };
}

export function getEnterpriseAdminUpdateGlobalWebhook200Response() {
  return {
    type: faker.lorem.slug(1),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    active: faker.datatype.boolean(),
    events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    config: {
      url: faker.internet.url(),
      content_type: faker.lorem.slug(1),
      insecure_ssl: faker.lorem.slug(1),
    },
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    url: faker.internet.url(),
    ping_url: faker.internet.url(),
  };
}

export function getEnterpriseAdminListPublicKeys200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    key: faker.lorem.slug(1),
    user_id: faker.number.int({ min: undefined, max: undefined }),
    repository_id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    title: faker.lorem.slug(1),
    read_only: faker.datatype.boolean(),
    verified: faker.datatype.boolean(),
    created_at: faker.date.past(),
  }));
}

export function getEnterpriseAdminUpdateLdapMappingForTeam200Response() {
  return {
    ldap_dn: faker.lorem.slug(1),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    name: faker.person.fullName(),
    slug: faker.lorem.slug(1),
    description: faker.lorem.slug(1),
    privacy: faker.lorem.slug(1),
    permission: faker.lorem.slug(1),
    members_url: faker.internet.url(),
    repositories_url: faker.internet.url(),
    parent: null,
  };
}

export function getEnterpriseAdminSyncLdapMappingForTeam201Response() {
  return {
    status: faker.lorem.slug(1),
  };
}

export function getEnterpriseAdminUpdateLdapMappingForUser200Response() {
  return {
    ldap_dn: faker.lorem.slug(1),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    name: 'monalisa octocat',
    company: 'GitHub',
    blog: 'https://github.com/blog',
    location: 'San Francisco',
    email: 'octocat@github.com',
    hireable: faker.datatype.boolean(),
    bio: 'There once was...',
    twitter_username: 'monalisa',
    public_repos: 2,
    public_gists: 1,
    followers: 20,
    following: faker.number.int({ min: undefined, max: undefined }),
    created_at: '2008-01-14T04:33:35Z',
    updated_at: '2008-01-14T04:33:35Z',
    private_gists: 81,
    total_private_repos: 100,
    owned_private_repos: 100,
    disk_usage: 10000,
    collaborators: 8,
    two_factor_authentication: true,
    plan: {
      collaborators: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      space: faker.number.int({ min: undefined, max: undefined }),
      private_repos: faker.number.int({ min: undefined, max: undefined }),
    },
    suspended_at: faker.date.past(),
    business_plus: faker.datatype.boolean(),
  };
}

export function getEnterpriseAdminSyncLdapMappingForUser201Response() {
  return {
    status: faker.lorem.slug(1),
  };
}

export function getEnterpriseAdminCreateOrg201Response() {
  return {
    login: 'github',
    id: 1,
    node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
    url: 'https://api.github.com/orgs/github',
    repos_url: 'https://api.github.com/orgs/github/repos',
    events_url: 'https://api.github.com/orgs/github/events',
    hooks_url: 'https://api.github.com/orgs/github/hooks',
    issues_url: 'https://api.github.com/orgs/github/issues',
    members_url: 'https://api.github.com/orgs/github/members{/member}',
    public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    description: 'A great organization',
  };
}

export function getEnterpriseAdminUpdateOrgName202Response() {
  return {
    message: faker.lorem.slug(1),
    url: faker.internet.url(),
  };
}

export function getEnterpriseAdminListPreReceiveEnvironments200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    image_url: faker.image.image(),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    default_environment: faker.datatype.boolean(),
    created_at: faker.date.past(),
    hooks_count: faker.number.int({ min: undefined, max: undefined }),
    download: {
      url: faker.internet.url(),
      state: faker.lorem.slug(1),
      downloaded_at: faker.date.past(),
      message: faker.lorem.slug(1),
    },
  }));
}

export function getEnterpriseAdminCreatePreReceiveEnvironment201Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    image_url: faker.image.image(),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    default_environment: faker.datatype.boolean(),
    created_at: faker.date.past(),
    hooks_count: faker.number.int({ min: undefined, max: undefined }),
    download: {
      url: faker.internet.url(),
      state: faker.lorem.slug(1),
      downloaded_at: faker.date.past(),
      message: faker.lorem.slug(1),
    },
  };
}

export function getEnterpriseAdminGetPreReceiveEnvironment200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    image_url: faker.image.image(),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    default_environment: faker.datatype.boolean(),
    created_at: faker.date.past(),
    hooks_count: faker.number.int({ min: undefined, max: undefined }),
    download: {
      url: faker.internet.url(),
      state: faker.lorem.slug(1),
      downloaded_at: faker.date.past(),
      message: faker.lorem.slug(1),
    },
  };
}

export function getEnterpriseAdminUpdatePreReceiveEnvironment200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    image_url: faker.image.image(),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    default_environment: faker.datatype.boolean(),
    created_at: faker.date.past(),
    hooks_count: faker.number.int({ min: undefined, max: undefined }),
    download: {
      url: faker.internet.url(),
      state: faker.lorem.slug(1),
      downloaded_at: faker.date.past(),
      message: faker.lorem.slug(1),
    },
  };
}

export function getEnterpriseAdminUpdatePreReceiveEnvironment422Response() {
  return {
    message: faker.lorem.slug(1),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
    })),
  };
}

export function getEnterpriseAdminDeletePreReceiveEnvironment422Response() {
  return {
    message: faker.lorem.slug(1),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
    })),
  };
}

export function getEnterpriseAdminStartPreReceiveEnvironmentDownload202Response() {
  return {
    url: faker.internet.url(),
    state: faker.lorem.slug(1),
    downloaded_at: faker.date.past(),
    message: faker.lorem.slug(1),
  };
}

export function getEnterpriseAdminStartPreReceiveEnvironmentDownload422Response() {
  return {
    message: faker.lorem.slug(1),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
    })),
  };
}

export function getEnterpriseAdminGetDownloadStatusForPreReceiveEnvironment200Response() {
  return {
    url: faker.internet.url(),
    state: faker.lorem.slug(1),
    downloaded_at: faker.date.past(),
    message: faker.lorem.slug(1),
  };
}

export function getEnterpriseAdminListPreReceiveHooks200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    enforcement: faker.lorem.slug(1),
    script: faker.lorem.slug(1),
    script_repository: {
      id: faker.number.int({ min: undefined, max: undefined }),
      full_name: faker.person.fullName(),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
    },
    environment: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      image_url: faker.image.image(),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
      default_environment: faker.datatype.boolean(),
      created_at: faker.date.past(),
      hooks_count: faker.number.int({ min: undefined, max: undefined }),
      download: {
        url: faker.internet.url(),
        state: faker.lorem.slug(1),
        downloaded_at: faker.date.past(),
        message: faker.lorem.slug(1),
      },
    },
    allow_downstream_configuration: faker.datatype.boolean(),
  }));
}

export function getEnterpriseAdminCreatePreReceiveHook201Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    enforcement: faker.lorem.slug(1),
    script: faker.lorem.slug(1),
    script_repository: {
      id: faker.number.int({ min: undefined, max: undefined }),
      full_name: faker.person.fullName(),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
    },
    environment: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      image_url: faker.image.image(),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
      default_environment: faker.datatype.boolean(),
      created_at: faker.date.past(),
      hooks_count: faker.number.int({ min: undefined, max: undefined }),
      download: {
        url: faker.internet.url(),
        state: faker.lorem.slug(1),
        downloaded_at: faker.date.past(),
        message: faker.lorem.slug(1),
      },
    },
    allow_downstream_configuration: faker.datatype.boolean(),
  };
}

export function getEnterpriseAdminGetPreReceiveHook200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    enforcement: faker.lorem.slug(1),
    script: faker.lorem.slug(1),
    script_repository: {
      id: faker.number.int({ min: undefined, max: undefined }),
      full_name: faker.person.fullName(),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
    },
    environment: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      image_url: faker.image.image(),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
      default_environment: faker.datatype.boolean(),
      created_at: faker.date.past(),
      hooks_count: faker.number.int({ min: undefined, max: undefined }),
      download: {
        url: faker.internet.url(),
        state: faker.lorem.slug(1),
        downloaded_at: faker.date.past(),
        message: faker.lorem.slug(1),
      },
    },
    allow_downstream_configuration: faker.datatype.boolean(),
  };
}

export function getEnterpriseAdminUpdatePreReceiveHook200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    enforcement: faker.lorem.slug(1),
    script: faker.lorem.slug(1),
    script_repository: {
      id: faker.number.int({ min: undefined, max: undefined }),
      full_name: faker.person.fullName(),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
    },
    environment: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      image_url: faker.image.image(),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
      default_environment: faker.datatype.boolean(),
      created_at: faker.date.past(),
      hooks_count: faker.number.int({ min: undefined, max: undefined }),
      download: {
        url: faker.internet.url(),
        state: faker.lorem.slug(1),
        downloaded_at: faker.date.past(),
        message: faker.lorem.slug(1),
      },
    },
    allow_downstream_configuration: faker.datatype.boolean(),
  };
}

export function getEnterpriseAdminListPersonalAccessTokens200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    scopes: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    token: faker.lorem.slug(1),
    token_last_eight: faker.lorem.slug(1),
    hashed_token: faker.lorem.slug(1),
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    note: faker.lorem.slug(1),
    note_url: faker.internet.url(),
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    fingerprint: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    installation: {
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      repositories_url: 'https://api.github.com/users/octocat/repos',
      account: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    expires_at: faker.date.past(),
  }));
}

export function getEnterpriseAdminCreateUser201Response() {
  return {
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  };
}

export function getEnterpriseAdminUpdateUsernameForUser202Response() {
  return {
    message: faker.lorem.slug(1),
    url: faker.internet.url(),
  };
}

export function getEnterpriseAdminCreateImpersonationOAuthToken200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    scopes: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    token: faker.lorem.slug(1),
    token_last_eight: faker.lorem.slug(1),
    hashed_token: faker.lorem.slug(1),
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    note: faker.lorem.slug(1),
    note_url: faker.internet.url(),
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    fingerprint: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    installation: {
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      repositories_url: 'https://api.github.com/users/octocat/repos',
      account: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    expires_at: faker.date.past(),
  };
}

export function getEnterpriseAdminCreateImpersonationOAuthToken201Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    scopes: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    token: faker.lorem.slug(1),
    token_last_eight: faker.lorem.slug(1),
    hashed_token: faker.lorem.slug(1),
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    note: faker.lorem.slug(1),
    note_url: faker.internet.url(),
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    fingerprint: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    installation: {
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      repositories_url: 'https://api.github.com/users/octocat/repos',
      account: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    expires_at: faker.date.past(),
  };
}

export function getAppsGetAuthenticated200Response() {
  return {
    id: 37,
    slug: 'probot-owners',
    node_id: 'MDExOkludGVncmF0aW9uMQ==',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    name: 'Probot Owners',
    description: 'The description of the app.',
    external_url: 'https://example.com',
    html_url: 'https://github.com/apps/super-ci',
    created_at: '2017-07-08T16:18:44-04:00',
    updated_at: '2017-07-08T16:18:44-04:00',
    permissions: { issues: 'read', deployments: 'write' },
    events: ['label', 'deployment'],
    installations_count: 5,
    client_id: '"Iv1.25b5d1e65ffc4022"',
    client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
    webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
    pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
  };
}

export function getAppsCreateFromManifest201Response() {
  return {
    id: 37,
    slug: 'probot-owners',
    node_id: 'MDExOkludGVncmF0aW9uMQ==',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    name: 'Probot Owners',
    description: 'The description of the app.',
    external_url: 'https://example.com',
    html_url: 'https://github.com/apps/super-ci',
    created_at: '2017-07-08T16:18:44-04:00',
    updated_at: '2017-07-08T16:18:44-04:00',
    permissions: { issues: 'read', deployments: 'write' },
    events: ['label', 'deployment'],
    installations_count: 5,
    client_id: '"Iv1.25b5d1e65ffc4022"',
    client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
    webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
    pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
  };
}

export function getAppsCreateFromManifest404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsCreateFromManifest422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getAppsGetWebhookConfigForApp200Response() {
  return {
    url: 'https://example.com/webhook',
    content_type: '"json"',
    secret: '"********"',
    insecure_ssl: faker.helpers.arrayElement(['"0"', faker.number.int({ min: undefined, max: undefined })]),
  };
}

export function getAppsUpdateWebhookConfigForApp200Response() {
  return {
    url: 'https://example.com/webhook',
    content_type: '"json"',
    secret: '"********"',
    insecure_ssl: faker.helpers.arrayElement(['"0"', faker.number.int({ min: undefined, max: undefined })]),
  };
}

export function getAppsListWebhookDeliveries200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 42,
    guid: '58474f00-b361-11eb-836d-0e4f3503ccbe',
    delivered_at: '2021-05-12T20:33:44Z',
    redelivery: faker.datatype.boolean(),
    duration: 0.03,
    status: 'failed to connect',
    status_code: 502,
    event: 'issues',
    action: 'opened',
    installation_id: 123,
    repository_id: 123,
  }));
}

export function getAppsListWebhookDeliveries400Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsListWebhookDeliveries422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getAppsGetWebhookDelivery200Response() {
  return {
    id: 42,
    guid: '58474f00-b361-11eb-836d-0e4f3503ccbe',
    delivered_at: '2021-05-12T20:33:44Z',
    redelivery: faker.datatype.boolean(),
    duration: 0.03,
    status: 'failed to connect',
    status_code: 502,
    event: 'issues',
    action: 'opened',
    installation_id: 123,
    repository_id: 123,
    url: 'https://www.example.com',
    request: {
      headers: {},
      payload: {},
    },
    response: {
      headers: {},
      payload: faker.lorem.slug(1),
    },
  };
}

export function getAppsGetWebhookDelivery400Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsGetWebhookDelivery422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getAppsRedeliverWebhookDelivery202Response() {
  return {};
}

export function getAppsRedeliverWebhookDelivery400Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsRedeliverWebhookDelivery422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getAppsListInstallations200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1,
    account: faker.helpers.arrayElement([
      {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      {
        description: faker.lorem.slug(1),
        html_url: 'https://github.com/enterprises/octo-business',
        website_url: faker.internet.url(),
        id: 42,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Octo Business',
        slug: 'octo-business',
        created_at: '2019-01-26T19:01:12Z',
        updated_at: '2019-01-26T19:14:43Z',
        avatar_url: faker.internet.url(),
      },
    ]),
    repository_selection: faker.helpers.arrayElement(['all', 'selected']),
    access_tokens_url: 'https://api.github.com/installations/1/access_tokens',
    repositories_url: 'https://api.github.com/installation/repositories',
    html_url: 'https://github.com/organizations/github/settings/installations/1',
    app_id: 1,
    target_id: faker.number.int({ min: undefined, max: undefined }),
    target_type: 'Organization',
    permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
    events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    single_file_name: 'config.yaml',
    has_multiple_single_files: true,
    single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
    app_slug: 'github-actions',
    suspended_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    suspended_at: faker.date.past(),
    contact_email: '"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"',
  }));
}

export function getAppsGetInstallation200Response() {
  return {
    id: 1,
    account: faker.helpers.arrayElement([
      {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      {
        description: faker.lorem.slug(1),
        html_url: 'https://github.com/enterprises/octo-business',
        website_url: faker.internet.url(),
        id: 42,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Octo Business',
        slug: 'octo-business',
        created_at: '2019-01-26T19:01:12Z',
        updated_at: '2019-01-26T19:14:43Z',
        avatar_url: faker.internet.url(),
      },
    ]),
    repository_selection: faker.helpers.arrayElement(['all', 'selected']),
    access_tokens_url: 'https://api.github.com/installations/1/access_tokens',
    repositories_url: 'https://api.github.com/installation/repositories',
    html_url: 'https://github.com/organizations/github/settings/installations/1',
    app_id: 1,
    target_id: faker.number.int({ min: undefined, max: undefined }),
    target_type: 'Organization',
    permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
    events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    single_file_name: 'config.yaml',
    has_multiple_single_files: true,
    single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
    app_slug: 'github-actions',
    suspended_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    suspended_at: faker.date.past(),
    contact_email: '"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"',
  };
}

export function getAppsGetInstallation404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsDeleteInstallation404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsCreateInstallationAccessToken201Response() {
  return {
    token: faker.lorem.slug(1),
    expires_at: faker.date.past(),
    permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
    repository_selection: faker.helpers.arrayElement(['all', 'selected']),
    repositories: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    })),
    single_file: 'README.md',
    has_multiple_single_files: true,
    single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
  };
}

export function getAppsCreateInstallationAccessToken401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsCreateInstallationAccessToken403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsCreateInstallationAccessToken404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsCreateInstallationAccessToken422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getAppsSuspendInstallation404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsUnsuspendInstallation404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsListGrants200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1,
    url: 'https://api.github.com/applications/grants/1',
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    created_at: '2011-09-06T17:26:27Z',
    updated_at: '2011-09-06T20:39:23Z',
    scopes: ['public_repo'],
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
  }));
}

export function getOauthAuthorizationsListGrants401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsListGrants403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsListGrants404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsGetGrant200Response() {
  return {
    id: 1,
    url: 'https://api.github.com/applications/grants/1',
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    created_at: '2011-09-06T17:26:27Z',
    updated_at: '2011-09-06T20:39:23Z',
    scopes: ['public_repo'],
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
  };
}

export function getOauthAuthorizationsGetGrant401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsGetGrant403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsDeleteGrant401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsDeleteGrant403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsDeleteAuthorization422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getAppsCheckToken200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    scopes: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    token: faker.lorem.slug(1),
    token_last_eight: faker.lorem.slug(1),
    hashed_token: faker.lorem.slug(1),
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    note: faker.lorem.slug(1),
    note_url: faker.internet.url(),
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    fingerprint: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    installation: {
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      repositories_url: 'https://api.github.com/users/octocat/repos',
      account: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    expires_at: faker.date.past(),
  };
}

export function getAppsCheckToken404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsCheckToken422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getAppsResetToken200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    scopes: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    token: faker.lorem.slug(1),
    token_last_eight: faker.lorem.slug(1),
    hashed_token: faker.lorem.slug(1),
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    note: faker.lorem.slug(1),
    note_url: faker.internet.url(),
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    fingerprint: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    installation: {
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      repositories_url: 'https://api.github.com/users/octocat/repos',
      account: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    expires_at: faker.date.past(),
  };
}

export function getAppsResetToken422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getAppsDeleteToken422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getAppsScopeToken200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    scopes: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    token: faker.lorem.slug(1),
    token_last_eight: faker.lorem.slug(1),
    hashed_token: faker.lorem.slug(1),
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    note: faker.lorem.slug(1),
    note_url: faker.internet.url(),
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    fingerprint: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    installation: {
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      repositories_url: 'https://api.github.com/users/octocat/repos',
      account: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    expires_at: faker.date.past(),
  };
}

export function getAppsScopeToken401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsScopeToken403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsScopeToken404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsScopeToken422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getAppsCheckAuthorization200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    scopes: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    token: faker.lorem.slug(1),
    token_last_eight: faker.lorem.slug(1),
    hashed_token: faker.lorem.slug(1),
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    note: faker.lorem.slug(1),
    note_url: faker.internet.url(),
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    fingerprint: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    installation: {
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      repositories_url: 'https://api.github.com/users/octocat/repos',
      account: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    expires_at: faker.date.past(),
  };
}

export function getAppsCheckAuthorization404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsResetAuthorization200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    scopes: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    token: faker.lorem.slug(1),
    token_last_eight: faker.lorem.slug(1),
    hashed_token: faker.lorem.slug(1),
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    note: faker.lorem.slug(1),
    note_url: faker.internet.url(),
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    fingerprint: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    installation: {
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      repositories_url: 'https://api.github.com/users/octocat/repos',
      account: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    expires_at: faker.date.past(),
  };
}

export function getAppsGetBySlug200Response() {
  return {
    id: 37,
    slug: 'probot-owners',
    node_id: 'MDExOkludGVncmF0aW9uMQ==',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    name: 'Probot Owners',
    description: 'The description of the app.',
    external_url: 'https://example.com',
    html_url: 'https://github.com/apps/super-ci',
    created_at: '2017-07-08T16:18:44-04:00',
    updated_at: '2017-07-08T16:18:44-04:00',
    permissions: { issues: 'read', deployments: 'write' },
    events: ['label', 'deployment'],
    installations_count: 5,
    client_id: '"Iv1.25b5d1e65ffc4022"',
    client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
    webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
    pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
  };
}

export function getAppsGetBySlug403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsGetBySlug404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsListAuthorizations200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    scopes: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    token: faker.lorem.slug(1),
    token_last_eight: faker.lorem.slug(1),
    hashed_token: faker.lorem.slug(1),
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    note: faker.lorem.slug(1),
    note_url: faker.internet.url(),
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    fingerprint: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    installation: {
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      repositories_url: 'https://api.github.com/users/octocat/repos',
      account: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    expires_at: faker.date.past(),
  }));
}

export function getOauthAuthorizationsListAuthorizations401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsListAuthorizations403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsListAuthorizations404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsCreateAuthorization201Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    scopes: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    token: faker.lorem.slug(1),
    token_last_eight: faker.lorem.slug(1),
    hashed_token: faker.lorem.slug(1),
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    note: faker.lorem.slug(1),
    note_url: faker.internet.url(),
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    fingerprint: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    installation: {
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      repositories_url: 'https://api.github.com/users/octocat/repos',
      account: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    expires_at: faker.date.past(),
  };
}

export function getOauthAuthorizationsCreateAuthorization401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsCreateAuthorization403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsCreateAuthorization410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsCreateAuthorization422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getOauthAuthorizationsGetOrCreateAuthorizationForApp200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    scopes: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    token: faker.lorem.slug(1),
    token_last_eight: faker.lorem.slug(1),
    hashed_token: faker.lorem.slug(1),
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    note: faker.lorem.slug(1),
    note_url: faker.internet.url(),
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    fingerprint: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    installation: {
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      repositories_url: 'https://api.github.com/users/octocat/repos',
      account: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    expires_at: faker.date.past(),
  };
}

export function getOauthAuthorizationsGetOrCreateAuthorizationForApp201Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    scopes: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    token: faker.lorem.slug(1),
    token_last_eight: faker.lorem.slug(1),
    hashed_token: faker.lorem.slug(1),
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    note: faker.lorem.slug(1),
    note_url: faker.internet.url(),
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    fingerprint: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    installation: {
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      repositories_url: 'https://api.github.com/users/octocat/repos',
      account: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    expires_at: faker.date.past(),
  };
}

export function getOauthAuthorizationsGetOrCreateAuthorizationForApp401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsGetOrCreateAuthorizationForApp403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsGetOrCreateAuthorizationForApp422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    scopes: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    token: faker.lorem.slug(1),
    token_last_eight: faker.lorem.slug(1),
    hashed_token: faker.lorem.slug(1),
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    note: faker.lorem.slug(1),
    note_url: faker.internet.url(),
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    fingerprint: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    installation: {
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      repositories_url: 'https://api.github.com/users/octocat/repos',
      account: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    expires_at: faker.date.past(),
  };
}

export function getOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint201Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    scopes: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    token: faker.lorem.slug(1),
    token_last_eight: faker.lorem.slug(1),
    hashed_token: faker.lorem.slug(1),
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    note: faker.lorem.slug(1),
    note_url: faker.internet.url(),
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    fingerprint: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    installation: {
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      repositories_url: 'https://api.github.com/users/octocat/repos',
      account: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    expires_at: faker.date.past(),
  };
}

export function getOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getOauthAuthorizationsGetAuthorization200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    scopes: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    token: faker.lorem.slug(1),
    token_last_eight: faker.lorem.slug(1),
    hashed_token: faker.lorem.slug(1),
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    note: faker.lorem.slug(1),
    note_url: faker.internet.url(),
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    fingerprint: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    installation: {
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      repositories_url: 'https://api.github.com/users/octocat/repos',
      account: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    expires_at: faker.date.past(),
  };
}

export function getOauthAuthorizationsGetAuthorization401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsGetAuthorization403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsUpdateAuthorization200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    scopes: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    token: faker.lorem.slug(1),
    token_last_eight: faker.lorem.slug(1),
    hashed_token: faker.lorem.slug(1),
    app: {
      client_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    note: faker.lorem.slug(1),
    note_url: faker.internet.url(),
    updated_at: faker.date.past(),
    created_at: faker.date.past(),
    fingerprint: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    installation: {
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      repositories_url: 'https://api.github.com/users/octocat/repos',
      account: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    expires_at: faker.date.past(),
  };
}

export function getOauthAuthorizationsUpdateAuthorization422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getOauthAuthorizationsDeleteAuthorization401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOauthAuthorizationsDeleteAuthorization403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodesOfConductGetAllCodesOfConduct200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    key: 'contributor_covenant',
    name: 'Contributor Covenant',
    url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
    body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
    html_url: faker.internet.url(),
  }));
}

export function getCodesOfConductGetConductCode200Response() {
  return {
    key: 'contributor_covenant',
    name: 'Contributor Covenant',
    url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
    body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
    html_url: faker.internet.url(),
  };
}

export function getCodesOfConductGetConductCode404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getEmojisGet200Response() {
  return [...new Array(5).keys()]
    .map(_ => ({ [faker.lorem.word()]: faker.lorem.slug(1) }))
    .reduce((acc, next) => Object.assign(acc, next), {});
}

export function getEnterpriseAdminGetAnnouncement200Response() {
  return {
    announcement: 'Very **important** announcement about _something_.',
    expires_at: '"2021-01-01T00:00:00.000-07:00"',
  };
}

export function getEnterpriseAdminSetAnnouncement200Response() {
  return {
    announcement: 'Very **important** announcement about _something_.',
    expires_at: '"2021-01-01T00:00:00.000-07:00"',
  };
}

export function getEnterpriseAdminGetLicenseInformation200Response() {
  return {
    seats: faker.helpers.arrayElement([faker.lorem.slug(1), faker.number.int({ min: undefined, max: undefined })]),
    seats_used: faker.number.int({ min: undefined, max: undefined }),
    seats_available: faker.helpers.arrayElement([
      faker.lorem.slug(1),
      faker.number.int({ min: undefined, max: undefined }),
    ]),
    kind: faker.lorem.slug(1),
    days_until_expiration: faker.number.int({ min: undefined, max: undefined }),
    expire_at: faker.date.past(),
  };
}

export function getEnterpriseAdminGetAllStats200Response() {
  return {
    repos: {
      total_repos: faker.number.int({ min: undefined, max: undefined }),
      root_repos: faker.number.int({ min: undefined, max: undefined }),
      fork_repos: faker.number.int({ min: undefined, max: undefined }),
      org_repos: faker.number.int({ min: undefined, max: undefined }),
      total_pushes: faker.number.int({ min: undefined, max: undefined }),
      total_wikis: faker.number.int({ min: undefined, max: undefined }),
    },
    hooks: {
      total_hooks: faker.number.int({ min: undefined, max: undefined }),
      active_hooks: faker.number.int({ min: undefined, max: undefined }),
      inactive_hooks: faker.number.int({ min: undefined, max: undefined }),
    },
    pages: {
      total_pages: faker.number.int({ min: undefined, max: undefined }),
    },
    orgs: {
      total_orgs: faker.number.int({ min: undefined, max: undefined }),
      disabled_orgs: faker.number.int({ min: undefined, max: undefined }),
      total_teams: faker.number.int({ min: undefined, max: undefined }),
      total_team_members: faker.number.int({ min: undefined, max: undefined }),
    },
    users: {
      total_users: faker.number.int({ min: undefined, max: undefined }),
      admin_users: faker.number.int({ min: undefined, max: undefined }),
      suspended_users: faker.number.int({ min: undefined, max: undefined }),
    },
    pulls: {
      total_pulls: faker.number.int({ min: undefined, max: undefined }),
      merged_pulls: faker.number.int({ min: undefined, max: undefined }),
      mergeable_pulls: faker.number.int({ min: undefined, max: undefined }),
      unmergeable_pulls: faker.number.int({ min: undefined, max: undefined }),
    },
    issues: {
      total_issues: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      closed_issues: faker.number.int({ min: undefined, max: undefined }),
    },
    milestones: {
      total_milestones: faker.number.int({ min: undefined, max: undefined }),
      open_milestones: faker.number.int({ min: undefined, max: undefined }),
      closed_milestones: faker.number.int({ min: undefined, max: undefined }),
    },
    gists: {
      total_gists: faker.number.int({ min: undefined, max: undefined }),
      private_gists: faker.number.int({ min: undefined, max: undefined }),
      public_gists: faker.number.int({ min: undefined, max: undefined }),
    },
    comments: {
      total_commit_comments: faker.number.int({ min: undefined, max: undefined }),
      total_gist_comments: faker.number.int({ min: undefined, max: undefined }),
      total_issue_comments: faker.number.int({ min: undefined, max: undefined }),
      total_pull_request_comments: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getEnterpriseAdminGetCommentStats200Response() {
  return {
    total_commit_comments: faker.number.int({ min: undefined, max: undefined }),
    total_gist_comments: faker.number.int({ min: undefined, max: undefined }),
    total_issue_comments: faker.number.int({ min: undefined, max: undefined }),
    total_pull_request_comments: faker.number.int({ min: undefined, max: undefined }),
  };
}

export function getEnterpriseAdminGetGistStats200Response() {
  return {
    total_gists: faker.number.int({ min: undefined, max: undefined }),
    private_gists: faker.number.int({ min: undefined, max: undefined }),
    public_gists: faker.number.int({ min: undefined, max: undefined }),
  };
}

export function getEnterpriseAdminGetHooksStats200Response() {
  return {
    total_hooks: faker.number.int({ min: undefined, max: undefined }),
    active_hooks: faker.number.int({ min: undefined, max: undefined }),
    inactive_hooks: faker.number.int({ min: undefined, max: undefined }),
  };
}

export function getEnterpriseAdminGetIssueStats200Response() {
  return {
    total_issues: faker.number.int({ min: undefined, max: undefined }),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    closed_issues: faker.number.int({ min: undefined, max: undefined }),
  };
}

export function getEnterpriseAdminGetMilestoneStats200Response() {
  return {
    total_milestones: faker.number.int({ min: undefined, max: undefined }),
    open_milestones: faker.number.int({ min: undefined, max: undefined }),
    closed_milestones: faker.number.int({ min: undefined, max: undefined }),
  };
}

export function getEnterpriseAdminGetOrgStats200Response() {
  return {
    total_orgs: faker.number.int({ min: undefined, max: undefined }),
    disabled_orgs: faker.number.int({ min: undefined, max: undefined }),
    total_teams: faker.number.int({ min: undefined, max: undefined }),
    total_team_members: faker.number.int({ min: undefined, max: undefined }),
  };
}

export function getEnterpriseAdminGetPagesStats200Response() {
  return {
    total_pages: faker.number.int({ min: undefined, max: undefined }),
  };
}

export function getEnterpriseAdminGetPullRequestStats200Response() {
  return {
    total_pulls: faker.number.int({ min: undefined, max: undefined }),
    merged_pulls: faker.number.int({ min: undefined, max: undefined }),
    mergeable_pulls: faker.number.int({ min: undefined, max: undefined }),
    unmergeable_pulls: faker.number.int({ min: undefined, max: undefined }),
  };
}

export function getEnterpriseAdminGetRepoStats200Response() {
  return {
    total_repos: faker.number.int({ min: undefined, max: undefined }),
    root_repos: faker.number.int({ min: undefined, max: undefined }),
    fork_repos: faker.number.int({ min: undefined, max: undefined }),
    org_repos: faker.number.int({ min: undefined, max: undefined }),
    total_pushes: faker.number.int({ min: undefined, max: undefined }),
    total_wikis: faker.number.int({ min: undefined, max: undefined }),
  };
}

export function getEnterpriseAdminGetUserStats200Response() {
  return {
    total_users: faker.number.int({ min: undefined, max: undefined }),
    admin_users: faker.number.int({ min: undefined, max: undefined }),
    suspended_users: faker.number.int({ min: undefined, max: undefined }),
  };
}

export function getEnterpriseAdminGetGithubActionsPermissionsEnterprise200Response() {
  return {
    enabled_organizations: faker.helpers.arrayElement(['all', 'none', 'selected']),
    selected_organizations_url: faker.internet.url(),
    allowed_actions: faker.helpers.arrayElement(['all', 'local_only', 'selected']),
    selected_actions_url: faker.internet.url(),
  };
}

export function getEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    organizations: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      login: 'github',
      id: 1,
      node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
      url: 'https://api.github.com/orgs/github',
      repos_url: 'https://api.github.com/orgs/github/repos',
      events_url: 'https://api.github.com/orgs/github/events',
      hooks_url: 'https://api.github.com/orgs/github/hooks',
      issues_url: 'https://api.github.com/orgs/github/issues',
      members_url: 'https://api.github.com/orgs/github/members{/member}',
      public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      description: 'A great organization',
    })),
  };
}

export function getEnterpriseAdminGetAllowedActionsEnterprise200Response() {
  return {
    github_owned_allowed: faker.datatype.boolean(),
    patterns_allowed: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
      faker.lorem.slug(1)
    ),
  };
}

export function getEnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    runner_groups: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      visibility: faker.lorem.slug(1),
      default: faker.datatype.boolean(),
      selected_organizations_url: faker.internet.url(),
      runners_url: faker.internet.url(),
      allows_public_repositories: faker.datatype.boolean(),
    })),
  };
}

export function getEnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise201Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    visibility: faker.lorem.slug(1),
    default: faker.datatype.boolean(),
    selected_organizations_url: faker.internet.url(),
    runners_url: faker.internet.url(),
    allows_public_repositories: faker.datatype.boolean(),
  };
}

export function getEnterpriseAdminGetSelfHostedRunnerGroupForEnterprise200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    visibility: faker.lorem.slug(1),
    default: faker.datatype.boolean(),
    selected_organizations_url: faker.internet.url(),
    runners_url: faker.internet.url(),
    allows_public_repositories: faker.datatype.boolean(),
  };
}

export function getEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    visibility: faker.lorem.slug(1),
    default: faker.datatype.boolean(),
    selected_organizations_url: faker.internet.url(),
    runners_url: faker.internet.url(),
    allows_public_repositories: faker.datatype.boolean(),
  };
}

export function getEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    organizations: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      login: 'github',
      id: 1,
      node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
      url: 'https://api.github.com/orgs/github',
      repos_url: 'https://api.github.com/orgs/github/repos',
      events_url: 'https://api.github.com/orgs/github/events',
      hooks_url: 'https://api.github.com/orgs/github/hooks',
      issues_url: 'https://api.github.com/orgs/github/issues',
      members_url: 'https://api.github.com/orgs/github/members{/member}',
      public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      description: 'A great organization',
    })),
  };
}

export function getEnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    runners: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 5,
      name: 'iMac',
      os: 'macos',
      status: 'online',
      busy: faker.datatype.boolean(),
      labels: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.person.fullName(),
        type: faker.helpers.arrayElement(['read-only', 'custom']),
      })),
    })),
  };
}

export function getEnterpriseAdminListSelfHostedRunnersForEnterprise200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    runners: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 5,
      name: 'iMac',
      os: 'macos',
      status: 'online',
      busy: faker.datatype.boolean(),
      labels: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.person.fullName(),
        type: faker.helpers.arrayElement(['read-only', 'custom']),
      })),
    })),
  };
}

export function getEnterpriseAdminListRunnerApplicationsForEnterprise200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    os: faker.lorem.slug(1),
    architecture: faker.lorem.slug(1),
    download_url: faker.internet.url(),
    filename: faker.person.fullName(),
    temp_download_token: faker.lorem.slug(1),
    sha256_checksum: faker.lorem.slug(1),
  }));
}

export function getEnterpriseAdminCreateRegistrationTokenForEnterprise201Response() {
  return {
    token: 'v1.1f699f1069f60xxx',
    expires_at: '2016-07-11T22:14:10Z',
    permissions: { issues: 'read', deployments: 'write' },
    repositories: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    })),
    single_file: 'config.yaml',
    repository_selection: faker.helpers.arrayElement(['all', 'selected']),
  };
}

export function getEnterpriseAdminCreateRemoveTokenForEnterprise201Response() {
  return {
    token: 'v1.1f699f1069f60xxx',
    expires_at: '2016-07-11T22:14:10Z',
    permissions: { issues: 'read', deployments: 'write' },
    repositories: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    })),
    single_file: 'config.yaml',
    repository_selection: faker.helpers.arrayElement(['all', 'selected']),
  };
}

export function getEnterpriseAdminGetSelfHostedRunnerForEnterprise200Response() {
  return {
    id: 5,
    name: 'iMac',
    os: 'macos',
    status: 'online',
    busy: faker.datatype.boolean(),
    labels: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      type: faker.helpers.arrayElement(['read-only', 'custom']),
    })),
  };
}

export function getEnterpriseAdminGetAuditLog200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    '@timestamp': faker.number.int({ min: undefined, max: undefined }),
    action: faker.lorem.slug(1),
    active: faker.datatype.boolean(),
    active_was: faker.datatype.boolean(),
    actor: faker.lorem.slug(1),
    actor_id: faker.number.int({ min: undefined, max: undefined }),
    actor_location: {
      country_name: faker.person.fullName(),
    },
    data: {},
    org_id: faker.number.int({ min: undefined, max: undefined }),
    user_id: faker.number.int({ min: undefined, max: undefined }),
    business_id: faker.number.int({ min: undefined, max: undefined }),
    blocked_user: faker.lorem.slug(1),
    business: faker.lorem.slug(1),
    config: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({})),
    config_was: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({})),
    content_type: faker.lorem.slug(1),
    operation_type: faker.lorem.slug(1),
    created_at: faker.number.int({ min: undefined, max: undefined }),
    deploy_key_fingerprint: faker.lorem.slug(1),
    _document_id: faker.lorem.slug(1),
    emoji: faker.lorem.slug(1),
    events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({})),
    events_were: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({})),
    explanation: faker.lorem.slug(1),
    fingerprint: faker.lorem.slug(1),
    hook_id: faker.number.int({ min: undefined, max: undefined }),
    limited_availability: faker.datatype.boolean(),
    message: faker.lorem.slug(1),
    name: faker.person.fullName(),
    old_user: faker.lorem.slug(1),
    openssh_public_key: faker.lorem.slug(1),
    org: faker.lorem.slug(1),
    previous_visibility: faker.lorem.slug(1),
    read_only: faker.datatype.boolean(),
    repo: faker.lorem.slug(1),
    repository: faker.lorem.slug(1),
    repository_public: faker.datatype.boolean(),
    target_login: faker.lorem.slug(1),
    team: faker.lorem.slug(1),
    transport_protocol: faker.number.int({ min: undefined, max: undefined }),
    transport_protocol_name: faker.person.fullName(),
    user: faker.lorem.slug(1),
    visibility: faker.lorem.slug(1),
  }));
}

export function getActivityListPublicEvents200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.lorem.slug(1),
    type: faker.lorem.slug(1),
    actor: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    repo: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    org: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    payload: {
      action: faker.lorem.slug(1),
      issue: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/1',
        repository_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: 42,
        state: 'open',
        state_reason: 'not_planned',
        title: 'Widget creation fails in Safari on OS X 10.8',
        body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        labels: ['bug', 'registration'],
        assignee: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        })),
        milestone: {
          url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
          html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
          labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
          id: 1002604,
          node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
          number: 42,
          state: 'open',
          title: 'v1.0',
          description: 'Tracking milestone for version 1.0',
          creator: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          open_issues: 4,
          closed_issues: 8,
          created_at: '2011-04-10T20:09:31Z',
          updated_at: '2014-03-03T18:58:10Z',
          closed_at: '2013-02-12T13:22:01Z',
          due_on: '2012-10-09T23:39:01Z',
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(1),
        comments: faker.number.int({ min: undefined, max: undefined }),
        pull_request: {
          merged_at: faker.date.past(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        body_html: faker.lorem.slug(1),
        body_text: faker.lorem.slug(1),
        timeline_url: faker.internet.url(),
        repository: {
          id: 42,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Team Environment',
          full_name: 'octocat/Hello-World',
          license: {
            key: 'mit',
            name: 'MIT License',
            url: 'https://api.github.com/licenses/mit',
            spdx_id: 'MIT',
            node_id: 'MDc6TGljZW5zZW1pdA==',
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          forks: faker.number.int({ min: undefined, max: undefined }),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          private: faker.datatype.boolean(),
          html_url: 'https://github.com/octocat/Hello-World',
          description: 'This your first repo!',
          fork: faker.datatype.boolean(),
          url: 'https://api.github.com/repos/octocat/Hello-World',
          archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
          assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
          blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
          branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
          collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
          comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
          commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
          compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
          contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
          contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
          deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
          downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
          events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
          forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
          git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
          git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
          git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
          git_url: 'git:github.com/octocat/Hello-World.git',
          issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
          issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
          issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
          keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
          labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
          languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
          merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
          milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
          notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
          pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
          releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
          ssh_url: 'git@github.com:octocat/Hello-World.git',
          stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
          statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
          subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
          subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
          tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
          teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
          trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
          clone_url: 'https://github.com/octocat/Hello-World.git',
          mirror_url: 'git:git.example.com/octocat/Hello-World',
          hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
          svn_url: 'https://svn.github.com/octocat/Hello-World',
          homepage: 'https://github.com',
          language: faker.lorem.slug(1),
          forks_count: 9,
          stargazers_count: 80,
          watchers_count: 80,
          size: 108,
          default_branch: 'master',
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: true,
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: true,
          has_projects: true,
          has_wiki: true,
          has_pages: faker.datatype.boolean(),
          has_downloads: true,
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: '2011-01-26T19:06:43Z',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:14:43Z',
          allow_rebase_merge: true,
          template_repository: {
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            name: faker.person.fullName(),
            full_name: faker.person.fullName(),
            owner: {
              login: faker.lorem.slug(1),
              id: faker.number.int({ min: undefined, max: undefined }),
              node_id: faker.lorem.slug(1),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(1),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.internet.url(),
            assignees_url: faker.internet.url(),
            blobs_url: faker.internet.url(),
            branches_url: faker.internet.url(),
            collaborators_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            compare_url: faker.internet.url(),
            contents_url: faker.internet.url(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.internet.url(),
            git_refs_url: faker.internet.url(),
            git_tags_url: faker.internet.url(),
            git_url: faker.internet.url(),
            issue_comment_url: faker.internet.url(),
            issue_events_url: faker.internet.url(),
            issues_url: faker.internet.url(),
            keys_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.internet.url(),
            notifications_url: faker.internet.url(),
            pulls_url: faker.internet.url(),
            releases_url: faker.internet.url(),
            ssh_url: faker.internet.url(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.internet.url(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.internet.url(),
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.number.int({ min: undefined, max: undefined }),
            stargazers_count: faker.number.int({ min: undefined, max: undefined }),
            watchers_count: faker.number.int({ min: undefined, max: undefined }),
            size: faker.number.int({ min: undefined, max: undefined }),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.number.int({ min: undefined, max: undefined }),
            is_template: faker.datatype.boolean(),
            topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
              faker.lorem.slug(1)
            ),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.number.int({ min: undefined, max: undefined }),
            network_count: faker.number.int({ min: undefined, max: undefined }),
          },
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: true,
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: true,
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
          open_issues: faker.number.int({ min: undefined, max: undefined }),
          watchers: faker.number.int({ min: undefined, max: undefined }),
          master_branch: faker.lorem.slug(1),
          starred_at: '"2020-07-09T00:17:42Z"',
          anonymous_access_enabled: faker.datatype.boolean(),
        },
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        author_association: 'OWNER',
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      comment: {
        id: 42,
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/comments/1',
        body: 'What version of Safari were you using when you observed this bug?',
        body_text: faker.lorem.slug(1),
        body_html: faker.lorem.slug(1),
        html_url: faker.internet.url(),
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        created_at: '2011-04-14T16:00:49Z',
        updated_at: '2011-04-14T16:00:49Z',
        issue_url: faker.internet.url(),
        author_association: 'OWNER',
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      pages: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        page_name: faker.person.fullName(),
        title: faker.lorem.slug(1),
        summary: faker.lorem.slug(1),
        action: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        html_url: faker.internet.url(),
      })),
    },
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
  }));
}

export function getActivityListPublicEvents403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityListPublicEvents503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getActivityGetFeeds200Response() {
  return {
    timeline_url: 'https://github.com/timeline',
    user_url: 'https://github.com/{user}',
    current_user_public_url: 'https://github.com/octocat',
    current_user_url: 'https://github.com/octocat.private?token=abc123',
    current_user_actor_url: 'https://github.com/octocat.private.actor?token=abc123',
    current_user_organization_url: 'https://github.com/octocat-org',
    current_user_organization_urls: ['https://github.com/organizations/github/octocat.private.atom?token=abc123'],
    security_advisories_url: 'https://github.com/security-advisories',
    repository_discussions_url: 'https://github.com/{user}/{repo}/discussions',
    repository_discussions_category_url: 'https://github.com/{user}/{repo}/discussions/categories/{category}',
    _links: {
      timeline: {
        href: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
      },
      user: {
        href: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
      },
      security_advisories: {
        href: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
      },
      current_user: {
        href: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
      },
      current_user_public: {
        href: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
      },
      current_user_actor: {
        href: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
      },
      current_user_organization: {
        href: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
      },
      current_user_organizations: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        href: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
      })),
      repository_discussions: {
        href: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
      },
      repository_discussions_category: {
        href: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
      },
    },
    repository_discussions: {
      href: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    },
    repository_discussions_category: {
      href: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    },
  };
}

export function getGistsList200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: faker.internet.url(),
    forks_url: faker.internet.url(),
    commits_url: faker.internet.url(),
    id: faker.lorem.slug(1),
    node_id: faker.lorem.slug(1),
    git_pull_url: faker.internet.url(),
    git_push_url: faker.internet.url(),
    html_url: faker.internet.url(),
    files: [...new Array(5).keys()]
      .map(_ => ({
        [faker.lorem.word()]: {
          filename: faker.person.fullName(),
          type: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          raw_url: faker.internet.url(),
          size: faker.number.int({ min: undefined, max: undefined }),
        },
      }))
      .reduce((acc, next) => Object.assign(acc, next), {}),
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    description: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    comments_url: faker.internet.url(),
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    truncated: faker.datatype.boolean(),
    forks: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
    history: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
  }));
}

export function getGistsList403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsCreate201Response() {
  return {
    forks: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.lorem.slug(1),
      url: faker.internet.url(),
      user: {
        login: faker.lorem.slug(1),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        site_admin: faker.datatype.boolean(),
        name: faker.person.fullName(),
        company: faker.lorem.slug(1),
        blog: faker.lorem.slug(1),
        location: faker.lorem.slug(1),
        email: faker.internet.email(),
        hireable: faker.datatype.boolean(),
        bio: faker.lorem.slug(1),
        twitter_username: faker.person.fullName(),
        public_repos: faker.number.int({ min: undefined, max: undefined }),
        public_gists: faker.number.int({ min: undefined, max: undefined }),
        followers: faker.number.int({ min: undefined, max: undefined }),
        following: faker.number.int({ min: undefined, max: undefined }),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        plan: {
          collaborators: faker.number.int({ min: undefined, max: undefined }),
          name: faker.person.fullName(),
          space: faker.number.int({ min: undefined, max: undefined }),
          private_repos: faker.number.int({ min: undefined, max: undefined }),
        },
        suspended_at: faker.date.past(),
        private_gists: 1,
        total_private_repos: 2,
        owned_private_repos: 2,
        disk_usage: 1,
        collaborators: 3,
      },
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
    })),
    history: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      version: faker.lorem.slug(1),
      committed_at: faker.date.past(),
      change_status: {
        total: faker.number.int({ min: undefined, max: undefined }),
        additions: faker.number.int({ min: undefined, max: undefined }),
        deletions: faker.number.int({ min: undefined, max: undefined }),
      },
      url: faker.internet.url(),
    })),
    fork_of: {
      url: faker.internet.url(),
      forks_url: faker.internet.url(),
      commits_url: faker.internet.url(),
      id: faker.lorem.slug(1),
      node_id: faker.lorem.slug(1),
      git_pull_url: faker.internet.url(),
      git_push_url: faker.internet.url(),
      html_url: faker.internet.url(),
      files: [...new Array(5).keys()]
        .map(_ => ({
          [faker.lorem.word()]: {
            filename: faker.person.fullName(),
            type: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            raw_url: faker.internet.url(),
            size: faker.number.int({ min: undefined, max: undefined }),
          },
        }))
        .reduce((acc, next) => Object.assign(acc, next), {}),
      public: faker.datatype.boolean(),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      description: faker.lorem.slug(1),
      comments: faker.number.int({ min: undefined, max: undefined }),
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      comments_url: faker.internet.url(),
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      truncated: faker.datatype.boolean(),
      forks: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
      history: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
    },
    url: faker.internet.url(),
    forks_url: faker.internet.url(),
    commits_url: faker.internet.url(),
    id: faker.lorem.slug(1),
    node_id: faker.lorem.slug(1),
    git_pull_url: faker.internet.url(),
    git_push_url: faker.internet.url(),
    html_url: faker.internet.url(),
    files: [...new Array(5).keys()]
      .map(_ => ({
        [faker.lorem.word()]: {
          filename: faker.person.fullName(),
          type: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          raw_url: faker.internet.url(),
          size: faker.number.int({ min: undefined, max: undefined }),
          truncated: faker.datatype.boolean(),
          content: faker.lorem.slug(1),
        },
      }))
      .reduce((acc, next) => Object.assign(acc, next), {}),
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    description: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    user: faker.lorem.slug(1),
    comments_url: faker.internet.url(),
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    truncated: faker.datatype.boolean(),
  };
}

export function getGistsCreate403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsCreate404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsCreate422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getGistsListPublic200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: faker.internet.url(),
    forks_url: faker.internet.url(),
    commits_url: faker.internet.url(),
    id: faker.lorem.slug(1),
    node_id: faker.lorem.slug(1),
    git_pull_url: faker.internet.url(),
    git_push_url: faker.internet.url(),
    html_url: faker.internet.url(),
    files: [...new Array(5).keys()]
      .map(_ => ({
        [faker.lorem.word()]: {
          filename: faker.person.fullName(),
          type: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          raw_url: faker.internet.url(),
          size: faker.number.int({ min: undefined, max: undefined }),
        },
      }))
      .reduce((acc, next) => Object.assign(acc, next), {}),
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    description: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    comments_url: faker.internet.url(),
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    truncated: faker.datatype.boolean(),
    forks: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
    history: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
  }));
}

export function getGistsListPublic403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsListPublic422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getGistsListStarred200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: faker.internet.url(),
    forks_url: faker.internet.url(),
    commits_url: faker.internet.url(),
    id: faker.lorem.slug(1),
    node_id: faker.lorem.slug(1),
    git_pull_url: faker.internet.url(),
    git_push_url: faker.internet.url(),
    html_url: faker.internet.url(),
    files: [...new Array(5).keys()]
      .map(_ => ({
        [faker.lorem.word()]: {
          filename: faker.person.fullName(),
          type: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          raw_url: faker.internet.url(),
          size: faker.number.int({ min: undefined, max: undefined }),
        },
      }))
      .reduce((acc, next) => Object.assign(acc, next), {}),
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    description: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    comments_url: faker.internet.url(),
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    truncated: faker.datatype.boolean(),
    forks: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
    history: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
  }));
}

export function getGistsListStarred401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsListStarred403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsGet200Response() {
  return {
    forks: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.lorem.slug(1),
      url: faker.internet.url(),
      user: {
        login: faker.lorem.slug(1),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        site_admin: faker.datatype.boolean(),
        name: faker.person.fullName(),
        company: faker.lorem.slug(1),
        blog: faker.lorem.slug(1),
        location: faker.lorem.slug(1),
        email: faker.internet.email(),
        hireable: faker.datatype.boolean(),
        bio: faker.lorem.slug(1),
        twitter_username: faker.person.fullName(),
        public_repos: faker.number.int({ min: undefined, max: undefined }),
        public_gists: faker.number.int({ min: undefined, max: undefined }),
        followers: faker.number.int({ min: undefined, max: undefined }),
        following: faker.number.int({ min: undefined, max: undefined }),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        plan: {
          collaborators: faker.number.int({ min: undefined, max: undefined }),
          name: faker.person.fullName(),
          space: faker.number.int({ min: undefined, max: undefined }),
          private_repos: faker.number.int({ min: undefined, max: undefined }),
        },
        suspended_at: faker.date.past(),
        private_gists: 1,
        total_private_repos: 2,
        owned_private_repos: 2,
        disk_usage: 1,
        collaborators: 3,
      },
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
    })),
    history: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      version: faker.lorem.slug(1),
      committed_at: faker.date.past(),
      change_status: {
        total: faker.number.int({ min: undefined, max: undefined }),
        additions: faker.number.int({ min: undefined, max: undefined }),
        deletions: faker.number.int({ min: undefined, max: undefined }),
      },
      url: faker.internet.url(),
    })),
    fork_of: {
      url: faker.internet.url(),
      forks_url: faker.internet.url(),
      commits_url: faker.internet.url(),
      id: faker.lorem.slug(1),
      node_id: faker.lorem.slug(1),
      git_pull_url: faker.internet.url(),
      git_push_url: faker.internet.url(),
      html_url: faker.internet.url(),
      files: [...new Array(5).keys()]
        .map(_ => ({
          [faker.lorem.word()]: {
            filename: faker.person.fullName(),
            type: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            raw_url: faker.internet.url(),
            size: faker.number.int({ min: undefined, max: undefined }),
          },
        }))
        .reduce((acc, next) => Object.assign(acc, next), {}),
      public: faker.datatype.boolean(),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      description: faker.lorem.slug(1),
      comments: faker.number.int({ min: undefined, max: undefined }),
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      comments_url: faker.internet.url(),
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      truncated: faker.datatype.boolean(),
      forks: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
      history: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
    },
    url: faker.internet.url(),
    forks_url: faker.internet.url(),
    commits_url: faker.internet.url(),
    id: faker.lorem.slug(1),
    node_id: faker.lorem.slug(1),
    git_pull_url: faker.internet.url(),
    git_push_url: faker.internet.url(),
    html_url: faker.internet.url(),
    files: [...new Array(5).keys()]
      .map(_ => ({
        [faker.lorem.word()]: {
          filename: faker.person.fullName(),
          type: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          raw_url: faker.internet.url(),
          size: faker.number.int({ min: undefined, max: undefined }),
          truncated: faker.datatype.boolean(),
          content: faker.lorem.slug(1),
        },
      }))
      .reduce((acc, next) => Object.assign(acc, next), {}),
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    description: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    user: faker.lorem.slug(1),
    comments_url: faker.internet.url(),
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    truncated: faker.datatype.boolean(),
  };
}

export function getGistsGet403Response() {
  return {
    block: {
      reason: faker.lorem.slug(1),
      created_at: faker.date.past(),
      html_url: faker.internet.url(),
    },
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getGistsGet404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsUpdate200Response() {
  return {
    forks: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.lorem.slug(1),
      url: faker.internet.url(),
      user: {
        login: faker.lorem.slug(1),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        site_admin: faker.datatype.boolean(),
        name: faker.person.fullName(),
        company: faker.lorem.slug(1),
        blog: faker.lorem.slug(1),
        location: faker.lorem.slug(1),
        email: faker.internet.email(),
        hireable: faker.datatype.boolean(),
        bio: faker.lorem.slug(1),
        twitter_username: faker.person.fullName(),
        public_repos: faker.number.int({ min: undefined, max: undefined }),
        public_gists: faker.number.int({ min: undefined, max: undefined }),
        followers: faker.number.int({ min: undefined, max: undefined }),
        following: faker.number.int({ min: undefined, max: undefined }),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        plan: {
          collaborators: faker.number.int({ min: undefined, max: undefined }),
          name: faker.person.fullName(),
          space: faker.number.int({ min: undefined, max: undefined }),
          private_repos: faker.number.int({ min: undefined, max: undefined }),
        },
        suspended_at: faker.date.past(),
        private_gists: 1,
        total_private_repos: 2,
        owned_private_repos: 2,
        disk_usage: 1,
        collaborators: 3,
      },
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
    })),
    history: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      version: faker.lorem.slug(1),
      committed_at: faker.date.past(),
      change_status: {
        total: faker.number.int({ min: undefined, max: undefined }),
        additions: faker.number.int({ min: undefined, max: undefined }),
        deletions: faker.number.int({ min: undefined, max: undefined }),
      },
      url: faker.internet.url(),
    })),
    fork_of: {
      url: faker.internet.url(),
      forks_url: faker.internet.url(),
      commits_url: faker.internet.url(),
      id: faker.lorem.slug(1),
      node_id: faker.lorem.slug(1),
      git_pull_url: faker.internet.url(),
      git_push_url: faker.internet.url(),
      html_url: faker.internet.url(),
      files: [...new Array(5).keys()]
        .map(_ => ({
          [faker.lorem.word()]: {
            filename: faker.person.fullName(),
            type: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            raw_url: faker.internet.url(),
            size: faker.number.int({ min: undefined, max: undefined }),
          },
        }))
        .reduce((acc, next) => Object.assign(acc, next), {}),
      public: faker.datatype.boolean(),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      description: faker.lorem.slug(1),
      comments: faker.number.int({ min: undefined, max: undefined }),
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      comments_url: faker.internet.url(),
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      truncated: faker.datatype.boolean(),
      forks: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
      history: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
    },
    url: faker.internet.url(),
    forks_url: faker.internet.url(),
    commits_url: faker.internet.url(),
    id: faker.lorem.slug(1),
    node_id: faker.lorem.slug(1),
    git_pull_url: faker.internet.url(),
    git_push_url: faker.internet.url(),
    html_url: faker.internet.url(),
    files: [...new Array(5).keys()]
      .map(_ => ({
        [faker.lorem.word()]: {
          filename: faker.person.fullName(),
          type: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          raw_url: faker.internet.url(),
          size: faker.number.int({ min: undefined, max: undefined }),
          truncated: faker.datatype.boolean(),
          content: faker.lorem.slug(1),
        },
      }))
      .reduce((acc, next) => Object.assign(acc, next), {}),
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    description: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    user: faker.lorem.slug(1),
    comments_url: faker.internet.url(),
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    truncated: faker.datatype.boolean(),
  };
}

export function getGistsUpdate404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsUpdate422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getGistsDelete403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsDelete404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsListComments200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1,
    node_id: 'MDExOkdpc3RDb21tZW50MQ==',
    url: 'https://api.github.com/gists/a6db0bec360bb87e9418/comments/1',
    body: 'Body of the attachment',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2011-04-18T23:23:56Z',
    updated_at: '2011-04-18T23:23:56Z',
    author_association: 'OWNER',
  }));
}

export function getGistsListComments403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsListComments404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsCreateComment201Response() {
  return {
    id: 1,
    node_id: 'MDExOkdpc3RDb21tZW50MQ==',
    url: 'https://api.github.com/gists/a6db0bec360bb87e9418/comments/1',
    body: 'Body of the attachment',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2011-04-18T23:23:56Z',
    updated_at: '2011-04-18T23:23:56Z',
    author_association: 'OWNER',
  };
}

export function getGistsCreateComment403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsCreateComment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsGetComment200Response() {
  return {
    id: 1,
    node_id: 'MDExOkdpc3RDb21tZW50MQ==',
    url: 'https://api.github.com/gists/a6db0bec360bb87e9418/comments/1',
    body: 'Body of the attachment',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2011-04-18T23:23:56Z',
    updated_at: '2011-04-18T23:23:56Z',
    author_association: 'OWNER',
  };
}

export function getGistsGetComment403Response() {
  return {
    block: {
      reason: faker.lorem.slug(1),
      created_at: faker.date.past(),
      html_url: faker.internet.url(),
    },
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getGistsGetComment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsUpdateComment200Response() {
  return {
    id: 1,
    node_id: 'MDExOkdpc3RDb21tZW50MQ==',
    url: 'https://api.github.com/gists/a6db0bec360bb87e9418/comments/1',
    body: 'Body of the attachment',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2011-04-18T23:23:56Z',
    updated_at: '2011-04-18T23:23:56Z',
    author_association: 'OWNER',
  };
}

export function getGistsUpdateComment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsDeleteComment403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsDeleteComment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsListCommits200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: 'https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f',
    version: '57a7f021a713b1c5a6a199b54cc514735d2d462f',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    change_status: {
      total: faker.number.int({ min: undefined, max: undefined }),
      additions: faker.number.int({ min: undefined, max: undefined }),
      deletions: faker.number.int({ min: undefined, max: undefined }),
    },
    committed_at: '2010-04-14T02:15:15Z',
  }));
}

export function getGistsListCommits403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsListCommits404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsListForks200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    forks: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.lorem.slug(1),
      url: faker.internet.url(),
      user: {
        login: faker.lorem.slug(1),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        site_admin: faker.datatype.boolean(),
        name: faker.person.fullName(),
        company: faker.lorem.slug(1),
        blog: faker.lorem.slug(1),
        location: faker.lorem.slug(1),
        email: faker.internet.email(),
        hireable: faker.datatype.boolean(),
        bio: faker.lorem.slug(1),
        twitter_username: faker.person.fullName(),
        public_repos: faker.number.int({ min: undefined, max: undefined }),
        public_gists: faker.number.int({ min: undefined, max: undefined }),
        followers: faker.number.int({ min: undefined, max: undefined }),
        following: faker.number.int({ min: undefined, max: undefined }),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        plan: {
          collaborators: faker.number.int({ min: undefined, max: undefined }),
          name: faker.person.fullName(),
          space: faker.number.int({ min: undefined, max: undefined }),
          private_repos: faker.number.int({ min: undefined, max: undefined }),
        },
        suspended_at: faker.date.past(),
        private_gists: 1,
        total_private_repos: 2,
        owned_private_repos: 2,
        disk_usage: 1,
        collaborators: 3,
      },
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
    })),
    history: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      version: faker.lorem.slug(1),
      committed_at: faker.date.past(),
      change_status: {
        total: faker.number.int({ min: undefined, max: undefined }),
        additions: faker.number.int({ min: undefined, max: undefined }),
        deletions: faker.number.int({ min: undefined, max: undefined }),
      },
      url: faker.internet.url(),
    })),
    fork_of: {
      url: faker.internet.url(),
      forks_url: faker.internet.url(),
      commits_url: faker.internet.url(),
      id: faker.lorem.slug(1),
      node_id: faker.lorem.slug(1),
      git_pull_url: faker.internet.url(),
      git_push_url: faker.internet.url(),
      html_url: faker.internet.url(),
      files: [...new Array(5).keys()]
        .map(_ => ({
          [faker.lorem.word()]: {
            filename: faker.person.fullName(),
            type: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            raw_url: faker.internet.url(),
            size: faker.number.int({ min: undefined, max: undefined }),
          },
        }))
        .reduce((acc, next) => Object.assign(acc, next), {}),
      public: faker.datatype.boolean(),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      description: faker.lorem.slug(1),
      comments: faker.number.int({ min: undefined, max: undefined }),
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      comments_url: faker.internet.url(),
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      truncated: faker.datatype.boolean(),
      forks: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
      history: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
    },
    url: faker.internet.url(),
    forks_url: faker.internet.url(),
    commits_url: faker.internet.url(),
    id: faker.lorem.slug(1),
    node_id: faker.lorem.slug(1),
    git_pull_url: faker.internet.url(),
    git_push_url: faker.internet.url(),
    html_url: faker.internet.url(),
    files: [...new Array(5).keys()]
      .map(_ => ({
        [faker.lorem.word()]: {
          filename: faker.person.fullName(),
          type: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          raw_url: faker.internet.url(),
          size: faker.number.int({ min: undefined, max: undefined }),
          truncated: faker.datatype.boolean(),
          content: faker.lorem.slug(1),
        },
      }))
      .reduce((acc, next) => Object.assign(acc, next), {}),
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    description: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    user: faker.lorem.slug(1),
    comments_url: faker.internet.url(),
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    truncated: faker.datatype.boolean(),
  }));
}

export function getGistsListForks403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsListForks404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsFork201Response() {
  return {
    url: faker.internet.url(),
    forks_url: faker.internet.url(),
    commits_url: faker.internet.url(),
    id: faker.lorem.slug(1),
    node_id: faker.lorem.slug(1),
    git_pull_url: faker.internet.url(),
    git_push_url: faker.internet.url(),
    html_url: faker.internet.url(),
    files: [...new Array(5).keys()]
      .map(_ => ({
        [faker.lorem.word()]: {
          filename: faker.person.fullName(),
          type: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          raw_url: faker.internet.url(),
          size: faker.number.int({ min: undefined, max: undefined }),
        },
      }))
      .reduce((acc, next) => Object.assign(acc, next), {}),
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    description: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    comments_url: faker.internet.url(),
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    truncated: faker.datatype.boolean(),
    forks: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
    history: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
  };
}

export function getGistsFork403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsFork404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsFork422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getGistsCheckIsStarred403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsCheckIsStarred404Response() {
  return {};
}

export function getGistsStar403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsStar404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsUnstar403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsUnstar404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsGetRevision200Response() {
  return {
    forks: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.lorem.slug(1),
      url: faker.internet.url(),
      user: {
        login: faker.lorem.slug(1),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        site_admin: faker.datatype.boolean(),
        name: faker.person.fullName(),
        company: faker.lorem.slug(1),
        blog: faker.lorem.slug(1),
        location: faker.lorem.slug(1),
        email: faker.internet.email(),
        hireable: faker.datatype.boolean(),
        bio: faker.lorem.slug(1),
        twitter_username: faker.person.fullName(),
        public_repos: faker.number.int({ min: undefined, max: undefined }),
        public_gists: faker.number.int({ min: undefined, max: undefined }),
        followers: faker.number.int({ min: undefined, max: undefined }),
        following: faker.number.int({ min: undefined, max: undefined }),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        plan: {
          collaborators: faker.number.int({ min: undefined, max: undefined }),
          name: faker.person.fullName(),
          space: faker.number.int({ min: undefined, max: undefined }),
          private_repos: faker.number.int({ min: undefined, max: undefined }),
        },
        suspended_at: faker.date.past(),
        private_gists: 1,
        total_private_repos: 2,
        owned_private_repos: 2,
        disk_usage: 1,
        collaborators: 3,
      },
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
    })),
    history: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      version: faker.lorem.slug(1),
      committed_at: faker.date.past(),
      change_status: {
        total: faker.number.int({ min: undefined, max: undefined }),
        additions: faker.number.int({ min: undefined, max: undefined }),
        deletions: faker.number.int({ min: undefined, max: undefined }),
      },
      url: faker.internet.url(),
    })),
    fork_of: {
      url: faker.internet.url(),
      forks_url: faker.internet.url(),
      commits_url: faker.internet.url(),
      id: faker.lorem.slug(1),
      node_id: faker.lorem.slug(1),
      git_pull_url: faker.internet.url(),
      git_push_url: faker.internet.url(),
      html_url: faker.internet.url(),
      files: [...new Array(5).keys()]
        .map(_ => ({
          [faker.lorem.word()]: {
            filename: faker.person.fullName(),
            type: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            raw_url: faker.internet.url(),
            size: faker.number.int({ min: undefined, max: undefined }),
          },
        }))
        .reduce((acc, next) => Object.assign(acc, next), {}),
      public: faker.datatype.boolean(),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      description: faker.lorem.slug(1),
      comments: faker.number.int({ min: undefined, max: undefined }),
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      comments_url: faker.internet.url(),
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      truncated: faker.datatype.boolean(),
      forks: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
      history: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
    },
    url: faker.internet.url(),
    forks_url: faker.internet.url(),
    commits_url: faker.internet.url(),
    id: faker.lorem.slug(1),
    node_id: faker.lorem.slug(1),
    git_pull_url: faker.internet.url(),
    git_push_url: faker.internet.url(),
    html_url: faker.internet.url(),
    files: [...new Array(5).keys()]
      .map(_ => ({
        [faker.lorem.word()]: {
          filename: faker.person.fullName(),
          type: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          raw_url: faker.internet.url(),
          size: faker.number.int({ min: undefined, max: undefined }),
          truncated: faker.datatype.boolean(),
          content: faker.lorem.slug(1),
        },
      }))
      .reduce((acc, next) => Object.assign(acc, next), {}),
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    description: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    user: faker.lorem.slug(1),
    comments_url: faker.internet.url(),
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    truncated: faker.datatype.boolean(),
  };
}

export function getGistsGetRevision403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsGetRevision404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGistsGetRevision422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getGitignoreGetAllTemplates200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1));
}

export function getGitignoreGetTemplate200Response() {
  return {
    name: 'C',
    source:
      '# Object files\n*.o\n\n# Libraries\n*.lib\n*.a\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n',
  };
}

export function getAppsListReposAccessibleToInstallation200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    repositories: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    })),
    repository_selection: 'selected',
  };
}

export function getAppsListReposAccessibleToInstallation401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsListReposAccessibleToInstallation403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesList200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    url: 'https://api.github.com/repositories/42/issues/1',
    repository_url: faker.internet.url(),
    labels_url: faker.internet.url(),
    comments_url: faker.internet.url(),
    events_url: faker.internet.url(),
    html_url: faker.internet.url(),
    number: 42,
    state: 'open',
    state_reason: 'not_planned',
    title: 'Widget creation fails in Safari on OS X 10.8',
    body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    labels: ['bug', 'registration'],
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    milestone: {
      url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
      html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
      labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
      id: 1002604,
      node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
      number: 42,
      state: 'open',
      title: 'v1.0',
      description: 'Tracking milestone for version 1.0',
      creator: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      open_issues: 4,
      closed_issues: 8,
      created_at: '2011-04-10T20:09:31Z',
      updated_at: '2014-03-03T18:58:10Z',
      closed_at: '2013-02-12T13:22:01Z',
      due_on: '2012-10-09T23:39:01Z',
    },
    locked: faker.datatype.boolean(),
    active_lock_reason: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    pull_request: {
      merged_at: faker.date.past(),
      diff_url: faker.internet.url(),
      html_url: faker.internet.url(),
      patch_url: faker.internet.url(),
      url: faker.internet.url(),
    },
    closed_at: faker.date.past(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    draft: faker.datatype.boolean(),
    closed_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    timeline_url: faker.internet.url(),
    repository: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    author_association: 'OWNER',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  }));
}

export function getIssuesList404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesList422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getLicensesGetAllCommonlyUsed200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    key: 'mit',
    name: 'MIT License',
    url: 'https://api.github.com/licenses/mit',
    spdx_id: 'MIT',
    node_id: 'MDc6TGljZW5zZW1pdA==',
    html_url: faker.internet.url(),
  }));
}

export function getLicensesGet200Response() {
  return {
    key: 'mit',
    name: 'MIT License',
    spdx_id: 'MIT',
    url: 'https://api.github.com/licenses/mit',
    node_id: 'MDc6TGljZW5zZW1pdA==',
    html_url: 'http://choosealicense.com/licenses/mit/',
    description:
      'A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty.',
    implementation:
      'Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders.',
    permissions: ['commercial-use', 'modifications', 'distribution', 'sublicense', 'private-use'],
    conditions: ['include-copyright'],
    limitations: ['no-liability'],
    body: '\n\nThe MIT License (MIT)\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n',
    featured: true,
  };
}

export function getLicensesGet403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getLicensesGet404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getMarkdownRender200Response() {
  return null;
}

export function getMarkdownRenderRaw200Response() {
  return null;
}

export function getMetaGet200Response() {
  return {
    verifiable_password_authentication: true,
    packages: ['13.65.0.0/16', '157.55.204.33/32', '2a01:111:f403:f90c::/62'],
    dependabot: ['192.168.7.15/32', '192.168.7.16/32'],
    installed_version: '3.3.0',
  };
}

export function getActivityListPublicEventsForRepoNetwork200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.lorem.slug(1),
    type: faker.lorem.slug(1),
    actor: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    repo: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    org: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    payload: {
      action: faker.lorem.slug(1),
      issue: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/1',
        repository_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: 42,
        state: 'open',
        state_reason: 'not_planned',
        title: 'Widget creation fails in Safari on OS X 10.8',
        body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        labels: ['bug', 'registration'],
        assignee: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        })),
        milestone: {
          url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
          html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
          labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
          id: 1002604,
          node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
          number: 42,
          state: 'open',
          title: 'v1.0',
          description: 'Tracking milestone for version 1.0',
          creator: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          open_issues: 4,
          closed_issues: 8,
          created_at: '2011-04-10T20:09:31Z',
          updated_at: '2014-03-03T18:58:10Z',
          closed_at: '2013-02-12T13:22:01Z',
          due_on: '2012-10-09T23:39:01Z',
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(1),
        comments: faker.number.int({ min: undefined, max: undefined }),
        pull_request: {
          merged_at: faker.date.past(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        body_html: faker.lorem.slug(1),
        body_text: faker.lorem.slug(1),
        timeline_url: faker.internet.url(),
        repository: {
          id: 42,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Team Environment',
          full_name: 'octocat/Hello-World',
          license: {
            key: 'mit',
            name: 'MIT License',
            url: 'https://api.github.com/licenses/mit',
            spdx_id: 'MIT',
            node_id: 'MDc6TGljZW5zZW1pdA==',
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          forks: faker.number.int({ min: undefined, max: undefined }),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          private: faker.datatype.boolean(),
          html_url: 'https://github.com/octocat/Hello-World',
          description: 'This your first repo!',
          fork: faker.datatype.boolean(),
          url: 'https://api.github.com/repos/octocat/Hello-World',
          archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
          assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
          blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
          branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
          collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
          comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
          commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
          compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
          contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
          contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
          deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
          downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
          events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
          forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
          git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
          git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
          git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
          git_url: 'git:github.com/octocat/Hello-World.git',
          issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
          issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
          issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
          keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
          labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
          languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
          merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
          milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
          notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
          pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
          releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
          ssh_url: 'git@github.com:octocat/Hello-World.git',
          stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
          statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
          subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
          subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
          tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
          teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
          trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
          clone_url: 'https://github.com/octocat/Hello-World.git',
          mirror_url: 'git:git.example.com/octocat/Hello-World',
          hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
          svn_url: 'https://svn.github.com/octocat/Hello-World',
          homepage: 'https://github.com',
          language: faker.lorem.slug(1),
          forks_count: 9,
          stargazers_count: 80,
          watchers_count: 80,
          size: 108,
          default_branch: 'master',
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: true,
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: true,
          has_projects: true,
          has_wiki: true,
          has_pages: faker.datatype.boolean(),
          has_downloads: true,
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: '2011-01-26T19:06:43Z',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:14:43Z',
          allow_rebase_merge: true,
          template_repository: {
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            name: faker.person.fullName(),
            full_name: faker.person.fullName(),
            owner: {
              login: faker.lorem.slug(1),
              id: faker.number.int({ min: undefined, max: undefined }),
              node_id: faker.lorem.slug(1),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(1),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.internet.url(),
            assignees_url: faker.internet.url(),
            blobs_url: faker.internet.url(),
            branches_url: faker.internet.url(),
            collaborators_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            compare_url: faker.internet.url(),
            contents_url: faker.internet.url(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.internet.url(),
            git_refs_url: faker.internet.url(),
            git_tags_url: faker.internet.url(),
            git_url: faker.internet.url(),
            issue_comment_url: faker.internet.url(),
            issue_events_url: faker.internet.url(),
            issues_url: faker.internet.url(),
            keys_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.internet.url(),
            notifications_url: faker.internet.url(),
            pulls_url: faker.internet.url(),
            releases_url: faker.internet.url(),
            ssh_url: faker.internet.url(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.internet.url(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.internet.url(),
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.number.int({ min: undefined, max: undefined }),
            stargazers_count: faker.number.int({ min: undefined, max: undefined }),
            watchers_count: faker.number.int({ min: undefined, max: undefined }),
            size: faker.number.int({ min: undefined, max: undefined }),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.number.int({ min: undefined, max: undefined }),
            is_template: faker.datatype.boolean(),
            topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
              faker.lorem.slug(1)
            ),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.number.int({ min: undefined, max: undefined }),
            network_count: faker.number.int({ min: undefined, max: undefined }),
          },
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: true,
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: true,
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
          open_issues: faker.number.int({ min: undefined, max: undefined }),
          watchers: faker.number.int({ min: undefined, max: undefined }),
          master_branch: faker.lorem.slug(1),
          starred_at: '"2020-07-09T00:17:42Z"',
          anonymous_access_enabled: faker.datatype.boolean(),
        },
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        author_association: 'OWNER',
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      comment: {
        id: 42,
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/comments/1',
        body: 'What version of Safari were you using when you observed this bug?',
        body_text: faker.lorem.slug(1),
        body_html: faker.lorem.slug(1),
        html_url: faker.internet.url(),
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        created_at: '2011-04-14T16:00:49Z',
        updated_at: '2011-04-14T16:00:49Z',
        issue_url: faker.internet.url(),
        author_association: 'OWNER',
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      pages: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        page_name: faker.person.fullName(),
        title: faker.lorem.slug(1),
        summary: faker.lorem.slug(1),
        action: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        html_url: faker.internet.url(),
      })),
    },
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
  }));
}

export function getActivityListPublicEventsForRepoNetwork301Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityListPublicEventsForRepoNetwork403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityListPublicEventsForRepoNetwork404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityListNotificationsForAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.lorem.slug(1),
    repository: {
      id: 1296269,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Hello-World',
      full_name: 'octocat/Hello-World',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: faker.internet.url(),
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: faker.internet.url(),
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      temp_clone_token: faker.lorem.slug(1),
      delete_branch_on_merge: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      code_of_conduct: {
        key: 'contributor_covenant',
        name: 'Contributor Covenant',
        url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
        body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
        html_url: faker.internet.url(),
      },
      license: {
        key: faker.lorem.slug(1),
        name: faker.person.fullName(),
        spdx_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        node_id: faker.lorem.slug(1),
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      allow_forking: faker.datatype.boolean(),
    },
    subject: {
      title: faker.lorem.slug(1),
      url: faker.internet.url(),
      latest_comment_url: faker.internet.url(),
      type: faker.lorem.slug(1),
    },
    reason: faker.lorem.slug(1),
    unread: faker.datatype.boolean(),
    updated_at: faker.date.past(),
    last_read_at: faker.date.past(),
    url: faker.internet.url(),
    subscription_url: 'https://api.github.com/notifications/threads/2/subscription',
  }));
}

export function getActivityListNotificationsForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityListNotificationsForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityListNotificationsForAuthenticatedUser422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getActivityMarkNotificationsAsRead202Response() {
  return {
    message: faker.lorem.slug(1),
  };
}

export function getActivityMarkNotificationsAsRead401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityMarkNotificationsAsRead403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityGetThread200Response() {
  return {
    id: faker.lorem.slug(1),
    repository: {
      id: 1296269,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Hello-World',
      full_name: 'octocat/Hello-World',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: faker.internet.url(),
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: faker.internet.url(),
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      temp_clone_token: faker.lorem.slug(1),
      delete_branch_on_merge: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      code_of_conduct: {
        key: 'contributor_covenant',
        name: 'Contributor Covenant',
        url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
        body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
        html_url: faker.internet.url(),
      },
      license: {
        key: faker.lorem.slug(1),
        name: faker.person.fullName(),
        spdx_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        node_id: faker.lorem.slug(1),
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      allow_forking: faker.datatype.boolean(),
    },
    subject: {
      title: faker.lorem.slug(1),
      url: faker.internet.url(),
      latest_comment_url: faker.internet.url(),
      type: faker.lorem.slug(1),
    },
    reason: faker.lorem.slug(1),
    unread: faker.datatype.boolean(),
    updated_at: faker.date.past(),
    last_read_at: faker.date.past(),
    url: faker.internet.url(),
    subscription_url: 'https://api.github.com/notifications/threads/2/subscription',
  };
}

export function getActivityGetThread401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityGetThread403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityMarkThreadAsRead403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityGetThreadSubscriptionForAuthenticatedUser200Response() {
  return {
    subscribed: true,
    ignored: faker.datatype.boolean(),
    reason: faker.lorem.slug(1),
    created_at: '2012-10-06T21:34:12Z',
    url: 'https://api.github.com/notifications/threads/1/subscription',
    thread_url: 'https://api.github.com/notifications/threads/1',
    repository_url: 'https://api.github.com/repos/1',
  };
}

export function getActivityGetThreadSubscriptionForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityGetThreadSubscriptionForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivitySetThreadSubscription200Response() {
  return {
    subscribed: true,
    ignored: faker.datatype.boolean(),
    reason: faker.lorem.slug(1),
    created_at: '2012-10-06T21:34:12Z',
    url: 'https://api.github.com/notifications/threads/1/subscription',
    thread_url: 'https://api.github.com/notifications/threads/1',
    repository_url: 'https://api.github.com/repos/1',
  };
}

export function getActivitySetThreadSubscription401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivitySetThreadSubscription403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityDeleteThreadSubscription401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityDeleteThreadSubscription403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getMetaGetOctocat200Response() {
  return null;
}

export function getOrgsList200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    login: 'github',
    id: 1,
    node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
    url: 'https://api.github.com/orgs/github',
    repos_url: 'https://api.github.com/orgs/github/repos',
    events_url: 'https://api.github.com/orgs/github/events',
    hooks_url: 'https://api.github.com/orgs/github/hooks',
    issues_url: 'https://api.github.com/orgs/github/issues',
    members_url: 'https://api.github.com/orgs/github/members{/member}',
    public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    description: 'A great organization',
  }));
}

export function getOrgsGet200Response() {
  return {
    login: 'github',
    id: 1,
    node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
    url: 'https://api.github.com/orgs/github',
    repos_url: 'https://api.github.com/orgs/github/repos',
    events_url: 'https://api.github.com/orgs/github/events',
    hooks_url: 'https://api.github.com/orgs/github/hooks',
    issues_url: 'https://api.github.com/orgs/github/issues',
    members_url: 'https://api.github.com/orgs/github/members{/member}',
    public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    description: 'A great organization',
    name: 'github',
    company: 'GitHub',
    blog: 'https://github.com/blog',
    location: 'San Francisco',
    email: 'octocat@github.com',
    twitter_username: 'github',
    is_verified: true,
    has_organization_projects: true,
    has_repository_projects: true,
    public_repos: 2,
    public_gists: 1,
    followers: 20,
    following: faker.number.int({ min: undefined, max: undefined }),
    html_url: 'https://github.com/octocat',
    created_at: '2008-01-14T04:33:35Z',
    type: 'Organization',
    total_private_repos: 100,
    owned_private_repos: 100,
    private_gists: 81,
    disk_usage: 10000,
    collaborators: 8,
    billing_email: 'org@example.com',
    plan: {
      name: faker.person.fullName(),
      space: faker.number.int({ min: undefined, max: undefined }),
      private_repos: faker.number.int({ min: undefined, max: undefined }),
      filled_seats: faker.number.int({ min: undefined, max: undefined }),
      seats: faker.number.int({ min: undefined, max: undefined }),
    },
    default_repository_permission: faker.lorem.slug(1),
    members_can_create_repositories: true,
    two_factor_requirement_enabled: true,
    members_allowed_repository_creation_type: 'all',
    members_can_create_public_repositories: true,
    members_can_create_private_repositories: true,
    members_can_create_internal_repositories: true,
    members_can_create_pages: true,
    members_can_create_public_pages: true,
    members_can_create_private_pages: true,
    updated_at: faker.date.past(),
  };
}

export function getOrgsGet404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsUpdate200Response() {
  return {
    login: 'github',
    id: 1,
    node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
    url: 'https://api.github.com/orgs/github',
    repos_url: 'https://api.github.com/orgs/github/repos',
    events_url: 'https://api.github.com/orgs/github/events',
    hooks_url: 'https://api.github.com/orgs/github/hooks',
    issues_url: 'https://api.github.com/orgs/github/issues',
    members_url: 'https://api.github.com/orgs/github/members{/member}',
    public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    description: 'A great organization',
    name: 'github',
    company: 'GitHub',
    blog: 'https://github.com/blog',
    location: 'San Francisco',
    email: 'octocat@github.com',
    twitter_username: 'github',
    is_verified: true,
    has_organization_projects: true,
    has_repository_projects: true,
    public_repos: 2,
    public_gists: 1,
    followers: 20,
    following: faker.number.int({ min: undefined, max: undefined }),
    html_url: 'https://github.com/octocat',
    created_at: '2008-01-14T04:33:35Z',
    type: 'Organization',
    total_private_repos: 100,
    owned_private_repos: 100,
    private_gists: 81,
    disk_usage: 10000,
    collaborators: 8,
    billing_email: 'org@example.com',
    plan: {
      name: faker.person.fullName(),
      space: faker.number.int({ min: undefined, max: undefined }),
      private_repos: faker.number.int({ min: undefined, max: undefined }),
      filled_seats: faker.number.int({ min: undefined, max: undefined }),
      seats: faker.number.int({ min: undefined, max: undefined }),
    },
    default_repository_permission: faker.lorem.slug(1),
    members_can_create_repositories: true,
    two_factor_requirement_enabled: true,
    members_allowed_repository_creation_type: 'all',
    members_can_create_public_repositories: true,
    members_can_create_private_repositories: true,
    members_can_create_internal_repositories: true,
    members_can_create_pages: true,
    members_can_create_public_pages: true,
    members_can_create_private_pages: true,
    updated_at: faker.date.past(),
  };
}

export function getOrgsUpdate409Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsUpdate422Response() {
  return faker.helpers.arrayElement([
    {
      message: faker.lorem.slug(1),
      documentation_url: faker.internet.url(),
      errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        resource: faker.lorem.slug(1),
        field: faker.lorem.slug(1),
        message: faker.lorem.slug(1),
        code: faker.lorem.slug(1),
        index: faker.number.int({ min: undefined, max: undefined }),
        value: faker.helpers.arrayElement([
          faker.lorem.slug(1),
          faker.number.int({ min: undefined, max: undefined }),
          [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
        ]),
      })),
    },
    {
      message: faker.lorem.slug(1),
      documentation_url: faker.internet.url(),
      errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    },
  ]);
}

export function getActionsGetGithubActionsPermissionsOrganization200Response() {
  return {
    enabled_repositories: faker.helpers.arrayElement(['all', 'none', 'selected']),
    selected_repositories_url: faker.internet.url(),
    allowed_actions: faker.helpers.arrayElement(['all', 'local_only', 'selected']),
    selected_actions_url: faker.internet.url(),
  };
}

export function getActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    repositories: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    })),
  };
}

export function getActionsGetAllowedActionsOrganization200Response() {
  return {
    github_owned_allowed: faker.datatype.boolean(),
    patterns_allowed: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
      faker.lorem.slug(1)
    ),
  };
}

export function getActionsListSelfHostedRunnerGroupsForOrg200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    runner_groups: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      visibility: faker.lorem.slug(1),
      default: faker.datatype.boolean(),
      selected_repositories_url: faker.internet.url(),
      runners_url: faker.internet.url(),
      inherited: faker.datatype.boolean(),
      inherited_allows_public_repositories: faker.datatype.boolean(),
      allows_public_repositories: faker.datatype.boolean(),
    })),
  };
}

export function getActionsCreateSelfHostedRunnerGroupForOrg201Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    visibility: faker.lorem.slug(1),
    default: faker.datatype.boolean(),
    selected_repositories_url: faker.internet.url(),
    runners_url: faker.internet.url(),
    inherited: faker.datatype.boolean(),
    inherited_allows_public_repositories: faker.datatype.boolean(),
    allows_public_repositories: faker.datatype.boolean(),
  };
}

export function getActionsGetSelfHostedRunnerGroupForOrg200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    visibility: faker.lorem.slug(1),
    default: faker.datatype.boolean(),
    selected_repositories_url: faker.internet.url(),
    runners_url: faker.internet.url(),
    inherited: faker.datatype.boolean(),
    inherited_allows_public_repositories: faker.datatype.boolean(),
    allows_public_repositories: faker.datatype.boolean(),
  };
}

export function getActionsUpdateSelfHostedRunnerGroupForOrg200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    visibility: faker.lorem.slug(1),
    default: faker.datatype.boolean(),
    selected_repositories_url: faker.internet.url(),
    runners_url: faker.internet.url(),
    inherited: faker.datatype.boolean(),
    inherited_allows_public_repositories: faker.datatype.boolean(),
    allows_public_repositories: faker.datatype.boolean(),
  };
}

export function getActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    repositories: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 1296269,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Hello-World',
      full_name: 'octocat/Hello-World',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: faker.internet.url(),
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: faker.internet.url(),
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      temp_clone_token: faker.lorem.slug(1),
      delete_branch_on_merge: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      code_of_conduct: {
        key: 'contributor_covenant',
        name: 'Contributor Covenant',
        url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
        body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
        html_url: faker.internet.url(),
      },
      license: {
        key: faker.lorem.slug(1),
        name: faker.person.fullName(),
        spdx_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        node_id: faker.lorem.slug(1),
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      allow_forking: faker.datatype.boolean(),
    })),
  };
}

export function getActionsListSelfHostedRunnersInGroupForOrg200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    runners: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 5,
      name: 'iMac',
      os: 'macos',
      status: 'online',
      busy: faker.datatype.boolean(),
      labels: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.person.fullName(),
        type: faker.helpers.arrayElement(['read-only', 'custom']),
      })),
    })),
  };
}

export function getActionsListSelfHostedRunnersForOrg200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    runners: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 5,
      name: 'iMac',
      os: 'macos',
      status: 'online',
      busy: faker.datatype.boolean(),
      labels: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.person.fullName(),
        type: faker.helpers.arrayElement(['read-only', 'custom']),
      })),
    })),
  };
}

export function getActionsListRunnerApplicationsForOrg200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    os: faker.lorem.slug(1),
    architecture: faker.lorem.slug(1),
    download_url: faker.internet.url(),
    filename: faker.person.fullName(),
    temp_download_token: faker.lorem.slug(1),
    sha256_checksum: faker.lorem.slug(1),
  }));
}

export function getActionsCreateRegistrationTokenForOrg201Response() {
  return {
    token: 'v1.1f699f1069f60xxx',
    expires_at: '2016-07-11T22:14:10Z',
    permissions: { issues: 'read', deployments: 'write' },
    repositories: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    })),
    single_file: 'config.yaml',
    repository_selection: faker.helpers.arrayElement(['all', 'selected']),
  };
}

export function getActionsCreateRemoveTokenForOrg201Response() {
  return {
    token: 'v1.1f699f1069f60xxx',
    expires_at: '2016-07-11T22:14:10Z',
    permissions: { issues: 'read', deployments: 'write' },
    repositories: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    })),
    single_file: 'config.yaml',
    repository_selection: faker.helpers.arrayElement(['all', 'selected']),
  };
}

export function getActionsGetSelfHostedRunnerForOrg200Response() {
  return {
    id: 5,
    name: 'iMac',
    os: 'macos',
    status: 'online',
    busy: faker.datatype.boolean(),
    labels: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      type: faker.helpers.arrayElement(['read-only', 'custom']),
    })),
  };
}

export function getActionsListOrgSecrets200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    secrets: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: 'SECRET_TOKEN',
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      visibility: faker.helpers.arrayElement(['all', 'private', 'selected']),
      selected_repositories_url: 'https://api.github.com/organizations/org/secrets/my_secret/repositories',
    })),
  };
}

export function getActionsGetOrgPublicKey200Response() {
  return {
    key_id: '1234567',
    key: 'hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=',
    id: 2,
    url: 'https://api.github.com/user/keys/2',
    title: 'ssh-rsa AAAAB3NzaC1yc2EAAA',
    created_at: '2011-01-26T19:01:12Z',
  };
}

export function getActionsGetOrgSecret200Response() {
  return {
    name: 'SECRET_TOKEN',
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    visibility: faker.helpers.arrayElement(['all', 'private', 'selected']),
    selected_repositories_url: 'https://api.github.com/organizations/org/secrets/my_secret/repositories',
  };
}

export function getActionsCreateOrUpdateOrgSecret201Response() {
  return {};
}

export function getActionsListSelectedReposForOrgSecret200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    repositories: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 1296269,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Hello-World',
      full_name: 'octocat/Hello-World',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: faker.internet.url(),
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: faker.internet.url(),
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      temp_clone_token: faker.lorem.slug(1),
      delete_branch_on_merge: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      code_of_conduct: {
        key: 'contributor_covenant',
        name: 'Contributor Covenant',
        url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
        body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
        html_url: faker.internet.url(),
      },
      license: {
        key: faker.lorem.slug(1),
        name: faker.person.fullName(),
        spdx_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        node_id: faker.lorem.slug(1),
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      allow_forking: faker.datatype.boolean(),
    })),
  };
}

export function getOrgsGetAuditLog200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    '@timestamp': faker.number.int({ min: undefined, max: undefined }),
    action: faker.lorem.slug(1),
    active: faker.datatype.boolean(),
    active_was: faker.datatype.boolean(),
    actor: faker.lorem.slug(1),
    actor_id: faker.number.int({ min: undefined, max: undefined }),
    actor_location: {
      country_name: faker.person.fullName(),
    },
    data: {},
    org_id: faker.number.int({ min: undefined, max: undefined }),
    user_id: faker.number.int({ min: undefined, max: undefined }),
    business_id: faker.number.int({ min: undefined, max: undefined }),
    blocked_user: faker.lorem.slug(1),
    business: faker.lorem.slug(1),
    config: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({})),
    config_was: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({})),
    content_type: faker.lorem.slug(1),
    operation_type: faker.lorem.slug(1),
    created_at: faker.number.int({ min: undefined, max: undefined }),
    deploy_key_fingerprint: faker.lorem.slug(1),
    _document_id: faker.lorem.slug(1),
    emoji: faker.lorem.slug(1),
    events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({})),
    events_were: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({})),
    explanation: faker.lorem.slug(1),
    fingerprint: faker.lorem.slug(1),
    hook_id: faker.number.int({ min: undefined, max: undefined }),
    limited_availability: faker.datatype.boolean(),
    message: faker.lorem.slug(1),
    name: faker.person.fullName(),
    old_user: faker.lorem.slug(1),
    openssh_public_key: faker.lorem.slug(1),
    org: faker.lorem.slug(1),
    previous_visibility: faker.lorem.slug(1),
    read_only: faker.datatype.boolean(),
    repo: faker.lorem.slug(1),
    repository: faker.lorem.slug(1),
    repository_public: faker.datatype.boolean(),
    target_login: faker.lorem.slug(1),
    team: faker.lorem.slug(1),
    transport_protocol: faker.number.int({ min: undefined, max: undefined }),
    transport_protocol_name: faker.person.fullName(),
    user: faker.lorem.slug(1),
    visibility: faker.lorem.slug(1),
  }));
}

export function getActivityListPublicOrgEvents200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.lorem.slug(1),
    type: faker.lorem.slug(1),
    actor: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    repo: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    org: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    payload: {
      action: faker.lorem.slug(1),
      issue: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/1',
        repository_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: 42,
        state: 'open',
        state_reason: 'not_planned',
        title: 'Widget creation fails in Safari on OS X 10.8',
        body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        labels: ['bug', 'registration'],
        assignee: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        })),
        milestone: {
          url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
          html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
          labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
          id: 1002604,
          node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
          number: 42,
          state: 'open',
          title: 'v1.0',
          description: 'Tracking milestone for version 1.0',
          creator: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          open_issues: 4,
          closed_issues: 8,
          created_at: '2011-04-10T20:09:31Z',
          updated_at: '2014-03-03T18:58:10Z',
          closed_at: '2013-02-12T13:22:01Z',
          due_on: '2012-10-09T23:39:01Z',
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(1),
        comments: faker.number.int({ min: undefined, max: undefined }),
        pull_request: {
          merged_at: faker.date.past(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        body_html: faker.lorem.slug(1),
        body_text: faker.lorem.slug(1),
        timeline_url: faker.internet.url(),
        repository: {
          id: 42,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Team Environment',
          full_name: 'octocat/Hello-World',
          license: {
            key: 'mit',
            name: 'MIT License',
            url: 'https://api.github.com/licenses/mit',
            spdx_id: 'MIT',
            node_id: 'MDc6TGljZW5zZW1pdA==',
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          forks: faker.number.int({ min: undefined, max: undefined }),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          private: faker.datatype.boolean(),
          html_url: 'https://github.com/octocat/Hello-World',
          description: 'This your first repo!',
          fork: faker.datatype.boolean(),
          url: 'https://api.github.com/repos/octocat/Hello-World',
          archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
          assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
          blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
          branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
          collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
          comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
          commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
          compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
          contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
          contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
          deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
          downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
          events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
          forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
          git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
          git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
          git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
          git_url: 'git:github.com/octocat/Hello-World.git',
          issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
          issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
          issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
          keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
          labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
          languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
          merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
          milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
          notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
          pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
          releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
          ssh_url: 'git@github.com:octocat/Hello-World.git',
          stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
          statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
          subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
          subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
          tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
          teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
          trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
          clone_url: 'https://github.com/octocat/Hello-World.git',
          mirror_url: 'git:git.example.com/octocat/Hello-World',
          hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
          svn_url: 'https://svn.github.com/octocat/Hello-World',
          homepage: 'https://github.com',
          language: faker.lorem.slug(1),
          forks_count: 9,
          stargazers_count: 80,
          watchers_count: 80,
          size: 108,
          default_branch: 'master',
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: true,
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: true,
          has_projects: true,
          has_wiki: true,
          has_pages: faker.datatype.boolean(),
          has_downloads: true,
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: '2011-01-26T19:06:43Z',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:14:43Z',
          allow_rebase_merge: true,
          template_repository: {
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            name: faker.person.fullName(),
            full_name: faker.person.fullName(),
            owner: {
              login: faker.lorem.slug(1),
              id: faker.number.int({ min: undefined, max: undefined }),
              node_id: faker.lorem.slug(1),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(1),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.internet.url(),
            assignees_url: faker.internet.url(),
            blobs_url: faker.internet.url(),
            branches_url: faker.internet.url(),
            collaborators_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            compare_url: faker.internet.url(),
            contents_url: faker.internet.url(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.internet.url(),
            git_refs_url: faker.internet.url(),
            git_tags_url: faker.internet.url(),
            git_url: faker.internet.url(),
            issue_comment_url: faker.internet.url(),
            issue_events_url: faker.internet.url(),
            issues_url: faker.internet.url(),
            keys_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.internet.url(),
            notifications_url: faker.internet.url(),
            pulls_url: faker.internet.url(),
            releases_url: faker.internet.url(),
            ssh_url: faker.internet.url(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.internet.url(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.internet.url(),
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.number.int({ min: undefined, max: undefined }),
            stargazers_count: faker.number.int({ min: undefined, max: undefined }),
            watchers_count: faker.number.int({ min: undefined, max: undefined }),
            size: faker.number.int({ min: undefined, max: undefined }),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.number.int({ min: undefined, max: undefined }),
            is_template: faker.datatype.boolean(),
            topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
              faker.lorem.slug(1)
            ),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.number.int({ min: undefined, max: undefined }),
            network_count: faker.number.int({ min: undefined, max: undefined }),
          },
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: true,
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: true,
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
          open_issues: faker.number.int({ min: undefined, max: undefined }),
          watchers: faker.number.int({ min: undefined, max: undefined }),
          master_branch: faker.lorem.slug(1),
          starred_at: '"2020-07-09T00:17:42Z"',
          anonymous_access_enabled: faker.datatype.boolean(),
        },
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        author_association: 'OWNER',
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      comment: {
        id: 42,
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/comments/1',
        body: 'What version of Safari were you using when you observed this bug?',
        body_text: faker.lorem.slug(1),
        body_html: faker.lorem.slug(1),
        html_url: faker.internet.url(),
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        created_at: '2011-04-14T16:00:49Z',
        updated_at: '2011-04-14T16:00:49Z',
        issue_url: faker.internet.url(),
        author_association: 'OWNER',
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      pages: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        page_name: faker.person.fullName(),
        title: faker.lorem.slug(1),
        summary: faker.lorem.slug(1),
        action: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        html_url: faker.internet.url(),
      })),
    },
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
  }));
}

export function getOrgsListWebhooks200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1,
    url: 'https://api.github.com/orgs/octocat/hooks/1',
    ping_url: 'https://api.github.com/orgs/octocat/hooks/1/pings',
    deliveries_url: 'https://api.github.com/orgs/octocat/hooks/1/deliveries',
    name: 'web',
    events: ['push', 'pull_request'],
    active: true,
    config: {
      url: '"http://example.com/2"',
      insecure_ssl: '"0"',
      content_type: '"form"',
      secret: '"********"',
    },
    updated_at: '2011-09-06T20:39:23Z',
    created_at: '2011-09-06T17:26:27Z',
    type: faker.lorem.slug(1),
  }));
}

export function getOrgsListWebhooks404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsCreateWebhook201Response() {
  return {
    id: 1,
    url: 'https://api.github.com/orgs/octocat/hooks/1',
    ping_url: 'https://api.github.com/orgs/octocat/hooks/1/pings',
    deliveries_url: 'https://api.github.com/orgs/octocat/hooks/1/deliveries',
    name: 'web',
    events: ['push', 'pull_request'],
    active: true,
    config: {
      url: '"http://example.com/2"',
      insecure_ssl: '"0"',
      content_type: '"form"',
      secret: '"********"',
    },
    updated_at: '2011-09-06T20:39:23Z',
    created_at: '2011-09-06T17:26:27Z',
    type: faker.lorem.slug(1),
  };
}

export function getOrgsCreateWebhook404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsCreateWebhook422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getOrgsGetWebhook200Response() {
  return {
    id: 1,
    url: 'https://api.github.com/orgs/octocat/hooks/1',
    ping_url: 'https://api.github.com/orgs/octocat/hooks/1/pings',
    deliveries_url: 'https://api.github.com/orgs/octocat/hooks/1/deliveries',
    name: 'web',
    events: ['push', 'pull_request'],
    active: true,
    config: {
      url: '"http://example.com/2"',
      insecure_ssl: '"0"',
      content_type: '"form"',
      secret: '"********"',
    },
    updated_at: '2011-09-06T20:39:23Z',
    created_at: '2011-09-06T17:26:27Z',
    type: faker.lorem.slug(1),
  };
}

export function getOrgsGetWebhook404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsUpdateWebhook200Response() {
  return {
    id: 1,
    url: 'https://api.github.com/orgs/octocat/hooks/1',
    ping_url: 'https://api.github.com/orgs/octocat/hooks/1/pings',
    deliveries_url: 'https://api.github.com/orgs/octocat/hooks/1/deliveries',
    name: 'web',
    events: ['push', 'pull_request'],
    active: true,
    config: {
      url: '"http://example.com/2"',
      insecure_ssl: '"0"',
      content_type: '"form"',
      secret: '"********"',
    },
    updated_at: '2011-09-06T20:39:23Z',
    created_at: '2011-09-06T17:26:27Z',
    type: faker.lorem.slug(1),
  };
}

export function getOrgsUpdateWebhook404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsUpdateWebhook422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getOrgsDeleteWebhook404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsGetWebhookConfigForOrg200Response() {
  return {
    url: 'https://example.com/webhook',
    content_type: '"json"',
    secret: '"********"',
    insecure_ssl: faker.helpers.arrayElement(['"0"', faker.number.int({ min: undefined, max: undefined })]),
  };
}

export function getOrgsUpdateWebhookConfigForOrg200Response() {
  return {
    url: 'https://example.com/webhook',
    content_type: '"json"',
    secret: '"********"',
    insecure_ssl: faker.helpers.arrayElement(['"0"', faker.number.int({ min: undefined, max: undefined })]),
  };
}

export function getOrgsListWebhookDeliveries200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 42,
    guid: '58474f00-b361-11eb-836d-0e4f3503ccbe',
    delivered_at: '2021-05-12T20:33:44Z',
    redelivery: faker.datatype.boolean(),
    duration: 0.03,
    status: 'failed to connect',
    status_code: 502,
    event: 'issues',
    action: 'opened',
    installation_id: 123,
    repository_id: 123,
  }));
}

export function getOrgsListWebhookDeliveries400Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsListWebhookDeliveries422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getOrgsGetWebhookDelivery200Response() {
  return {
    id: 42,
    guid: '58474f00-b361-11eb-836d-0e4f3503ccbe',
    delivered_at: '2021-05-12T20:33:44Z',
    redelivery: faker.datatype.boolean(),
    duration: 0.03,
    status: 'failed to connect',
    status_code: 502,
    event: 'issues',
    action: 'opened',
    installation_id: 123,
    repository_id: 123,
    url: 'https://www.example.com',
    request: {
      headers: {},
      payload: {},
    },
    response: {
      headers: {},
      payload: faker.lorem.slug(1),
    },
  };
}

export function getOrgsGetWebhookDelivery400Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsGetWebhookDelivery422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getOrgsRedeliverWebhookDelivery202Response() {
  return {};
}

export function getOrgsRedeliverWebhookDelivery400Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsRedeliverWebhookDelivery422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getOrgsPingWebhook404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsGetOrgInstallation200Response() {
  return {
    id: 1,
    account: faker.helpers.arrayElement([
      {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      {
        description: faker.lorem.slug(1),
        html_url: 'https://github.com/enterprises/octo-business',
        website_url: faker.internet.url(),
        id: 42,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Octo Business',
        slug: 'octo-business',
        created_at: '2019-01-26T19:01:12Z',
        updated_at: '2019-01-26T19:14:43Z',
        avatar_url: faker.internet.url(),
      },
    ]),
    repository_selection: faker.helpers.arrayElement(['all', 'selected']),
    access_tokens_url: 'https://api.github.com/installations/1/access_tokens',
    repositories_url: 'https://api.github.com/installation/repositories',
    html_url: 'https://github.com/organizations/github/settings/installations/1',
    app_id: 1,
    target_id: faker.number.int({ min: undefined, max: undefined }),
    target_type: 'Organization',
    permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
    events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    single_file_name: 'config.yaml',
    has_multiple_single_files: true,
    single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
    app_slug: 'github-actions',
    suspended_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    suspended_at: faker.date.past(),
    contact_email: '"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"',
  };
}

export function getOrgsListAppInstallations200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    installations: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 1,
      account: faker.helpers.arrayElement([
        {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        {
          description: faker.lorem.slug(1),
          html_url: 'https://github.com/enterprises/octo-business',
          website_url: faker.internet.url(),
          id: 42,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Octo Business',
          slug: 'octo-business',
          created_at: '2019-01-26T19:01:12Z',
          updated_at: '2019-01-26T19:14:43Z',
          avatar_url: faker.internet.url(),
        },
      ]),
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      access_tokens_url: 'https://api.github.com/installations/1/access_tokens',
      repositories_url: 'https://api.github.com/installation/repositories',
      html_url: 'https://github.com/organizations/github/settings/installations/1',
      app_id: 1,
      target_id: faker.number.int({ min: undefined, max: undefined }),
      target_type: 'Organization',
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      app_slug: 'github-actions',
      suspended_by: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      suspended_at: faker.date.past(),
      contact_email: '"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"',
    })),
  };
}

export function getIssuesListForOrg200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    url: 'https://api.github.com/repositories/42/issues/1',
    repository_url: faker.internet.url(),
    labels_url: faker.internet.url(),
    comments_url: faker.internet.url(),
    events_url: faker.internet.url(),
    html_url: faker.internet.url(),
    number: 42,
    state: 'open',
    state_reason: 'not_planned',
    title: 'Widget creation fails in Safari on OS X 10.8',
    body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    labels: ['bug', 'registration'],
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    milestone: {
      url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
      html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
      labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
      id: 1002604,
      node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
      number: 42,
      state: 'open',
      title: 'v1.0',
      description: 'Tracking milestone for version 1.0',
      creator: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      open_issues: 4,
      closed_issues: 8,
      created_at: '2011-04-10T20:09:31Z',
      updated_at: '2014-03-03T18:58:10Z',
      closed_at: '2013-02-12T13:22:01Z',
      due_on: '2012-10-09T23:39:01Z',
    },
    locked: faker.datatype.boolean(),
    active_lock_reason: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    pull_request: {
      merged_at: faker.date.past(),
      diff_url: faker.internet.url(),
      html_url: faker.internet.url(),
      patch_url: faker.internet.url(),
      url: faker.internet.url(),
    },
    closed_at: faker.date.past(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    draft: faker.datatype.boolean(),
    closed_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    timeline_url: faker.internet.url(),
    repository: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    author_association: 'OWNER',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  }));
}

export function getIssuesListForOrg404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsListMembers200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  }));
}

export function getOrgsListMembers422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getOrgsRemoveMember403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsGetMembershipForUser200Response() {
  return {
    url: 'https://api.github.com/orgs/octocat/memberships/defunkt',
    state: 'active',
    role: 'admin',
    organization_url: 'https://api.github.com/orgs/octocat',
    organization: {
      login: 'github',
      id: 1,
      node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
      url: 'https://api.github.com/orgs/github',
      repos_url: 'https://api.github.com/orgs/github/repos',
      events_url: 'https://api.github.com/orgs/github/events',
      hooks_url: 'https://api.github.com/orgs/github/hooks',
      issues_url: 'https://api.github.com/orgs/github/issues',
      members_url: 'https://api.github.com/orgs/github/members{/member}',
      public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      description: 'A great organization',
    },
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    permissions: {
      can_create_repository: faker.datatype.boolean(),
    },
  };
}

export function getOrgsGetMembershipForUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsGetMembershipForUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsSetMembershipForUser200Response() {
  return {
    url: 'https://api.github.com/orgs/octocat/memberships/defunkt',
    state: 'active',
    role: 'admin',
    organization_url: 'https://api.github.com/orgs/octocat',
    organization: {
      login: 'github',
      id: 1,
      node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
      url: 'https://api.github.com/orgs/github',
      repos_url: 'https://api.github.com/orgs/github/repos',
      events_url: 'https://api.github.com/orgs/github/events',
      hooks_url: 'https://api.github.com/orgs/github/hooks',
      issues_url: 'https://api.github.com/orgs/github/issues',
      members_url: 'https://api.github.com/orgs/github/members{/member}',
      public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      description: 'A great organization',
    },
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    permissions: {
      can_create_repository: faker.datatype.boolean(),
    },
  };
}

export function getOrgsSetMembershipForUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsSetMembershipForUser422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getOrgsRemoveMembershipForUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsRemoveMembershipForUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsListOutsideCollaborators200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  }));
}

export function getOrgsConvertMemberToOutsideCollaborator202Response() {
  return {};
}

export function getOrgsConvertMemberToOutsideCollaborator404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsRemoveOutsideCollaborator422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getEnterpriseAdminListPreReceiveHooksForOrg200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    enforcement: faker.lorem.slug(1),
    configuration_url: faker.internet.url(),
    allow_downstream_configuration: faker.datatype.boolean(),
  }));
}

export function getEnterpriseAdminGetPreReceiveHookForOrg200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    enforcement: faker.lorem.slug(1),
    configuration_url: faker.internet.url(),
    allow_downstream_configuration: faker.datatype.boolean(),
  };
}

export function getEnterpriseAdminUpdatePreReceiveHookEnforcementForOrg200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    enforcement: faker.lorem.slug(1),
    configuration_url: faker.internet.url(),
    allow_downstream_configuration: faker.datatype.boolean(),
  };
}

export function getEnterpriseAdminRemovePreReceiveHookEnforcementForOrg200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    enforcement: faker.lorem.slug(1),
    configuration_url: faker.internet.url(),
    allow_downstream_configuration: faker.datatype.boolean(),
  };
}

export function getProjectsListForOrg200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    owner_url: 'https://api.github.com/repos/api-playground/projects-test',
    url: 'https://api.github.com/projects/1002604',
    html_url: 'https://github.com/api-playground/projects-test/projects/12',
    columns_url: 'https://api.github.com/projects/1002604/columns',
    id: 1002604,
    node_id: 'MDc6UHJvamVjdDEwMDI2MDQ=',
    name: 'Week One Sprint',
    body: 'This project represents the sprint of the first week in January',
    number: 1,
    state: 'open',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2011-04-10T20:09:31Z',
    updated_at: '2014-03-03T18:58:10Z',
    organization_permission: faker.helpers.arrayElement(['read', 'write', 'admin', 'none']),
    private: faker.datatype.boolean(),
  }));
}

export function getProjectsListForOrg422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getProjectsCreateForOrg201Response() {
  return {
    owner_url: 'https://api.github.com/repos/api-playground/projects-test',
    url: 'https://api.github.com/projects/1002604',
    html_url: 'https://github.com/api-playground/projects-test/projects/12',
    columns_url: 'https://api.github.com/projects/1002604/columns',
    id: 1002604,
    node_id: 'MDc6UHJvamVjdDEwMDI2MDQ=',
    name: 'Week One Sprint',
    body: 'This project represents the sprint of the first week in January',
    number: 1,
    state: 'open',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2011-04-10T20:09:31Z',
    updated_at: '2014-03-03T18:58:10Z',
    organization_permission: faker.helpers.arrayElement(['read', 'write', 'admin', 'none']),
    private: faker.datatype.boolean(),
  };
}

export function getProjectsCreateForOrg401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsCreateForOrg403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsCreateForOrg404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsCreateForOrg410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsCreateForOrg422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getOrgsListPublicMembers200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  }));
}

export function getOrgsSetPublicMembershipForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListForOrg200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1296269,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Hello-World',
    full_name: 'octocat/Hello-World',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: faker.internet.url(),
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: faker.internet.url(),
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: faker.internet.url(),
    mirror_url: faker.internet.url(),
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: faker.internet.url(),
    homepage: faker.lorem.slug(1),
    language: faker.lorem.slug(1),
    forks_count: faker.number.int({ min: undefined, max: undefined }),
    stargazers_count: faker.number.int({ min: undefined, max: undefined }),
    watchers_count: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    default_branch: faker.lorem.slug(1),
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: faker.datatype.boolean(),
    topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    has_issues: faker.datatype.boolean(),
    has_projects: faker.datatype.boolean(),
    has_wiki: faker.datatype.boolean(),
    has_pages: faker.datatype.boolean(),
    has_downloads: faker.datatype.boolean(),
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: faker.lorem.slug(1),
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    permissions: {
      admin: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
    },
    temp_clone_token: faker.lorem.slug(1),
    delete_branch_on_merge: faker.datatype.boolean(),
    subscribers_count: faker.number.int({ min: undefined, max: undefined }),
    network_count: faker.number.int({ min: undefined, max: undefined }),
    code_of_conduct: {
      key: 'contributor_covenant',
      name: 'Contributor Covenant',
      url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
      body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
      html_url: faker.internet.url(),
    },
    license: {
      key: faker.lorem.slug(1),
      name: faker.person.fullName(),
      spdx_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      node_id: faker.lorem.slug(1),
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    allow_forking: faker.datatype.boolean(),
  }));
}

export function getReposCreateInOrg201Response() {
  return {
    id: 42,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Team Environment',
    full_name: 'octocat/Hello-World',
    license: {
      key: 'mit',
      name: 'MIT License',
      url: 'https://api.github.com/licenses/mit',
      spdx_id: 'MIT',
      node_id: 'MDc6TGljZW5zZW1pdA==',
      html_url: faker.internet.url(),
    },
    organization: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    permissions: {
      admin: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
    },
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: 'git:github.com/octocat/Hello-World.git',
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: 'git@github.com:octocat/Hello-World.git',
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: 'https://github.com/octocat/Hello-World.git',
    mirror_url: 'git:git.example.com/octocat/Hello-World',
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: 'https://svn.github.com/octocat/Hello-World',
    homepage: 'https://github.com',
    language: faker.lorem.slug(1),
    forks_count: 9,
    stargazers_count: 80,
    watchers_count: 80,
    size: 108,
    default_branch: 'master',
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: true,
    topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    has_issues: true,
    has_projects: true,
    has_wiki: true,
    has_pages: faker.datatype.boolean(),
    has_downloads: true,
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: faker.lorem.slug(1),
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    allow_rebase_merge: true,
    template_repository: {
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      full_name: faker.person.fullName(),
      owner: {
        login: faker.lorem.slug(1),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        site_admin: faker.datatype.boolean(),
      },
      private: faker.datatype.boolean(),
      html_url: faker.internet.url(),
      description: faker.lorem.slug(1),
      fork: faker.datatype.boolean(),
      url: faker.internet.url(),
      archive_url: faker.internet.url(),
      assignees_url: faker.internet.url(),
      blobs_url: faker.internet.url(),
      branches_url: faker.internet.url(),
      collaborators_url: faker.internet.url(),
      comments_url: faker.internet.url(),
      commits_url: faker.internet.url(),
      compare_url: faker.internet.url(),
      contents_url: faker.internet.url(),
      contributors_url: faker.internet.url(),
      deployments_url: faker.internet.url(),
      downloads_url: faker.internet.url(),
      events_url: faker.internet.url(),
      forks_url: faker.internet.url(),
      git_commits_url: faker.internet.url(),
      git_refs_url: faker.internet.url(),
      git_tags_url: faker.internet.url(),
      git_url: faker.internet.url(),
      issue_comment_url: faker.internet.url(),
      issue_events_url: faker.internet.url(),
      issues_url: faker.internet.url(),
      keys_url: faker.internet.url(),
      labels_url: faker.internet.url(),
      languages_url: faker.internet.url(),
      merges_url: faker.internet.url(),
      milestones_url: faker.internet.url(),
      notifications_url: faker.internet.url(),
      pulls_url: faker.internet.url(),
      releases_url: faker.internet.url(),
      ssh_url: faker.internet.url(),
      stargazers_url: faker.internet.url(),
      statuses_url: faker.internet.url(),
      subscribers_url: faker.internet.url(),
      subscription_url: faker.internet.url(),
      tags_url: faker.internet.url(),
      teams_url: faker.internet.url(),
      trees_url: faker.internet.url(),
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: faker.internet.url(),
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: faker.date.past(),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      allow_rebase_merge: faker.datatype.boolean(),
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: faker.datatype.boolean(),
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
    },
    temp_clone_token: faker.lorem.slug(1),
    allow_squash_merge: true,
    allow_auto_merge: faker.datatype.boolean(),
    delete_branch_on_merge: faker.datatype.boolean(),
    allow_update_branch: faker.datatype.boolean(),
    allow_merge_commit: true,
    allow_forking: faker.datatype.boolean(),
    subscribers_count: faker.number.int({ min: undefined, max: undefined }),
    network_count: faker.number.int({ min: undefined, max: undefined }),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    master_branch: faker.lorem.slug(1),
    starred_at: '"2020-07-09T00:17:42Z"',
    anonymous_access_enabled: faker.datatype.boolean(),
  };
}

export function getReposCreateInOrg403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateInOrg422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getSecretScanningListAlertsForOrg200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    number: faker.number.int({ min: undefined, max: undefined }),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    locations_url: faker.internet.url(),
    state: faker.helpers.arrayElement(['open', 'resolved']),
    resolution: faker.helpers.arrayElement([null, 'false_positive', 'wont_fix', 'revoked', 'used_in_tests']),
    resolved_at: faker.date.past(),
    resolved_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    secret_type: faker.lorem.slug(1),
    secret: faker.lorem.slug(1),
    repository: {
      id: 1296269,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Hello-World',
      full_name: 'octocat/Hello-World',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'https://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'https://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'https://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'https://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'https://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'https://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'https://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'https://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'https://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'https://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      issue_comment_url: 'https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'https://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'https://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'https://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'https://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'https://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'https://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'https://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'https://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'https://api.github.com/repos/octocat/Hello-World/releases{/id}',
      stargazers_url: 'https://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'https://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'https://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'https://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'https://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'https://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      hooks_url: 'https://api.github.com/repos/octocat/Hello-World/hooks',
    },
  }));
}

export function getSecretScanningListAlertsForOrg404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getSecretScanningListAlertsForOrg503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getTeamsList200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    name: faker.person.fullName(),
    slug: faker.lorem.slug(1),
    description: faker.lorem.slug(1),
    privacy: faker.lorem.slug(1),
    permission: faker.lorem.slug(1),
    permissions: {
      pull: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      admin: faker.datatype.boolean(),
    },
    url: faker.internet.url(),
    html_url: 'https://github.com/orgs/rails/teams/core',
    members_url: faker.internet.url(),
    repositories_url: faker.internet.url(),
    parent: {
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    },
  }));
}

export function getTeamsList403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsCreate201Response() {
  return {
    id: 42,
    node_id: 'MDQ6VGVhbTE=',
    url: 'https://api.github.com/organizations/1/team/1',
    html_url: 'https://github.com/orgs/rails/teams/core',
    name: 'Developers',
    slug: 'justice-league',
    description: 'A great team.',
    privacy: 'closed',
    permission: 'push',
    members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
    repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
    parent: {
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    },
    members_count: 3,
    repos_count: 10,
    created_at: '2017-07-14T16:53:42Z',
    updated_at: '2017-08-17T12:37:15Z',
    organization: {
      login: 'github',
      id: 1,
      node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
      url: 'https://api.github.com/orgs/github',
      repos_url: 'https://api.github.com/orgs/github/repos',
      events_url: 'https://api.github.com/orgs/github/events',
      hooks_url: 'https://api.github.com/orgs/github/hooks',
      issues_url: 'https://api.github.com/orgs/github/issues',
      members_url: 'https://api.github.com/orgs/github/members{/member}',
      public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      description: 'A great organization',
      name: 'github',
      company: 'GitHub',
      blog: 'https://github.com/blog',
      location: 'San Francisco',
      email: 'octocat@github.com',
      twitter_username: 'github',
      is_verified: true,
      has_organization_projects: true,
      has_repository_projects: true,
      public_repos: 2,
      public_gists: 1,
      followers: 20,
      following: faker.number.int({ min: undefined, max: undefined }),
      html_url: 'https://github.com/octocat',
      created_at: '2008-01-14T04:33:35Z',
      type: 'Organization',
      total_private_repos: 100,
      owned_private_repos: 100,
      private_gists: 81,
      disk_usage: 10000,
      collaborators: 8,
      billing_email: 'org@example.com',
      plan: {
        name: faker.person.fullName(),
        space: faker.number.int({ min: undefined, max: undefined }),
        private_repos: faker.number.int({ min: undefined, max: undefined }),
        filled_seats: faker.number.int({ min: undefined, max: undefined }),
        seats: faker.number.int({ min: undefined, max: undefined }),
      },
      default_repository_permission: faker.lorem.slug(1),
      members_can_create_repositories: true,
      two_factor_requirement_enabled: true,
      members_allowed_repository_creation_type: 'all',
      members_can_create_public_repositories: true,
      members_can_create_private_repositories: true,
      members_can_create_internal_repositories: true,
      members_can_create_pages: true,
      members_can_create_public_pages: true,
      members_can_create_private_pages: true,
      updated_at: faker.date.past(),
    },
    ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
  };
}

export function getTeamsCreate403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsCreate422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getTeamsGetByName200Response() {
  return {
    id: 42,
    node_id: 'MDQ6VGVhbTE=',
    url: 'https://api.github.com/organizations/1/team/1',
    html_url: 'https://github.com/orgs/rails/teams/core',
    name: 'Developers',
    slug: 'justice-league',
    description: 'A great team.',
    privacy: 'closed',
    permission: 'push',
    members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
    repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
    parent: {
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    },
    members_count: 3,
    repos_count: 10,
    created_at: '2017-07-14T16:53:42Z',
    updated_at: '2017-08-17T12:37:15Z',
    organization: {
      login: 'github',
      id: 1,
      node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
      url: 'https://api.github.com/orgs/github',
      repos_url: 'https://api.github.com/orgs/github/repos',
      events_url: 'https://api.github.com/orgs/github/events',
      hooks_url: 'https://api.github.com/orgs/github/hooks',
      issues_url: 'https://api.github.com/orgs/github/issues',
      members_url: 'https://api.github.com/orgs/github/members{/member}',
      public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      description: 'A great organization',
      name: 'github',
      company: 'GitHub',
      blog: 'https://github.com/blog',
      location: 'San Francisco',
      email: 'octocat@github.com',
      twitter_username: 'github',
      is_verified: true,
      has_organization_projects: true,
      has_repository_projects: true,
      public_repos: 2,
      public_gists: 1,
      followers: 20,
      following: faker.number.int({ min: undefined, max: undefined }),
      html_url: 'https://github.com/octocat',
      created_at: '2008-01-14T04:33:35Z',
      type: 'Organization',
      total_private_repos: 100,
      owned_private_repos: 100,
      private_gists: 81,
      disk_usage: 10000,
      collaborators: 8,
      billing_email: 'org@example.com',
      plan: {
        name: faker.person.fullName(),
        space: faker.number.int({ min: undefined, max: undefined }),
        private_repos: faker.number.int({ min: undefined, max: undefined }),
        filled_seats: faker.number.int({ min: undefined, max: undefined }),
        seats: faker.number.int({ min: undefined, max: undefined }),
      },
      default_repository_permission: faker.lorem.slug(1),
      members_can_create_repositories: true,
      two_factor_requirement_enabled: true,
      members_allowed_repository_creation_type: 'all',
      members_can_create_public_repositories: true,
      members_can_create_private_repositories: true,
      members_can_create_internal_repositories: true,
      members_can_create_pages: true,
      members_can_create_public_pages: true,
      members_can_create_private_pages: true,
      updated_at: faker.date.past(),
    },
    ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
  };
}

export function getTeamsGetByName404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsUpdateInOrg200Response() {
  return {
    id: 42,
    node_id: 'MDQ6VGVhbTE=',
    url: 'https://api.github.com/organizations/1/team/1',
    html_url: 'https://github.com/orgs/rails/teams/core',
    name: 'Developers',
    slug: 'justice-league',
    description: 'A great team.',
    privacy: 'closed',
    permission: 'push',
    members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
    repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
    parent: {
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    },
    members_count: 3,
    repos_count: 10,
    created_at: '2017-07-14T16:53:42Z',
    updated_at: '2017-08-17T12:37:15Z',
    organization: {
      login: 'github',
      id: 1,
      node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
      url: 'https://api.github.com/orgs/github',
      repos_url: 'https://api.github.com/orgs/github/repos',
      events_url: 'https://api.github.com/orgs/github/events',
      hooks_url: 'https://api.github.com/orgs/github/hooks',
      issues_url: 'https://api.github.com/orgs/github/issues',
      members_url: 'https://api.github.com/orgs/github/members{/member}',
      public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      description: 'A great organization',
      name: 'github',
      company: 'GitHub',
      blog: 'https://github.com/blog',
      location: 'San Francisco',
      email: 'octocat@github.com',
      twitter_username: 'github',
      is_verified: true,
      has_organization_projects: true,
      has_repository_projects: true,
      public_repos: 2,
      public_gists: 1,
      followers: 20,
      following: faker.number.int({ min: undefined, max: undefined }),
      html_url: 'https://github.com/octocat',
      created_at: '2008-01-14T04:33:35Z',
      type: 'Organization',
      total_private_repos: 100,
      owned_private_repos: 100,
      private_gists: 81,
      disk_usage: 10000,
      collaborators: 8,
      billing_email: 'org@example.com',
      plan: {
        name: faker.person.fullName(),
        space: faker.number.int({ min: undefined, max: undefined }),
        private_repos: faker.number.int({ min: undefined, max: undefined }),
        filled_seats: faker.number.int({ min: undefined, max: undefined }),
        seats: faker.number.int({ min: undefined, max: undefined }),
      },
      default_repository_permission: faker.lorem.slug(1),
      members_can_create_repositories: true,
      two_factor_requirement_enabled: true,
      members_allowed_repository_creation_type: 'all',
      members_can_create_public_repositories: true,
      members_can_create_private_repositories: true,
      members_can_create_internal_repositories: true,
      members_can_create_pages: true,
      members_can_create_public_pages: true,
      members_can_create_private_pages: true,
      updated_at: faker.date.past(),
    },
    ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
  };
}

export function getTeamsUpdateInOrg201Response() {
  return {
    id: 42,
    node_id: 'MDQ6VGVhbTE=',
    url: 'https://api.github.com/organizations/1/team/1',
    html_url: 'https://github.com/orgs/rails/teams/core',
    name: 'Developers',
    slug: 'justice-league',
    description: 'A great team.',
    privacy: 'closed',
    permission: 'push',
    members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
    repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
    parent: {
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    },
    members_count: 3,
    repos_count: 10,
    created_at: '2017-07-14T16:53:42Z',
    updated_at: '2017-08-17T12:37:15Z',
    organization: {
      login: 'github',
      id: 1,
      node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
      url: 'https://api.github.com/orgs/github',
      repos_url: 'https://api.github.com/orgs/github/repos',
      events_url: 'https://api.github.com/orgs/github/events',
      hooks_url: 'https://api.github.com/orgs/github/hooks',
      issues_url: 'https://api.github.com/orgs/github/issues',
      members_url: 'https://api.github.com/orgs/github/members{/member}',
      public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      description: 'A great organization',
      name: 'github',
      company: 'GitHub',
      blog: 'https://github.com/blog',
      location: 'San Francisco',
      email: 'octocat@github.com',
      twitter_username: 'github',
      is_verified: true,
      has_organization_projects: true,
      has_repository_projects: true,
      public_repos: 2,
      public_gists: 1,
      followers: 20,
      following: faker.number.int({ min: undefined, max: undefined }),
      html_url: 'https://github.com/octocat',
      created_at: '2008-01-14T04:33:35Z',
      type: 'Organization',
      total_private_repos: 100,
      owned_private_repos: 100,
      private_gists: 81,
      disk_usage: 10000,
      collaborators: 8,
      billing_email: 'org@example.com',
      plan: {
        name: faker.person.fullName(),
        space: faker.number.int({ min: undefined, max: undefined }),
        private_repos: faker.number.int({ min: undefined, max: undefined }),
        filled_seats: faker.number.int({ min: undefined, max: undefined }),
        seats: faker.number.int({ min: undefined, max: undefined }),
      },
      default_repository_permission: faker.lorem.slug(1),
      members_can_create_repositories: true,
      two_factor_requirement_enabled: true,
      members_allowed_repository_creation_type: 'all',
      members_can_create_public_repositories: true,
      members_can_create_private_repositories: true,
      members_can_create_internal_repositories: true,
      members_can_create_pages: true,
      members_can_create_public_pages: true,
      members_can_create_private_pages: true,
      updated_at: faker.date.past(),
    },
    ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
  };
}

export function getTeamsUpdateInOrg403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsUpdateInOrg404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsUpdateInOrg422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getTeamsListDiscussionsInOrg200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'Please suggest improvements to our workflow in comments.',
    body_html: '<p>Hi! This is an area for us to collaborate as a team</p>',
    body_version: '0307116bbf7ced493b8d8a346c650b71',
    comments_count: faker.number.int({ min: undefined, max: undefined }),
    comments_url: 'https://api.github.com/organizations/1/team/2343027/discussions/1/comments',
    created_at: '2018-01-25T18:56:31Z',
    last_edited_at: faker.date.past(),
    html_url: 'https://github.com/orgs/github/teams/justice-league/discussions/1',
    node_id: 'MDE0OlRlYW1EaXNjdXNzaW9uMQ==',
    number: 42,
    pinned: true,
    private: true,
    team_url: 'https://api.github.com/organizations/1/team/2343027',
    title: 'How can we improve our workflow?',
    updated_at: '2018-01-25T18:56:31Z',
    url: 'https://api.github.com/organizations/1/team/2343027/discussions/1',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  }));
}

export function getTeamsCreateDiscussionInOrg201Response() {
  return {
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'Please suggest improvements to our workflow in comments.',
    body_html: '<p>Hi! This is an area for us to collaborate as a team</p>',
    body_version: '0307116bbf7ced493b8d8a346c650b71',
    comments_count: faker.number.int({ min: undefined, max: undefined }),
    comments_url: 'https://api.github.com/organizations/1/team/2343027/discussions/1/comments',
    created_at: '2018-01-25T18:56:31Z',
    last_edited_at: faker.date.past(),
    html_url: 'https://github.com/orgs/github/teams/justice-league/discussions/1',
    node_id: 'MDE0OlRlYW1EaXNjdXNzaW9uMQ==',
    number: 42,
    pinned: true,
    private: true,
    team_url: 'https://api.github.com/organizations/1/team/2343027',
    title: 'How can we improve our workflow?',
    updated_at: '2018-01-25T18:56:31Z',
    url: 'https://api.github.com/organizations/1/team/2343027/discussions/1',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getTeamsGetDiscussionInOrg200Response() {
  return {
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'Please suggest improvements to our workflow in comments.',
    body_html: '<p>Hi! This is an area for us to collaborate as a team</p>',
    body_version: '0307116bbf7ced493b8d8a346c650b71',
    comments_count: faker.number.int({ min: undefined, max: undefined }),
    comments_url: 'https://api.github.com/organizations/1/team/2343027/discussions/1/comments',
    created_at: '2018-01-25T18:56:31Z',
    last_edited_at: faker.date.past(),
    html_url: 'https://github.com/orgs/github/teams/justice-league/discussions/1',
    node_id: 'MDE0OlRlYW1EaXNjdXNzaW9uMQ==',
    number: 42,
    pinned: true,
    private: true,
    team_url: 'https://api.github.com/organizations/1/team/2343027',
    title: 'How can we improve our workflow?',
    updated_at: '2018-01-25T18:56:31Z',
    url: 'https://api.github.com/organizations/1/team/2343027/discussions/1',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getTeamsUpdateDiscussionInOrg200Response() {
  return {
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'Please suggest improvements to our workflow in comments.',
    body_html: '<p>Hi! This is an area for us to collaborate as a team</p>',
    body_version: '0307116bbf7ced493b8d8a346c650b71',
    comments_count: faker.number.int({ min: undefined, max: undefined }),
    comments_url: 'https://api.github.com/organizations/1/team/2343027/discussions/1/comments',
    created_at: '2018-01-25T18:56:31Z',
    last_edited_at: faker.date.past(),
    html_url: 'https://github.com/orgs/github/teams/justice-league/discussions/1',
    node_id: 'MDE0OlRlYW1EaXNjdXNzaW9uMQ==',
    number: 42,
    pinned: true,
    private: true,
    team_url: 'https://api.github.com/organizations/1/team/2343027',
    title: 'How can we improve our workflow?',
    updated_at: '2018-01-25T18:56:31Z',
    url: 'https://api.github.com/organizations/1/team/2343027/discussions/1',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getTeamsListDiscussionCommentsInOrg200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'I agree with this suggestion.',
    body_html: '<p>Do you like apples?</p>',
    body_version: '0307116bbf7ced493b8d8a346c650b71',
    created_at: '2018-01-15T23:53:58Z',
    last_edited_at: faker.date.past(),
    discussion_url: 'https://api.github.com/organizations/1/team/2403582/discussions/1',
    html_url: 'https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1',
    node_id: 'MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=',
    number: 42,
    updated_at: '2018-01-15T23:53:58Z',
    url: 'https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  }));
}

export function getTeamsCreateDiscussionCommentInOrg201Response() {
  return {
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'I agree with this suggestion.',
    body_html: '<p>Do you like apples?</p>',
    body_version: '0307116bbf7ced493b8d8a346c650b71',
    created_at: '2018-01-15T23:53:58Z',
    last_edited_at: faker.date.past(),
    discussion_url: 'https://api.github.com/organizations/1/team/2403582/discussions/1',
    html_url: 'https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1',
    node_id: 'MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=',
    number: 42,
    updated_at: '2018-01-15T23:53:58Z',
    url: 'https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getTeamsGetDiscussionCommentInOrg200Response() {
  return {
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'I agree with this suggestion.',
    body_html: '<p>Do you like apples?</p>',
    body_version: '0307116bbf7ced493b8d8a346c650b71',
    created_at: '2018-01-15T23:53:58Z',
    last_edited_at: faker.date.past(),
    discussion_url: 'https://api.github.com/organizations/1/team/2403582/discussions/1',
    html_url: 'https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1',
    node_id: 'MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=',
    number: 42,
    updated_at: '2018-01-15T23:53:58Z',
    url: 'https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getTeamsUpdateDiscussionCommentInOrg200Response() {
  return {
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'I agree with this suggestion.',
    body_html: '<p>Do you like apples?</p>',
    body_version: '0307116bbf7ced493b8d8a346c650b71',
    created_at: '2018-01-15T23:53:58Z',
    last_edited_at: faker.date.past(),
    discussion_url: 'https://api.github.com/organizations/1/team/2403582/discussions/1',
    html_url: 'https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1',
    node_id: 'MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=',
    number: 42,
    updated_at: '2018-01-15T23:53:58Z',
    url: 'https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getReactionsListForTeamDiscussionCommentInOrg200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  }));
}

export function getReactionsCreateForTeamDiscussionCommentInOrg200Response() {
  return {
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  };
}

export function getReactionsCreateForTeamDiscussionCommentInOrg201Response() {
  return {
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  };
}

export function getReactionsListForTeamDiscussionInOrg200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  }));
}

export function getReactionsCreateForTeamDiscussionInOrg200Response() {
  return {
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  };
}

export function getReactionsCreateForTeamDiscussionInOrg201Response() {
  return {
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  };
}

export function getTeamsListMembersInOrg200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  }));
}

export function getTeamsGetMembershipForUserInOrg200Response() {
  return {
    url: faker.internet.url(),
    role: 'member',
    state: faker.helpers.arrayElement(['active', 'pending']),
  };
}

export function getTeamsAddOrUpdateMembershipForUserInOrg200Response() {
  return {
    url: faker.internet.url(),
    role: 'member',
    state: faker.helpers.arrayElement(['active', 'pending']),
  };
}

export function getTeamsListProjectsInOrg200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    owner_url: faker.internet.url(),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    columns_url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    name: faker.person.fullName(),
    body: faker.lorem.slug(1),
    number: faker.number.int({ min: undefined, max: undefined }),
    state: faker.lorem.slug(1),
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    organization_permission: faker.lorem.slug(1),
    private: faker.datatype.boolean(),
    permissions: {
      read: faker.datatype.boolean(),
      write: faker.datatype.boolean(),
      admin: faker.datatype.boolean(),
    },
  }));
}

export function getTeamsCheckPermissionsForProjectInOrg200Response() {
  return {
    owner_url: faker.internet.url(),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    columns_url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    name: faker.person.fullName(),
    body: faker.lorem.slug(1),
    number: faker.number.int({ min: undefined, max: undefined }),
    state: faker.lorem.slug(1),
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    organization_permission: faker.lorem.slug(1),
    private: faker.datatype.boolean(),
    permissions: {
      read: faker.datatype.boolean(),
      write: faker.datatype.boolean(),
      admin: faker.datatype.boolean(),
    },
  };
}

export function getTeamsAddOrUpdateProjectPermissionsInOrg403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getTeamsListReposInOrg200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1296269,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Hello-World',
    full_name: 'octocat/Hello-World',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: faker.internet.url(),
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: faker.internet.url(),
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: faker.internet.url(),
    mirror_url: faker.internet.url(),
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: faker.internet.url(),
    homepage: faker.lorem.slug(1),
    language: faker.lorem.slug(1),
    forks_count: faker.number.int({ min: undefined, max: undefined }),
    stargazers_count: faker.number.int({ min: undefined, max: undefined }),
    watchers_count: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    default_branch: faker.lorem.slug(1),
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: faker.datatype.boolean(),
    topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    has_issues: faker.datatype.boolean(),
    has_projects: faker.datatype.boolean(),
    has_wiki: faker.datatype.boolean(),
    has_pages: faker.datatype.boolean(),
    has_downloads: faker.datatype.boolean(),
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: faker.lorem.slug(1),
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    permissions: {
      admin: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
    },
    temp_clone_token: faker.lorem.slug(1),
    delete_branch_on_merge: faker.datatype.boolean(),
    subscribers_count: faker.number.int({ min: undefined, max: undefined }),
    network_count: faker.number.int({ min: undefined, max: undefined }),
    code_of_conduct: {
      key: 'contributor_covenant',
      name: 'Contributor Covenant',
      url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
      body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
      html_url: faker.internet.url(),
    },
    license: {
      key: faker.lorem.slug(1),
      name: faker.person.fullName(),
      spdx_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      node_id: faker.lorem.slug(1),
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    allow_forking: faker.datatype.boolean(),
  }));
}

export function getTeamsCheckPermissionsForRepoInOrg200Response() {
  return {
    id: 42,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Team Environment',
    full_name: 'octocat/Hello-World',
    license: {
      key: 'mit',
      name: 'MIT License',
      url: 'https://api.github.com/licenses/mit',
      spdx_id: 'MIT',
      node_id: 'MDc6TGljZW5zZW1pdA==',
      html_url: faker.internet.url(),
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    permissions: {
      admin: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
    },
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: 'git:github.com/octocat/Hello-World.git',
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: 'git@github.com:octocat/Hello-World.git',
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: 'https://github.com/octocat/Hello-World.git',
    mirror_url: 'git:git.example.com/octocat/Hello-World',
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: 'https://svn.github.com/octocat/Hello-World',
    homepage: 'https://github.com',
    language: faker.lorem.slug(1),
    forks_count: 9,
    stargazers_count: 80,
    watchers_count: 80,
    size: 108,
    default_branch: 'master',
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: true,
    topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    has_issues: true,
    has_projects: true,
    has_wiki: true,
    has_pages: faker.datatype.boolean(),
    has_downloads: true,
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: faker.lorem.slug(1),
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    allow_rebase_merge: true,
    template_repository: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    temp_clone_token: faker.lorem.slug(1),
    allow_squash_merge: true,
    allow_auto_merge: faker.datatype.boolean(),
    delete_branch_on_merge: faker.datatype.boolean(),
    allow_merge_commit: true,
    allow_forking: faker.datatype.boolean(),
    subscribers_count: faker.number.int({ min: undefined, max: undefined }),
    network_count: faker.number.int({ min: undefined, max: undefined }),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    master_branch: faker.lorem.slug(1),
  };
}

export function getTeamsListChildInOrg200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    name: faker.person.fullName(),
    slug: faker.lorem.slug(1),
    description: faker.lorem.slug(1),
    privacy: faker.lorem.slug(1),
    permission: faker.lorem.slug(1),
    permissions: {
      pull: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      admin: faker.datatype.boolean(),
    },
    url: faker.internet.url(),
    html_url: 'https://github.com/orgs/rails/teams/core',
    members_url: faker.internet.url(),
    repositories_url: faker.internet.url(),
    parent: {
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    },
  }));
}

export function getProjectsGetCard200Response() {
  return {
    url: 'https://api.github.com/projects/columns/cards/1478',
    id: 42,
    node_id: 'MDExOlByb2plY3RDYXJkMTQ3OA==',
    note: 'Add payload for delete Project column',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2016-09-05T14:21:06Z',
    updated_at: '2016-09-05T14:20:22Z',
    archived: faker.datatype.boolean(),
    column_name: faker.person.fullName(),
    project_id: faker.lorem.slug(1),
    column_url: 'https://api.github.com/projects/columns/367',
    content_url: 'https://api.github.com/repos/api-playground/projects-test/issues/3',
    project_url: 'https://api.github.com/projects/120',
  };
}

export function getProjectsGetCard401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsGetCard403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsGetCard404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsUpdateCard200Response() {
  return {
    url: 'https://api.github.com/projects/columns/cards/1478',
    id: 42,
    node_id: 'MDExOlByb2plY3RDYXJkMTQ3OA==',
    note: 'Add payload for delete Project column',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2016-09-05T14:21:06Z',
    updated_at: '2016-09-05T14:20:22Z',
    archived: faker.datatype.boolean(),
    column_name: faker.person.fullName(),
    project_id: faker.lorem.slug(1),
    column_url: 'https://api.github.com/projects/columns/367',
    content_url: 'https://api.github.com/repos/api-playground/projects-test/issues/3',
    project_url: 'https://api.github.com/projects/120',
  };
}

export function getProjectsUpdateCard401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsUpdateCard403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsUpdateCard404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsUpdateCard422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getProjectsDeleteCard401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsDeleteCard403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getProjectsDeleteCard404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsMoveCard201Response() {
  return {};
}

export function getProjectsMoveCard401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsMoveCard403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      code: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
    })),
  };
}

export function getProjectsMoveCard422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getProjectsMoveCard503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      code: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
    })),
  };
}

export function getProjectsGetColumn200Response() {
  return {
    url: 'https://api.github.com/projects/columns/367',
    project_url: 'https://api.github.com/projects/120',
    cards_url: 'https://api.github.com/projects/columns/367/cards',
    id: 42,
    node_id: 'MDEzOlByb2plY3RDb2x1bW4zNjc=',
    name: 'Remaining tasks',
    created_at: '2016-09-05T14:18:44Z',
    updated_at: '2016-09-05T14:22:28Z',
  };
}

export function getProjectsGetColumn401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsGetColumn403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsGetColumn404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsUpdateColumn200Response() {
  return {
    url: 'https://api.github.com/projects/columns/367',
    project_url: 'https://api.github.com/projects/120',
    cards_url: 'https://api.github.com/projects/columns/367/cards',
    id: 42,
    node_id: 'MDEzOlByb2plY3RDb2x1bW4zNjc=',
    name: 'Remaining tasks',
    created_at: '2016-09-05T14:18:44Z',
    updated_at: '2016-09-05T14:22:28Z',
  };
}

export function getProjectsUpdateColumn401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsUpdateColumn403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsDeleteColumn401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsDeleteColumn403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsListCards200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: 'https://api.github.com/projects/columns/cards/1478',
    id: 42,
    node_id: 'MDExOlByb2plY3RDYXJkMTQ3OA==',
    note: 'Add payload for delete Project column',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2016-09-05T14:21:06Z',
    updated_at: '2016-09-05T14:20:22Z',
    archived: faker.datatype.boolean(),
    column_name: faker.person.fullName(),
    project_id: faker.lorem.slug(1),
    column_url: 'https://api.github.com/projects/columns/367',
    content_url: 'https://api.github.com/repos/api-playground/projects-test/issues/3',
    project_url: 'https://api.github.com/projects/120',
  }));
}

export function getProjectsListCards401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsListCards403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsCreateCard201Response() {
  return {
    url: 'https://api.github.com/projects/columns/cards/1478',
    id: 42,
    node_id: 'MDExOlByb2plY3RDYXJkMTQ3OA==',
    note: 'Add payload for delete Project column',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2016-09-05T14:21:06Z',
    updated_at: '2016-09-05T14:20:22Z',
    archived: faker.datatype.boolean(),
    column_name: faker.person.fullName(),
    project_id: faker.lorem.slug(1),
    column_url: 'https://api.github.com/projects/columns/367',
    content_url: 'https://api.github.com/repos/api-playground/projects-test/issues/3',
    project_url: 'https://api.github.com/projects/120',
  };
}

export function getProjectsCreateCard401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsCreateCard403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsCreateCard422Response() {
  return faker.helpers.arrayElement([
    {
      message: faker.lorem.slug(1),
      documentation_url: faker.internet.url(),
      errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        resource: faker.lorem.slug(1),
        field: faker.lorem.slug(1),
        message: faker.lorem.slug(1),
        code: faker.lorem.slug(1),
        index: faker.number.int({ min: undefined, max: undefined }),
        value: faker.helpers.arrayElement([
          faker.lorem.slug(1),
          faker.number.int({ min: undefined, max: undefined }),
          [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
        ]),
      })),
    },
    {
      message: faker.lorem.slug(1),
      documentation_url: faker.internet.url(),
      errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    },
  ]);
}

export function getProjectsCreateCard503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      code: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
    })),
  };
}

export function getProjectsMoveColumn201Response() {
  return {};
}

export function getProjectsMoveColumn401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsMoveColumn403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsMoveColumn422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getProjectsGet200Response() {
  return {
    owner_url: 'https://api.github.com/repos/api-playground/projects-test',
    url: 'https://api.github.com/projects/1002604',
    html_url: 'https://github.com/api-playground/projects-test/projects/12',
    columns_url: 'https://api.github.com/projects/1002604/columns',
    id: 1002604,
    node_id: 'MDc6UHJvamVjdDEwMDI2MDQ=',
    name: 'Week One Sprint',
    body: 'This project represents the sprint of the first week in January',
    number: 1,
    state: 'open',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2011-04-10T20:09:31Z',
    updated_at: '2014-03-03T18:58:10Z',
    organization_permission: faker.helpers.arrayElement(['read', 'write', 'admin', 'none']),
    private: faker.datatype.boolean(),
  };
}

export function getProjectsGet401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsGet403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsUpdate200Response() {
  return {
    owner_url: 'https://api.github.com/repos/api-playground/projects-test',
    url: 'https://api.github.com/projects/1002604',
    html_url: 'https://github.com/api-playground/projects-test/projects/12',
    columns_url: 'https://api.github.com/projects/1002604/columns',
    id: 1002604,
    node_id: 'MDc6UHJvamVjdDEwMDI2MDQ=',
    name: 'Week One Sprint',
    body: 'This project represents the sprint of the first week in January',
    number: 1,
    state: 'open',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2011-04-10T20:09:31Z',
    updated_at: '2014-03-03T18:58:10Z',
    organization_permission: faker.helpers.arrayElement(['read', 'write', 'admin', 'none']),
    private: faker.datatype.boolean(),
  };
}

export function getProjectsUpdate401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsUpdate403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getProjectsUpdate410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsUpdate422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getProjectsDelete401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsDelete403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getProjectsDelete404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsDelete410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsListCollaborators200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  }));
}

export function getProjectsListCollaborators401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsListCollaborators403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsListCollaborators404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsListCollaborators422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getProjectsAddCollaborator401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsAddCollaborator403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsAddCollaborator404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsAddCollaborator422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getProjectsRemoveCollaborator401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsRemoveCollaborator403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsRemoveCollaborator404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsRemoveCollaborator422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getProjectsGetPermissionForUser200Response() {
  return {
    permission: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
  };
}

export function getProjectsGetPermissionForUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsGetPermissionForUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsGetPermissionForUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsGetPermissionForUser422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getProjectsListColumns200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: 'https://api.github.com/projects/columns/367',
    project_url: 'https://api.github.com/projects/120',
    cards_url: 'https://api.github.com/projects/columns/367/cards',
    id: 42,
    node_id: 'MDEzOlByb2plY3RDb2x1bW4zNjc=',
    name: 'Remaining tasks',
    created_at: '2016-09-05T14:18:44Z',
    updated_at: '2016-09-05T14:22:28Z',
  }));
}

export function getProjectsListColumns401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsListColumns403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsCreateColumn201Response() {
  return {
    url: 'https://api.github.com/projects/columns/367',
    project_url: 'https://api.github.com/projects/120',
    cards_url: 'https://api.github.com/projects/columns/367/cards',
    id: 42,
    node_id: 'MDEzOlByb2plY3RDb2x1bW4zNjc=',
    name: 'Remaining tasks',
    created_at: '2016-09-05T14:18:44Z',
    updated_at: '2016-09-05T14:22:28Z',
  };
}

export function getProjectsCreateColumn401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsCreateColumn403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsCreateColumn422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getRateLimitGet200Response() {
  return {
    resources: {
      core: {
        limit: faker.number.int({ min: undefined, max: undefined }),
        remaining: faker.number.int({ min: undefined, max: undefined }),
        reset: faker.number.int({ min: undefined, max: undefined }),
        used: faker.number.int({ min: undefined, max: undefined }),
      },
      graphql: {
        limit: faker.number.int({ min: undefined, max: undefined }),
        remaining: faker.number.int({ min: undefined, max: undefined }),
        reset: faker.number.int({ min: undefined, max: undefined }),
        used: faker.number.int({ min: undefined, max: undefined }),
      },
      search: {
        limit: faker.number.int({ min: undefined, max: undefined }),
        remaining: faker.number.int({ min: undefined, max: undefined }),
        reset: faker.number.int({ min: undefined, max: undefined }),
        used: faker.number.int({ min: undefined, max: undefined }),
      },
      source_import: {
        limit: faker.number.int({ min: undefined, max: undefined }),
        remaining: faker.number.int({ min: undefined, max: undefined }),
        reset: faker.number.int({ min: undefined, max: undefined }),
        used: faker.number.int({ min: undefined, max: undefined }),
      },
      integration_manifest: {
        limit: faker.number.int({ min: undefined, max: undefined }),
        remaining: faker.number.int({ min: undefined, max: undefined }),
        reset: faker.number.int({ min: undefined, max: undefined }),
        used: faker.number.int({ min: undefined, max: undefined }),
      },
      code_scanning_upload: {
        limit: faker.number.int({ min: undefined, max: undefined }),
        remaining: faker.number.int({ min: undefined, max: undefined }),
        reset: faker.number.int({ min: undefined, max: undefined }),
        used: faker.number.int({ min: undefined, max: undefined }),
      },
      actions_runner_registration: {
        limit: faker.number.int({ min: undefined, max: undefined }),
        remaining: faker.number.int({ min: undefined, max: undefined }),
        reset: faker.number.int({ min: undefined, max: undefined }),
        used: faker.number.int({ min: undefined, max: undefined }),
      },
      scim: {
        limit: faker.number.int({ min: undefined, max: undefined }),
        remaining: faker.number.int({ min: undefined, max: undefined }),
        reset: faker.number.int({ min: undefined, max: undefined }),
        used: faker.number.int({ min: undefined, max: undefined }),
      },
    },
    rate: {
      limit: faker.number.int({ min: undefined, max: undefined }),
      remaining: faker.number.int({ min: undefined, max: undefined }),
      reset: faker.number.int({ min: undefined, max: undefined }),
      used: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getRateLimitGet404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReactionsDeleteLegacy401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReactionsDeleteLegacy403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReactionsDeleteLegacy410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGet200Response() {
  return {
    id: 1296269,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Hello-World',
    full_name: 'octocat/Hello-World',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: 'git:github.com/octocat/Hello-World.git',
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: 'git@github.com:octocat/Hello-World.git',
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: 'https://github.com/octocat/Hello-World.git',
    mirror_url: 'git:git.example.com/octocat/Hello-World',
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: 'https://svn.github.com/octocat/Hello-World',
    homepage: 'https://github.com',
    language: faker.lorem.slug(1),
    forks_count: 9,
    stargazers_count: 80,
    watchers_count: 80,
    size: 108,
    default_branch: 'master',
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: true,
    topics: ['octocat', 'atom', 'electron', 'API'],
    has_issues: true,
    has_projects: true,
    has_wiki: true,
    has_pages: faker.datatype.boolean(),
    has_downloads: true,
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: 'public',
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    permissions: {
      admin: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
    },
    allow_rebase_merge: true,
    template_repository: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    temp_clone_token: faker.lorem.slug(1),
    allow_squash_merge: true,
    allow_auto_merge: faker.datatype.boolean(),
    delete_branch_on_merge: faker.datatype.boolean(),
    allow_merge_commit: true,
    allow_update_branch: true,
    allow_forking: true,
    subscribers_count: 42,
    network_count: faker.number.int({ min: undefined, max: undefined }),
    license: {
      key: 'mit',
      name: 'MIT License',
      url: 'https://api.github.com/licenses/mit',
      spdx_id: 'MIT',
      node_id: 'MDc6TGljZW5zZW1pdA==',
      html_url: faker.internet.url(),
    },
    organization: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    parent: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    source: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    master_branch: faker.lorem.slug(1),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    anonymous_access_enabled: faker.datatype.boolean(),
    code_of_conduct: {
      url: 'https://api.github.com/repos/github/docs/community/code_of_conduct',
      key: 'citizen_code_of_conduct',
      name: 'Citizen Code of Conduct',
      html_url: 'https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md',
    },
    security_and_analysis: {
      advanced_security: {
        status: faker.helpers.arrayElement(['enabled', 'disabled']),
      },
      secret_scanning: {
        status: faker.helpers.arrayElement(['enabled', 'disabled']),
      },
      secret_scanning_push_protection: {
        status: faker.helpers.arrayElement(['enabled', 'disabled']),
      },
    },
  };
}

export function getReposGet301Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGet403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGet404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposUpdate200Response() {
  return {
    id: 1296269,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Hello-World',
    full_name: 'octocat/Hello-World',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: 'git:github.com/octocat/Hello-World.git',
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: 'git@github.com:octocat/Hello-World.git',
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: 'https://github.com/octocat/Hello-World.git',
    mirror_url: 'git:git.example.com/octocat/Hello-World',
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: 'https://svn.github.com/octocat/Hello-World',
    homepage: 'https://github.com',
    language: faker.lorem.slug(1),
    forks_count: 9,
    stargazers_count: 80,
    watchers_count: 80,
    size: 108,
    default_branch: 'master',
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: true,
    topics: ['octocat', 'atom', 'electron', 'API'],
    has_issues: true,
    has_projects: true,
    has_wiki: true,
    has_pages: faker.datatype.boolean(),
    has_downloads: true,
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: 'public',
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    permissions: {
      admin: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
    },
    allow_rebase_merge: true,
    template_repository: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    temp_clone_token: faker.lorem.slug(1),
    allow_squash_merge: true,
    allow_auto_merge: faker.datatype.boolean(),
    delete_branch_on_merge: faker.datatype.boolean(),
    allow_merge_commit: true,
    allow_update_branch: true,
    allow_forking: true,
    subscribers_count: 42,
    network_count: faker.number.int({ min: undefined, max: undefined }),
    license: {
      key: 'mit',
      name: 'MIT License',
      url: 'https://api.github.com/licenses/mit',
      spdx_id: 'MIT',
      node_id: 'MDc6TGljZW5zZW1pdA==',
      html_url: faker.internet.url(),
    },
    organization: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    parent: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    source: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    master_branch: faker.lorem.slug(1),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    anonymous_access_enabled: faker.datatype.boolean(),
    code_of_conduct: {
      url: 'https://api.github.com/repos/github/docs/community/code_of_conduct',
      key: 'citizen_code_of_conduct',
      name: 'Citizen Code of Conduct',
      html_url: 'https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md',
    },
    security_and_analysis: {
      advanced_security: {
        status: faker.helpers.arrayElement(['enabled', 'disabled']),
      },
      secret_scanning: {
        status: faker.helpers.arrayElement(['enabled', 'disabled']),
      },
      secret_scanning_push_protection: {
        status: faker.helpers.arrayElement(['enabled', 'disabled']),
      },
    },
  };
}

export function getReposUpdate307Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposUpdate403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposUpdate404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposUpdate422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposDelete307Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposDelete403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getReposDelete404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActionsListArtifactsForRepo200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    artifacts: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 5,
      node_id: 'MDEwOkNoZWNrU3VpdGU1',
      name: 'AdventureWorks.Framework',
      size_in_bytes: 12345,
      url: 'https://api.github.com/repos/github/hello-world/actions/artifacts/5',
      archive_download_url: 'https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip',
      expired: faker.datatype.boolean(),
      created_at: faker.date.past(),
      expires_at: faker.date.past(),
      updated_at: faker.date.past(),
      workflow_run: {
        id: 10,
        repository_id: 42,
        head_repository_id: 42,
        head_branch: 'main',
        head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
      },
    })),
  };
}

export function getActionsGetArtifact200Response() {
  return {
    id: 5,
    node_id: 'MDEwOkNoZWNrU3VpdGU1',
    name: 'AdventureWorks.Framework',
    size_in_bytes: 12345,
    url: 'https://api.github.com/repos/github/hello-world/actions/artifacts/5',
    archive_download_url: 'https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip',
    expired: faker.datatype.boolean(),
    created_at: faker.date.past(),
    expires_at: faker.date.past(),
    updated_at: faker.date.past(),
    workflow_run: {
      id: 10,
      repository_id: 42,
      head_repository_id: 42,
      head_branch: 'main',
      head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
    },
  };
}

export function getActionsDownloadArtifact410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActionsGetJobForWorkflowRun200Response() {
  return {
    id: 21,
    run_id: 5,
    run_url: 'https://api.github.com/repos/github/hello-world/actions/runs/5',
    run_attempt: 1,
    node_id: 'MDg6Q2hlY2tSdW40',
    head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
    url: 'https://api.github.com/repos/github/hello-world/actions/jobs/21',
    html_url: 'https://github.com/github/hello-world/runs/4',
    status: 'queued',
    conclusion: 'success',
    started_at: '2019-08-08T08:00:00-07:00',
    completed_at: '2019-08-08T08:00:00-07:00',
    name: 'test-coverage',
    steps: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      status: 'queued',
      conclusion: 'success',
      name: 'test-coverage',
      number: 1,
      started_at: '2019-08-08T08:00:00-07:00',
      completed_at: '2019-08-08T08:00:00-07:00',
    })),
    check_run_url: 'https://api.github.com/repos/github/hello-world/check-runs/4',
    labels: ['self-hosted', 'foo', 'bar'],
    runner_id: 1,
    runner_name: 'my runner',
    runner_group_id: 2,
    runner_group_name: 'my runner group',
  };
}

export function getActionsGetGithubActionsPermissionsRepository200Response() {
  return {
    enabled: faker.datatype.boolean(),
    allowed_actions: faker.helpers.arrayElement(['all', 'local_only', 'selected']),
    selected_actions_url: faker.internet.url(),
  };
}

export function getActionsGetAllowedActionsRepository200Response() {
  return {
    github_owned_allowed: faker.datatype.boolean(),
    patterns_allowed: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
      faker.lorem.slug(1)
    ),
  };
}

export function getActionsListSelfHostedRunnersForRepo200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    runners: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 5,
      name: 'iMac',
      os: 'macos',
      status: 'online',
      busy: faker.datatype.boolean(),
      labels: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.person.fullName(),
        type: faker.helpers.arrayElement(['read-only', 'custom']),
      })),
    })),
  };
}

export function getActionsListRunnerApplicationsForRepo200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    os: faker.lorem.slug(1),
    architecture: faker.lorem.slug(1),
    download_url: faker.internet.url(),
    filename: faker.person.fullName(),
    temp_download_token: faker.lorem.slug(1),
    sha256_checksum: faker.lorem.slug(1),
  }));
}

export function getActionsCreateRegistrationTokenForRepo201Response() {
  return {
    token: 'v1.1f699f1069f60xxx',
    expires_at: '2016-07-11T22:14:10Z',
    permissions: { issues: 'read', deployments: 'write' },
    repositories: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    })),
    single_file: 'config.yaml',
    repository_selection: faker.helpers.arrayElement(['all', 'selected']),
  };
}

export function getActionsCreateRemoveTokenForRepo201Response() {
  return {
    token: 'v1.1f699f1069f60xxx',
    expires_at: '2016-07-11T22:14:10Z',
    permissions: { issues: 'read', deployments: 'write' },
    repositories: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    })),
    single_file: 'config.yaml',
    repository_selection: faker.helpers.arrayElement(['all', 'selected']),
  };
}

export function getActionsGetSelfHostedRunnerForRepo200Response() {
  return {
    id: 5,
    name: 'iMac',
    os: 'macos',
    status: 'online',
    busy: faker.datatype.boolean(),
    labels: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      type: faker.helpers.arrayElement(['read-only', 'custom']),
    })),
  };
}

export function getActionsListWorkflowRunsForRepo200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    workflow_runs: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 5,
      name: 'Build',
      node_id: 'MDEwOkNoZWNrU3VpdGU1',
      check_suite_id: 42,
      check_suite_node_id: 'MDEwOkNoZWNrU3VpdGU0Mg==',
      head_branch: 'master',
      head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
      run_number: 106,
      event: 'push',
      status: 'completed',
      conclusion: 'neutral',
      workflow_id: 5,
      url: 'https://api.github.com/repos/github/hello-world/actions/runs/5',
      html_url: 'https://github.com/github/hello-world/suites/4',
      pull_requests: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        number: faker.number.int({ min: undefined, max: undefined }),
        url: faker.internet.url(),
        head: {
          ref: faker.lorem.slug(1),
          sha: faker.lorem.slug(1),
          repo: {
            id: faker.number.int({ min: undefined, max: undefined }),
            url: faker.internet.url(),
            name: faker.person.fullName(),
          },
        },
        base: {
          ref: faker.lorem.slug(1),
          sha: faker.lorem.slug(1),
          repo: {
            id: faker.number.int({ min: undefined, max: undefined }),
            url: faker.internet.url(),
            name: faker.person.fullName(),
          },
        },
      })),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      jobs_url: 'https://api.github.com/repos/github/hello-world/actions/runs/5/jobs',
      logs_url: 'https://api.github.com/repos/github/hello-world/actions/runs/5/logs',
      check_suite_url: 'https://api.github.com/repos/github/hello-world/check-suites/12',
      artifacts_url: 'https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts',
      cancel_url: 'https://api.github.com/repos/github/hello-world/actions/runs/5/cancel',
      rerun_url: 'https://api.github.com/repos/github/hello-world/actions/runs/5/rerun',
      workflow_url: 'https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml',
      head_commit: {
        id: faker.lorem.slug(1),
        tree_id: faker.lorem.slug(1),
        message: faker.lorem.slug(1),
        timestamp: faker.date.past(),
        author: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
        },
        committer: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
        },
      },
      repository: {
        id: 1296269,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Hello-World',
        full_name: 'octocat/Hello-World',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: faker.internet.url(),
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: faker.internet.url(),
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        temp_clone_token: faker.lorem.slug(1),
        delete_branch_on_merge: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        code_of_conduct: {
          key: 'contributor_covenant',
          name: 'Contributor Covenant',
          url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
          body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
          html_url: faker.internet.url(),
        },
        license: {
          key: faker.lorem.slug(1),
          name: faker.person.fullName(),
          spdx_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          node_id: faker.lorem.slug(1),
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        allow_forking: faker.datatype.boolean(),
      },
      head_repository: {
        id: 1296269,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Hello-World',
        full_name: 'octocat/Hello-World',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: faker.internet.url(),
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: faker.internet.url(),
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        temp_clone_token: faker.lorem.slug(1),
        delete_branch_on_merge: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        code_of_conduct: {
          key: 'contributor_covenant',
          name: 'Contributor Covenant',
          url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
          body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
          html_url: faker.internet.url(),
        },
        license: {
          key: faker.lorem.slug(1),
          name: faker.person.fullName(),
          spdx_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          node_id: faker.lorem.slug(1),
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        allow_forking: faker.datatype.boolean(),
      },
      head_repository_id: 5,
    })),
  };
}

export function getActionsGetWorkflowRun200Response() {
  return {
    id: 5,
    name: 'Build',
    node_id: 'MDEwOkNoZWNrU3VpdGU1',
    check_suite_id: 42,
    check_suite_node_id: 'MDEwOkNoZWNrU3VpdGU0Mg==',
    head_branch: 'master',
    head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
    run_number: 106,
    event: 'push',
    status: 'completed',
    conclusion: 'neutral',
    workflow_id: 5,
    url: 'https://api.github.com/repos/github/hello-world/actions/runs/5',
    html_url: 'https://github.com/github/hello-world/suites/4',
    pull_requests: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      number: faker.number.int({ min: undefined, max: undefined }),
      url: faker.internet.url(),
      head: {
        ref: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        repo: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          name: faker.person.fullName(),
        },
      },
      base: {
        ref: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        repo: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          name: faker.person.fullName(),
        },
      },
    })),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    jobs_url: 'https://api.github.com/repos/github/hello-world/actions/runs/5/jobs',
    logs_url: 'https://api.github.com/repos/github/hello-world/actions/runs/5/logs',
    check_suite_url: 'https://api.github.com/repos/github/hello-world/check-suites/12',
    artifacts_url: 'https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts',
    cancel_url: 'https://api.github.com/repos/github/hello-world/actions/runs/5/cancel',
    rerun_url: 'https://api.github.com/repos/github/hello-world/actions/runs/5/rerun',
    workflow_url: 'https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml',
    head_commit: {
      id: faker.lorem.slug(1),
      tree_id: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      timestamp: faker.date.past(),
      author: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
      },
      committer: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
      },
    },
    repository: {
      id: 1296269,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Hello-World',
      full_name: 'octocat/Hello-World',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: faker.internet.url(),
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: faker.internet.url(),
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      temp_clone_token: faker.lorem.slug(1),
      delete_branch_on_merge: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      code_of_conduct: {
        key: 'contributor_covenant',
        name: 'Contributor Covenant',
        url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
        body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
        html_url: faker.internet.url(),
      },
      license: {
        key: faker.lorem.slug(1),
        name: faker.person.fullName(),
        spdx_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        node_id: faker.lorem.slug(1),
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      allow_forking: faker.datatype.boolean(),
    },
    head_repository: {
      id: 1296269,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Hello-World',
      full_name: 'octocat/Hello-World',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: faker.internet.url(),
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: faker.internet.url(),
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      temp_clone_token: faker.lorem.slug(1),
      delete_branch_on_merge: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      code_of_conduct: {
        key: 'contributor_covenant',
        name: 'Contributor Covenant',
        url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
        body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
        html_url: faker.internet.url(),
      },
      license: {
        key: faker.lorem.slug(1),
        name: faker.person.fullName(),
        spdx_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        node_id: faker.lorem.slug(1),
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      allow_forking: faker.datatype.boolean(),
    },
    head_repository_id: 5,
  };
}

export function getActionsGetReviewsForRun200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    environments: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 56780428,
      node_id: 'MDExOkVudmlyb25tZW50NTY3ODA0Mjg=',
      name: 'staging',
      url: 'https://api.github.com/repos/github/hello-world/environments/staging',
      html_url: 'https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging',
      created_at: '2020-11-23T22:00:40Z',
      updated_at: '2020-11-23T22:00:40Z',
    })),
    state: 'approved',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    comment: 'Ship it!',
  }));
}

export function getActionsListWorkflowRunArtifacts200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    artifacts: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 5,
      node_id: 'MDEwOkNoZWNrU3VpdGU1',
      name: 'AdventureWorks.Framework',
      size_in_bytes: 12345,
      url: 'https://api.github.com/repos/github/hello-world/actions/artifacts/5',
      archive_download_url: 'https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip',
      expired: faker.datatype.boolean(),
      created_at: faker.date.past(),
      expires_at: faker.date.past(),
      updated_at: faker.date.past(),
      workflow_run: {
        id: 10,
        repository_id: 42,
        head_repository_id: 42,
        head_branch: 'main',
        head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
      },
    })),
  };
}

export function getActionsCancelWorkflowRun202Response() {
  return {};
}

export function getActionsCancelWorkflowRun409Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActionsListJobsForWorkflowRun200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    jobs: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 21,
      run_id: 5,
      run_url: 'https://api.github.com/repos/github/hello-world/actions/runs/5',
      run_attempt: 1,
      node_id: 'MDg6Q2hlY2tSdW40',
      head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
      url: 'https://api.github.com/repos/github/hello-world/actions/jobs/21',
      html_url: 'https://github.com/github/hello-world/runs/4',
      status: 'queued',
      conclusion: 'success',
      started_at: '2019-08-08T08:00:00-07:00',
      completed_at: '2019-08-08T08:00:00-07:00',
      name: 'test-coverage',
      steps: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        status: 'queued',
        conclusion: 'success',
        name: 'test-coverage',
        number: 1,
        started_at: '2019-08-08T08:00:00-07:00',
        completed_at: '2019-08-08T08:00:00-07:00',
      })),
      check_run_url: 'https://api.github.com/repos/github/hello-world/check-runs/4',
      labels: ['self-hosted', 'foo', 'bar'],
      runner_id: 1,
      runner_name: 'my runner',
      runner_group_id: 2,
      runner_group_name: 'my runner group',
    })),
  };
}

export function getActionsDeleteWorkflowRunLogs403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActionsDeleteWorkflowRunLogs500Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActionsGetPendingDeploymentsForRun200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    environment: {
      id: 56780428,
      node_id: 'MDExOkVudmlyb25tZW50NTY3ODA0Mjg=',
      name: 'staging',
      url: 'https://api.github.com/repos/github/hello-world/environments/staging',
      html_url: 'https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging',
    },
    wait_timer: 30,
    wait_timer_started_at: '2020-11-23T22:00:40Z',
    current_user_can_approve: true,
    reviewers: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      type: 'User',
      reviewer: faker.helpers.arrayElement([
        {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        {
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          name: faker.person.fullName(),
          slug: faker.lorem.slug(1),
          description: faker.lorem.slug(1),
          privacy: faker.lorem.slug(1),
          permission: faker.lorem.slug(1),
          permissions: {
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            admin: faker.datatype.boolean(),
          },
          url: faker.internet.url(),
          html_url: 'https://github.com/orgs/rails/teams/core',
          members_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          parent: {
            id: 1,
            node_id: 'MDQ6VGVhbTE=',
            url: 'https://api.github.com/organizations/1/team/1',
            members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
            name: 'Justice League',
            description: 'A great team.',
            permission: 'admin',
            privacy: 'closed',
            html_url: 'https://github.com/orgs/rails/teams/core',
            repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
            slug: 'justice-league',
            ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
          },
        },
      ]),
    })),
  }));
}

export function getActionsReviewPendingDeploymentsForRun200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: 'https://api.github.com/repos/octocat/example/deployments/1',
    id: 42,
    node_id: 'MDEwOkRlcGxveW1lbnQx',
    sha: 'a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d',
    ref: 'topic-branch',
    task: 'deploy',
    payload: faker.helpers.arrayElement([{}, faker.lorem.slug(1)]),
    original_environment: 'staging',
    environment: 'production',
    description: 'Deploy request from hubot',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2012-07-20T01:19:13Z',
    updated_at: '2012-07-20T01:19:13Z',
    statuses_url: 'https://api.github.com/repos/octocat/example/deployments/1/statuses',
    repository_url: 'https://api.github.com/repos/octocat/example',
    transient_environment: true,
    production_environment: true,
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
  }));
}

export function getActionsReRunWorkflow201Response() {
  return {};
}

export function getActionsListRepoSecrets200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    secrets: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: 'SECRET_TOKEN',
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
    })),
  };
}

export function getActionsGetRepoPublicKey200Response() {
  return {
    key_id: '1234567',
    key: 'hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=',
    id: 2,
    url: 'https://api.github.com/user/keys/2',
    title: 'ssh-rsa AAAAB3NzaC1yc2EAAA',
    created_at: '2011-01-26T19:01:12Z',
  };
}

export function getActionsGetRepoSecret200Response() {
  return {
    name: 'SECRET_TOKEN',
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
  };
}

export function getActionsCreateOrUpdateRepoSecret201Response() {
  return {};
}

export function getActionsListRepoWorkflows200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    workflows: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 5,
      node_id: 'MDg6V29ya2Zsb3cxMg==',
      name: 'CI',
      path: 'ruby.yaml',
      state: 'active',
      created_at: '2019-12-06T14:20:20.000Z',
      updated_at: '2019-12-06T14:20:20.000Z',
      url: 'https://api.github.com/repos/actions/setup-ruby/workflows/5',
      html_url: 'https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml',
      badge_url: 'https://github.com/actions/setup-ruby/workflows/CI/badge.svg',
      deleted_at: '2019-12-06T14:20:20.000Z',
    })),
  };
}

export function getActionsGetWorkflow200Response() {
  return {
    id: 5,
    node_id: 'MDg6V29ya2Zsb3cxMg==',
    name: 'CI',
    path: 'ruby.yaml',
    state: 'active',
    created_at: '2019-12-06T14:20:20.000Z',
    updated_at: '2019-12-06T14:20:20.000Z',
    url: 'https://api.github.com/repos/actions/setup-ruby/workflows/5',
    html_url: 'https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml',
    badge_url: 'https://github.com/actions/setup-ruby/workflows/CI/badge.svg',
    deleted_at: '2019-12-06T14:20:20.000Z',
  };
}

export function getActionsListWorkflowRuns200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    workflow_runs: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 5,
      name: 'Build',
      node_id: 'MDEwOkNoZWNrU3VpdGU1',
      check_suite_id: 42,
      check_suite_node_id: 'MDEwOkNoZWNrU3VpdGU0Mg==',
      head_branch: 'master',
      head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
      run_number: 106,
      event: 'push',
      status: 'completed',
      conclusion: 'neutral',
      workflow_id: 5,
      url: 'https://api.github.com/repos/github/hello-world/actions/runs/5',
      html_url: 'https://github.com/github/hello-world/suites/4',
      pull_requests: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        number: faker.number.int({ min: undefined, max: undefined }),
        url: faker.internet.url(),
        head: {
          ref: faker.lorem.slug(1),
          sha: faker.lorem.slug(1),
          repo: {
            id: faker.number.int({ min: undefined, max: undefined }),
            url: faker.internet.url(),
            name: faker.person.fullName(),
          },
        },
        base: {
          ref: faker.lorem.slug(1),
          sha: faker.lorem.slug(1),
          repo: {
            id: faker.number.int({ min: undefined, max: undefined }),
            url: faker.internet.url(),
            name: faker.person.fullName(),
          },
        },
      })),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      jobs_url: 'https://api.github.com/repos/github/hello-world/actions/runs/5/jobs',
      logs_url: 'https://api.github.com/repos/github/hello-world/actions/runs/5/logs',
      check_suite_url: 'https://api.github.com/repos/github/hello-world/check-suites/12',
      artifacts_url: 'https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts',
      cancel_url: 'https://api.github.com/repos/github/hello-world/actions/runs/5/cancel',
      rerun_url: 'https://api.github.com/repos/github/hello-world/actions/runs/5/rerun',
      workflow_url: 'https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml',
      head_commit: {
        id: faker.lorem.slug(1),
        tree_id: faker.lorem.slug(1),
        message: faker.lorem.slug(1),
        timestamp: faker.date.past(),
        author: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
        },
        committer: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
        },
      },
      repository: {
        id: 1296269,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Hello-World',
        full_name: 'octocat/Hello-World',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: faker.internet.url(),
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: faker.internet.url(),
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        temp_clone_token: faker.lorem.slug(1),
        delete_branch_on_merge: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        code_of_conduct: {
          key: 'contributor_covenant',
          name: 'Contributor Covenant',
          url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
          body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
          html_url: faker.internet.url(),
        },
        license: {
          key: faker.lorem.slug(1),
          name: faker.person.fullName(),
          spdx_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          node_id: faker.lorem.slug(1),
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        allow_forking: faker.datatype.boolean(),
      },
      head_repository: {
        id: 1296269,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Hello-World',
        full_name: 'octocat/Hello-World',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: faker.internet.url(),
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: faker.internet.url(),
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        temp_clone_token: faker.lorem.slug(1),
        delete_branch_on_merge: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        code_of_conduct: {
          key: 'contributor_covenant',
          name: 'Contributor Covenant',
          url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
          body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
          html_url: faker.internet.url(),
        },
        license: {
          key: faker.lorem.slug(1),
          name: faker.person.fullName(),
          spdx_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          node_id: faker.lorem.slug(1),
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        allow_forking: faker.datatype.boolean(),
      },
      head_repository_id: 5,
    })),
  };
}

export function getIssuesListAssignees200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  }));
}

export function getIssuesListAssignees404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesCheckUserCanBeAssigned404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListAutolinks200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 3,
    key_prefix: 'TICKET-',
    url_template: 'https://example.com/TICKET?query=<num>',
  }));
}

export function getReposCreateAutolink201Response() {
  return {
    id: 3,
    key_prefix: 'TICKET-',
    url_template: 'https://example.com/TICKET?query=<num>',
  };
}

export function getReposCreateAutolink422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetAutolink200Response() {
  return {
    id: 3,
    key_prefix: 'TICKET-',
    url_template: 'https://example.com/TICKET?query=<num>',
  };
}

export function getReposGetAutolink404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposDeleteAutolink404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListBranches200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    commit: {
      sha: faker.lorem.slug(1),
      url: faker.internet.url(),
    },
    protected: faker.datatype.boolean(),
    protection: {
      url: faker.internet.url(),
      enabled: faker.datatype.boolean(),
      required_status_checks: {
        url: faker.internet.url(),
        enforcement_level: faker.lorem.slug(1),
        contexts: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        contexts_url: faker.internet.url(),
        strict: faker.datatype.boolean(),
      },
      enforce_admins: {
        url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins',
        enabled: true,
      },
      required_pull_request_reviews: {
        url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions',
        dismissal_restrictions: {
          users: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          })),
          teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            name: faker.person.fullName(),
            slug: faker.lorem.slug(1),
            description: faker.lorem.slug(1),
            privacy: faker.lorem.slug(1),
            permission: faker.lorem.slug(1),
            permissions: {
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
            url: faker.internet.url(),
            html_url: 'https://github.com/orgs/rails/teams/core',
            members_url: faker.internet.url(),
            repositories_url: faker.internet.url(),
            parent: {
              id: 1,
              node_id: 'MDQ6VGVhbTE=',
              url: 'https://api.github.com/organizations/1/team/1',
              members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
              name: 'Justice League',
              description: 'A great team.',
              permission: 'admin',
              privacy: 'closed',
              html_url: 'https://github.com/orgs/rails/teams/core',
              repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
              slug: 'justice-league',
              ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
            },
          })),
          apps: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
            id: 37,
            slug: 'probot-owners',
            node_id: 'MDExOkludGVncmF0aW9uMQ==',
            owner: {
              name: faker.person.fullName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url: 'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url: 'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url: 'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            name: 'Probot Owners',
            description: 'The description of the app.',
            external_url: 'https://example.com',
            html_url: 'https://github.com/apps/super-ci',
            created_at: '2017-07-08T16:18:44-04:00',
            updated_at: '2017-07-08T16:18:44-04:00',
            permissions: { issues: 'read', deployments: 'write' },
            events: ['label', 'deployment'],
            installations_count: 5,
            client_id: '"Iv1.25b5d1e65ffc4022"',
            client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
            webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
            pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
          })),
          url: '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"',
          users_url:
            '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"',
          teams_url:
            '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"',
        },
        dismiss_stale_reviews: true,
        require_code_owner_reviews: true,
        required_approving_review_count: 2,
      },
      restrictions: {
        url: faker.internet.url(),
        users_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        apps_url: faker.internet.url(),
        users: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        })),
        teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          name: faker.person.fullName(),
          slug: faker.lorem.slug(1),
          description: faker.lorem.slug(1),
          privacy: faker.lorem.slug(1),
          permission: faker.lorem.slug(1),
          members_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          parent: faker.lorem.slug(1),
        })),
        apps: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          id: faker.number.int({ min: undefined, max: undefined }),
          slug: faker.lorem.slug(1),
          node_id: faker.lorem.slug(1),
          owner: {
            login: faker.lorem.slug(1),
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            issues_url: faker.internet.url(),
            members_url: faker.internet.url(),
            public_members_url: faker.internet.url(),
            avatar_url: faker.internet.url(),
            description: faker.lorem.slug(1),
            gravatar_id: '""',
            html_url: '"https://github.com/testorg-ea8ec76d71c3af4b"',
            followers_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"',
            following_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"',
            gists_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"',
            starred_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"',
            subscriptions_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"',
            organizations_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"',
            received_events_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"',
            type: '"Organization"',
            site_admin: faker.datatype.boolean(),
          },
          name: faker.person.fullName(),
          description: faker.lorem.slug(1),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          permissions: {
            metadata: faker.lorem.slug(1),
            contents: faker.lorem.slug(1),
            issues: faker.lorem.slug(1),
            single_file: faker.lorem.slug(1),
          },
          events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
        })),
      },
      required_linear_history: {
        enabled: faker.datatype.boolean(),
      },
      allow_force_pushes: {
        enabled: faker.datatype.boolean(),
      },
      allow_deletions: {
        enabled: faker.datatype.boolean(),
      },
      block_creations: {
        enabled: faker.datatype.boolean(),
      },
      required_conversation_resolution: {
        enabled: faker.datatype.boolean(),
      },
      name: '"branch/with/protection"',
      protection_url:
        '"https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"',
      required_signatures: {
        url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures',
        enabled: true,
      },
    },
    protection_url: faker.internet.url(),
  }));
}

export function getReposListBranches404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetBranch200Response() {
  return {
    name: faker.person.fullName(),
    commit: {
      url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
      sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
      node_id: 'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
      html_url: 'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
      comments_url:
        'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
      commit: {
        url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
        author: {
          name: '"Chris Wanstrath"',
          email: '"chris@ozmm.org"',
          date: '"2007-10-29T02:42:39.000-07:00"',
        },
        committer: {
          name: '"Chris Wanstrath"',
          email: '"chris@ozmm.org"',
          date: '"2007-10-29T02:42:39.000-07:00"',
        },
        message: 'Fix all the bugs',
        comment_count: faker.number.int({ min: undefined, max: undefined }),
        tree: {
          sha: '827efc6d56897b048c772eb4087f854f46256132',
          url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
        },
        verification: {
          verified: faker.datatype.boolean(),
          reason: faker.lorem.slug(1),
          payload: faker.lorem.slug(1),
          signature: faker.lorem.slug(1),
        },
      },
      author: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      committer: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      parents: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
        url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
        html_url: 'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
      })),
      stats: {
        additions: faker.number.int({ min: undefined, max: undefined }),
        deletions: faker.number.int({ min: undefined, max: undefined }),
        total: faker.number.int({ min: undefined, max: undefined }),
      },
      files: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
        filename: 'file1.txt',
        status: 'added',
        additions: 103,
        deletions: 21,
        changes: 124,
        blob_url: 'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
        raw_url: 'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
        contents_url:
          'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
        patch: '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
        previous_filename: 'file.txt',
      })),
    },
    _links: {
      html: faker.lorem.slug(1),
      self: faker.internet.url(),
    },
    protected: faker.datatype.boolean(),
    protection: {
      url: faker.internet.url(),
      enabled: faker.datatype.boolean(),
      required_status_checks: {
        url: faker.internet.url(),
        enforcement_level: faker.lorem.slug(1),
        contexts: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        contexts_url: faker.internet.url(),
        strict: faker.datatype.boolean(),
      },
      enforce_admins: {
        url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins',
        enabled: true,
      },
      required_pull_request_reviews: {
        url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions',
        dismissal_restrictions: {
          users: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          })),
          teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            name: faker.person.fullName(),
            slug: faker.lorem.slug(1),
            description: faker.lorem.slug(1),
            privacy: faker.lorem.slug(1),
            permission: faker.lorem.slug(1),
            permissions: {
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
            url: faker.internet.url(),
            html_url: 'https://github.com/orgs/rails/teams/core',
            members_url: faker.internet.url(),
            repositories_url: faker.internet.url(),
            parent: {
              id: 1,
              node_id: 'MDQ6VGVhbTE=',
              url: 'https://api.github.com/organizations/1/team/1',
              members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
              name: 'Justice League',
              description: 'A great team.',
              permission: 'admin',
              privacy: 'closed',
              html_url: 'https://github.com/orgs/rails/teams/core',
              repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
              slug: 'justice-league',
              ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
            },
          })),
          apps: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
            id: 37,
            slug: 'probot-owners',
            node_id: 'MDExOkludGVncmF0aW9uMQ==',
            owner: {
              name: faker.person.fullName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url: 'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url: 'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url: 'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            name: 'Probot Owners',
            description: 'The description of the app.',
            external_url: 'https://example.com',
            html_url: 'https://github.com/apps/super-ci',
            created_at: '2017-07-08T16:18:44-04:00',
            updated_at: '2017-07-08T16:18:44-04:00',
            permissions: { issues: 'read', deployments: 'write' },
            events: ['label', 'deployment'],
            installations_count: 5,
            client_id: '"Iv1.25b5d1e65ffc4022"',
            client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
            webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
            pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
          })),
          url: '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"',
          users_url:
            '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"',
          teams_url:
            '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"',
        },
        dismiss_stale_reviews: true,
        require_code_owner_reviews: true,
        required_approving_review_count: 2,
      },
      restrictions: {
        url: faker.internet.url(),
        users_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        apps_url: faker.internet.url(),
        users: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        })),
        teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          name: faker.person.fullName(),
          slug: faker.lorem.slug(1),
          description: faker.lorem.slug(1),
          privacy: faker.lorem.slug(1),
          permission: faker.lorem.slug(1),
          members_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          parent: faker.lorem.slug(1),
        })),
        apps: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          id: faker.number.int({ min: undefined, max: undefined }),
          slug: faker.lorem.slug(1),
          node_id: faker.lorem.slug(1),
          owner: {
            login: faker.lorem.slug(1),
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            issues_url: faker.internet.url(),
            members_url: faker.internet.url(),
            public_members_url: faker.internet.url(),
            avatar_url: faker.internet.url(),
            description: faker.lorem.slug(1),
            gravatar_id: '""',
            html_url: '"https://github.com/testorg-ea8ec76d71c3af4b"',
            followers_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"',
            following_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"',
            gists_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"',
            starred_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"',
            subscriptions_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"',
            organizations_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"',
            received_events_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"',
            type: '"Organization"',
            site_admin: faker.datatype.boolean(),
          },
          name: faker.person.fullName(),
          description: faker.lorem.slug(1),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          permissions: {
            metadata: faker.lorem.slug(1),
            contents: faker.lorem.slug(1),
            issues: faker.lorem.slug(1),
            single_file: faker.lorem.slug(1),
          },
          events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
        })),
      },
      required_linear_history: {
        enabled: faker.datatype.boolean(),
      },
      allow_force_pushes: {
        enabled: faker.datatype.boolean(),
      },
      allow_deletions: {
        enabled: faker.datatype.boolean(),
      },
      block_creations: {
        enabled: faker.datatype.boolean(),
      },
      required_conversation_resolution: {
        enabled: faker.datatype.boolean(),
      },
      name: '"branch/with/protection"',
      protection_url:
        '"https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"',
      required_signatures: {
        url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures',
        enabled: true,
      },
    },
    protection_url: faker.internet.url(),
    pattern: '"mas*"',
    required_approving_review_count: 1,
  };
}

export function getReposGetBranch301Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetBranch404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetBranchProtection200Response() {
  return {
    url: faker.internet.url(),
    enabled: faker.datatype.boolean(),
    required_status_checks: {
      url: faker.internet.url(),
      enforcement_level: faker.lorem.slug(1),
      contexts: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
        faker.lorem.slug(1)
      ),
      contexts_url: faker.internet.url(),
      strict: faker.datatype.boolean(),
    },
    enforce_admins: {
      url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins',
      enabled: true,
    },
    required_pull_request_reviews: {
      url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions',
      dismissal_restrictions: {
        users: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        })),
        teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          name: faker.person.fullName(),
          slug: faker.lorem.slug(1),
          description: faker.lorem.slug(1),
          privacy: faker.lorem.slug(1),
          permission: faker.lorem.slug(1),
          permissions: {
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            admin: faker.datatype.boolean(),
          },
          url: faker.internet.url(),
          html_url: 'https://github.com/orgs/rails/teams/core',
          members_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          parent: {
            id: 1,
            node_id: 'MDQ6VGVhbTE=',
            url: 'https://api.github.com/organizations/1/team/1',
            members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
            name: 'Justice League',
            description: 'A great team.',
            permission: 'admin',
            privacy: 'closed',
            html_url: 'https://github.com/orgs/rails/teams/core',
            repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
            slug: 'justice-league',
            ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
          },
        })),
        apps: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        })),
        url: '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"',
        users_url:
          '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"',
        teams_url:
          '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"',
      },
      dismiss_stale_reviews: true,
      require_code_owner_reviews: true,
      required_approving_review_count: 2,
    },
    restrictions: {
      url: faker.internet.url(),
      users_url: faker.internet.url(),
      teams_url: faker.internet.url(),
      apps_url: faker.internet.url(),
      users: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        login: faker.lorem.slug(1),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        site_admin: faker.datatype.boolean(),
      })),
      teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        name: faker.person.fullName(),
        slug: faker.lorem.slug(1),
        description: faker.lorem.slug(1),
        privacy: faker.lorem.slug(1),
        permission: faker.lorem.slug(1),
        members_url: faker.internet.url(),
        repositories_url: faker.internet.url(),
        parent: faker.lorem.slug(1),
      })),
      apps: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        slug: faker.lorem.slug(1),
        node_id: faker.lorem.slug(1),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          issues_url: faker.internet.url(),
          members_url: faker.internet.url(),
          public_members_url: faker.internet.url(),
          avatar_url: faker.internet.url(),
          description: faker.lorem.slug(1),
          gravatar_id: '""',
          html_url: '"https://github.com/testorg-ea8ec76d71c3af4b"',
          followers_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"',
          following_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"',
          gists_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"',
          starred_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"',
          subscriptions_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"',
          organizations_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"',
          received_events_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"',
          type: '"Organization"',
          site_admin: faker.datatype.boolean(),
        },
        name: faker.person.fullName(),
        description: faker.lorem.slug(1),
        external_url: faker.internet.url(),
        html_url: faker.internet.url(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          metadata: faker.lorem.slug(1),
          contents: faker.lorem.slug(1),
          issues: faker.lorem.slug(1),
          single_file: faker.lorem.slug(1),
        },
        events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
      })),
    },
    required_linear_history: {
      enabled: faker.datatype.boolean(),
    },
    allow_force_pushes: {
      enabled: faker.datatype.boolean(),
    },
    allow_deletions: {
      enabled: faker.datatype.boolean(),
    },
    block_creations: {
      enabled: faker.datatype.boolean(),
    },
    required_conversation_resolution: {
      enabled: faker.datatype.boolean(),
    },
    name: '"branch/with/protection"',
    protection_url:
      '"https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"',
    required_signatures: {
      url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures',
      enabled: true,
    },
  };
}

export function getReposGetBranchProtection404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposUpdateBranchProtection200Response() {
  return {
    url: faker.internet.url(),
    required_status_checks: {
      url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks',
      strict: true,
      contexts: ['continuous-integration/travis-ci'],
      contexts_url:
        'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts',
    },
    required_pull_request_reviews: {
      url: faker.internet.url(),
      dismiss_stale_reviews: faker.datatype.boolean(),
      require_code_owner_reviews: faker.datatype.boolean(),
      required_approving_review_count: faker.number.int({ min: undefined, max: undefined }),
      dismissal_restrictions: {
        url: faker.internet.url(),
        users_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        users: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        })),
        teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          name: faker.person.fullName(),
          slug: faker.lorem.slug(1),
          description: faker.lorem.slug(1),
          privacy: faker.lorem.slug(1),
          permission: faker.lorem.slug(1),
          permissions: {
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            admin: faker.datatype.boolean(),
          },
          url: faker.internet.url(),
          html_url: 'https://github.com/orgs/rails/teams/core',
          members_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          parent: {
            id: 1,
            node_id: 'MDQ6VGVhbTE=',
            url: 'https://api.github.com/organizations/1/team/1',
            members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
            name: 'Justice League',
            description: 'A great team.',
            permission: 'admin',
            privacy: 'closed',
            html_url: 'https://github.com/orgs/rails/teams/core',
            repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
            slug: 'justice-league',
            ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
          },
        })),
        apps: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        })),
      },
    },
    required_signatures: {
      url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures',
      enabled: true,
    },
    enforce_admins: {
      url: faker.internet.url(),
      enabled: faker.datatype.boolean(),
    },
    required_linear_history: {
      enabled: faker.datatype.boolean(),
    },
    allow_force_pushes: {
      enabled: faker.datatype.boolean(),
    },
    allow_deletions: {
      enabled: faker.datatype.boolean(),
    },
    restrictions: {
      url: faker.internet.url(),
      users_url: faker.internet.url(),
      teams_url: faker.internet.url(),
      apps_url: faker.internet.url(),
      users: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        login: faker.lorem.slug(1),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        site_admin: faker.datatype.boolean(),
      })),
      teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        name: faker.person.fullName(),
        slug: faker.lorem.slug(1),
        description: faker.lorem.slug(1),
        privacy: faker.lorem.slug(1),
        permission: faker.lorem.slug(1),
        members_url: faker.internet.url(),
        repositories_url: faker.internet.url(),
        parent: faker.lorem.slug(1),
      })),
      apps: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        slug: faker.lorem.slug(1),
        node_id: faker.lorem.slug(1),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          issues_url: faker.internet.url(),
          members_url: faker.internet.url(),
          public_members_url: faker.internet.url(),
          avatar_url: faker.internet.url(),
          description: faker.lorem.slug(1),
          gravatar_id: '""',
          html_url: '"https://github.com/testorg-ea8ec76d71c3af4b"',
          followers_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"',
          following_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"',
          gists_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"',
          starred_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"',
          subscriptions_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"',
          organizations_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"',
          received_events_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"',
          type: '"Organization"',
          site_admin: faker.datatype.boolean(),
        },
        name: faker.person.fullName(),
        description: faker.lorem.slug(1),
        external_url: faker.internet.url(),
        html_url: faker.internet.url(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          metadata: faker.lorem.slug(1),
          contents: faker.lorem.slug(1),
          issues: faker.lorem.slug(1),
          single_file: faker.lorem.slug(1),
        },
        events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
      })),
    },
    required_conversation_resolution: {
      enabled: faker.datatype.boolean(),
    },
    block_creations: {
      enabled: faker.datatype.boolean(),
    },
  };
}

export function getReposUpdateBranchProtection403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposUpdateBranchProtection404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposUpdateBranchProtection422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getReposDeleteBranchProtection403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetAdminBranchProtection200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins',
    enabled: true,
  };
}

export function getReposSetAdminBranchProtection200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins',
    enabled: true,
  };
}

export function getReposDeleteAdminBranchProtection404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetPullRequestReviewProtection200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions',
    dismissal_restrictions: {
      users: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      })),
      teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        slug: faker.lorem.slug(1),
        description: faker.lorem.slug(1),
        privacy: faker.lorem.slug(1),
        permission: faker.lorem.slug(1),
        permissions: {
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          admin: faker.datatype.boolean(),
        },
        url: faker.internet.url(),
        html_url: 'https://github.com/orgs/rails/teams/core',
        members_url: faker.internet.url(),
        repositories_url: faker.internet.url(),
        parent: {
          id: 1,
          node_id: 'MDQ6VGVhbTE=',
          url: 'https://api.github.com/organizations/1/team/1',
          members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
          name: 'Justice League',
          description: 'A great team.',
          permission: 'admin',
          privacy: 'closed',
          html_url: 'https://github.com/orgs/rails/teams/core',
          repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
          slug: 'justice-league',
          ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
        },
      })),
      apps: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: 37,
        slug: 'probot-owners',
        node_id: 'MDExOkludGVncmF0aW9uMQ==',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        name: 'Probot Owners',
        description: 'The description of the app.',
        external_url: 'https://example.com',
        html_url: 'https://github.com/apps/super-ci',
        created_at: '2017-07-08T16:18:44-04:00',
        updated_at: '2017-07-08T16:18:44-04:00',
        permissions: { issues: 'read', deployments: 'write' },
        events: ['label', 'deployment'],
        installations_count: 5,
        client_id: '"Iv1.25b5d1e65ffc4022"',
        client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
        webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
        pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
      })),
      url: '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"',
      users_url:
        '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"',
      teams_url:
        '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"',
    },
    dismiss_stale_reviews: true,
    require_code_owner_reviews: true,
    required_approving_review_count: 2,
  };
}

export function getReposUpdatePullRequestReviewProtection200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions',
    dismissal_restrictions: {
      users: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      })),
      teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        slug: faker.lorem.slug(1),
        description: faker.lorem.slug(1),
        privacy: faker.lorem.slug(1),
        permission: faker.lorem.slug(1),
        permissions: {
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          admin: faker.datatype.boolean(),
        },
        url: faker.internet.url(),
        html_url: 'https://github.com/orgs/rails/teams/core',
        members_url: faker.internet.url(),
        repositories_url: faker.internet.url(),
        parent: {
          id: 1,
          node_id: 'MDQ6VGVhbTE=',
          url: 'https://api.github.com/organizations/1/team/1',
          members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
          name: 'Justice League',
          description: 'A great team.',
          permission: 'admin',
          privacy: 'closed',
          html_url: 'https://github.com/orgs/rails/teams/core',
          repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
          slug: 'justice-league',
          ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
        },
      })),
      apps: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: 37,
        slug: 'probot-owners',
        node_id: 'MDExOkludGVncmF0aW9uMQ==',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        name: 'Probot Owners',
        description: 'The description of the app.',
        external_url: 'https://example.com',
        html_url: 'https://github.com/apps/super-ci',
        created_at: '2017-07-08T16:18:44-04:00',
        updated_at: '2017-07-08T16:18:44-04:00',
        permissions: { issues: 'read', deployments: 'write' },
        events: ['label', 'deployment'],
        installations_count: 5,
        client_id: '"Iv1.25b5d1e65ffc4022"',
        client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
        webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
        pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
      })),
      url: '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"',
      users_url:
        '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"',
      teams_url:
        '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"',
    },
    dismiss_stale_reviews: true,
    require_code_owner_reviews: true,
    required_approving_review_count: 2,
  };
}

export function getReposUpdatePullRequestReviewProtection422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposDeletePullRequestReviewProtection404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetCommitSignatureProtection200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins',
    enabled: true,
  };
}

export function getReposGetCommitSignatureProtection404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateCommitSignatureProtection200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins',
    enabled: true,
  };
}

export function getReposCreateCommitSignatureProtection404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposDeleteCommitSignatureProtection404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetStatusChecksProtection200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks',
    strict: true,
    contexts: ['continuous-integration/travis-ci'],
    contexts_url:
      'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts',
  };
}

export function getReposGetStatusChecksProtection404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposUpdateStatusCheckProtection200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks',
    strict: true,
    contexts: ['continuous-integration/travis-ci'],
    contexts_url:
      'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts',
  };
}

export function getReposUpdateStatusCheckProtection404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposUpdateStatusCheckProtection422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetAllStatusCheckContexts200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1));
}

export function getReposGetAllStatusCheckContexts404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposAddStatusCheckContexts200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1));
}

export function getReposAddStatusCheckContexts403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposAddStatusCheckContexts404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposAddStatusCheckContexts422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposSetStatusCheckContexts200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1));
}

export function getReposSetStatusCheckContexts404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposSetStatusCheckContexts422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposRemoveStatusCheckContexts200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1));
}

export function getReposRemoveStatusCheckContexts404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposRemoveStatusCheckContexts422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetAccessRestrictions200Response() {
  return {
    url: faker.internet.url(),
    users_url: faker.internet.url(),
    teams_url: faker.internet.url(),
    apps_url: faker.internet.url(),
    users: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      login: faker.lorem.slug(1),
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      avatar_url: faker.internet.url(),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
      followers_url: faker.internet.url(),
      following_url: faker.internet.url(),
      gists_url: faker.internet.url(),
      starred_url: faker.internet.url(),
      subscriptions_url: faker.internet.url(),
      organizations_url: faker.internet.url(),
      repos_url: faker.internet.url(),
      events_url: faker.internet.url(),
      received_events_url: faker.internet.url(),
      type: faker.lorem.slug(1),
      site_admin: faker.datatype.boolean(),
    })),
    teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
      name: faker.person.fullName(),
      slug: faker.lorem.slug(1),
      description: faker.lorem.slug(1),
      privacy: faker.lorem.slug(1),
      permission: faker.lorem.slug(1),
      members_url: faker.internet.url(),
      repositories_url: faker.internet.url(),
      parent: faker.lorem.slug(1),
    })),
    apps: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      slug: faker.lorem.slug(1),
      node_id: faker.lorem.slug(1),
      owner: {
        login: faker.lorem.slug(1),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        members_url: faker.internet.url(),
        public_members_url: faker.internet.url(),
        avatar_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        gravatar_id: '""',
        html_url: '"https://github.com/testorg-ea8ec76d71c3af4b"',
        followers_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"',
        following_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"',
        gists_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"',
        starred_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"',
        subscriptions_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"',
        organizations_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"',
        received_events_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"',
        type: '"Organization"',
        site_admin: faker.datatype.boolean(),
      },
      name: faker.person.fullName(),
      description: faker.lorem.slug(1),
      external_url: faker.internet.url(),
      html_url: faker.internet.url(),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      permissions: {
        metadata: faker.lorem.slug(1),
        contents: faker.lorem.slug(1),
        issues: faker.lorem.slug(1),
        single_file: faker.lorem.slug(1),
      },
      events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    })),
  };
}

export function getReposGetAccessRestrictions404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetAppsWithAccessToProtectedBranch200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 37,
    slug: 'probot-owners',
    node_id: 'MDExOkludGVncmF0aW9uMQ==',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    name: 'Probot Owners',
    description: 'The description of the app.',
    external_url: 'https://example.com',
    html_url: 'https://github.com/apps/super-ci',
    created_at: '2017-07-08T16:18:44-04:00',
    updated_at: '2017-07-08T16:18:44-04:00',
    permissions: { issues: 'read', deployments: 'write' },
    events: ['label', 'deployment'],
    installations_count: 5,
    client_id: '"Iv1.25b5d1e65ffc4022"',
    client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
    webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
    pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
  }));
}

export function getReposGetAppsWithAccessToProtectedBranch404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposAddAppAccessRestrictions200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 37,
    slug: 'probot-owners',
    node_id: 'MDExOkludGVncmF0aW9uMQ==',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    name: 'Probot Owners',
    description: 'The description of the app.',
    external_url: 'https://example.com',
    html_url: 'https://github.com/apps/super-ci',
    created_at: '2017-07-08T16:18:44-04:00',
    updated_at: '2017-07-08T16:18:44-04:00',
    permissions: { issues: 'read', deployments: 'write' },
    events: ['label', 'deployment'],
    installations_count: 5,
    client_id: '"Iv1.25b5d1e65ffc4022"',
    client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
    webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
    pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
  }));
}

export function getReposAddAppAccessRestrictions422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposSetAppAccessRestrictions200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 37,
    slug: 'probot-owners',
    node_id: 'MDExOkludGVncmF0aW9uMQ==',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    name: 'Probot Owners',
    description: 'The description of the app.',
    external_url: 'https://example.com',
    html_url: 'https://github.com/apps/super-ci',
    created_at: '2017-07-08T16:18:44-04:00',
    updated_at: '2017-07-08T16:18:44-04:00',
    permissions: { issues: 'read', deployments: 'write' },
    events: ['label', 'deployment'],
    installations_count: 5,
    client_id: '"Iv1.25b5d1e65ffc4022"',
    client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
    webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
    pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
  }));
}

export function getReposSetAppAccessRestrictions422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposRemoveAppAccessRestrictions200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 37,
    slug: 'probot-owners',
    node_id: 'MDExOkludGVncmF0aW9uMQ==',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    name: 'Probot Owners',
    description: 'The description of the app.',
    external_url: 'https://example.com',
    html_url: 'https://github.com/apps/super-ci',
    created_at: '2017-07-08T16:18:44-04:00',
    updated_at: '2017-07-08T16:18:44-04:00',
    permissions: { issues: 'read', deployments: 'write' },
    events: ['label', 'deployment'],
    installations_count: 5,
    client_id: '"Iv1.25b5d1e65ffc4022"',
    client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
    webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
    pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
  }));
}

export function getReposRemoveAppAccessRestrictions422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetTeamsWithAccessToProtectedBranch200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    name: faker.person.fullName(),
    slug: faker.lorem.slug(1),
    description: faker.lorem.slug(1),
    privacy: faker.lorem.slug(1),
    permission: faker.lorem.slug(1),
    permissions: {
      pull: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      admin: faker.datatype.boolean(),
    },
    url: faker.internet.url(),
    html_url: 'https://github.com/orgs/rails/teams/core',
    members_url: faker.internet.url(),
    repositories_url: faker.internet.url(),
    parent: {
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    },
  }));
}

export function getReposGetTeamsWithAccessToProtectedBranch404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposAddTeamAccessRestrictions200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    name: faker.person.fullName(),
    slug: faker.lorem.slug(1),
    description: faker.lorem.slug(1),
    privacy: faker.lorem.slug(1),
    permission: faker.lorem.slug(1),
    permissions: {
      pull: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      admin: faker.datatype.boolean(),
    },
    url: faker.internet.url(),
    html_url: 'https://github.com/orgs/rails/teams/core',
    members_url: faker.internet.url(),
    repositories_url: faker.internet.url(),
    parent: {
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    },
  }));
}

export function getReposAddTeamAccessRestrictions422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposSetTeamAccessRestrictions200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    name: faker.person.fullName(),
    slug: faker.lorem.slug(1),
    description: faker.lorem.slug(1),
    privacy: faker.lorem.slug(1),
    permission: faker.lorem.slug(1),
    permissions: {
      pull: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      admin: faker.datatype.boolean(),
    },
    url: faker.internet.url(),
    html_url: 'https://github.com/orgs/rails/teams/core',
    members_url: faker.internet.url(),
    repositories_url: faker.internet.url(),
    parent: {
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    },
  }));
}

export function getReposSetTeamAccessRestrictions422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposRemoveTeamAccessRestrictions200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    name: faker.person.fullName(),
    slug: faker.lorem.slug(1),
    description: faker.lorem.slug(1),
    privacy: faker.lorem.slug(1),
    permission: faker.lorem.slug(1),
    permissions: {
      pull: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      admin: faker.datatype.boolean(),
    },
    url: faker.internet.url(),
    html_url: 'https://github.com/orgs/rails/teams/core',
    members_url: faker.internet.url(),
    repositories_url: faker.internet.url(),
    parent: {
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    },
  }));
}

export function getReposRemoveTeamAccessRestrictions422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetUsersWithAccessToProtectedBranch200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  }));
}

export function getReposGetUsersWithAccessToProtectedBranch404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposAddUserAccessRestrictions200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  }));
}

export function getReposAddUserAccessRestrictions422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposSetUserAccessRestrictions200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  }));
}

export function getReposSetUserAccessRestrictions422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposRemoveUserAccessRestrictions200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  }));
}

export function getReposRemoveUserAccessRestrictions422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposRenameBranch201Response() {
  return {
    name: faker.person.fullName(),
    commit: {
      url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
      sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
      node_id: 'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
      html_url: 'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
      comments_url:
        'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
      commit: {
        url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
        author: {
          name: '"Chris Wanstrath"',
          email: '"chris@ozmm.org"',
          date: '"2007-10-29T02:42:39.000-07:00"',
        },
        committer: {
          name: '"Chris Wanstrath"',
          email: '"chris@ozmm.org"',
          date: '"2007-10-29T02:42:39.000-07:00"',
        },
        message: 'Fix all the bugs',
        comment_count: faker.number.int({ min: undefined, max: undefined }),
        tree: {
          sha: '827efc6d56897b048c772eb4087f854f46256132',
          url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
        },
        verification: {
          verified: faker.datatype.boolean(),
          reason: faker.lorem.slug(1),
          payload: faker.lorem.slug(1),
          signature: faker.lorem.slug(1),
        },
      },
      author: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      committer: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      parents: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
        url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
        html_url: 'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
      })),
      stats: {
        additions: faker.number.int({ min: undefined, max: undefined }),
        deletions: faker.number.int({ min: undefined, max: undefined }),
        total: faker.number.int({ min: undefined, max: undefined }),
      },
      files: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
        filename: 'file1.txt',
        status: 'added',
        additions: 103,
        deletions: 21,
        changes: 124,
        blob_url: 'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
        raw_url: 'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
        contents_url:
          'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
        patch: '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
        previous_filename: 'file.txt',
      })),
    },
    _links: {
      html: faker.lorem.slug(1),
      self: faker.internet.url(),
    },
    protected: faker.datatype.boolean(),
    protection: {
      url: faker.internet.url(),
      enabled: faker.datatype.boolean(),
      required_status_checks: {
        url: faker.internet.url(),
        enforcement_level: faker.lorem.slug(1),
        contexts: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        contexts_url: faker.internet.url(),
        strict: faker.datatype.boolean(),
      },
      enforce_admins: {
        url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins',
        enabled: true,
      },
      required_pull_request_reviews: {
        url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions',
        dismissal_restrictions: {
          users: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          })),
          teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            name: faker.person.fullName(),
            slug: faker.lorem.slug(1),
            description: faker.lorem.slug(1),
            privacy: faker.lorem.slug(1),
            permission: faker.lorem.slug(1),
            permissions: {
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
            url: faker.internet.url(),
            html_url: 'https://github.com/orgs/rails/teams/core',
            members_url: faker.internet.url(),
            repositories_url: faker.internet.url(),
            parent: {
              id: 1,
              node_id: 'MDQ6VGVhbTE=',
              url: 'https://api.github.com/organizations/1/team/1',
              members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
              name: 'Justice League',
              description: 'A great team.',
              permission: 'admin',
              privacy: 'closed',
              html_url: 'https://github.com/orgs/rails/teams/core',
              repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
              slug: 'justice-league',
              ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
            },
          })),
          apps: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
            id: 37,
            slug: 'probot-owners',
            node_id: 'MDExOkludGVncmF0aW9uMQ==',
            owner: {
              name: faker.person.fullName(),
              email: faker.internet.email(),
              login: 'octocat',
              id: 1,
              node_id: 'MDQ6VXNlcjE=',
              avatar_url: 'https://github.com/images/error/octocat_happy.gif',
              gravatar_id: '41d064eb2195891e12d0413f63227ea7',
              url: 'https://api.github.com/users/octocat',
              html_url: 'https://github.com/octocat',
              followers_url: 'https://api.github.com/users/octocat/followers',
              following_url: 'https://api.github.com/users/octocat/following{/other_user}',
              gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
              starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
              subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
              organizations_url: 'https://api.github.com/users/octocat/orgs',
              repos_url: 'https://api.github.com/users/octocat/repos',
              events_url: 'https://api.github.com/users/octocat/events{/privacy}',
              received_events_url: 'https://api.github.com/users/octocat/received_events',
              type: 'User',
              site_admin: faker.datatype.boolean(),
              starred_at: '"2020-07-09T00:17:55Z"',
            },
            name: 'Probot Owners',
            description: 'The description of the app.',
            external_url: 'https://example.com',
            html_url: 'https://github.com/apps/super-ci',
            created_at: '2017-07-08T16:18:44-04:00',
            updated_at: '2017-07-08T16:18:44-04:00',
            permissions: { issues: 'read', deployments: 'write' },
            events: ['label', 'deployment'],
            installations_count: 5,
            client_id: '"Iv1.25b5d1e65ffc4022"',
            client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
            webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
            pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
          })),
          url: '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"',
          users_url:
            '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"',
          teams_url:
            '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"',
        },
        dismiss_stale_reviews: true,
        require_code_owner_reviews: true,
        required_approving_review_count: 2,
      },
      restrictions: {
        url: faker.internet.url(),
        users_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        apps_url: faker.internet.url(),
        users: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        })),
        teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          name: faker.person.fullName(),
          slug: faker.lorem.slug(1),
          description: faker.lorem.slug(1),
          privacy: faker.lorem.slug(1),
          permission: faker.lorem.slug(1),
          members_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          parent: faker.lorem.slug(1),
        })),
        apps: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          id: faker.number.int({ min: undefined, max: undefined }),
          slug: faker.lorem.slug(1),
          node_id: faker.lorem.slug(1),
          owner: {
            login: faker.lorem.slug(1),
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            issues_url: faker.internet.url(),
            members_url: faker.internet.url(),
            public_members_url: faker.internet.url(),
            avatar_url: faker.internet.url(),
            description: faker.lorem.slug(1),
            gravatar_id: '""',
            html_url: '"https://github.com/testorg-ea8ec76d71c3af4b"',
            followers_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"',
            following_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"',
            gists_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"',
            starred_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"',
            subscriptions_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"',
            organizations_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"',
            received_events_url: '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"',
            type: '"Organization"',
            site_admin: faker.datatype.boolean(),
          },
          name: faker.person.fullName(),
          description: faker.lorem.slug(1),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          permissions: {
            metadata: faker.lorem.slug(1),
            contents: faker.lorem.slug(1),
            issues: faker.lorem.slug(1),
            single_file: faker.lorem.slug(1),
          },
          events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
        })),
      },
      required_linear_history: {
        enabled: faker.datatype.boolean(),
      },
      allow_force_pushes: {
        enabled: faker.datatype.boolean(),
      },
      allow_deletions: {
        enabled: faker.datatype.boolean(),
      },
      block_creations: {
        enabled: faker.datatype.boolean(),
      },
      required_conversation_resolution: {
        enabled: faker.datatype.boolean(),
      },
      name: '"branch/with/protection"',
      protection_url:
        '"https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"',
      required_signatures: {
        url: 'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures',
        enabled: true,
      },
    },
    protection_url: faker.internet.url(),
    pattern: '"mas*"',
    required_approving_review_count: 1,
  };
}

export function getReposRenameBranch403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposRenameBranch404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposRenameBranch422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getChecksCreate201Response() {
  return {
    id: 21,
    head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
    node_id: 'MDg6Q2hlY2tSdW40',
    external_id: '42',
    url: 'https://api.github.com/repos/github/hello-world/check-runs/4',
    html_url: 'https://github.com/github/hello-world/runs/4',
    details_url: 'https://example.com',
    status: 'queued',
    conclusion: 'neutral',
    started_at: '2018-05-04T01:14:52Z',
    completed_at: '2018-05-04T01:14:52Z',
    output: {
      title: faker.lorem.slug(1),
      summary: faker.lorem.slug(1),
      text: faker.lorem.slug(1),
      annotations_count: faker.number.int({ min: undefined, max: undefined }),
      annotations_url: faker.internet.url(),
    },
    name: 'test-coverage',
    check_suite: {
      id: faker.number.int({ min: undefined, max: undefined }),
    },
    app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    pull_requests: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      number: faker.number.int({ min: undefined, max: undefined }),
      url: faker.internet.url(),
      head: {
        ref: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        repo: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          name: faker.person.fullName(),
        },
      },
      base: {
        ref: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        repo: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          name: faker.person.fullName(),
        },
      },
    })),
    deployment: {
      url: 'https://api.github.com/repos/octocat/example/deployments/1',
      id: 42,
      node_id: 'MDEwOkRlcGxveW1lbnQx',
      task: 'deploy',
      original_environment: 'staging',
      environment: 'production',
      description: 'Deploy request from hubot',
      created_at: '2012-07-20T01:19:13Z',
      updated_at: '2012-07-20T01:19:13Z',
      statuses_url: 'https://api.github.com/repos/octocat/example/deployments/1/statuses',
      repository_url: 'https://api.github.com/repos/octocat/example',
      transient_environment: true,
      production_environment: true,
      performed_via_github_app: {
        id: 37,
        slug: 'probot-owners',
        node_id: 'MDExOkludGVncmF0aW9uMQ==',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        name: 'Probot Owners',
        description: 'The description of the app.',
        external_url: 'https://example.com',
        html_url: 'https://github.com/apps/super-ci',
        created_at: '2017-07-08T16:18:44-04:00',
        updated_at: '2017-07-08T16:18:44-04:00',
        permissions: { issues: 'read', deployments: 'write' },
        events: ['label', 'deployment'],
        installations_count: 5,
        client_id: '"Iv1.25b5d1e65ffc4022"',
        client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
        webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
        pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
      },
    },
  };
}

export function getChecksGet200Response() {
  return {
    id: 21,
    head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
    node_id: 'MDg6Q2hlY2tSdW40',
    external_id: '42',
    url: 'https://api.github.com/repos/github/hello-world/check-runs/4',
    html_url: 'https://github.com/github/hello-world/runs/4',
    details_url: 'https://example.com',
    status: 'queued',
    conclusion: 'neutral',
    started_at: '2018-05-04T01:14:52Z',
    completed_at: '2018-05-04T01:14:52Z',
    output: {
      title: faker.lorem.slug(1),
      summary: faker.lorem.slug(1),
      text: faker.lorem.slug(1),
      annotations_count: faker.number.int({ min: undefined, max: undefined }),
      annotations_url: faker.internet.url(),
    },
    name: 'test-coverage',
    check_suite: {
      id: faker.number.int({ min: undefined, max: undefined }),
    },
    app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    pull_requests: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      number: faker.number.int({ min: undefined, max: undefined }),
      url: faker.internet.url(),
      head: {
        ref: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        repo: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          name: faker.person.fullName(),
        },
      },
      base: {
        ref: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        repo: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          name: faker.person.fullName(),
        },
      },
    })),
    deployment: {
      url: 'https://api.github.com/repos/octocat/example/deployments/1',
      id: 42,
      node_id: 'MDEwOkRlcGxveW1lbnQx',
      task: 'deploy',
      original_environment: 'staging',
      environment: 'production',
      description: 'Deploy request from hubot',
      created_at: '2012-07-20T01:19:13Z',
      updated_at: '2012-07-20T01:19:13Z',
      statuses_url: 'https://api.github.com/repos/octocat/example/deployments/1/statuses',
      repository_url: 'https://api.github.com/repos/octocat/example',
      transient_environment: true,
      production_environment: true,
      performed_via_github_app: {
        id: 37,
        slug: 'probot-owners',
        node_id: 'MDExOkludGVncmF0aW9uMQ==',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        name: 'Probot Owners',
        description: 'The description of the app.',
        external_url: 'https://example.com',
        html_url: 'https://github.com/apps/super-ci',
        created_at: '2017-07-08T16:18:44-04:00',
        updated_at: '2017-07-08T16:18:44-04:00',
        permissions: { issues: 'read', deployments: 'write' },
        events: ['label', 'deployment'],
        installations_count: 5,
        client_id: '"Iv1.25b5d1e65ffc4022"',
        client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
        webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
        pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
      },
    },
  };
}

export function getChecksUpdate200Response() {
  return {
    id: 21,
    head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
    node_id: 'MDg6Q2hlY2tSdW40',
    external_id: '42',
    url: 'https://api.github.com/repos/github/hello-world/check-runs/4',
    html_url: 'https://github.com/github/hello-world/runs/4',
    details_url: 'https://example.com',
    status: 'queued',
    conclusion: 'neutral',
    started_at: '2018-05-04T01:14:52Z',
    completed_at: '2018-05-04T01:14:52Z',
    output: {
      title: faker.lorem.slug(1),
      summary: faker.lorem.slug(1),
      text: faker.lorem.slug(1),
      annotations_count: faker.number.int({ min: undefined, max: undefined }),
      annotations_url: faker.internet.url(),
    },
    name: 'test-coverage',
    check_suite: {
      id: faker.number.int({ min: undefined, max: undefined }),
    },
    app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    pull_requests: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      number: faker.number.int({ min: undefined, max: undefined }),
      url: faker.internet.url(),
      head: {
        ref: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        repo: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          name: faker.person.fullName(),
        },
      },
      base: {
        ref: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        repo: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          name: faker.person.fullName(),
        },
      },
    })),
    deployment: {
      url: 'https://api.github.com/repos/octocat/example/deployments/1',
      id: 42,
      node_id: 'MDEwOkRlcGxveW1lbnQx',
      task: 'deploy',
      original_environment: 'staging',
      environment: 'production',
      description: 'Deploy request from hubot',
      created_at: '2012-07-20T01:19:13Z',
      updated_at: '2012-07-20T01:19:13Z',
      statuses_url: 'https://api.github.com/repos/octocat/example/deployments/1/statuses',
      repository_url: 'https://api.github.com/repos/octocat/example',
      transient_environment: true,
      production_environment: true,
      performed_via_github_app: {
        id: 37,
        slug: 'probot-owners',
        node_id: 'MDExOkludGVncmF0aW9uMQ==',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        name: 'Probot Owners',
        description: 'The description of the app.',
        external_url: 'https://example.com',
        html_url: 'https://github.com/apps/super-ci',
        created_at: '2017-07-08T16:18:44-04:00',
        updated_at: '2017-07-08T16:18:44-04:00',
        permissions: { issues: 'read', deployments: 'write' },
        events: ['label', 'deployment'],
        installations_count: 5,
        client_id: '"Iv1.25b5d1e65ffc4022"',
        client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
        webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
        pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
      },
    },
  };
}

export function getChecksListAnnotations200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    path: 'README.md',
    start_line: 2,
    end_line: 2,
    start_column: 5,
    end_column: 10,
    annotation_level: 'warning',
    title: 'Spell Checker',
    message: "Check your spelling for 'banaas'.",
    raw_details: "Do you mean 'bananas' or 'banana'?",
    blob_href: faker.lorem.slug(1),
  }));
}

export function getChecksRerequestRun201Response() {
  return {};
}

export function getChecksRerequestRun403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getChecksRerequestRun404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getChecksRerequestRun422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getChecksCreateSuite200Response() {
  return {
    id: 5,
    node_id: 'MDEwOkNoZWNrU3VpdGU1',
    head_branch: 'master',
    head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
    status: 'completed',
    conclusion: 'neutral',
    url: 'https://api.github.com/repos/github/hello-world/check-suites/5',
    before: '146e867f55c26428e5f9fade55a9bbf5e95a7912',
    after: 'd6fde92930d4715a2b49857d24b940956b26d2d3',
    pull_requests: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      number: faker.number.int({ min: undefined, max: undefined }),
      url: faker.internet.url(),
      head: {
        ref: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        repo: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          name: faker.person.fullName(),
        },
      },
      base: {
        ref: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        repo: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          name: faker.person.fullName(),
        },
      },
    })),
    app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    repository: {
      id: 1296269,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Hello-World',
      full_name: 'octocat/Hello-World',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: faker.internet.url(),
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: faker.internet.url(),
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      temp_clone_token: faker.lorem.slug(1),
      delete_branch_on_merge: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      code_of_conduct: {
        key: 'contributor_covenant',
        name: 'Contributor Covenant',
        url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
        body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
        html_url: faker.internet.url(),
      },
      license: {
        key: faker.lorem.slug(1),
        name: faker.person.fullName(),
        spdx_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        node_id: faker.lorem.slug(1),
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      allow_forking: faker.datatype.boolean(),
    },
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    head_commit: {
      id: faker.lorem.slug(1),
      tree_id: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      timestamp: faker.date.past(),
      author: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
      },
      committer: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
      },
    },
    latest_check_runs_count: faker.number.int({ min: undefined, max: undefined }),
    check_runs_url: faker.internet.url(),
    rerequestable: faker.datatype.boolean(),
    runs_rerequestable: faker.datatype.boolean(),
  };
}

export function getChecksCreateSuite201Response() {
  return {
    id: 5,
    node_id: 'MDEwOkNoZWNrU3VpdGU1',
    head_branch: 'master',
    head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
    status: 'completed',
    conclusion: 'neutral',
    url: 'https://api.github.com/repos/github/hello-world/check-suites/5',
    before: '146e867f55c26428e5f9fade55a9bbf5e95a7912',
    after: 'd6fde92930d4715a2b49857d24b940956b26d2d3',
    pull_requests: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      number: faker.number.int({ min: undefined, max: undefined }),
      url: faker.internet.url(),
      head: {
        ref: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        repo: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          name: faker.person.fullName(),
        },
      },
      base: {
        ref: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        repo: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          name: faker.person.fullName(),
        },
      },
    })),
    app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    repository: {
      id: 1296269,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Hello-World',
      full_name: 'octocat/Hello-World',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: faker.internet.url(),
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: faker.internet.url(),
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      temp_clone_token: faker.lorem.slug(1),
      delete_branch_on_merge: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      code_of_conduct: {
        key: 'contributor_covenant',
        name: 'Contributor Covenant',
        url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
        body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
        html_url: faker.internet.url(),
      },
      license: {
        key: faker.lorem.slug(1),
        name: faker.person.fullName(),
        spdx_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        node_id: faker.lorem.slug(1),
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      allow_forking: faker.datatype.boolean(),
    },
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    head_commit: {
      id: faker.lorem.slug(1),
      tree_id: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      timestamp: faker.date.past(),
      author: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
      },
      committer: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
      },
    },
    latest_check_runs_count: faker.number.int({ min: undefined, max: undefined }),
    check_runs_url: faker.internet.url(),
    rerequestable: faker.datatype.boolean(),
    runs_rerequestable: faker.datatype.boolean(),
  };
}

export function getChecksSetSuitesPreferences200Response() {
  return {
    preferences: {
      auto_trigger_checks: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        app_id: faker.number.int({ min: undefined, max: undefined }),
        setting: faker.datatype.boolean(),
      })),
    },
    repository: {
      id: 1296269,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Hello-World',
      full_name: 'octocat/Hello-World',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: faker.internet.url(),
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: faker.internet.url(),
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      temp_clone_token: faker.lorem.slug(1),
      delete_branch_on_merge: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      code_of_conduct: {
        key: 'contributor_covenant',
        name: 'Contributor Covenant',
        url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
        body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
        html_url: faker.internet.url(),
      },
      license: {
        key: faker.lorem.slug(1),
        name: faker.person.fullName(),
        spdx_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        node_id: faker.lorem.slug(1),
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      allow_forking: faker.datatype.boolean(),
    },
  };
}

export function getChecksGetSuite200Response() {
  return {
    id: 5,
    node_id: 'MDEwOkNoZWNrU3VpdGU1',
    head_branch: 'master',
    head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
    status: 'completed',
    conclusion: 'neutral',
    url: 'https://api.github.com/repos/github/hello-world/check-suites/5',
    before: '146e867f55c26428e5f9fade55a9bbf5e95a7912',
    after: 'd6fde92930d4715a2b49857d24b940956b26d2d3',
    pull_requests: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      number: faker.number.int({ min: undefined, max: undefined }),
      url: faker.internet.url(),
      head: {
        ref: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        repo: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          name: faker.person.fullName(),
        },
      },
      base: {
        ref: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        repo: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          name: faker.person.fullName(),
        },
      },
    })),
    app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    repository: {
      id: 1296269,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Hello-World',
      full_name: 'octocat/Hello-World',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: faker.internet.url(),
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: faker.internet.url(),
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      temp_clone_token: faker.lorem.slug(1),
      delete_branch_on_merge: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      code_of_conduct: {
        key: 'contributor_covenant',
        name: 'Contributor Covenant',
        url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
        body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
        html_url: faker.internet.url(),
      },
      license: {
        key: faker.lorem.slug(1),
        name: faker.person.fullName(),
        spdx_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        node_id: faker.lorem.slug(1),
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      allow_forking: faker.datatype.boolean(),
    },
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    head_commit: {
      id: faker.lorem.slug(1),
      tree_id: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      timestamp: faker.date.past(),
      author: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
      },
      committer: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
      },
    },
    latest_check_runs_count: faker.number.int({ min: undefined, max: undefined }),
    check_runs_url: faker.internet.url(),
    rerequestable: faker.datatype.boolean(),
    runs_rerequestable: faker.datatype.boolean(),
  };
}

export function getChecksListForSuite200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    check_runs: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 21,
      head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
      node_id: 'MDg6Q2hlY2tSdW40',
      external_id: '42',
      url: 'https://api.github.com/repos/github/hello-world/check-runs/4',
      html_url: 'https://github.com/github/hello-world/runs/4',
      details_url: 'https://example.com',
      status: 'queued',
      conclusion: 'neutral',
      started_at: '2018-05-04T01:14:52Z',
      completed_at: '2018-05-04T01:14:52Z',
      output: {
        title: faker.lorem.slug(1),
        summary: faker.lorem.slug(1),
        text: faker.lorem.slug(1),
        annotations_count: faker.number.int({ min: undefined, max: undefined }),
        annotations_url: faker.internet.url(),
      },
      name: 'test-coverage',
      check_suite: {
        id: faker.number.int({ min: undefined, max: undefined }),
      },
      app: {
        id: 37,
        slug: 'probot-owners',
        node_id: 'MDExOkludGVncmF0aW9uMQ==',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        name: 'Probot Owners',
        description: 'The description of the app.',
        external_url: 'https://example.com',
        html_url: 'https://github.com/apps/super-ci',
        created_at: '2017-07-08T16:18:44-04:00',
        updated_at: '2017-07-08T16:18:44-04:00',
        permissions: { issues: 'read', deployments: 'write' },
        events: ['label', 'deployment'],
        installations_count: 5,
        client_id: '"Iv1.25b5d1e65ffc4022"',
        client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
        webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
        pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
      },
      pull_requests: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        number: faker.number.int({ min: undefined, max: undefined }),
        url: faker.internet.url(),
        head: {
          ref: faker.lorem.slug(1),
          sha: faker.lorem.slug(1),
          repo: {
            id: faker.number.int({ min: undefined, max: undefined }),
            url: faker.internet.url(),
            name: faker.person.fullName(),
          },
        },
        base: {
          ref: faker.lorem.slug(1),
          sha: faker.lorem.slug(1),
          repo: {
            id: faker.number.int({ min: undefined, max: undefined }),
            url: faker.internet.url(),
            name: faker.person.fullName(),
          },
        },
      })),
      deployment: {
        url: 'https://api.github.com/repos/octocat/example/deployments/1',
        id: 42,
        node_id: 'MDEwOkRlcGxveW1lbnQx',
        task: 'deploy',
        original_environment: 'staging',
        environment: 'production',
        description: 'Deploy request from hubot',
        created_at: '2012-07-20T01:19:13Z',
        updated_at: '2012-07-20T01:19:13Z',
        statuses_url: 'https://api.github.com/repos/octocat/example/deployments/1/statuses',
        repository_url: 'https://api.github.com/repos/octocat/example',
        transient_environment: true,
        production_environment: true,
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
      },
    })),
  };
}

export function getChecksRerequestSuite201Response() {
  return {};
}

export function getCodeScanningListAlertsForRepo200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    number: faker.number.int({ min: undefined, max: undefined }),
    created_at: faker.date.past(),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    instances_url: faker.internet.url(),
    state: faker.helpers.arrayElement(['open', 'closed', 'dismissed', 'fixed']),
    dismissed_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    dismissed_at: faker.date.past(),
    dismissed_reason: faker.helpers.arrayElement([null, 'false positive', "won't fix", 'used in tests']),
    rule: {
      id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      severity: faker.helpers.arrayElement(['none', 'note', 'warning', 'error']),
      description: faker.lorem.slug(1),
    },
    tool: {
      name: faker.person.fullName(),
      version: faker.lorem.slug(1),
      guid: faker.lorem.slug(1),
    },
    most_recent_instance: {
      ref: faker.lorem.slug(1),
      analysis_key: faker.lorem.slug(1),
      environment: faker.lorem.slug(1),
      category: faker.lorem.slug(1),
      state: faker.helpers.arrayElement(['open', 'closed', 'dismissed', 'fixed']),
      commit_sha: faker.lorem.slug(1),
      message: {
        text: faker.lorem.slug(1),
      },
      location: {
        path: faker.lorem.slug(1),
        start_line: faker.number.int({ min: undefined, max: undefined }),
        end_line: faker.number.int({ min: undefined, max: undefined }),
        start_column: faker.number.int({ min: undefined, max: undefined }),
        end_column: faker.number.int({ min: undefined, max: undefined }),
      },
      html_url: faker.internet.url(),
      classifications: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
        faker.helpers.arrayElement(['source', 'generated', 'test', 'library'])
      ),
    },
  }));
}

export function getCodeScanningListAlertsForRepo403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningListAlertsForRepo404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningListAlertsForRepo503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getCodeScanningGetAlert200Response() {
  return {
    number: faker.number.int({ min: undefined, max: undefined }),
    created_at: faker.date.past(),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    instances_url: faker.internet.url(),
    state: faker.helpers.arrayElement(['open', 'closed', 'dismissed', 'fixed']),
    dismissed_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    dismissed_at: faker.date.past(),
    dismissed_reason: faker.helpers.arrayElement([null, 'false positive', "won't fix", 'used in tests']),
    rule: {
      id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      severity: faker.helpers.arrayElement(['none', 'note', 'warning', 'error']),
      security_severity_level: faker.helpers.arrayElement(['low', 'medium', 'high', 'critical']),
      description: faker.lorem.slug(1),
      full_description: faker.lorem.slug(1),
      tags: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      help: faker.lorem.slug(1),
      help_uri: faker.lorem.slug(1),
    },
    tool: {
      name: faker.person.fullName(),
      version: faker.lorem.slug(1),
      guid: faker.lorem.slug(1),
    },
    most_recent_instance: {
      ref: faker.lorem.slug(1),
      analysis_key: faker.lorem.slug(1),
      environment: faker.lorem.slug(1),
      category: faker.lorem.slug(1),
      state: faker.helpers.arrayElement(['open', 'closed', 'dismissed', 'fixed']),
      commit_sha: faker.lorem.slug(1),
      message: {
        text: faker.lorem.slug(1),
      },
      location: {
        path: faker.lorem.slug(1),
        start_line: faker.number.int({ min: undefined, max: undefined }),
        end_line: faker.number.int({ min: undefined, max: undefined }),
        start_column: faker.number.int({ min: undefined, max: undefined }),
        end_column: faker.number.int({ min: undefined, max: undefined }),
      },
      html_url: faker.internet.url(),
      classifications: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
        faker.helpers.arrayElement(['source', 'generated', 'test', 'library'])
      ),
    },
  };
}

export function getCodeScanningGetAlert403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningGetAlert404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningGetAlert503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getCodeScanningUpdateAlert200Response() {
  return {
    number: faker.number.int({ min: undefined, max: undefined }),
    created_at: faker.date.past(),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    instances_url: faker.internet.url(),
    state: faker.helpers.arrayElement(['open', 'closed', 'dismissed', 'fixed']),
    dismissed_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    dismissed_at: faker.date.past(),
    dismissed_reason: faker.helpers.arrayElement([null, 'false positive', "won't fix", 'used in tests']),
    rule: {
      id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      severity: faker.helpers.arrayElement(['none', 'note', 'warning', 'error']),
      security_severity_level: faker.helpers.arrayElement(['low', 'medium', 'high', 'critical']),
      description: faker.lorem.slug(1),
      full_description: faker.lorem.slug(1),
      tags: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      help: faker.lorem.slug(1),
      help_uri: faker.lorem.slug(1),
    },
    tool: {
      name: faker.person.fullName(),
      version: faker.lorem.slug(1),
      guid: faker.lorem.slug(1),
    },
    most_recent_instance: {
      ref: faker.lorem.slug(1),
      analysis_key: faker.lorem.slug(1),
      environment: faker.lorem.slug(1),
      category: faker.lorem.slug(1),
      state: faker.helpers.arrayElement(['open', 'closed', 'dismissed', 'fixed']),
      commit_sha: faker.lorem.slug(1),
      message: {
        text: faker.lorem.slug(1),
      },
      location: {
        path: faker.lorem.slug(1),
        start_line: faker.number.int({ min: undefined, max: undefined }),
        end_line: faker.number.int({ min: undefined, max: undefined }),
        start_column: faker.number.int({ min: undefined, max: undefined }),
        end_column: faker.number.int({ min: undefined, max: undefined }),
      },
      html_url: faker.internet.url(),
      classifications: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
        faker.helpers.arrayElement(['source', 'generated', 'test', 'library'])
      ),
    },
  };
}

export function getCodeScanningUpdateAlert403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningUpdateAlert404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningUpdateAlert503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getCodeScanningListAlertInstances200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    ref: faker.lorem.slug(1),
    analysis_key: faker.lorem.slug(1),
    environment: faker.lorem.slug(1),
    category: faker.lorem.slug(1),
    state: faker.helpers.arrayElement(['open', 'closed', 'dismissed', 'fixed']),
    commit_sha: faker.lorem.slug(1),
    message: {
      text: faker.lorem.slug(1),
    },
    location: {
      path: faker.lorem.slug(1),
      start_line: faker.number.int({ min: undefined, max: undefined }),
      end_line: faker.number.int({ min: undefined, max: undefined }),
      start_column: faker.number.int({ min: undefined, max: undefined }),
      end_column: faker.number.int({ min: undefined, max: undefined }),
    },
    html_url: faker.internet.url(),
    classifications: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
      faker.helpers.arrayElement(['source', 'generated', 'test', 'library'])
    ),
  }));
}

export function getCodeScanningListAlertInstances403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningListAlertInstances404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningListAlertInstances503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getCodeScanningListRecentAnalyses200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    ref: faker.lorem.slug(1),
    commit_sha: faker.lorem.slug(1),
    analysis_key: faker.lorem.slug(1),
    environment: faker.lorem.slug(1),
    category: faker.lorem.slug(1),
    error: 'error reading field xyz',
    created_at: faker.date.past(),
    results_count: faker.number.int({ min: undefined, max: undefined }),
    rules_count: faker.number.int({ min: undefined, max: undefined }),
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    sarif_id: '6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53',
    tool: {
      name: faker.person.fullName(),
      version: faker.lorem.slug(1),
      guid: faker.lorem.slug(1),
    },
    deletable: faker.datatype.boolean(),
    warning: '123 results were ignored',
  }));
}

export function getCodeScanningListRecentAnalyses403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningListRecentAnalyses404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningListRecentAnalyses503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getCodeScanningGetAnalysis200Response() {
  return {
    ref: faker.lorem.slug(1),
    commit_sha: faker.lorem.slug(1),
    analysis_key: faker.lorem.slug(1),
    environment: faker.lorem.slug(1),
    category: faker.lorem.slug(1),
    error: 'error reading field xyz',
    created_at: faker.date.past(),
    results_count: faker.number.int({ min: undefined, max: undefined }),
    rules_count: faker.number.int({ min: undefined, max: undefined }),
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    sarif_id: '6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53',
    tool: {
      name: faker.person.fullName(),
      version: faker.lorem.slug(1),
      guid: faker.lorem.slug(1),
    },
    deletable: faker.datatype.boolean(),
    warning: '123 results were ignored',
  };
}

export function getCodeScanningGetAnalysis403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningGetAnalysis404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningGetAnalysis503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getCodeScanningDeleteAnalysis200Response() {
  return {
    next_analysis_url: faker.internet.url(),
    confirm_delete_url: faker.internet.url(),
  };
}

export function getCodeScanningDeleteAnalysis400Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningDeleteAnalysis403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningDeleteAnalysis404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningDeleteAnalysis503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getCodeScanningUploadSarif202Response() {
  return {
    id: '6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53',
    url: faker.internet.url(),
  };
}

export function getCodeScanningUploadSarif403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningUploadSarif404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningUploadSarif503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getCodeScanningGetSarif200Response() {
  return {
    processing_status: faker.helpers.arrayElement(['pending', 'complete']),
    analyses_url: faker.internet.url(),
  };
}

export function getCodeScanningGetSarif403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getCodeScanningGetSarif503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getReposListCollaborators200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    login: 'octocat',
    id: 1,
    email: faker.internet.email(),
    name: faker.person.fullName(),
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    permissions: {
      pull: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      admin: faker.datatype.boolean(),
    },
  }));
}

export function getReposListCollaborators404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposAddCollaborator201Response() {
  return {
    id: 42,
    repository: {
      id: 1296269,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Hello-World',
      full_name: 'octocat/Hello-World',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: faker.internet.url(),
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: faker.internet.url(),
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      temp_clone_token: faker.lorem.slug(1),
      delete_branch_on_merge: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      code_of_conduct: {
        key: 'contributor_covenant',
        name: 'Contributor Covenant',
        url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
        body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
        html_url: faker.internet.url(),
      },
      license: {
        key: faker.lorem.slug(1),
        name: faker.person.fullName(),
        spdx_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        node_id: faker.lorem.slug(1),
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      allow_forking: faker.datatype.boolean(),
    },
    invitee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    inviter: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    permissions: 'read',
    created_at: '2016-06-13T14:52:50-05:00',
    expired: faker.datatype.boolean(),
    url: 'https://api.github.com/user/repository-invitations/1',
    html_url: 'https://github.com/octocat/Hello-World/invitations',
    node_id: faker.lorem.slug(1),
  };
}

export function getReposAddCollaborator403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposAddCollaborator422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetCollaboratorPermissionLevel200Response() {
  return {
    permission: faker.lorem.slug(1),
    user: {
      login: 'octocat',
      id: 1,
      email: faker.internet.email(),
      name: faker.person.fullName(),
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      permissions: {
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        admin: faker.datatype.boolean(),
      },
    },
  };
}

export function getReposGetCollaboratorPermissionLevel404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListCommitCommentsForRepo200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    html_url: faker.internet.url(),
    url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    body: faker.lorem.slug(1),
    path: faker.lorem.slug(1),
    position: faker.number.int({ min: undefined, max: undefined }),
    line: faker.number.int({ min: undefined, max: undefined }),
    commit_id: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    author_association: 'OWNER',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  }));
}

export function getReposGetCommitComment200Response() {
  return {
    html_url: faker.internet.url(),
    url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    body: faker.lorem.slug(1),
    path: faker.lorem.slug(1),
    position: faker.number.int({ min: undefined, max: undefined }),
    line: faker.number.int({ min: undefined, max: undefined }),
    commit_id: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    author_association: 'OWNER',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getReposGetCommitComment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposUpdateCommitComment200Response() {
  return {
    html_url: faker.internet.url(),
    url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    body: faker.lorem.slug(1),
    path: faker.lorem.slug(1),
    position: faker.number.int({ min: undefined, max: undefined }),
    line: faker.number.int({ min: undefined, max: undefined }),
    commit_id: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    author_association: 'OWNER',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getReposUpdateCommitComment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposDeleteCommitComment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReactionsListForCommitComment200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  }));
}

export function getReactionsListForCommitComment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReactionsCreateForCommitComment200Response() {
  return {
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  };
}

export function getReactionsCreateForCommitComment201Response() {
  return {
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  };
}

export function getReactionsCreateForCommitComment422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposListCommits200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
    node_id: 'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
    html_url: 'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    comments_url:
      'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
    commit: {
      url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
      author: {
        name: '"Chris Wanstrath"',
        email: '"chris@ozmm.org"',
        date: '"2007-10-29T02:42:39.000-07:00"',
      },
      committer: {
        name: '"Chris Wanstrath"',
        email: '"chris@ozmm.org"',
        date: '"2007-10-29T02:42:39.000-07:00"',
      },
      message: 'Fix all the bugs',
      comment_count: faker.number.int({ min: undefined, max: undefined }),
      tree: {
        sha: '827efc6d56897b048c772eb4087f854f46256132',
        url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
      },
      verification: {
        verified: faker.datatype.boolean(),
        reason: faker.lorem.slug(1),
        payload: faker.lorem.slug(1),
        signature: faker.lorem.slug(1),
      },
    },
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    committer: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    parents: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
      url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
      html_url: 'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
    })),
    stats: {
      additions: faker.number.int({ min: undefined, max: undefined }),
      deletions: faker.number.int({ min: undefined, max: undefined }),
      total: faker.number.int({ min: undefined, max: undefined }),
    },
    files: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
      filename: 'file1.txt',
      status: 'added',
      additions: 103,
      deletions: 21,
      changes: 124,
      blob_url: 'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
      raw_url: 'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
      contents_url:
        'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
      patch: '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
      previous_filename: 'file.txt',
    })),
  }));
}

export function getReposListCommits400Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListCommits404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListCommits409Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListCommits500Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListBranchesForHeadCommit200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    commit: {
      sha: faker.lorem.slug(1),
      url: faker.internet.url(),
    },
    protected: faker.datatype.boolean(),
  }));
}

export function getReposListBranchesForHeadCommit422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposListCommentsForCommit200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    html_url: faker.internet.url(),
    url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    body: faker.lorem.slug(1),
    path: faker.lorem.slug(1),
    position: faker.number.int({ min: undefined, max: undefined }),
    line: faker.number.int({ min: undefined, max: undefined }),
    commit_id: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    author_association: 'OWNER',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  }));
}

export function getReposCreateCommitComment201Response() {
  return {
    html_url: faker.internet.url(),
    url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    body: faker.lorem.slug(1),
    path: faker.lorem.slug(1),
    position: faker.number.int({ min: undefined, max: undefined }),
    line: faker.number.int({ min: undefined, max: undefined }),
    commit_id: faker.lorem.slug(1),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    author_association: 'OWNER',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getReposCreateCommitComment403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateCommitComment422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposListPullRequestsAssociatedWithCommit200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347',
    id: 1,
    node_id: 'MDExOlB1bGxSZXF1ZXN0MQ==',
    html_url: 'https://github.com/octocat/Hello-World/pull/1347',
    diff_url: 'https://github.com/octocat/Hello-World/pull/1347.diff',
    patch_url: 'https://github.com/octocat/Hello-World/pull/1347.patch',
    issue_url: 'https://api.github.com/repos/octocat/Hello-World/issues/1347',
    commits_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits',
    review_comments_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments',
    review_comment_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}',
    comments_url: 'https://api.github.com/repos/octocat/Hello-World/issues/1347/comments',
    statuses_url: 'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    number: 1347,
    state: 'open',
    locked: true,
    title: 'new-feature',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'Please pull these awesome changes',
    labels: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      name: faker.person.fullName(),
      description: faker.lorem.slug(1),
      color: faker.lorem.slug(1),
      default: faker.datatype.boolean(),
    })),
    milestone: {
      url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
      html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
      labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
      id: 1002604,
      node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
      number: 42,
      state: 'open',
      title: 'v1.0',
      description: 'Tracking milestone for version 1.0',
      creator: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      open_issues: 4,
      closed_issues: 8,
      created_at: '2011-04-10T20:09:31Z',
      updated_at: '2014-03-03T18:58:10Z',
      closed_at: '2013-02-12T13:22:01Z',
      due_on: '2012-10-09T23:39:01Z',
    },
    active_lock_reason: 'too heated',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:01:12Z',
    closed_at: '2011-01-26T19:01:12Z',
    merged_at: '2011-01-26T19:01:12Z',
    merge_commit_sha: 'e5bd3914e2e596debea16f433f57875b5b90bcd6',
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    requested_reviewers: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    requested_teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      slug: faker.lorem.slug(1),
      description: faker.lorem.slug(1),
      privacy: faker.lorem.slug(1),
      permission: faker.lorem.slug(1),
      permissions: {
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        admin: faker.datatype.boolean(),
      },
      url: faker.internet.url(),
      html_url: 'https://github.com/orgs/rails/teams/core',
      members_url: faker.internet.url(),
      repositories_url: faker.internet.url(),
      parent: {
        id: 1,
        node_id: 'MDQ6VGVhbTE=',
        url: 'https://api.github.com/organizations/1/team/1',
        members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
        name: 'Justice League',
        description: 'A great team.',
        permission: 'admin',
        privacy: 'closed',
        html_url: 'https://github.com/orgs/rails/teams/core',
        repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
        slug: 'justice-league',
        ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
      },
    })),
    head: {
      label: faker.lorem.slug(1),
      ref: faker.lorem.slug(1),
      repo: {
        id: 42,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Team Environment',
        full_name: 'octocat/Hello-World',
        license: {
          key: 'mit',
          name: 'MIT License',
          url: 'https://api.github.com/licenses/mit',
          spdx_id: 'MIT',
          node_id: 'MDc6TGljZW5zZW1pdA==',
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: 'git:github.com/octocat/Hello-World.git',
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: 'git@github.com:octocat/Hello-World.git',
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: 'https://github.com/octocat/Hello-World.git',
        mirror_url: 'git:git.example.com/octocat/Hello-World',
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: 'https://svn.github.com/octocat/Hello-World',
        homepage: 'https://github.com',
        language: faker.lorem.slug(1),
        forks_count: 9,
        stargazers_count: 80,
        watchers_count: 80,
        size: 108,
        default_branch: 'master',
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: true,
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: true,
        has_projects: true,
        has_wiki: true,
        has_pages: faker.datatype.boolean(),
        has_downloads: true,
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        allow_rebase_merge: true,
        template_repository: {
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          name: faker.person.fullName(),
          full_name: faker.person.fullName(),
          owner: {
            login: faker.lorem.slug(1),
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.internet.url(),
            gists_url: faker.internet.url(),
            starred_url: faker.internet.url(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(1),
            site_admin: faker.datatype.boolean(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(1),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.internet.url(),
          assignees_url: faker.internet.url(),
          blobs_url: faker.internet.url(),
          branches_url: faker.internet.url(),
          collaborators_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          compare_url: faker.internet.url(),
          contents_url: faker.internet.url(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.internet.url(),
          git_refs_url: faker.internet.url(),
          git_tags_url: faker.internet.url(),
          git_url: faker.internet.url(),
          issue_comment_url: faker.internet.url(),
          issue_events_url: faker.internet.url(),
          issues_url: faker.internet.url(),
          keys_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.internet.url(),
          notifications_url: faker.internet.url(),
          pulls_url: faker.internet.url(),
          releases_url: faker.internet.url(),
          ssh_url: faker.internet.url(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.internet.url(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.internet.url(),
          clone_url: faker.internet.url(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          forks_count: faker.number.int({ min: undefined, max: undefined }),
          stargazers_count: faker.number.int({ min: undefined, max: undefined }),
          watchers_count: faker.number.int({ min: undefined, max: undefined }),
          size: faker.number.int({ min: undefined, max: undefined }),
          default_branch: faker.lorem.slug(1),
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: faker.datatype.boolean(),
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: faker.date.past(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: true,
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: true,
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        master_branch: faker.lorem.slug(1),
        starred_at: '"2020-07-09T00:17:42Z"',
        anonymous_access_enabled: faker.datatype.boolean(),
      },
      sha: faker.lorem.slug(1),
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    base: {
      label: faker.lorem.slug(1),
      ref: faker.lorem.slug(1),
      repo: {
        id: 42,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Team Environment',
        full_name: 'octocat/Hello-World',
        license: {
          key: 'mit',
          name: 'MIT License',
          url: 'https://api.github.com/licenses/mit',
          spdx_id: 'MIT',
          node_id: 'MDc6TGljZW5zZW1pdA==',
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: 'git:github.com/octocat/Hello-World.git',
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: 'git@github.com:octocat/Hello-World.git',
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: 'https://github.com/octocat/Hello-World.git',
        mirror_url: 'git:git.example.com/octocat/Hello-World',
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: 'https://svn.github.com/octocat/Hello-World',
        homepage: 'https://github.com',
        language: faker.lorem.slug(1),
        forks_count: 9,
        stargazers_count: 80,
        watchers_count: 80,
        size: 108,
        default_branch: 'master',
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: true,
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: true,
        has_projects: true,
        has_wiki: true,
        has_pages: faker.datatype.boolean(),
        has_downloads: true,
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        allow_rebase_merge: true,
        template_repository: {
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          name: faker.person.fullName(),
          full_name: faker.person.fullName(),
          owner: {
            login: faker.lorem.slug(1),
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.internet.url(),
            gists_url: faker.internet.url(),
            starred_url: faker.internet.url(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(1),
            site_admin: faker.datatype.boolean(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(1),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.internet.url(),
          assignees_url: faker.internet.url(),
          blobs_url: faker.internet.url(),
          branches_url: faker.internet.url(),
          collaborators_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          compare_url: faker.internet.url(),
          contents_url: faker.internet.url(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.internet.url(),
          git_refs_url: faker.internet.url(),
          git_tags_url: faker.internet.url(),
          git_url: faker.internet.url(),
          issue_comment_url: faker.internet.url(),
          issue_events_url: faker.internet.url(),
          issues_url: faker.internet.url(),
          keys_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.internet.url(),
          notifications_url: faker.internet.url(),
          pulls_url: faker.internet.url(),
          releases_url: faker.internet.url(),
          ssh_url: faker.internet.url(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.internet.url(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.internet.url(),
          clone_url: faker.internet.url(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          forks_count: faker.number.int({ min: undefined, max: undefined }),
          stargazers_count: faker.number.int({ min: undefined, max: undefined }),
          watchers_count: faker.number.int({ min: undefined, max: undefined }),
          size: faker.number.int({ min: undefined, max: undefined }),
          default_branch: faker.lorem.slug(1),
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: faker.datatype.boolean(),
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: faker.date.past(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: true,
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: true,
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        master_branch: faker.lorem.slug(1),
        starred_at: '"2020-07-09T00:17:42Z"',
        anonymous_access_enabled: faker.datatype.boolean(),
      },
      sha: faker.lorem.slug(1),
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    _links: {
      comments: {
        href: faker.lorem.slug(1),
      },
      commits: {
        href: faker.lorem.slug(1),
      },
      statuses: {
        href: faker.lorem.slug(1),
      },
      html: {
        href: faker.lorem.slug(1),
      },
      issue: {
        href: faker.lorem.slug(1),
      },
      review_comments: {
        href: faker.lorem.slug(1),
      },
      review_comment: {
        href: faker.lorem.slug(1),
      },
      self: {
        href: faker.lorem.slug(1),
      },
    },
    author_association: 'OWNER',
    auto_merge: {
      enabled_by: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      merge_method: faker.helpers.arrayElement(['merge', 'squash', 'rebase']),
      commit_title: faker.lorem.slug(1),
      commit_message: faker.lorem.slug(1),
    },
    draft: faker.datatype.boolean(),
  }));
}

export function getReposGetCommit200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
    node_id: 'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
    html_url: 'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    comments_url:
      'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
    commit: {
      url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
      author: {
        name: '"Chris Wanstrath"',
        email: '"chris@ozmm.org"',
        date: '"2007-10-29T02:42:39.000-07:00"',
      },
      committer: {
        name: '"Chris Wanstrath"',
        email: '"chris@ozmm.org"',
        date: '"2007-10-29T02:42:39.000-07:00"',
      },
      message: 'Fix all the bugs',
      comment_count: faker.number.int({ min: undefined, max: undefined }),
      tree: {
        sha: '827efc6d56897b048c772eb4087f854f46256132',
        url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
      },
      verification: {
        verified: faker.datatype.boolean(),
        reason: faker.lorem.slug(1),
        payload: faker.lorem.slug(1),
        signature: faker.lorem.slug(1),
      },
    },
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    committer: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    parents: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
      url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
      html_url: 'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
    })),
    stats: {
      additions: faker.number.int({ min: undefined, max: undefined }),
      deletions: faker.number.int({ min: undefined, max: undefined }),
      total: faker.number.int({ min: undefined, max: undefined }),
    },
    files: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
      filename: 'file1.txt',
      status: 'added',
      additions: 103,
      deletions: 21,
      changes: 124,
      blob_url: 'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
      raw_url: 'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
      contents_url:
        'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
      patch: '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
      previous_filename: 'file.txt',
    })),
  };
}

export function getReposGetCommit404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetCommit422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetCommit500Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetCommit503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getChecksListForRef200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    check_runs: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 21,
      head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
      node_id: 'MDg6Q2hlY2tSdW40',
      external_id: '42',
      url: 'https://api.github.com/repos/github/hello-world/check-runs/4',
      html_url: 'https://github.com/github/hello-world/runs/4',
      details_url: 'https://example.com',
      status: 'queued',
      conclusion: 'neutral',
      started_at: '2018-05-04T01:14:52Z',
      completed_at: '2018-05-04T01:14:52Z',
      output: {
        title: faker.lorem.slug(1),
        summary: faker.lorem.slug(1),
        text: faker.lorem.slug(1),
        annotations_count: faker.number.int({ min: undefined, max: undefined }),
        annotations_url: faker.internet.url(),
      },
      name: 'test-coverage',
      check_suite: {
        id: faker.number.int({ min: undefined, max: undefined }),
      },
      app: {
        id: 37,
        slug: 'probot-owners',
        node_id: 'MDExOkludGVncmF0aW9uMQ==',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        name: 'Probot Owners',
        description: 'The description of the app.',
        external_url: 'https://example.com',
        html_url: 'https://github.com/apps/super-ci',
        created_at: '2017-07-08T16:18:44-04:00',
        updated_at: '2017-07-08T16:18:44-04:00',
        permissions: { issues: 'read', deployments: 'write' },
        events: ['label', 'deployment'],
        installations_count: 5,
        client_id: '"Iv1.25b5d1e65ffc4022"',
        client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
        webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
        pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
      },
      pull_requests: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        number: faker.number.int({ min: undefined, max: undefined }),
        url: faker.internet.url(),
        head: {
          ref: faker.lorem.slug(1),
          sha: faker.lorem.slug(1),
          repo: {
            id: faker.number.int({ min: undefined, max: undefined }),
            url: faker.internet.url(),
            name: faker.person.fullName(),
          },
        },
        base: {
          ref: faker.lorem.slug(1),
          sha: faker.lorem.slug(1),
          repo: {
            id: faker.number.int({ min: undefined, max: undefined }),
            url: faker.internet.url(),
            name: faker.person.fullName(),
          },
        },
      })),
      deployment: {
        url: 'https://api.github.com/repos/octocat/example/deployments/1',
        id: 42,
        node_id: 'MDEwOkRlcGxveW1lbnQx',
        task: 'deploy',
        original_environment: 'staging',
        environment: 'production',
        description: 'Deploy request from hubot',
        created_at: '2012-07-20T01:19:13Z',
        updated_at: '2012-07-20T01:19:13Z',
        statuses_url: 'https://api.github.com/repos/octocat/example/deployments/1/statuses',
        repository_url: 'https://api.github.com/repos/octocat/example',
        transient_environment: true,
        production_environment: true,
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
      },
    })),
  };
}

export function getChecksListSuitesForRef200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    check_suites: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 5,
      node_id: 'MDEwOkNoZWNrU3VpdGU1',
      head_branch: 'master',
      head_sha: '009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
      status: 'completed',
      conclusion: 'neutral',
      url: 'https://api.github.com/repos/github/hello-world/check-suites/5',
      before: '146e867f55c26428e5f9fade55a9bbf5e95a7912',
      after: 'd6fde92930d4715a2b49857d24b940956b26d2d3',
      pull_requests: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        number: faker.number.int({ min: undefined, max: undefined }),
        url: faker.internet.url(),
        head: {
          ref: faker.lorem.slug(1),
          sha: faker.lorem.slug(1),
          repo: {
            id: faker.number.int({ min: undefined, max: undefined }),
            url: faker.internet.url(),
            name: faker.person.fullName(),
          },
        },
        base: {
          ref: faker.lorem.slug(1),
          sha: faker.lorem.slug(1),
          repo: {
            id: faker.number.int({ min: undefined, max: undefined }),
            url: faker.internet.url(),
            name: faker.person.fullName(),
          },
        },
      })),
      app: {
        id: 37,
        slug: 'probot-owners',
        node_id: 'MDExOkludGVncmF0aW9uMQ==',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        name: 'Probot Owners',
        description: 'The description of the app.',
        external_url: 'https://example.com',
        html_url: 'https://github.com/apps/super-ci',
        created_at: '2017-07-08T16:18:44-04:00',
        updated_at: '2017-07-08T16:18:44-04:00',
        permissions: { issues: 'read', deployments: 'write' },
        events: ['label', 'deployment'],
        installations_count: 5,
        client_id: '"Iv1.25b5d1e65ffc4022"',
        client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
        webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
        pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
      },
      repository: {
        id: 1296269,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Hello-World',
        full_name: 'octocat/Hello-World',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: faker.internet.url(),
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: faker.internet.url(),
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        temp_clone_token: faker.lorem.slug(1),
        delete_branch_on_merge: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        code_of_conduct: {
          key: 'contributor_covenant',
          name: 'Contributor Covenant',
          url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
          body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
          html_url: faker.internet.url(),
        },
        license: {
          key: faker.lorem.slug(1),
          name: faker.person.fullName(),
          spdx_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          node_id: faker.lorem.slug(1),
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        allow_forking: faker.datatype.boolean(),
      },
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      head_commit: {
        id: faker.lorem.slug(1),
        tree_id: faker.lorem.slug(1),
        message: faker.lorem.slug(1),
        timestamp: faker.date.past(),
        author: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
        },
        committer: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
        },
      },
      latest_check_runs_count: faker.number.int({ min: undefined, max: undefined }),
      check_runs_url: faker.internet.url(),
      rerequestable: faker.datatype.boolean(),
      runs_rerequestable: faker.datatype.boolean(),
    })),
  };
}

export function getReposGetCombinedStatusForRef200Response() {
  return {
    state: faker.lorem.slug(1),
    statuses: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      description: faker.lorem.slug(1),
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      state: faker.lorem.slug(1),
      context: faker.lorem.slug(1),
      target_url: faker.internet.url(),
      required: faker.datatype.boolean(),
      avatar_url: faker.internet.url(),
      url: faker.internet.url(),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
    })),
    sha: faker.lorem.slug(1),
    total_count: faker.number.int({ min: undefined, max: undefined }),
    repository: {
      id: 1296269,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Hello-World',
      full_name: 'octocat/Hello-World',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: faker.internet.url(),
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: faker.internet.url(),
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      temp_clone_token: faker.lorem.slug(1),
      delete_branch_on_merge: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      code_of_conduct: {
        key: 'contributor_covenant',
        name: 'Contributor Covenant',
        url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
        body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
        html_url: faker.internet.url(),
      },
      license: {
        key: faker.lorem.slug(1),
        name: faker.person.fullName(),
        spdx_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        node_id: faker.lorem.slug(1),
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      allow_forking: faker.datatype.boolean(),
    },
    commit_url: faker.internet.url(),
    url: faker.internet.url(),
  };
}

export function getReposGetCombinedStatusForRef404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListCommitStatusesForRef200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: faker.internet.url(),
    avatar_url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    state: faker.lorem.slug(1),
    description: faker.lorem.slug(1),
    target_url: faker.internet.url(),
    context: faker.lorem.slug(1),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
  }));
}

export function getReposListCommitStatusesForRef301Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCompareCommits200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/compare/master...topic',
    html_url: 'https://github.com/octocat/Hello-World/compare/master...topic',
    permalink_url:
      'https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17',
    diff_url: 'https://github.com/octocat/Hello-World/compare/master...topic.diff',
    patch_url: 'https://github.com/octocat/Hello-World/compare/master...topic.patch',
    base_commit: {
      url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
      sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
      node_id: 'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
      html_url: 'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
      comments_url:
        'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
      commit: {
        url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
        author: {
          name: '"Chris Wanstrath"',
          email: '"chris@ozmm.org"',
          date: '"2007-10-29T02:42:39.000-07:00"',
        },
        committer: {
          name: '"Chris Wanstrath"',
          email: '"chris@ozmm.org"',
          date: '"2007-10-29T02:42:39.000-07:00"',
        },
        message: 'Fix all the bugs',
        comment_count: faker.number.int({ min: undefined, max: undefined }),
        tree: {
          sha: '827efc6d56897b048c772eb4087f854f46256132',
          url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
        },
        verification: {
          verified: faker.datatype.boolean(),
          reason: faker.lorem.slug(1),
          payload: faker.lorem.slug(1),
          signature: faker.lorem.slug(1),
        },
      },
      author: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      committer: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      parents: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
        url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
        html_url: 'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
      })),
      stats: {
        additions: faker.number.int({ min: undefined, max: undefined }),
        deletions: faker.number.int({ min: undefined, max: undefined }),
        total: faker.number.int({ min: undefined, max: undefined }),
      },
      files: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
        filename: 'file1.txt',
        status: 'added',
        additions: 103,
        deletions: 21,
        changes: 124,
        blob_url: 'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
        raw_url: 'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
        contents_url:
          'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
        patch: '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
        previous_filename: 'file.txt',
      })),
    },
    merge_base_commit: {
      url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
      sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
      node_id: 'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
      html_url: 'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
      comments_url:
        'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
      commit: {
        url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
        author: {
          name: '"Chris Wanstrath"',
          email: '"chris@ozmm.org"',
          date: '"2007-10-29T02:42:39.000-07:00"',
        },
        committer: {
          name: '"Chris Wanstrath"',
          email: '"chris@ozmm.org"',
          date: '"2007-10-29T02:42:39.000-07:00"',
        },
        message: 'Fix all the bugs',
        comment_count: faker.number.int({ min: undefined, max: undefined }),
        tree: {
          sha: '827efc6d56897b048c772eb4087f854f46256132',
          url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
        },
        verification: {
          verified: faker.datatype.boolean(),
          reason: faker.lorem.slug(1),
          payload: faker.lorem.slug(1),
          signature: faker.lorem.slug(1),
        },
      },
      author: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      committer: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      parents: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
        url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
        html_url: 'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
      })),
      stats: {
        additions: faker.number.int({ min: undefined, max: undefined }),
        deletions: faker.number.int({ min: undefined, max: undefined }),
        total: faker.number.int({ min: undefined, max: undefined }),
      },
      files: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
        filename: 'file1.txt',
        status: 'added',
        additions: 103,
        deletions: 21,
        changes: 124,
        blob_url: 'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
        raw_url: 'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
        contents_url:
          'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
        patch: '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
        previous_filename: 'file.txt',
      })),
    },
    status: 'ahead',
    ahead_by: 4,
    behind_by: 5,
    total_commits: 6,
    commits: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
      sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
      node_id: 'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
      html_url: 'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
      comments_url:
        'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
      commit: {
        url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
        author: {
          name: '"Chris Wanstrath"',
          email: '"chris@ozmm.org"',
          date: '"2007-10-29T02:42:39.000-07:00"',
        },
        committer: {
          name: '"Chris Wanstrath"',
          email: '"chris@ozmm.org"',
          date: '"2007-10-29T02:42:39.000-07:00"',
        },
        message: 'Fix all the bugs',
        comment_count: faker.number.int({ min: undefined, max: undefined }),
        tree: {
          sha: '827efc6d56897b048c772eb4087f854f46256132',
          url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
        },
        verification: {
          verified: faker.datatype.boolean(),
          reason: faker.lorem.slug(1),
          payload: faker.lorem.slug(1),
          signature: faker.lorem.slug(1),
        },
      },
      author: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      committer: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      parents: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
        url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
        html_url: 'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
      })),
      stats: {
        additions: faker.number.int({ min: undefined, max: undefined }),
        deletions: faker.number.int({ min: undefined, max: undefined }),
        total: faker.number.int({ min: undefined, max: undefined }),
      },
      files: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
        filename: 'file1.txt',
        status: 'added',
        additions: 103,
        deletions: 21,
        changes: 124,
        blob_url: 'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
        raw_url: 'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
        contents_url:
          'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
        patch: '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
        previous_filename: 'file.txt',
      })),
    })),
    files: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
      filename: 'file1.txt',
      status: 'added',
      additions: 103,
      deletions: 21,
      changes: 124,
      blob_url: 'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
      raw_url: 'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
      contents_url:
        'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
      patch: '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
      previous_filename: 'file.txt',
    })),
  };
}

export function getReposCompareCommits404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCompareCommits500Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCompareCommits503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getAppsCreateContentAttachment200Response() {
  return {
    id: 21,
    title: 'Title of the attachment',
    body: 'Body of the attachment',
    node_id: 'MDE3OkNvbnRlbnRBdHRhY2htZW50MjE=',
  };
}

export function getAppsCreateContentAttachment403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsCreateContentAttachment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsCreateContentAttachment410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsCreateContentAttachment415Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getAppsCreateContentAttachment422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetContent200Response() {
  return faker.helpers.arrayElement([
    [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      type: faker.helpers.arrayElement(['dir', 'file', 'submodule', 'symlink']),
      size: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      path: faker.lorem.slug(1),
      content: faker.lorem.slug(1),
      sha: faker.lorem.slug(1),
      url: faker.internet.url(),
      git_url: faker.internet.url(),
      html_url: faker.internet.url(),
      download_url: faker.internet.url(),
      _links: {
        git: faker.internet.url(),
        html: faker.internet.url(),
        self: faker.internet.url(),
      },
    })),
    {
      type: faker.helpers.arrayElement(['file']),
      encoding: faker.lorem.slug(1),
      size: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      path: faker.lorem.slug(1),
      content: faker.lorem.slug(1),
      sha: faker.lorem.slug(1),
      url: faker.internet.url(),
      git_url: faker.internet.url(),
      html_url: faker.internet.url(),
      download_url: faker.internet.url(),
      _links: {
        git: faker.internet.url(),
        html: faker.internet.url(),
        self: faker.internet.url(),
      },
      target: '"actual/actual.md"',
      submodule_git_url: '"git://example.com/defunkt/dotjs.git"',
    },
    {
      type: faker.helpers.arrayElement(['symlink']),
      target: faker.lorem.slug(1),
      size: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      path: faker.lorem.slug(1),
      sha: faker.lorem.slug(1),
      url: faker.internet.url(),
      git_url: faker.internet.url(),
      html_url: faker.internet.url(),
      download_url: faker.internet.url(),
      _links: {
        git: faker.internet.url(),
        html: faker.internet.url(),
        self: faker.internet.url(),
      },
    },
    {
      type: faker.helpers.arrayElement(['submodule']),
      submodule_git_url: faker.internet.url(),
      size: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      path: faker.lorem.slug(1),
      sha: faker.lorem.slug(1),
      url: faker.internet.url(),
      git_url: faker.internet.url(),
      html_url: faker.internet.url(),
      download_url: faker.internet.url(),
      _links: {
        git: faker.internet.url(),
        html: faker.internet.url(),
        self: faker.internet.url(),
      },
    },
  ]);
}

export function getReposGetContent403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetContent404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateOrUpdateFileContents200Response() {
  return {
    content: {
      name: faker.person.fullName(),
      path: faker.lorem.slug(1),
      sha: faker.lorem.slug(1),
      size: faker.number.int({ min: undefined, max: undefined }),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
      git_url: faker.internet.url(),
      download_url: faker.internet.url(),
      type: faker.lorem.slug(1),
      _links: {
        self: faker.lorem.slug(1),
        git: faker.lorem.slug(1),
        html: faker.lorem.slug(1),
      },
    },
    commit: {
      sha: faker.lorem.slug(1),
      node_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
      author: {
        date: faker.lorem.slug(1),
        name: faker.person.fullName(),
        email: faker.internet.email(),
      },
      committer: {
        date: faker.lorem.slug(1),
        name: faker.person.fullName(),
        email: faker.internet.email(),
      },
      message: faker.lorem.slug(1),
      tree: {
        url: faker.internet.url(),
        sha: faker.lorem.slug(1),
      },
      parents: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        sha: faker.lorem.slug(1),
      })),
      verification: {
        verified: faker.datatype.boolean(),
        reason: faker.lorem.slug(1),
        signature: faker.lorem.slug(1),
        payload: faker.lorem.slug(1),
      },
    },
  };
}

export function getReposCreateOrUpdateFileContents201Response() {
  return {
    content: {
      name: faker.person.fullName(),
      path: faker.lorem.slug(1),
      sha: faker.lorem.slug(1),
      size: faker.number.int({ min: undefined, max: undefined }),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
      git_url: faker.internet.url(),
      download_url: faker.internet.url(),
      type: faker.lorem.slug(1),
      _links: {
        self: faker.lorem.slug(1),
        git: faker.lorem.slug(1),
        html: faker.lorem.slug(1),
      },
    },
    commit: {
      sha: faker.lorem.slug(1),
      node_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
      author: {
        date: faker.lorem.slug(1),
        name: faker.person.fullName(),
        email: faker.internet.email(),
      },
      committer: {
        date: faker.lorem.slug(1),
        name: faker.person.fullName(),
        email: faker.internet.email(),
      },
      message: faker.lorem.slug(1),
      tree: {
        url: faker.internet.url(),
        sha: faker.lorem.slug(1),
      },
      parents: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        sha: faker.lorem.slug(1),
      })),
      verification: {
        verified: faker.datatype.boolean(),
        reason: faker.lorem.slug(1),
        signature: faker.lorem.slug(1),
        payload: faker.lorem.slug(1),
      },
    },
  };
}

export function getReposCreateOrUpdateFileContents404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateOrUpdateFileContents409Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateOrUpdateFileContents422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposDeleteFile200Response() {
  return {
    content: {
      name: faker.person.fullName(),
      path: faker.lorem.slug(1),
      sha: faker.lorem.slug(1),
      size: faker.number.int({ min: undefined, max: undefined }),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
      git_url: faker.internet.url(),
      download_url: faker.internet.url(),
      type: faker.lorem.slug(1),
      _links: {
        self: faker.lorem.slug(1),
        git: faker.lorem.slug(1),
        html: faker.lorem.slug(1),
      },
    },
    commit: {
      sha: faker.lorem.slug(1),
      node_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
      author: {
        date: faker.lorem.slug(1),
        name: faker.person.fullName(),
        email: faker.internet.email(),
      },
      committer: {
        date: faker.lorem.slug(1),
        name: faker.person.fullName(),
        email: faker.internet.email(),
      },
      message: faker.lorem.slug(1),
      tree: {
        url: faker.internet.url(),
        sha: faker.lorem.slug(1),
      },
      parents: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        sha: faker.lorem.slug(1),
      })),
      verification: {
        verified: faker.datatype.boolean(),
        reason: faker.lorem.slug(1),
        signature: faker.lorem.slug(1),
        payload: faker.lorem.slug(1),
      },
    },
  };
}

export function getReposDeleteFile404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposDeleteFile409Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposDeleteFile422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposDeleteFile503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getReposListContributors200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    login: faker.lorem.slug(1),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    avatar_url: faker.internet.url(),
    gravatar_id: faker.lorem.slug(1),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    followers_url: faker.internet.url(),
    following_url: faker.internet.url(),
    gists_url: faker.internet.url(),
    starred_url: faker.internet.url(),
    subscriptions_url: faker.internet.url(),
    organizations_url: faker.internet.url(),
    repos_url: faker.internet.url(),
    events_url: faker.internet.url(),
    received_events_url: faker.internet.url(),
    type: faker.lorem.slug(1),
    site_admin: faker.datatype.boolean(),
    contributions: faker.number.int({ min: undefined, max: undefined }),
    email: faker.internet.email(),
    name: faker.person.fullName(),
  }));
}

export function getReposListContributors403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListContributors404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListDeployments200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: 'https://api.github.com/repos/octocat/example/deployments/1',
    id: 42,
    node_id: 'MDEwOkRlcGxveW1lbnQx',
    sha: 'a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d',
    ref: 'topic-branch',
    task: 'deploy',
    payload: faker.helpers.arrayElement([{}, faker.lorem.slug(1)]),
    original_environment: 'staging',
    environment: 'production',
    description: 'Deploy request from hubot',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2012-07-20T01:19:13Z',
    updated_at: '2012-07-20T01:19:13Z',
    statuses_url: 'https://api.github.com/repos/octocat/example/deployments/1/statuses',
    repository_url: 'https://api.github.com/repos/octocat/example',
    transient_environment: true,
    production_environment: true,
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
  }));
}

export function getReposCreateDeployment201Response() {
  return {
    url: 'https://api.github.com/repos/octocat/example/deployments/1',
    id: 42,
    node_id: 'MDEwOkRlcGxveW1lbnQx',
    sha: 'a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d',
    ref: 'topic-branch',
    task: 'deploy',
    payload: faker.helpers.arrayElement([{}, faker.lorem.slug(1)]),
    original_environment: 'staging',
    environment: 'production',
    description: 'Deploy request from hubot',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2012-07-20T01:19:13Z',
    updated_at: '2012-07-20T01:19:13Z',
    statuses_url: 'https://api.github.com/repos/octocat/example/deployments/1/statuses',
    repository_url: 'https://api.github.com/repos/octocat/example',
    transient_environment: true,
    production_environment: true,
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
  };
}

export function getReposCreateDeployment202Response() {
  return {
    message: faker.lorem.slug(1),
  };
}

export function getReposCreateDeployment422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetDeployment200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/example/deployments/1',
    id: 42,
    node_id: 'MDEwOkRlcGxveW1lbnQx',
    sha: 'a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d',
    ref: 'topic-branch',
    task: 'deploy',
    payload: faker.helpers.arrayElement([{}, faker.lorem.slug(1)]),
    original_environment: 'staging',
    environment: 'production',
    description: 'Deploy request from hubot',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2012-07-20T01:19:13Z',
    updated_at: '2012-07-20T01:19:13Z',
    statuses_url: 'https://api.github.com/repos/octocat/example/deployments/1/statuses',
    repository_url: 'https://api.github.com/repos/octocat/example',
    transient_environment: true,
    production_environment: true,
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
  };
}

export function getReposGetDeployment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposDeleteDeployment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposDeleteDeployment422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getReposListDeploymentStatuses200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: 'https://api.github.com/repos/octocat/example/deployments/42/statuses/1',
    id: 1,
    node_id: 'MDE2OkRlcGxveW1lbnRTdGF0dXMx',
    state: 'success',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    description: 'Deployment finished successfully.',
    environment: 'production',
    target_url: 'https://example.com/deployment/42/output',
    created_at: '2012-07-20T01:19:13Z',
    updated_at: '2012-07-20T01:19:13Z',
    deployment_url: 'https://api.github.com/repos/octocat/example/deployments/42',
    repository_url: 'https://api.github.com/repos/octocat/example',
    environment_url: 'https://staging.example.com/',
    log_url: 'https://example.com/deployment/42/output',
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
  }));
}

export function getReposListDeploymentStatuses404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateDeploymentStatus201Response() {
  return {
    url: 'https://api.github.com/repos/octocat/example/deployments/42/statuses/1',
    id: 1,
    node_id: 'MDE2OkRlcGxveW1lbnRTdGF0dXMx',
    state: 'success',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    description: 'Deployment finished successfully.',
    environment: 'production',
    target_url: 'https://example.com/deployment/42/output',
    created_at: '2012-07-20T01:19:13Z',
    updated_at: '2012-07-20T01:19:13Z',
    deployment_url: 'https://api.github.com/repos/octocat/example/deployments/42',
    repository_url: 'https://api.github.com/repos/octocat/example',
    environment_url: 'https://staging.example.com/',
    log_url: 'https://example.com/deployment/42/output',
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
  };
}

export function getReposCreateDeploymentStatus422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetDeploymentStatus200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/example/deployments/42/statuses/1',
    id: 1,
    node_id: 'MDE2OkRlcGxveW1lbnRTdGF0dXMx',
    state: 'success',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    description: 'Deployment finished successfully.',
    environment: 'production',
    target_url: 'https://example.com/deployment/42/output',
    created_at: '2012-07-20T01:19:13Z',
    updated_at: '2012-07-20T01:19:13Z',
    deployment_url: 'https://api.github.com/repos/octocat/example/deployments/42',
    repository_url: 'https://api.github.com/repos/octocat/example',
    environment_url: 'https://staging.example.com/',
    log_url: 'https://example.com/deployment/42/output',
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
  };
}

export function getReposGetDeploymentStatus404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateDispatchEvent422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetAllEnvironments200Response() {
  return {
    total_count: 5,
    environments: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 56780428,
      node_id: 'MDExOkVudmlyb25tZW50NTY3ODA0Mjg=',
      name: 'staging',
      url: 'https://api.github.com/repos/github/hello-world/environments/staging',
      html_url: 'https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging',
      created_at: '2020-11-23T22:00:40Z',
      updated_at: '2020-11-23T22:00:40Z',
      protection_rules: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
        faker.helpers.arrayElement([
          {
            id: 3515,
            node_id: 'MDQ6R2F0ZTM1MTU=',
            type: 'wait_timer',
            wait_timer: 30,
          },
          {
            id: 3755,
            node_id: 'MDQ6R2F0ZTM3NTU=',
            type: 'required_reviewers',
            reviewers: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
              type: 'User',
              reviewer: faker.helpers.arrayElement([
                {
                  name: faker.person.fullName(),
                  email: faker.internet.email(),
                  login: 'octocat',
                  id: 1,
                  node_id: 'MDQ6VXNlcjE=',
                  avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                  gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                  url: 'https://api.github.com/users/octocat',
                  html_url: 'https://github.com/octocat',
                  followers_url: 'https://api.github.com/users/octocat/followers',
                  following_url: 'https://api.github.com/users/octocat/following{/other_user}',
                  gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
                  starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                  subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
                  organizations_url: 'https://api.github.com/users/octocat/orgs',
                  repos_url: 'https://api.github.com/users/octocat/repos',
                  events_url: 'https://api.github.com/users/octocat/events{/privacy}',
                  received_events_url: 'https://api.github.com/users/octocat/received_events',
                  type: 'User',
                  site_admin: faker.datatype.boolean(),
                  starred_at: '"2020-07-09T00:17:55Z"',
                },
                {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  node_id: faker.lorem.slug(1),
                  name: faker.person.fullName(),
                  slug: faker.lorem.slug(1),
                  description: faker.lorem.slug(1),
                  privacy: faker.lorem.slug(1),
                  permission: faker.lorem.slug(1),
                  permissions: {
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    admin: faker.datatype.boolean(),
                  },
                  url: faker.internet.url(),
                  html_url: 'https://github.com/orgs/rails/teams/core',
                  members_url: faker.internet.url(),
                  repositories_url: faker.internet.url(),
                  parent: {
                    id: 1,
                    node_id: 'MDQ6VGVhbTE=',
                    url: 'https://api.github.com/organizations/1/team/1',
                    members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
                    name: 'Justice League',
                    description: 'A great team.',
                    permission: 'admin',
                    privacy: 'closed',
                    html_url: 'https://github.com/orgs/rails/teams/core',
                    repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
                    slug: 'justice-league',
                    ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
                  },
                },
              ]),
            })),
          },
          {
            id: 3515,
            node_id: 'MDQ6R2F0ZTM1MTU=',
            type: 'branch_policy',
          },
        ])
      ),
      deployment_branch_policy: {
        protected_branches: faker.datatype.boolean(),
        custom_branch_policies: faker.datatype.boolean(),
      },
    })),
  };
}

export function getReposGetEnvironment200Response() {
  return {
    id: 56780428,
    node_id: 'MDExOkVudmlyb25tZW50NTY3ODA0Mjg=',
    name: 'staging',
    url: 'https://api.github.com/repos/github/hello-world/environments/staging',
    html_url: 'https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging',
    created_at: '2020-11-23T22:00:40Z',
    updated_at: '2020-11-23T22:00:40Z',
    protection_rules: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
      faker.helpers.arrayElement([
        {
          id: 3515,
          node_id: 'MDQ6R2F0ZTM1MTU=',
          type: 'wait_timer',
          wait_timer: 30,
        },
        {
          id: 3755,
          node_id: 'MDQ6R2F0ZTM3NTU=',
          type: 'required_reviewers',
          reviewers: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
            type: 'User',
            reviewer: faker.helpers.arrayElement([
              {
                name: faker.person.fullName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url: 'https://api.github.com/users/octocat/following{/other_user}',
                gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url: 'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url: 'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              {
                id: faker.number.int({ min: undefined, max: undefined }),
                node_id: faker.lorem.slug(1),
                name: faker.person.fullName(),
                slug: faker.lorem.slug(1),
                description: faker.lorem.slug(1),
                privacy: faker.lorem.slug(1),
                permission: faker.lorem.slug(1),
                permissions: {
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  admin: faker.datatype.boolean(),
                },
                url: faker.internet.url(),
                html_url: 'https://github.com/orgs/rails/teams/core',
                members_url: faker.internet.url(),
                repositories_url: faker.internet.url(),
                parent: {
                  id: 1,
                  node_id: 'MDQ6VGVhbTE=',
                  url: 'https://api.github.com/organizations/1/team/1',
                  members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
                  name: 'Justice League',
                  description: 'A great team.',
                  permission: 'admin',
                  privacy: 'closed',
                  html_url: 'https://github.com/orgs/rails/teams/core',
                  repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
                  slug: 'justice-league',
                  ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
                },
              },
            ]),
          })),
        },
        {
          id: 3515,
          node_id: 'MDQ6R2F0ZTM1MTU=',
          type: 'branch_policy',
        },
      ])
    ),
    deployment_branch_policy: {
      protected_branches: faker.datatype.boolean(),
      custom_branch_policies: faker.datatype.boolean(),
    },
  };
}

export function getReposCreateOrUpdateEnvironment200Response() {
  return {
    id: 56780428,
    node_id: 'MDExOkVudmlyb25tZW50NTY3ODA0Mjg=',
    name: 'staging',
    url: 'https://api.github.com/repos/github/hello-world/environments/staging',
    html_url: 'https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging',
    created_at: '2020-11-23T22:00:40Z',
    updated_at: '2020-11-23T22:00:40Z',
    protection_rules: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
      faker.helpers.arrayElement([
        {
          id: 3515,
          node_id: 'MDQ6R2F0ZTM1MTU=',
          type: 'wait_timer',
          wait_timer: 30,
        },
        {
          id: 3755,
          node_id: 'MDQ6R2F0ZTM3NTU=',
          type: 'required_reviewers',
          reviewers: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
            type: 'User',
            reviewer: faker.helpers.arrayElement([
              {
                name: faker.person.fullName(),
                email: faker.internet.email(),
                login: 'octocat',
                id: 1,
                node_id: 'MDQ6VXNlcjE=',
                avatar_url: 'https://github.com/images/error/octocat_happy.gif',
                gravatar_id: '41d064eb2195891e12d0413f63227ea7',
                url: 'https://api.github.com/users/octocat',
                html_url: 'https://github.com/octocat',
                followers_url: 'https://api.github.com/users/octocat/followers',
                following_url: 'https://api.github.com/users/octocat/following{/other_user}',
                gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
                starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
                subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
                organizations_url: 'https://api.github.com/users/octocat/orgs',
                repos_url: 'https://api.github.com/users/octocat/repos',
                events_url: 'https://api.github.com/users/octocat/events{/privacy}',
                received_events_url: 'https://api.github.com/users/octocat/received_events',
                type: 'User',
                site_admin: faker.datatype.boolean(),
                starred_at: '"2020-07-09T00:17:55Z"',
              },
              {
                id: faker.number.int({ min: undefined, max: undefined }),
                node_id: faker.lorem.slug(1),
                name: faker.person.fullName(),
                slug: faker.lorem.slug(1),
                description: faker.lorem.slug(1),
                privacy: faker.lorem.slug(1),
                permission: faker.lorem.slug(1),
                permissions: {
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  admin: faker.datatype.boolean(),
                },
                url: faker.internet.url(),
                html_url: 'https://github.com/orgs/rails/teams/core',
                members_url: faker.internet.url(),
                repositories_url: faker.internet.url(),
                parent: {
                  id: 1,
                  node_id: 'MDQ6VGVhbTE=',
                  url: 'https://api.github.com/organizations/1/team/1',
                  members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
                  name: 'Justice League',
                  description: 'A great team.',
                  permission: 'admin',
                  privacy: 'closed',
                  html_url: 'https://github.com/orgs/rails/teams/core',
                  repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
                  slug: 'justice-league',
                  ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
                },
              },
            ]),
          })),
        },
        {
          id: 3515,
          node_id: 'MDQ6R2F0ZTM1MTU=',
          type: 'branch_policy',
        },
      ])
    ),
    deployment_branch_policy: {
      protected_branches: faker.datatype.boolean(),
      custom_branch_policies: faker.datatype.boolean(),
    },
  };
}

export function getReposCreateOrUpdateEnvironment422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListDeploymentBranchPolicies200Response() {
  return {
    total_count: 2,
    branch_policies: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 361471,
      node_id: 'MDE2OkdhdGVCcmFuY2hQb2xpY3kzNjE0NzE=',
      name: 'release/*',
    })),
  };
}

export function getReposCreateDeploymentBranchPolicy200Response() {
  return {
    id: 361471,
    node_id: 'MDE2OkdhdGVCcmFuY2hQb2xpY3kzNjE0NzE=',
    name: 'release/*',
  };
}

export function getReposGetDeploymentBranchPolicy200Response() {
  return {
    id: 361471,
    node_id: 'MDE2OkdhdGVCcmFuY2hQb2xpY3kzNjE0NzE=',
    name: 'release/*',
  };
}

export function getReposUpdateDeploymentBranchPolicy200Response() {
  return {
    id: 361471,
    node_id: 'MDE2OkdhdGVCcmFuY2hQb2xpY3kzNjE0NzE=',
    name: 'release/*',
  };
}

export function getActivityListRepoEvents200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.lorem.slug(1),
    type: faker.lorem.slug(1),
    actor: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    repo: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    org: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    payload: {
      action: faker.lorem.slug(1),
      issue: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/1',
        repository_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: 42,
        state: 'open',
        state_reason: 'not_planned',
        title: 'Widget creation fails in Safari on OS X 10.8',
        body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        labels: ['bug', 'registration'],
        assignee: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        })),
        milestone: {
          url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
          html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
          labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
          id: 1002604,
          node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
          number: 42,
          state: 'open',
          title: 'v1.0',
          description: 'Tracking milestone for version 1.0',
          creator: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          open_issues: 4,
          closed_issues: 8,
          created_at: '2011-04-10T20:09:31Z',
          updated_at: '2014-03-03T18:58:10Z',
          closed_at: '2013-02-12T13:22:01Z',
          due_on: '2012-10-09T23:39:01Z',
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(1),
        comments: faker.number.int({ min: undefined, max: undefined }),
        pull_request: {
          merged_at: faker.date.past(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        body_html: faker.lorem.slug(1),
        body_text: faker.lorem.slug(1),
        timeline_url: faker.internet.url(),
        repository: {
          id: 42,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Team Environment',
          full_name: 'octocat/Hello-World',
          license: {
            key: 'mit',
            name: 'MIT License',
            url: 'https://api.github.com/licenses/mit',
            spdx_id: 'MIT',
            node_id: 'MDc6TGljZW5zZW1pdA==',
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          forks: faker.number.int({ min: undefined, max: undefined }),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          private: faker.datatype.boolean(),
          html_url: 'https://github.com/octocat/Hello-World',
          description: 'This your first repo!',
          fork: faker.datatype.boolean(),
          url: 'https://api.github.com/repos/octocat/Hello-World',
          archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
          assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
          blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
          branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
          collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
          comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
          commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
          compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
          contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
          contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
          deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
          downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
          events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
          forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
          git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
          git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
          git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
          git_url: 'git:github.com/octocat/Hello-World.git',
          issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
          issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
          issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
          keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
          labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
          languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
          merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
          milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
          notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
          pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
          releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
          ssh_url: 'git@github.com:octocat/Hello-World.git',
          stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
          statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
          subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
          subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
          tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
          teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
          trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
          clone_url: 'https://github.com/octocat/Hello-World.git',
          mirror_url: 'git:git.example.com/octocat/Hello-World',
          hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
          svn_url: 'https://svn.github.com/octocat/Hello-World',
          homepage: 'https://github.com',
          language: faker.lorem.slug(1),
          forks_count: 9,
          stargazers_count: 80,
          watchers_count: 80,
          size: 108,
          default_branch: 'master',
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: true,
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: true,
          has_projects: true,
          has_wiki: true,
          has_pages: faker.datatype.boolean(),
          has_downloads: true,
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: '2011-01-26T19:06:43Z',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:14:43Z',
          allow_rebase_merge: true,
          template_repository: {
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            name: faker.person.fullName(),
            full_name: faker.person.fullName(),
            owner: {
              login: faker.lorem.slug(1),
              id: faker.number.int({ min: undefined, max: undefined }),
              node_id: faker.lorem.slug(1),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(1),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.internet.url(),
            assignees_url: faker.internet.url(),
            blobs_url: faker.internet.url(),
            branches_url: faker.internet.url(),
            collaborators_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            compare_url: faker.internet.url(),
            contents_url: faker.internet.url(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.internet.url(),
            git_refs_url: faker.internet.url(),
            git_tags_url: faker.internet.url(),
            git_url: faker.internet.url(),
            issue_comment_url: faker.internet.url(),
            issue_events_url: faker.internet.url(),
            issues_url: faker.internet.url(),
            keys_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.internet.url(),
            notifications_url: faker.internet.url(),
            pulls_url: faker.internet.url(),
            releases_url: faker.internet.url(),
            ssh_url: faker.internet.url(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.internet.url(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.internet.url(),
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.number.int({ min: undefined, max: undefined }),
            stargazers_count: faker.number.int({ min: undefined, max: undefined }),
            watchers_count: faker.number.int({ min: undefined, max: undefined }),
            size: faker.number.int({ min: undefined, max: undefined }),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.number.int({ min: undefined, max: undefined }),
            is_template: faker.datatype.boolean(),
            topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
              faker.lorem.slug(1)
            ),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.number.int({ min: undefined, max: undefined }),
            network_count: faker.number.int({ min: undefined, max: undefined }),
          },
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: true,
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: true,
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
          open_issues: faker.number.int({ min: undefined, max: undefined }),
          watchers: faker.number.int({ min: undefined, max: undefined }),
          master_branch: faker.lorem.slug(1),
          starred_at: '"2020-07-09T00:17:42Z"',
          anonymous_access_enabled: faker.datatype.boolean(),
        },
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        author_association: 'OWNER',
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      comment: {
        id: 42,
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/comments/1',
        body: 'What version of Safari were you using when you observed this bug?',
        body_text: faker.lorem.slug(1),
        body_html: faker.lorem.slug(1),
        html_url: faker.internet.url(),
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        created_at: '2011-04-14T16:00:49Z',
        updated_at: '2011-04-14T16:00:49Z',
        issue_url: faker.internet.url(),
        author_association: 'OWNER',
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      pages: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        page_name: faker.person.fullName(),
        title: faker.lorem.slug(1),
        summary: faker.lorem.slug(1),
        action: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        html_url: faker.internet.url(),
      })),
    },
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
  }));
}

export function getReposListForks200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1296269,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Hello-World',
    full_name: 'octocat/Hello-World',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: faker.internet.url(),
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: faker.internet.url(),
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: faker.internet.url(),
    mirror_url: faker.internet.url(),
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: faker.internet.url(),
    homepage: faker.lorem.slug(1),
    language: faker.lorem.slug(1),
    forks_count: faker.number.int({ min: undefined, max: undefined }),
    stargazers_count: faker.number.int({ min: undefined, max: undefined }),
    watchers_count: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    default_branch: faker.lorem.slug(1),
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: faker.datatype.boolean(),
    topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    has_issues: faker.datatype.boolean(),
    has_projects: faker.datatype.boolean(),
    has_wiki: faker.datatype.boolean(),
    has_pages: faker.datatype.boolean(),
    has_downloads: faker.datatype.boolean(),
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: faker.lorem.slug(1),
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    permissions: {
      admin: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
    },
    temp_clone_token: faker.lorem.slug(1),
    delete_branch_on_merge: faker.datatype.boolean(),
    subscribers_count: faker.number.int({ min: undefined, max: undefined }),
    network_count: faker.number.int({ min: undefined, max: undefined }),
    code_of_conduct: {
      key: 'contributor_covenant',
      name: 'Contributor Covenant',
      url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
      body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
      html_url: faker.internet.url(),
    },
    license: {
      key: faker.lorem.slug(1),
      name: faker.person.fullName(),
      spdx_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      node_id: faker.lorem.slug(1),
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    allow_forking: faker.datatype.boolean(),
  }));
}

export function getReposListForks400Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateFork202Response() {
  return {
    id: 1296269,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Hello-World',
    full_name: 'octocat/Hello-World',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: 'git:github.com/octocat/Hello-World.git',
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: 'git@github.com:octocat/Hello-World.git',
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: 'https://github.com/octocat/Hello-World.git',
    mirror_url: 'git:git.example.com/octocat/Hello-World',
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: 'https://svn.github.com/octocat/Hello-World',
    homepage: 'https://github.com',
    language: faker.lorem.slug(1),
    forks_count: 9,
    stargazers_count: 80,
    watchers_count: 80,
    size: 108,
    default_branch: 'master',
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: true,
    topics: ['octocat', 'atom', 'electron', 'API'],
    has_issues: true,
    has_projects: true,
    has_wiki: true,
    has_pages: faker.datatype.boolean(),
    has_downloads: true,
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: 'public',
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    permissions: {
      admin: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
    },
    allow_rebase_merge: true,
    template_repository: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    temp_clone_token: faker.lorem.slug(1),
    allow_squash_merge: true,
    allow_auto_merge: faker.datatype.boolean(),
    delete_branch_on_merge: faker.datatype.boolean(),
    allow_merge_commit: true,
    allow_update_branch: true,
    allow_forking: true,
    subscribers_count: 42,
    network_count: faker.number.int({ min: undefined, max: undefined }),
    license: {
      key: 'mit',
      name: 'MIT License',
      url: 'https://api.github.com/licenses/mit',
      spdx_id: 'MIT',
      node_id: 'MDc6TGljZW5zZW1pdA==',
      html_url: faker.internet.url(),
    },
    organization: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    parent: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    source: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    master_branch: faker.lorem.slug(1),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    anonymous_access_enabled: faker.datatype.boolean(),
    code_of_conduct: {
      url: 'https://api.github.com/repos/github/docs/community/code_of_conduct',
      key: 'citizen_code_of_conduct',
      name: 'Citizen Code of Conduct',
      html_url: 'https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md',
    },
    security_and_analysis: {
      advanced_security: {
        status: faker.helpers.arrayElement(['enabled', 'disabled']),
      },
      secret_scanning: {
        status: faker.helpers.arrayElement(['enabled', 'disabled']),
      },
      secret_scanning_push_protection: {
        status: faker.helpers.arrayElement(['enabled', 'disabled']),
      },
    },
  };
}

export function getReposCreateFork400Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateFork403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateFork404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateFork422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getGitCreateBlob201Response() {
  return {
    url: faker.internet.url(),
    sha: faker.lorem.slug(1),
  };
}

export function getGitCreateBlob403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGitCreateBlob404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGitCreateBlob409Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGitCreateBlob422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getGitGetBlob200Response() {
  return {
    content: faker.lorem.slug(1),
    encoding: faker.lorem.slug(1),
    url: faker.internet.url(),
    sha: faker.lorem.slug(1),
    size: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    highlighted_content: faker.lorem.slug(1),
  };
}

export function getGitGetBlob403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGitGetBlob404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGitGetBlob422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getGitCreateCommit201Response() {
  return {
    sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
    node_id: faker.lorem.slug(1),
    url: faker.internet.url(),
    author: {
      date: '2014-08-09T08:02:04+12:00',
      email: 'monalisa.octocat@example.com',
      name: 'Monalisa Octocat',
    },
    committer: {
      date: '2014-08-09T08:02:04+12:00',
      email: 'monalisa.octocat@example.com',
      name: 'Monalisa Octocat',
    },
    message: 'Fix #42',
    tree: {
      sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
      url: faker.internet.url(),
    },
    parents: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
      url: faker.internet.url(),
      html_url: faker.internet.url(),
    })),
    verification: {
      verified: faker.datatype.boolean(),
      reason: faker.lorem.slug(1),
      signature: faker.lorem.slug(1),
      payload: faker.lorem.slug(1),
    },
    html_url: faker.internet.url(),
  };
}

export function getGitCreateCommit404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGitCreateCommit422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getGitGetCommit200Response() {
  return {
    sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
    node_id: faker.lorem.slug(1),
    url: faker.internet.url(),
    author: {
      date: '2014-08-09T08:02:04+12:00',
      email: 'monalisa.octocat@example.com',
      name: 'Monalisa Octocat',
    },
    committer: {
      date: '2014-08-09T08:02:04+12:00',
      email: 'monalisa.octocat@example.com',
      name: 'Monalisa Octocat',
    },
    message: 'Fix #42',
    tree: {
      sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
      url: faker.internet.url(),
    },
    parents: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
      url: faker.internet.url(),
      html_url: faker.internet.url(),
    })),
    verification: {
      verified: faker.datatype.boolean(),
      reason: faker.lorem.slug(1),
      signature: faker.lorem.slug(1),
      payload: faker.lorem.slug(1),
    },
    html_url: faker.internet.url(),
  };
}

export function getGitGetCommit404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGitListMatchingRefs200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    ref: faker.lorem.slug(1),
    node_id: faker.lorem.slug(1),
    url: faker.internet.url(),
    object: {
      type: faker.lorem.slug(1),
      sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
      url: faker.internet.url(),
    },
  }));
}

export function getGitGetRef200Response() {
  return {
    ref: faker.lorem.slug(1),
    node_id: faker.lorem.slug(1),
    url: faker.internet.url(),
    object: {
      type: faker.lorem.slug(1),
      sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
      url: faker.internet.url(),
    },
  };
}

export function getGitGetRef404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGitCreateRef201Response() {
  return {
    ref: faker.lorem.slug(1),
    node_id: faker.lorem.slug(1),
    url: faker.internet.url(),
    object: {
      type: faker.lorem.slug(1),
      sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
      url: faker.internet.url(),
    },
  };
}

export function getGitCreateRef422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getGitUpdateRef200Response() {
  return {
    ref: faker.lorem.slug(1),
    node_id: faker.lorem.slug(1),
    url: faker.internet.url(),
    object: {
      type: faker.lorem.slug(1),
      sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
      url: faker.internet.url(),
    },
  };
}

export function getGitUpdateRef422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getGitDeleteRef422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getGitCreateTag201Response() {
  return {
    node_id: 'MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==',
    tag: 'v0.0.1',
    sha: '940bd336248efae0f9ee5bc7b2d5c985887b16ac',
    url: 'https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac',
    message: 'Initial public release',
    tagger: {
      date: faker.lorem.slug(1),
      email: faker.internet.email(),
      name: faker.person.fullName(),
    },
    object: {
      sha: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
      url: faker.internet.url(),
    },
    verification: {
      verified: faker.datatype.boolean(),
      reason: faker.lorem.slug(1),
      payload: faker.lorem.slug(1),
      signature: faker.lorem.slug(1),
    },
  };
}

export function getGitCreateTag422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getGitGetTag200Response() {
  return {
    node_id: 'MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==',
    tag: 'v0.0.1',
    sha: '940bd336248efae0f9ee5bc7b2d5c985887b16ac',
    url: 'https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac',
    message: 'Initial public release',
    tagger: {
      date: faker.lorem.slug(1),
      email: faker.internet.email(),
      name: faker.person.fullName(),
    },
    object: {
      sha: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
      url: faker.internet.url(),
    },
    verification: {
      verified: faker.datatype.boolean(),
      reason: faker.lorem.slug(1),
      payload: faker.lorem.slug(1),
      signature: faker.lorem.slug(1),
    },
  };
}

export function getGitGetTag404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGitCreateTree201Response() {
  return {
    sha: faker.lorem.slug(1),
    url: faker.internet.url(),
    truncated: faker.datatype.boolean(),
    tree: [
      {
        path: 'file.rb',
        mode: '100644',
        type: 'blob',
        size: 30,
        sha: '44b4fc6d56897b048c772eb4087f854f46256132',
        url: 'https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132',
        properties: {
          path: { type: 'string' },
          mode: { type: 'string' },
          type: { type: 'string' },
          size: { type: 'integer' },
          sha: { type: 'string' },
          url: { type: 'string' },
        },
        required: ['path', 'mode', 'type', 'sha', 'url', 'size'],
      },
    ],
  };
}

export function getGitCreateTree403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGitCreateTree404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGitCreateTree422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getGitGetTree200Response() {
  return {
    sha: faker.lorem.slug(1),
    url: faker.internet.url(),
    truncated: faker.datatype.boolean(),
    tree: [
      {
        path: 'file.rb',
        mode: '100644',
        type: 'blob',
        size: 30,
        sha: '44b4fc6d56897b048c772eb4087f854f46256132',
        url: 'https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132',
        properties: {
          path: { type: 'string' },
          mode: { type: 'string' },
          type: { type: 'string' },
          size: { type: 'integer' },
          sha: { type: 'string' },
          url: { type: 'string' },
        },
        required: ['path', 'mode', 'type', 'sha', 'url', 'size'],
      },
    ],
  };
}

export function getGitGetTree404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getGitGetTree422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposListWebhooks200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    type: faker.lorem.slug(1),
    id: 42,
    name: 'web',
    active: true,
    events: ['push', 'pull_request'],
    config: {
      email: '"foo@bar.com"',
      password: '"foo"',
      room: '"roomer"',
      subdomain: '"foo"',
      url: 'https://example.com/webhook',
      insecure_ssl: faker.helpers.arrayElement(['"0"', faker.number.int({ min: undefined, max: undefined })]),
      content_type: '"json"',
      digest: '"sha256"',
      secret: '"********"',
      token: '"abc"',
    },
    updated_at: '2011-09-06T20:39:23Z',
    created_at: '2011-09-06T17:26:27Z',
    url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1',
    test_url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1/test',
    ping_url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1/pings',
    deliveries_url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries',
    last_response: {
      code: faker.number.int({ min: undefined, max: undefined }),
      status: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
    },
  }));
}

export function getReposListWebhooks404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateWebhook201Response() {
  return {
    type: faker.lorem.slug(1),
    id: 42,
    name: 'web',
    active: true,
    events: ['push', 'pull_request'],
    config: {
      email: '"foo@bar.com"',
      password: '"foo"',
      room: '"roomer"',
      subdomain: '"foo"',
      url: 'https://example.com/webhook',
      insecure_ssl: faker.helpers.arrayElement(['"0"', faker.number.int({ min: undefined, max: undefined })]),
      content_type: '"json"',
      digest: '"sha256"',
      secret: '"********"',
      token: '"abc"',
    },
    updated_at: '2011-09-06T20:39:23Z',
    created_at: '2011-09-06T17:26:27Z',
    url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1',
    test_url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1/test',
    ping_url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1/pings',
    deliveries_url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries',
    last_response: {
      code: faker.number.int({ min: undefined, max: undefined }),
      status: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
    },
  };
}

export function getReposCreateWebhook403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateWebhook404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateWebhook422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetWebhook200Response() {
  return {
    type: faker.lorem.slug(1),
    id: 42,
    name: 'web',
    active: true,
    events: ['push', 'pull_request'],
    config: {
      email: '"foo@bar.com"',
      password: '"foo"',
      room: '"roomer"',
      subdomain: '"foo"',
      url: 'https://example.com/webhook',
      insecure_ssl: faker.helpers.arrayElement(['"0"', faker.number.int({ min: undefined, max: undefined })]),
      content_type: '"json"',
      digest: '"sha256"',
      secret: '"********"',
      token: '"abc"',
    },
    updated_at: '2011-09-06T20:39:23Z',
    created_at: '2011-09-06T17:26:27Z',
    url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1',
    test_url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1/test',
    ping_url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1/pings',
    deliveries_url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries',
    last_response: {
      code: faker.number.int({ min: undefined, max: undefined }),
      status: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
    },
  };
}

export function getReposGetWebhook404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposUpdateWebhook200Response() {
  return {
    type: faker.lorem.slug(1),
    id: 42,
    name: 'web',
    active: true,
    events: ['push', 'pull_request'],
    config: {
      email: '"foo@bar.com"',
      password: '"foo"',
      room: '"roomer"',
      subdomain: '"foo"',
      url: 'https://example.com/webhook',
      insecure_ssl: faker.helpers.arrayElement(['"0"', faker.number.int({ min: undefined, max: undefined })]),
      content_type: '"json"',
      digest: '"sha256"',
      secret: '"********"',
      token: '"abc"',
    },
    updated_at: '2011-09-06T20:39:23Z',
    created_at: '2011-09-06T17:26:27Z',
    url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1',
    test_url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1/test',
    ping_url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1/pings',
    deliveries_url: 'https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries',
    last_response: {
      code: faker.number.int({ min: undefined, max: undefined }),
      status: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
    },
  };
}

export function getReposUpdateWebhook404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposUpdateWebhook422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposDeleteWebhook404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetWebhookConfigForRepo200Response() {
  return {
    url: 'https://example.com/webhook',
    content_type: '"json"',
    secret: '"********"',
    insecure_ssl: faker.helpers.arrayElement(['"0"', faker.number.int({ min: undefined, max: undefined })]),
  };
}

export function getReposUpdateWebhookConfigForRepo200Response() {
  return {
    url: 'https://example.com/webhook',
    content_type: '"json"',
    secret: '"********"',
    insecure_ssl: faker.helpers.arrayElement(['"0"', faker.number.int({ min: undefined, max: undefined })]),
  };
}

export function getReposListWebhookDeliveries200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 42,
    guid: '58474f00-b361-11eb-836d-0e4f3503ccbe',
    delivered_at: '2021-05-12T20:33:44Z',
    redelivery: faker.datatype.boolean(),
    duration: 0.03,
    status: 'failed to connect',
    status_code: 502,
    event: 'issues',
    action: 'opened',
    installation_id: 123,
    repository_id: 123,
  }));
}

export function getReposListWebhookDeliveries400Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListWebhookDeliveries422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetWebhookDelivery200Response() {
  return {
    id: 42,
    guid: '58474f00-b361-11eb-836d-0e4f3503ccbe',
    delivered_at: '2021-05-12T20:33:44Z',
    redelivery: faker.datatype.boolean(),
    duration: 0.03,
    status: 'failed to connect',
    status_code: 502,
    event: 'issues',
    action: 'opened',
    installation_id: 123,
    repository_id: 123,
    url: 'https://www.example.com',
    request: {
      headers: {},
      payload: {},
    },
    response: {
      headers: {},
      payload: faker.lorem.slug(1),
    },
  };
}

export function getReposGetWebhookDelivery400Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetWebhookDelivery422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposRedeliverWebhookDelivery202Response() {
  return {};
}

export function getReposRedeliverWebhookDelivery400Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposRedeliverWebhookDelivery422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposPingWebhook404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposTestPushWebhook404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsGetRepoInstallation200Response() {
  return {
    id: 1,
    account: faker.helpers.arrayElement([
      {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      {
        description: faker.lorem.slug(1),
        html_url: 'https://github.com/enterprises/octo-business',
        website_url: faker.internet.url(),
        id: 42,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Octo Business',
        slug: 'octo-business',
        created_at: '2019-01-26T19:01:12Z',
        updated_at: '2019-01-26T19:14:43Z',
        avatar_url: faker.internet.url(),
      },
    ]),
    repository_selection: faker.helpers.arrayElement(['all', 'selected']),
    access_tokens_url: 'https://api.github.com/installations/1/access_tokens',
    repositories_url: 'https://api.github.com/installation/repositories',
    html_url: 'https://github.com/organizations/github/settings/installations/1',
    app_id: 1,
    target_id: faker.number.int({ min: undefined, max: undefined }),
    target_type: 'Organization',
    permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
    events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    single_file_name: 'config.yaml',
    has_multiple_single_files: true,
    single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
    app_slug: 'github-actions',
    suspended_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    suspended_at: faker.date.past(),
    contact_email: '"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"',
  };
}

export function getAppsGetRepoInstallation301Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsGetRepoInstallation404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListInvitations200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 42,
    repository: {
      id: 1296269,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Hello-World',
      full_name: 'octocat/Hello-World',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: faker.internet.url(),
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: faker.internet.url(),
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      temp_clone_token: faker.lorem.slug(1),
      delete_branch_on_merge: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      code_of_conduct: {
        key: 'contributor_covenant',
        name: 'Contributor Covenant',
        url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
        body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
        html_url: faker.internet.url(),
      },
      license: {
        key: faker.lorem.slug(1),
        name: faker.person.fullName(),
        spdx_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        node_id: faker.lorem.slug(1),
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      allow_forking: faker.datatype.boolean(),
    },
    invitee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    inviter: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    permissions: 'read',
    created_at: '2016-06-13T14:52:50-05:00',
    expired: faker.datatype.boolean(),
    url: 'https://api.github.com/user/repository-invitations/1',
    html_url: 'https://github.com/octocat/Hello-World/invitations',
    node_id: faker.lorem.slug(1),
  }));
}

export function getReposUpdateInvitation200Response() {
  return {
    id: 42,
    repository: {
      id: 1296269,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Hello-World',
      full_name: 'octocat/Hello-World',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: faker.internet.url(),
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: faker.internet.url(),
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      temp_clone_token: faker.lorem.slug(1),
      delete_branch_on_merge: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      code_of_conduct: {
        key: 'contributor_covenant',
        name: 'Contributor Covenant',
        url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
        body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
        html_url: faker.internet.url(),
      },
      license: {
        key: faker.lorem.slug(1),
        name: faker.person.fullName(),
        spdx_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        node_id: faker.lorem.slug(1),
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      allow_forking: faker.datatype.boolean(),
    },
    invitee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    inviter: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    permissions: 'read',
    created_at: '2016-06-13T14:52:50-05:00',
    expired: faker.datatype.boolean(),
    url: 'https://api.github.com/user/repository-invitations/1',
    html_url: 'https://github.com/octocat/Hello-World/invitations',
    node_id: faker.lorem.slug(1),
  };
}

export function getIssuesListForRepo200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    url: 'https://api.github.com/repositories/42/issues/1',
    repository_url: faker.internet.url(),
    labels_url: faker.internet.url(),
    comments_url: faker.internet.url(),
    events_url: faker.internet.url(),
    html_url: faker.internet.url(),
    number: 42,
    state: 'open',
    state_reason: 'not_planned',
    title: 'Widget creation fails in Safari on OS X 10.8',
    body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    labels: ['bug', 'registration'],
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    milestone: {
      url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
      html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
      labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
      id: 1002604,
      node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
      number: 42,
      state: 'open',
      title: 'v1.0',
      description: 'Tracking milestone for version 1.0',
      creator: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      open_issues: 4,
      closed_issues: 8,
      created_at: '2011-04-10T20:09:31Z',
      updated_at: '2014-03-03T18:58:10Z',
      closed_at: '2013-02-12T13:22:01Z',
      due_on: '2012-10-09T23:39:01Z',
    },
    locked: faker.datatype.boolean(),
    active_lock_reason: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    pull_request: {
      merged_at: faker.date.past(),
      diff_url: faker.internet.url(),
      html_url: faker.internet.url(),
      patch_url: faker.internet.url(),
      url: faker.internet.url(),
    },
    closed_at: faker.date.past(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    draft: faker.datatype.boolean(),
    closed_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    timeline_url: faker.internet.url(),
    repository: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    author_association: 'OWNER',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  }));
}

export function getIssuesListForRepo301Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesListForRepo404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesListForRepo422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getIssuesCreate201Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    url: 'https://api.github.com/repositories/42/issues/1',
    repository_url: faker.internet.url(),
    labels_url: faker.internet.url(),
    comments_url: faker.internet.url(),
    events_url: faker.internet.url(),
    html_url: faker.internet.url(),
    number: 42,
    state: 'open',
    state_reason: 'not_planned',
    title: 'Widget creation fails in Safari on OS X 10.8',
    body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    labels: ['bug', 'registration'],
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    milestone: {
      url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
      html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
      labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
      id: 1002604,
      node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
      number: 42,
      state: 'open',
      title: 'v1.0',
      description: 'Tracking milestone for version 1.0',
      creator: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      open_issues: 4,
      closed_issues: 8,
      created_at: '2011-04-10T20:09:31Z',
      updated_at: '2014-03-03T18:58:10Z',
      closed_at: '2013-02-12T13:22:01Z',
      due_on: '2012-10-09T23:39:01Z',
    },
    locked: faker.datatype.boolean(),
    active_lock_reason: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    pull_request: {
      merged_at: faker.date.past(),
      diff_url: faker.internet.url(),
      html_url: faker.internet.url(),
      patch_url: faker.internet.url(),
      url: faker.internet.url(),
    },
    closed_at: faker.date.past(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    draft: faker.datatype.boolean(),
    closed_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    timeline_url: faker.internet.url(),
    repository: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    author_association: 'OWNER',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getIssuesCreate403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesCreate404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesCreate410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesCreate422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getIssuesCreate503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getIssuesListCommentsForRepo200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 42,
    node_id: faker.lorem.slug(1),
    url: 'https://api.github.com/repositories/42/issues/comments/1',
    body: 'What version of Safari were you using when you observed this bug?',
    body_text: faker.lorem.slug(1),
    body_html: faker.lorem.slug(1),
    html_url: faker.internet.url(),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2011-04-14T16:00:49Z',
    updated_at: '2011-04-14T16:00:49Z',
    issue_url: faker.internet.url(),
    author_association: 'OWNER',
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  }));
}

export function getIssuesListCommentsForRepo404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesListCommentsForRepo422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getIssuesGetComment200Response() {
  return {
    id: 42,
    node_id: faker.lorem.slug(1),
    url: 'https://api.github.com/repositories/42/issues/comments/1',
    body: 'What version of Safari were you using when you observed this bug?',
    body_text: faker.lorem.slug(1),
    body_html: faker.lorem.slug(1),
    html_url: faker.internet.url(),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2011-04-14T16:00:49Z',
    updated_at: '2011-04-14T16:00:49Z',
    issue_url: faker.internet.url(),
    author_association: 'OWNER',
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getIssuesGetComment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesUpdateComment200Response() {
  return {
    id: 42,
    node_id: faker.lorem.slug(1),
    url: 'https://api.github.com/repositories/42/issues/comments/1',
    body: 'What version of Safari were you using when you observed this bug?',
    body_text: faker.lorem.slug(1),
    body_html: faker.lorem.slug(1),
    html_url: faker.internet.url(),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2011-04-14T16:00:49Z',
    updated_at: '2011-04-14T16:00:49Z',
    issue_url: faker.internet.url(),
    author_association: 'OWNER',
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getIssuesUpdateComment422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReactionsListForIssueComment200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  }));
}

export function getReactionsListForIssueComment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReactionsCreateForIssueComment200Response() {
  return {
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  };
}

export function getReactionsCreateForIssueComment201Response() {
  return {
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  };
}

export function getReactionsCreateForIssueComment422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getIssuesListEventsForRepo200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1,
    node_id: 'MDEwOklzc3VlRXZlbnQx',
    url: 'https://api.github.com/repos/octocat/Hello-World/issues/events/1',
    actor: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    event: 'closed',
    commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
    commit_url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    created_at: '2011-04-14T16:00:49Z',
    issue: {
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      url: 'https://api.github.com/repositories/42/issues/1',
      repository_url: faker.internet.url(),
      labels_url: faker.internet.url(),
      comments_url: faker.internet.url(),
      events_url: faker.internet.url(),
      html_url: faker.internet.url(),
      number: 42,
      state: 'open',
      state_reason: 'not_planned',
      title: 'Widget creation fails in Safari on OS X 10.8',
      body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      labels: ['bug', 'registration'],
      assignee: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      })),
      milestone: {
        url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
        html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
        labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
        id: 1002604,
        node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
        number: 42,
        state: 'open',
        title: 'v1.0',
        description: 'Tracking milestone for version 1.0',
        creator: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        open_issues: 4,
        closed_issues: 8,
        created_at: '2011-04-10T20:09:31Z',
        updated_at: '2014-03-03T18:58:10Z',
        closed_at: '2013-02-12T13:22:01Z',
        due_on: '2012-10-09T23:39:01Z',
      },
      locked: faker.datatype.boolean(),
      active_lock_reason: faker.lorem.slug(1),
      comments: faker.number.int({ min: undefined, max: undefined }),
      pull_request: {
        merged_at: faker.date.past(),
        diff_url: faker.internet.url(),
        html_url: faker.internet.url(),
        patch_url: faker.internet.url(),
        url: faker.internet.url(),
      },
      closed_at: faker.date.past(),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      draft: faker.datatype.boolean(),
      closed_by: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      body_html: faker.lorem.slug(1),
      body_text: faker.lorem.slug(1),
      timeline_url: faker.internet.url(),
      repository: {
        id: 42,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Team Environment',
        full_name: 'octocat/Hello-World',
        license: {
          key: 'mit',
          name: 'MIT License',
          url: 'https://api.github.com/licenses/mit',
          spdx_id: 'MIT',
          node_id: 'MDc6TGljZW5zZW1pdA==',
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: 'git:github.com/octocat/Hello-World.git',
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: 'git@github.com:octocat/Hello-World.git',
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: 'https://github.com/octocat/Hello-World.git',
        mirror_url: 'git:git.example.com/octocat/Hello-World',
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: 'https://svn.github.com/octocat/Hello-World',
        homepage: 'https://github.com',
        language: faker.lorem.slug(1),
        forks_count: 9,
        stargazers_count: 80,
        watchers_count: 80,
        size: 108,
        default_branch: 'master',
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: true,
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: true,
        has_projects: true,
        has_wiki: true,
        has_pages: faker.datatype.boolean(),
        has_downloads: true,
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        allow_rebase_merge: true,
        template_repository: {
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          name: faker.person.fullName(),
          full_name: faker.person.fullName(),
          owner: {
            login: faker.lorem.slug(1),
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.internet.url(),
            gists_url: faker.internet.url(),
            starred_url: faker.internet.url(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(1),
            site_admin: faker.datatype.boolean(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(1),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.internet.url(),
          assignees_url: faker.internet.url(),
          blobs_url: faker.internet.url(),
          branches_url: faker.internet.url(),
          collaborators_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          compare_url: faker.internet.url(),
          contents_url: faker.internet.url(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.internet.url(),
          git_refs_url: faker.internet.url(),
          git_tags_url: faker.internet.url(),
          git_url: faker.internet.url(),
          issue_comment_url: faker.internet.url(),
          issue_events_url: faker.internet.url(),
          issues_url: faker.internet.url(),
          keys_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.internet.url(),
          notifications_url: faker.internet.url(),
          pulls_url: faker.internet.url(),
          releases_url: faker.internet.url(),
          ssh_url: faker.internet.url(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.internet.url(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.internet.url(),
          clone_url: faker.internet.url(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          forks_count: faker.number.int({ min: undefined, max: undefined }),
          stargazers_count: faker.number.int({ min: undefined, max: undefined }),
          watchers_count: faker.number.int({ min: undefined, max: undefined }),
          size: faker.number.int({ min: undefined, max: undefined }),
          default_branch: faker.lorem.slug(1),
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: faker.datatype.boolean(),
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: faker.date.past(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: true,
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: true,
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        master_branch: faker.lorem.slug(1),
        starred_at: '"2020-07-09T00:17:42Z"',
        anonymous_access_enabled: faker.datatype.boolean(),
      },
      performed_via_github_app: {
        id: 37,
        slug: 'probot-owners',
        node_id: 'MDExOkludGVncmF0aW9uMQ==',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        name: 'Probot Owners',
        description: 'The description of the app.',
        external_url: 'https://example.com',
        html_url: 'https://github.com/apps/super-ci',
        created_at: '2017-07-08T16:18:44-04:00',
        updated_at: '2017-07-08T16:18:44-04:00',
        permissions: { issues: 'read', deployments: 'write' },
        events: ['label', 'deployment'],
        installations_count: 5,
        client_id: '"Iv1.25b5d1e65ffc4022"',
        client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
        webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
        pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
      },
      author_association: 'OWNER',
      reactions: {
        url: faker.internet.url(),
        total_count: faker.number.int({ min: undefined, max: undefined }),
        '+1': faker.number.int({ min: undefined, max: undefined }),
        '-1': faker.number.int({ min: undefined, max: undefined }),
        laugh: faker.number.int({ min: undefined, max: undefined }),
        confused: faker.number.int({ min: undefined, max: undefined }),
        heart: faker.number.int({ min: undefined, max: undefined }),
        hooray: faker.number.int({ min: undefined, max: undefined }),
        eyes: faker.number.int({ min: undefined, max: undefined }),
        rocket: faker.number.int({ min: undefined, max: undefined }),
      },
    },
    label: {
      name: faker.person.fullName(),
      color: faker.lorem.slug(1),
    },
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assigner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    review_requester: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    requested_reviewer: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    requested_team: {
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      slug: faker.lorem.slug(1),
      description: faker.lorem.slug(1),
      privacy: faker.lorem.slug(1),
      permission: faker.lorem.slug(1),
      permissions: {
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        admin: faker.datatype.boolean(),
      },
      url: faker.internet.url(),
      html_url: 'https://github.com/orgs/rails/teams/core',
      members_url: faker.internet.url(),
      repositories_url: faker.internet.url(),
      parent: {
        id: 1,
        node_id: 'MDQ6VGVhbTE=',
        url: 'https://api.github.com/organizations/1/team/1',
        members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
        name: 'Justice League',
        description: 'A great team.',
        permission: 'admin',
        privacy: 'closed',
        html_url: 'https://github.com/orgs/rails/teams/core',
        repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
        slug: 'justice-league',
        ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
      },
    },
    dismissed_review: {
      state: faker.lorem.slug(1),
      review_id: faker.number.int({ min: undefined, max: undefined }),
      dismissal_message: faker.lorem.slug(1),
      dismissal_commit_id: faker.lorem.slug(1),
    },
    milestone: {
      title: faker.lorem.slug(1),
    },
    project_card: {
      url: faker.internet.url(),
      id: faker.number.int({ min: undefined, max: undefined }),
      project_url: faker.internet.url(),
      project_id: faker.number.int({ min: undefined, max: undefined }),
      column_name: faker.person.fullName(),
      previous_column_name: faker.person.fullName(),
    },
    rename: {
      from: faker.lorem.slug(1),
      to: faker.lorem.slug(1),
    },
    author_association: 'OWNER',
    lock_reason: faker.lorem.slug(1),
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
  }));
}

export function getIssuesListEventsForRepo422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getIssuesGetEvent200Response() {
  return {
    id: 1,
    node_id: 'MDEwOklzc3VlRXZlbnQx',
    url: 'https://api.github.com/repos/octocat/Hello-World/issues/events/1',
    actor: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    event: 'closed',
    commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
    commit_url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    created_at: '2011-04-14T16:00:49Z',
    issue: {
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      url: 'https://api.github.com/repositories/42/issues/1',
      repository_url: faker.internet.url(),
      labels_url: faker.internet.url(),
      comments_url: faker.internet.url(),
      events_url: faker.internet.url(),
      html_url: faker.internet.url(),
      number: 42,
      state: 'open',
      state_reason: 'not_planned',
      title: 'Widget creation fails in Safari on OS X 10.8',
      body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      labels: ['bug', 'registration'],
      assignee: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      })),
      milestone: {
        url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
        html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
        labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
        id: 1002604,
        node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
        number: 42,
        state: 'open',
        title: 'v1.0',
        description: 'Tracking milestone for version 1.0',
        creator: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        open_issues: 4,
        closed_issues: 8,
        created_at: '2011-04-10T20:09:31Z',
        updated_at: '2014-03-03T18:58:10Z',
        closed_at: '2013-02-12T13:22:01Z',
        due_on: '2012-10-09T23:39:01Z',
      },
      locked: faker.datatype.boolean(),
      active_lock_reason: faker.lorem.slug(1),
      comments: faker.number.int({ min: undefined, max: undefined }),
      pull_request: {
        merged_at: faker.date.past(),
        diff_url: faker.internet.url(),
        html_url: faker.internet.url(),
        patch_url: faker.internet.url(),
        url: faker.internet.url(),
      },
      closed_at: faker.date.past(),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      draft: faker.datatype.boolean(),
      closed_by: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      body_html: faker.lorem.slug(1),
      body_text: faker.lorem.slug(1),
      timeline_url: faker.internet.url(),
      repository: {
        id: 42,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Team Environment',
        full_name: 'octocat/Hello-World',
        license: {
          key: 'mit',
          name: 'MIT License',
          url: 'https://api.github.com/licenses/mit',
          spdx_id: 'MIT',
          node_id: 'MDc6TGljZW5zZW1pdA==',
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: 'git:github.com/octocat/Hello-World.git',
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: 'git@github.com:octocat/Hello-World.git',
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: 'https://github.com/octocat/Hello-World.git',
        mirror_url: 'git:git.example.com/octocat/Hello-World',
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: 'https://svn.github.com/octocat/Hello-World',
        homepage: 'https://github.com',
        language: faker.lorem.slug(1),
        forks_count: 9,
        stargazers_count: 80,
        watchers_count: 80,
        size: 108,
        default_branch: 'master',
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: true,
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: true,
        has_projects: true,
        has_wiki: true,
        has_pages: faker.datatype.boolean(),
        has_downloads: true,
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        allow_rebase_merge: true,
        template_repository: {
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          name: faker.person.fullName(),
          full_name: faker.person.fullName(),
          owner: {
            login: faker.lorem.slug(1),
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.internet.url(),
            gists_url: faker.internet.url(),
            starred_url: faker.internet.url(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(1),
            site_admin: faker.datatype.boolean(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(1),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.internet.url(),
          assignees_url: faker.internet.url(),
          blobs_url: faker.internet.url(),
          branches_url: faker.internet.url(),
          collaborators_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          compare_url: faker.internet.url(),
          contents_url: faker.internet.url(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.internet.url(),
          git_refs_url: faker.internet.url(),
          git_tags_url: faker.internet.url(),
          git_url: faker.internet.url(),
          issue_comment_url: faker.internet.url(),
          issue_events_url: faker.internet.url(),
          issues_url: faker.internet.url(),
          keys_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.internet.url(),
          notifications_url: faker.internet.url(),
          pulls_url: faker.internet.url(),
          releases_url: faker.internet.url(),
          ssh_url: faker.internet.url(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.internet.url(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.internet.url(),
          clone_url: faker.internet.url(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          forks_count: faker.number.int({ min: undefined, max: undefined }),
          stargazers_count: faker.number.int({ min: undefined, max: undefined }),
          watchers_count: faker.number.int({ min: undefined, max: undefined }),
          size: faker.number.int({ min: undefined, max: undefined }),
          default_branch: faker.lorem.slug(1),
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: faker.datatype.boolean(),
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: faker.date.past(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: true,
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: true,
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        master_branch: faker.lorem.slug(1),
        starred_at: '"2020-07-09T00:17:42Z"',
        anonymous_access_enabled: faker.datatype.boolean(),
      },
      performed_via_github_app: {
        id: 37,
        slug: 'probot-owners',
        node_id: 'MDExOkludGVncmF0aW9uMQ==',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        name: 'Probot Owners',
        description: 'The description of the app.',
        external_url: 'https://example.com',
        html_url: 'https://github.com/apps/super-ci',
        created_at: '2017-07-08T16:18:44-04:00',
        updated_at: '2017-07-08T16:18:44-04:00',
        permissions: { issues: 'read', deployments: 'write' },
        events: ['label', 'deployment'],
        installations_count: 5,
        client_id: '"Iv1.25b5d1e65ffc4022"',
        client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
        webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
        pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
      },
      author_association: 'OWNER',
      reactions: {
        url: faker.internet.url(),
        total_count: faker.number.int({ min: undefined, max: undefined }),
        '+1': faker.number.int({ min: undefined, max: undefined }),
        '-1': faker.number.int({ min: undefined, max: undefined }),
        laugh: faker.number.int({ min: undefined, max: undefined }),
        confused: faker.number.int({ min: undefined, max: undefined }),
        heart: faker.number.int({ min: undefined, max: undefined }),
        hooray: faker.number.int({ min: undefined, max: undefined }),
        eyes: faker.number.int({ min: undefined, max: undefined }),
        rocket: faker.number.int({ min: undefined, max: undefined }),
      },
    },
    label: {
      name: faker.person.fullName(),
      color: faker.lorem.slug(1),
    },
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assigner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    review_requester: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    requested_reviewer: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    requested_team: {
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      slug: faker.lorem.slug(1),
      description: faker.lorem.slug(1),
      privacy: faker.lorem.slug(1),
      permission: faker.lorem.slug(1),
      permissions: {
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        admin: faker.datatype.boolean(),
      },
      url: faker.internet.url(),
      html_url: 'https://github.com/orgs/rails/teams/core',
      members_url: faker.internet.url(),
      repositories_url: faker.internet.url(),
      parent: {
        id: 1,
        node_id: 'MDQ6VGVhbTE=',
        url: 'https://api.github.com/organizations/1/team/1',
        members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
        name: 'Justice League',
        description: 'A great team.',
        permission: 'admin',
        privacy: 'closed',
        html_url: 'https://github.com/orgs/rails/teams/core',
        repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
        slug: 'justice-league',
        ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
      },
    },
    dismissed_review: {
      state: faker.lorem.slug(1),
      review_id: faker.number.int({ min: undefined, max: undefined }),
      dismissal_message: faker.lorem.slug(1),
      dismissal_commit_id: faker.lorem.slug(1),
    },
    milestone: {
      title: faker.lorem.slug(1),
    },
    project_card: {
      url: faker.internet.url(),
      id: faker.number.int({ min: undefined, max: undefined }),
      project_url: faker.internet.url(),
      project_id: faker.number.int({ min: undefined, max: undefined }),
      column_name: faker.person.fullName(),
      previous_column_name: faker.person.fullName(),
    },
    rename: {
      from: faker.lorem.slug(1),
      to: faker.lorem.slug(1),
    },
    author_association: 'OWNER',
    lock_reason: faker.lorem.slug(1),
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
  };
}

export function getIssuesGetEvent403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesGetEvent404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesGetEvent410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesGet200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    url: 'https://api.github.com/repositories/42/issues/1',
    repository_url: faker.internet.url(),
    labels_url: faker.internet.url(),
    comments_url: faker.internet.url(),
    events_url: faker.internet.url(),
    html_url: faker.internet.url(),
    number: 42,
    state: 'open',
    state_reason: 'not_planned',
    title: 'Widget creation fails in Safari on OS X 10.8',
    body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    labels: ['bug', 'registration'],
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    milestone: {
      url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
      html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
      labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
      id: 1002604,
      node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
      number: 42,
      state: 'open',
      title: 'v1.0',
      description: 'Tracking milestone for version 1.0',
      creator: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      open_issues: 4,
      closed_issues: 8,
      created_at: '2011-04-10T20:09:31Z',
      updated_at: '2014-03-03T18:58:10Z',
      closed_at: '2013-02-12T13:22:01Z',
      due_on: '2012-10-09T23:39:01Z',
    },
    locked: faker.datatype.boolean(),
    active_lock_reason: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    pull_request: {
      merged_at: faker.date.past(),
      diff_url: faker.internet.url(),
      html_url: faker.internet.url(),
      patch_url: faker.internet.url(),
      url: faker.internet.url(),
    },
    closed_at: faker.date.past(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    draft: faker.datatype.boolean(),
    closed_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    timeline_url: faker.internet.url(),
    repository: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    author_association: 'OWNER',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getIssuesGet301Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesGet404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesGet410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesUpdate200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    url: 'https://api.github.com/repositories/42/issues/1',
    repository_url: faker.internet.url(),
    labels_url: faker.internet.url(),
    comments_url: faker.internet.url(),
    events_url: faker.internet.url(),
    html_url: faker.internet.url(),
    number: 42,
    state: 'open',
    state_reason: 'not_planned',
    title: 'Widget creation fails in Safari on OS X 10.8',
    body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    labels: ['bug', 'registration'],
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    milestone: {
      url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
      html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
      labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
      id: 1002604,
      node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
      number: 42,
      state: 'open',
      title: 'v1.0',
      description: 'Tracking milestone for version 1.0',
      creator: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      open_issues: 4,
      closed_issues: 8,
      created_at: '2011-04-10T20:09:31Z',
      updated_at: '2014-03-03T18:58:10Z',
      closed_at: '2013-02-12T13:22:01Z',
      due_on: '2012-10-09T23:39:01Z',
    },
    locked: faker.datatype.boolean(),
    active_lock_reason: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    pull_request: {
      merged_at: faker.date.past(),
      diff_url: faker.internet.url(),
      html_url: faker.internet.url(),
      patch_url: faker.internet.url(),
      url: faker.internet.url(),
    },
    closed_at: faker.date.past(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    draft: faker.datatype.boolean(),
    closed_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    timeline_url: faker.internet.url(),
    repository: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    author_association: 'OWNER',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getIssuesUpdate301Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesUpdate403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesUpdate404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesUpdate410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesUpdate422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getIssuesUpdate503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getIssuesAddAssignees201Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    url: 'https://api.github.com/repositories/42/issues/1',
    repository_url: faker.internet.url(),
    labels_url: faker.internet.url(),
    comments_url: faker.internet.url(),
    events_url: faker.internet.url(),
    html_url: faker.internet.url(),
    number: 42,
    state: 'open',
    state_reason: 'not_planned',
    title: 'Widget creation fails in Safari on OS X 10.8',
    body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    labels: ['bug', 'registration'],
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    milestone: {
      url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
      html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
      labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
      id: 1002604,
      node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
      number: 42,
      state: 'open',
      title: 'v1.0',
      description: 'Tracking milestone for version 1.0',
      creator: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      open_issues: 4,
      closed_issues: 8,
      created_at: '2011-04-10T20:09:31Z',
      updated_at: '2014-03-03T18:58:10Z',
      closed_at: '2013-02-12T13:22:01Z',
      due_on: '2012-10-09T23:39:01Z',
    },
    locked: faker.datatype.boolean(),
    active_lock_reason: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    pull_request: {
      merged_at: faker.date.past(),
      diff_url: faker.internet.url(),
      html_url: faker.internet.url(),
      patch_url: faker.internet.url(),
      url: faker.internet.url(),
    },
    closed_at: faker.date.past(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    draft: faker.datatype.boolean(),
    closed_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    timeline_url: faker.internet.url(),
    repository: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    author_association: 'OWNER',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getIssuesRemoveAssignees200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    url: 'https://api.github.com/repositories/42/issues/1',
    repository_url: faker.internet.url(),
    labels_url: faker.internet.url(),
    comments_url: faker.internet.url(),
    events_url: faker.internet.url(),
    html_url: faker.internet.url(),
    number: 42,
    state: 'open',
    state_reason: 'not_planned',
    title: 'Widget creation fails in Safari on OS X 10.8',
    body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    labels: ['bug', 'registration'],
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    milestone: {
      url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
      html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
      labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
      id: 1002604,
      node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
      number: 42,
      state: 'open',
      title: 'v1.0',
      description: 'Tracking milestone for version 1.0',
      creator: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      open_issues: 4,
      closed_issues: 8,
      created_at: '2011-04-10T20:09:31Z',
      updated_at: '2014-03-03T18:58:10Z',
      closed_at: '2013-02-12T13:22:01Z',
      due_on: '2012-10-09T23:39:01Z',
    },
    locked: faker.datatype.boolean(),
    active_lock_reason: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    pull_request: {
      merged_at: faker.date.past(),
      diff_url: faker.internet.url(),
      html_url: faker.internet.url(),
      patch_url: faker.internet.url(),
      url: faker.internet.url(),
    },
    closed_at: faker.date.past(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    draft: faker.datatype.boolean(),
    closed_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    timeline_url: faker.internet.url(),
    repository: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    author_association: 'OWNER',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getIssuesCheckUserCanBeAssignedToIssue404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesListComments200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 42,
    node_id: faker.lorem.slug(1),
    url: 'https://api.github.com/repositories/42/issues/comments/1',
    body: 'What version of Safari were you using when you observed this bug?',
    body_text: faker.lorem.slug(1),
    body_html: faker.lorem.slug(1),
    html_url: faker.internet.url(),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2011-04-14T16:00:49Z',
    updated_at: '2011-04-14T16:00:49Z',
    issue_url: faker.internet.url(),
    author_association: 'OWNER',
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  }));
}

export function getIssuesListComments404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesListComments410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesCreateComment201Response() {
  return {
    id: 42,
    node_id: faker.lorem.slug(1),
    url: 'https://api.github.com/repositories/42/issues/comments/1',
    body: 'What version of Safari were you using when you observed this bug?',
    body_text: faker.lorem.slug(1),
    body_html: faker.lorem.slug(1),
    html_url: faker.internet.url(),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2011-04-14T16:00:49Z',
    updated_at: '2011-04-14T16:00:49Z',
    issue_url: faker.internet.url(),
    author_association: 'OWNER',
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getIssuesCreateComment403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesCreateComment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesCreateComment410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesCreateComment422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getIssuesListEvents200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
    faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        actor: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        event: faker.lorem.slug(1),
        commit_id: faker.lorem.slug(1),
        commit_url: faker.internet.url(),
        created_at: faker.date.past(),
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        label: {
          name: faker.person.fullName(),
          color: faker.lorem.slug(1),
        },
      },
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        actor: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        event: faker.lorem.slug(1),
        commit_id: faker.lorem.slug(1),
        commit_url: faker.internet.url(),
        created_at: faker.date.past(),
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        label: {
          name: faker.person.fullName(),
          color: faker.lorem.slug(1),
        },
      },
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        actor: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        event: faker.lorem.slug(1),
        commit_id: faker.lorem.slug(1),
        commit_url: faker.internet.url(),
        created_at: faker.date.past(),
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        assignee: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        assigner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
      },
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        actor: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        event: faker.lorem.slug(1),
        commit_id: faker.lorem.slug(1),
        commit_url: faker.internet.url(),
        created_at: faker.date.past(),
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        assignee: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        assigner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
      },
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        actor: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        event: faker.lorem.slug(1),
        commit_id: faker.lorem.slug(1),
        commit_url: faker.internet.url(),
        created_at: faker.date.past(),
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        milestone: {
          title: faker.lorem.slug(1),
        },
      },
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        actor: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        event: faker.lorem.slug(1),
        commit_id: faker.lorem.slug(1),
        commit_url: faker.internet.url(),
        created_at: faker.date.past(),
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        milestone: {
          title: faker.lorem.slug(1),
        },
      },
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        actor: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        event: faker.lorem.slug(1),
        commit_id: faker.lorem.slug(1),
        commit_url: faker.internet.url(),
        created_at: faker.date.past(),
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        rename: {
          from: faker.lorem.slug(1),
          to: faker.lorem.slug(1),
        },
      },
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        actor: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        event: faker.lorem.slug(1),
        commit_id: faker.lorem.slug(1),
        commit_url: faker.internet.url(),
        created_at: faker.date.past(),
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        review_requester: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        requested_team: {
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          name: faker.person.fullName(),
          slug: faker.lorem.slug(1),
          description: faker.lorem.slug(1),
          privacy: faker.lorem.slug(1),
          permission: faker.lorem.slug(1),
          permissions: {
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            admin: faker.datatype.boolean(),
          },
          url: faker.internet.url(),
          html_url: 'https://github.com/orgs/rails/teams/core',
          members_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          parent: {
            id: 1,
            node_id: 'MDQ6VGVhbTE=',
            url: 'https://api.github.com/organizations/1/team/1',
            members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
            name: 'Justice League',
            description: 'A great team.',
            permission: 'admin',
            privacy: 'closed',
            html_url: 'https://github.com/orgs/rails/teams/core',
            repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
            slug: 'justice-league',
            ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
          },
        },
        requested_reviewer: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
      },
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        actor: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        event: faker.lorem.slug(1),
        commit_id: faker.lorem.slug(1),
        commit_url: faker.internet.url(),
        created_at: faker.date.past(),
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        review_requester: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        requested_team: {
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          name: faker.person.fullName(),
          slug: faker.lorem.slug(1),
          description: faker.lorem.slug(1),
          privacy: faker.lorem.slug(1),
          permission: faker.lorem.slug(1),
          permissions: {
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            admin: faker.datatype.boolean(),
          },
          url: faker.internet.url(),
          html_url: 'https://github.com/orgs/rails/teams/core',
          members_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          parent: {
            id: 1,
            node_id: 'MDQ6VGVhbTE=',
            url: 'https://api.github.com/organizations/1/team/1',
            members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
            name: 'Justice League',
            description: 'A great team.',
            permission: 'admin',
            privacy: 'closed',
            html_url: 'https://github.com/orgs/rails/teams/core',
            repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
            slug: 'justice-league',
            ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
          },
        },
        requested_reviewer: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
      },
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        actor: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        event: faker.lorem.slug(1),
        commit_id: faker.lorem.slug(1),
        commit_url: faker.internet.url(),
        created_at: faker.date.past(),
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        dismissed_review: {
          state: faker.lorem.slug(1),
          review_id: faker.number.int({ min: undefined, max: undefined }),
          dismissal_message: faker.lorem.slug(1),
          dismissal_commit_id: faker.lorem.slug(1),
        },
      },
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        actor: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        event: faker.lorem.slug(1),
        commit_id: faker.lorem.slug(1),
        commit_url: faker.internet.url(),
        created_at: faker.date.past(),
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        lock_reason: '"off-topic"',
      },
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        actor: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        event: faker.lorem.slug(1),
        commit_id: faker.lorem.slug(1),
        commit_url: faker.internet.url(),
        created_at: faker.date.past(),
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        project_card: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          project_id: faker.number.int({ min: undefined, max: undefined }),
          project_url: faker.internet.url(),
          column_name: faker.person.fullName(),
          previous_column_name: faker.person.fullName(),
        },
      },
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        actor: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        event: faker.lorem.slug(1),
        commit_id: faker.lorem.slug(1),
        commit_url: faker.internet.url(),
        created_at: faker.date.past(),
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        project_card: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          project_id: faker.number.int({ min: undefined, max: undefined }),
          project_url: faker.internet.url(),
          column_name: faker.person.fullName(),
          previous_column_name: faker.person.fullName(),
        },
      },
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        actor: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        event: faker.lorem.slug(1),
        commit_id: faker.lorem.slug(1),
        commit_url: faker.internet.url(),
        created_at: faker.date.past(),
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        project_card: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          project_id: faker.number.int({ min: undefined, max: undefined }),
          project_url: faker.internet.url(),
          column_name: faker.person.fullName(),
          previous_column_name: faker.person.fullName(),
        },
      },
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        actor: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        event: faker.lorem.slug(1),
        commit_id: faker.lorem.slug(1),
        commit_url: faker.internet.url(),
        created_at: faker.date.past(),
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        project_card: {
          id: faker.number.int({ min: undefined, max: undefined }),
          url: faker.internet.url(),
          project_id: faker.number.int({ min: undefined, max: undefined }),
          project_url: faker.internet.url(),
          column_name: faker.person.fullName(),
          previous_column_name: faker.person.fullName(),
        },
      },
    ])
  );
}

export function getIssuesListEvents410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesListLabelsOnIssue200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 208045946,
    node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
    url: 'https://api.github.com/repositories/42/labels/bug',
    name: 'bug',
    description: "Something isn't working",
    color: 'FFFFFF',
    default: true,
  }));
}

export function getIssuesListLabelsOnIssue301Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesListLabelsOnIssue404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesListLabelsOnIssue410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesAddLabels200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 208045946,
    node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
    url: 'https://api.github.com/repositories/42/labels/bug',
    name: 'bug',
    description: "Something isn't working",
    color: 'FFFFFF',
    default: true,
  }));
}

export function getIssuesAddLabels301Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesAddLabels404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesAddLabels410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesAddLabels422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getIssuesSetLabels200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 208045946,
    node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
    url: 'https://api.github.com/repositories/42/labels/bug',
    name: 'bug',
    description: "Something isn't working",
    color: 'FFFFFF',
    default: true,
  }));
}

export function getIssuesSetLabels301Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesSetLabels404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesSetLabels410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesSetLabels422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getIssuesRemoveAllLabels301Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesRemoveAllLabels404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesRemoveAllLabels410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesRemoveLabel200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 208045946,
    node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
    url: 'https://api.github.com/repositories/42/labels/bug',
    name: 'bug',
    description: "Something isn't working",
    color: 'FFFFFF',
    default: true,
  }));
}

export function getIssuesRemoveLabel301Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesRemoveLabel404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesRemoveLabel410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesLock403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesLock404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesLock410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesLock422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getIssuesUnlock403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesUnlock404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReactionsListForIssue200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  }));
}

export function getReactionsListForIssue404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReactionsListForIssue410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReactionsCreateForIssue200Response() {
  return {
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  };
}

export function getReactionsCreateForIssue201Response() {
  return {
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  };
}

export function getReactionsCreateForIssue422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getIssuesListEventsForTimeline200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
    faker.helpers.arrayElement([
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
    ])
  );
}

export function getIssuesListEventsForTimeline404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesListEventsForTimeline410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListDeployKeys200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    key: faker.lorem.slug(1),
    url: faker.internet.url(),
    title: faker.lorem.slug(1),
    verified: faker.datatype.boolean(),
    created_at: faker.date.past(),
    read_only: faker.datatype.boolean(),
  }));
}

export function getReposCreateDeployKey201Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    key: faker.lorem.slug(1),
    url: faker.internet.url(),
    title: faker.lorem.slug(1),
    verified: faker.datatype.boolean(),
    created_at: faker.date.past(),
    read_only: faker.datatype.boolean(),
  };
}

export function getReposCreateDeployKey422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetDeployKey200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    key: faker.lorem.slug(1),
    url: faker.internet.url(),
    title: faker.lorem.slug(1),
    verified: faker.datatype.boolean(),
    created_at: faker.date.past(),
    read_only: faker.datatype.boolean(),
  };
}

export function getReposGetDeployKey404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesListLabelsForRepo200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 208045946,
    node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
    url: 'https://api.github.com/repositories/42/labels/bug',
    name: 'bug',
    description: "Something isn't working",
    color: 'FFFFFF',
    default: true,
  }));
}

export function getIssuesListLabelsForRepo404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesCreateLabel201Response() {
  return {
    id: 208045946,
    node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
    url: 'https://api.github.com/repositories/42/labels/bug',
    name: 'bug',
    description: "Something isn't working",
    color: 'FFFFFF',
    default: true,
  };
}

export function getIssuesCreateLabel404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesCreateLabel422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getIssuesGetLabel200Response() {
  return {
    id: 208045946,
    node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
    url: 'https://api.github.com/repositories/42/labels/bug',
    name: 'bug',
    description: "Something isn't working",
    color: 'FFFFFF',
    default: true,
  };
}

export function getIssuesGetLabel404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesUpdateLabel200Response() {
  return {
    id: 208045946,
    node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
    url: 'https://api.github.com/repositories/42/labels/bug',
    name: 'bug',
    description: "Something isn't working",
    color: 'FFFFFF',
    default: true,
  };
}

export function getReposListLanguages200Response() {
  return [...new Array(5).keys()]
    .map(_ => ({ [faker.lorem.word()]: faker.number.int({ min: undefined, max: undefined }) }))
    .reduce((acc, next) => Object.assign(acc, next), {});
}

export function getReposEnableLfsForRepo202Response() {
  return {};
}

export function getLicensesGetForRepo200Response() {
  return {
    name: faker.person.fullName(),
    path: faker.lorem.slug(1),
    sha: faker.lorem.slug(1),
    size: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    git_url: faker.internet.url(),
    download_url: faker.internet.url(),
    type: faker.lorem.slug(1),
    content: faker.lorem.slug(1),
    encoding: faker.lorem.slug(1),
    _links: {
      git: faker.internet.url(),
      html: faker.internet.url(),
      self: faker.internet.url(),
    },
    license: {
      key: 'mit',
      name: 'MIT License',
      url: 'https://api.github.com/licenses/mit',
      spdx_id: 'MIT',
      node_id: 'MDc6TGljZW5zZW1pdA==',
      html_url: faker.internet.url(),
    },
  };
}

export function getReposMergeUpstream200Response() {
  return {
    message: faker.lorem.slug(1),
    merge_type: faker.helpers.arrayElement(['merge', 'fast-forward', 'none']),
    base_branch: faker.lorem.slug(1),
  };
}

export function getReposMerge201Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
    node_id: 'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
    html_url: 'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    comments_url:
      'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
    commit: {
      url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
      author: {
        name: '"Chris Wanstrath"',
        email: '"chris@ozmm.org"',
        date: '"2007-10-29T02:42:39.000-07:00"',
      },
      committer: {
        name: '"Chris Wanstrath"',
        email: '"chris@ozmm.org"',
        date: '"2007-10-29T02:42:39.000-07:00"',
      },
      message: 'Fix all the bugs',
      comment_count: faker.number.int({ min: undefined, max: undefined }),
      tree: {
        sha: '827efc6d56897b048c772eb4087f854f46256132',
        url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
      },
      verification: {
        verified: faker.datatype.boolean(),
        reason: faker.lorem.slug(1),
        payload: faker.lorem.slug(1),
        signature: faker.lorem.slug(1),
      },
    },
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    committer: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    parents: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
      url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
      html_url: 'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
    })),
    stats: {
      additions: faker.number.int({ min: undefined, max: undefined }),
      deletions: faker.number.int({ min: undefined, max: undefined }),
      total: faker.number.int({ min: undefined, max: undefined }),
    },
    files: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
      filename: 'file1.txt',
      status: 'added',
      additions: 103,
      deletions: 21,
      changes: 124,
      blob_url: 'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
      raw_url: 'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
      contents_url:
        'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
      patch: '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
      previous_filename: 'file.txt',
    })),
  };
}

export function getReposMerge403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposMerge422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getIssuesListMilestones200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
    html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
    labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
    id: 1002604,
    node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
    number: 42,
    state: 'open',
    title: 'v1.0',
    description: 'Tracking milestone for version 1.0',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    open_issues: 4,
    closed_issues: 8,
    created_at: '2011-04-10T20:09:31Z',
    updated_at: '2014-03-03T18:58:10Z',
    closed_at: '2013-02-12T13:22:01Z',
    due_on: '2012-10-09T23:39:01Z',
  }));
}

export function getIssuesListMilestones404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesCreateMilestone201Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
    html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
    labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
    id: 1002604,
    node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
    number: 42,
    state: 'open',
    title: 'v1.0',
    description: 'Tracking milestone for version 1.0',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    open_issues: 4,
    closed_issues: 8,
    created_at: '2011-04-10T20:09:31Z',
    updated_at: '2014-03-03T18:58:10Z',
    closed_at: '2013-02-12T13:22:01Z',
    due_on: '2012-10-09T23:39:01Z',
  };
}

export function getIssuesCreateMilestone404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesCreateMilestone422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getIssuesGetMilestone200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
    html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
    labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
    id: 1002604,
    node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
    number: 42,
    state: 'open',
    title: 'v1.0',
    description: 'Tracking milestone for version 1.0',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    open_issues: 4,
    closed_issues: 8,
    created_at: '2011-04-10T20:09:31Z',
    updated_at: '2014-03-03T18:58:10Z',
    closed_at: '2013-02-12T13:22:01Z',
    due_on: '2012-10-09T23:39:01Z',
  };
}

export function getIssuesGetMilestone404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesUpdateMilestone200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
    html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
    labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
    id: 1002604,
    node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
    number: 42,
    state: 'open',
    title: 'v1.0',
    description: 'Tracking milestone for version 1.0',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    open_issues: 4,
    closed_issues: 8,
    created_at: '2011-04-10T20:09:31Z',
    updated_at: '2014-03-03T18:58:10Z',
    closed_at: '2013-02-12T13:22:01Z',
    due_on: '2012-10-09T23:39:01Z',
  };
}

export function getIssuesDeleteMilestone404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesListLabelsForMilestone200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 208045946,
    node_id: 'MDU6TGFiZWwyMDgwNDU5NDY=',
    url: 'https://api.github.com/repositories/42/labels/bug',
    name: 'bug',
    description: "Something isn't working",
    color: 'FFFFFF',
    default: true,
  }));
}

export function getActivityListRepoNotificationsForAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.lorem.slug(1),
    repository: {
      id: 1296269,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Hello-World',
      full_name: 'octocat/Hello-World',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: faker.internet.url(),
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: faker.internet.url(),
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      temp_clone_token: faker.lorem.slug(1),
      delete_branch_on_merge: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      code_of_conduct: {
        key: 'contributor_covenant',
        name: 'Contributor Covenant',
        url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
        body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
        html_url: faker.internet.url(),
      },
      license: {
        key: faker.lorem.slug(1),
        name: faker.person.fullName(),
        spdx_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        node_id: faker.lorem.slug(1),
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      allow_forking: faker.datatype.boolean(),
    },
    subject: {
      title: faker.lorem.slug(1),
      url: faker.internet.url(),
      latest_comment_url: faker.internet.url(),
      type: faker.lorem.slug(1),
    },
    reason: faker.lorem.slug(1),
    unread: faker.datatype.boolean(),
    updated_at: faker.date.past(),
    last_read_at: faker.date.past(),
    url: faker.internet.url(),
    subscription_url: 'https://api.github.com/notifications/threads/2/subscription',
  }));
}

export function getActivityMarkRepoNotificationsAsRead202Response() {
  return {
    message: faker.lorem.slug(1),
    url: faker.internet.url(),
  };
}

export function getReposGetPages200Response() {
  return {
    url: 'https://api.github.com/repos/github/hello-world/pages',
    status: 'built',
    cname: 'example.com',
    protected_domain_state: 'pending',
    pending_domain_unverified_at: faker.date.past(),
    custom_404: faker.datatype.boolean(),
    html_url: 'https://example.com',
    build_type: 'legacy',
    source: {
      branch: faker.lorem.slug(1),
      path: faker.lorem.slug(1),
    },
    public: true,
    https_certificate: {
      state: 'approved',
      description: 'Certificate is approved',
      domains: ['example.com', 'www.example.com'],
      expires_at: faker.date.past(),
    },
    https_enforced: true,
  };
}

export function getReposGetPages404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreatePagesSite201Response() {
  return {
    url: 'https://api.github.com/repos/github/hello-world/pages',
    status: 'built',
    cname: 'example.com',
    protected_domain_state: 'pending',
    pending_domain_unverified_at: faker.date.past(),
    custom_404: faker.datatype.boolean(),
    html_url: 'https://example.com',
    build_type: 'legacy',
    source: {
      branch: faker.lorem.slug(1),
      path: faker.lorem.slug(1),
    },
    public: true,
    https_certificate: {
      state: 'approved',
      description: 'Certificate is approved',
      domains: ['example.com', 'www.example.com'],
      expires_at: faker.date.past(),
    },
    https_enforced: true,
  };
}

export function getReposCreatePagesSite409Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreatePagesSite422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposUpdateInformationAboutPagesSite400Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposUpdateInformationAboutPagesSite409Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposUpdateInformationAboutPagesSite422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposDeletePagesSite404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposDeletePagesSite409Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposDeletePagesSite422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposListPagesBuilds200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
    error: {
      message: faker.lorem.slug(1),
    },
    pusher: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    commit: faker.lorem.slug(1),
    duration: faker.number.int({ min: undefined, max: undefined }),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
  }));
}

export function getReposRequestPagesBuild201Response() {
  return {
    url: 'https://api.github.com/repos/github/hello-world/pages/builds/latest',
    status: 'queued',
  };
}

export function getReposGetLatestPagesBuild200Response() {
  return {
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
    error: {
      message: faker.lorem.slug(1),
    },
    pusher: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    commit: faker.lorem.slug(1),
    duration: faker.number.int({ min: undefined, max: undefined }),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
  };
}

export function getReposGetPagesBuild200Response() {
  return {
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
    error: {
      message: faker.lorem.slug(1),
    },
    pusher: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    commit: faker.lorem.slug(1),
    duration: faker.number.int({ min: undefined, max: undefined }),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
  };
}

export function getEnterpriseAdminListPreReceiveHooksForRepo200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    enforcement: faker.lorem.slug(1),
    configuration_url: faker.internet.url(),
  }));
}

export function getEnterpriseAdminGetPreReceiveHookForRepo200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    enforcement: faker.lorem.slug(1),
    configuration_url: faker.internet.url(),
  };
}

export function getEnterpriseAdminUpdatePreReceiveHookEnforcementForRepo200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    enforcement: faker.lorem.slug(1),
    configuration_url: faker.internet.url(),
  };
}

export function getEnterpriseAdminRemovePreReceiveHookEnforcementForRepo200Response() {
  return {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    enforcement: faker.lorem.slug(1),
    configuration_url: faker.internet.url(),
  };
}

export function getProjectsListForRepo200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    owner_url: 'https://api.github.com/repos/api-playground/projects-test',
    url: 'https://api.github.com/projects/1002604',
    html_url: 'https://github.com/api-playground/projects-test/projects/12',
    columns_url: 'https://api.github.com/projects/1002604/columns',
    id: 1002604,
    node_id: 'MDc6UHJvamVjdDEwMDI2MDQ=',
    name: 'Week One Sprint',
    body: 'This project represents the sprint of the first week in January',
    number: 1,
    state: 'open',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2011-04-10T20:09:31Z',
    updated_at: '2014-03-03T18:58:10Z',
    organization_permission: faker.helpers.arrayElement(['read', 'write', 'admin', 'none']),
    private: faker.datatype.boolean(),
  }));
}

export function getProjectsListForRepo401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsListForRepo403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsListForRepo404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsListForRepo410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsListForRepo422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getProjectsCreateForRepo201Response() {
  return {
    owner_url: 'https://api.github.com/repos/api-playground/projects-test',
    url: 'https://api.github.com/projects/1002604',
    html_url: 'https://github.com/api-playground/projects-test/projects/12',
    columns_url: 'https://api.github.com/projects/1002604/columns',
    id: 1002604,
    node_id: 'MDc6UHJvamVjdDEwMDI2MDQ=',
    name: 'Week One Sprint',
    body: 'This project represents the sprint of the first week in January',
    number: 1,
    state: 'open',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2011-04-10T20:09:31Z',
    updated_at: '2014-03-03T18:58:10Z',
    organization_permission: faker.helpers.arrayElement(['read', 'write', 'admin', 'none']),
    private: faker.datatype.boolean(),
  };
}

export function getProjectsCreateForRepo401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsCreateForRepo403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsCreateForRepo404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsCreateForRepo410Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsCreateForRepo422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getPullsList200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347',
    id: 1,
    node_id: 'MDExOlB1bGxSZXF1ZXN0MQ==',
    html_url: 'https://github.com/octocat/Hello-World/pull/1347',
    diff_url: 'https://github.com/octocat/Hello-World/pull/1347.diff',
    patch_url: 'https://github.com/octocat/Hello-World/pull/1347.patch',
    issue_url: 'https://api.github.com/repos/octocat/Hello-World/issues/1347',
    commits_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits',
    review_comments_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments',
    review_comment_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}',
    comments_url: 'https://api.github.com/repos/octocat/Hello-World/issues/1347/comments',
    statuses_url: 'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    number: 1347,
    state: 'open',
    locked: true,
    title: 'new-feature',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'Please pull these awesome changes',
    labels: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      name: faker.person.fullName(),
      description: faker.lorem.slug(1),
      color: faker.lorem.slug(1),
      default: faker.datatype.boolean(),
    })),
    milestone: {
      url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
      html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
      labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
      id: 1002604,
      node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
      number: 42,
      state: 'open',
      title: 'v1.0',
      description: 'Tracking milestone for version 1.0',
      creator: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      open_issues: 4,
      closed_issues: 8,
      created_at: '2011-04-10T20:09:31Z',
      updated_at: '2014-03-03T18:58:10Z',
      closed_at: '2013-02-12T13:22:01Z',
      due_on: '2012-10-09T23:39:01Z',
    },
    active_lock_reason: 'too heated',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:01:12Z',
    closed_at: '2011-01-26T19:01:12Z',
    merged_at: '2011-01-26T19:01:12Z',
    merge_commit_sha: 'e5bd3914e2e596debea16f433f57875b5b90bcd6',
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    requested_reviewers: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    requested_teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      slug: faker.lorem.slug(1),
      description: faker.lorem.slug(1),
      privacy: faker.lorem.slug(1),
      permission: faker.lorem.slug(1),
      permissions: {
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        admin: faker.datatype.boolean(),
      },
      url: faker.internet.url(),
      html_url: 'https://github.com/orgs/rails/teams/core',
      members_url: faker.internet.url(),
      repositories_url: faker.internet.url(),
      parent: {
        id: 1,
        node_id: 'MDQ6VGVhbTE=',
        url: 'https://api.github.com/organizations/1/team/1',
        members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
        name: 'Justice League',
        description: 'A great team.',
        permission: 'admin',
        privacy: 'closed',
        html_url: 'https://github.com/orgs/rails/teams/core',
        repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
        slug: 'justice-league',
        ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
      },
    })),
    head: {
      label: faker.lorem.slug(1),
      ref: faker.lorem.slug(1),
      repo: {
        id: 42,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Team Environment',
        full_name: 'octocat/Hello-World',
        license: {
          key: 'mit',
          name: 'MIT License',
          url: 'https://api.github.com/licenses/mit',
          spdx_id: 'MIT',
          node_id: 'MDc6TGljZW5zZW1pdA==',
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: 'git:github.com/octocat/Hello-World.git',
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: 'git@github.com:octocat/Hello-World.git',
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: 'https://github.com/octocat/Hello-World.git',
        mirror_url: 'git:git.example.com/octocat/Hello-World',
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: 'https://svn.github.com/octocat/Hello-World',
        homepage: 'https://github.com',
        language: faker.lorem.slug(1),
        forks_count: 9,
        stargazers_count: 80,
        watchers_count: 80,
        size: 108,
        default_branch: 'master',
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: true,
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: true,
        has_projects: true,
        has_wiki: true,
        has_pages: faker.datatype.boolean(),
        has_downloads: true,
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        allow_rebase_merge: true,
        template_repository: {
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          name: faker.person.fullName(),
          full_name: faker.person.fullName(),
          owner: {
            login: faker.lorem.slug(1),
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.internet.url(),
            gists_url: faker.internet.url(),
            starred_url: faker.internet.url(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(1),
            site_admin: faker.datatype.boolean(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(1),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.internet.url(),
          assignees_url: faker.internet.url(),
          blobs_url: faker.internet.url(),
          branches_url: faker.internet.url(),
          collaborators_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          compare_url: faker.internet.url(),
          contents_url: faker.internet.url(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.internet.url(),
          git_refs_url: faker.internet.url(),
          git_tags_url: faker.internet.url(),
          git_url: faker.internet.url(),
          issue_comment_url: faker.internet.url(),
          issue_events_url: faker.internet.url(),
          issues_url: faker.internet.url(),
          keys_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.internet.url(),
          notifications_url: faker.internet.url(),
          pulls_url: faker.internet.url(),
          releases_url: faker.internet.url(),
          ssh_url: faker.internet.url(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.internet.url(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.internet.url(),
          clone_url: faker.internet.url(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          forks_count: faker.number.int({ min: undefined, max: undefined }),
          stargazers_count: faker.number.int({ min: undefined, max: undefined }),
          watchers_count: faker.number.int({ min: undefined, max: undefined }),
          size: faker.number.int({ min: undefined, max: undefined }),
          default_branch: faker.lorem.slug(1),
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: faker.datatype.boolean(),
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: faker.date.past(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: true,
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: true,
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        master_branch: faker.lorem.slug(1),
        starred_at: '"2020-07-09T00:17:42Z"',
        anonymous_access_enabled: faker.datatype.boolean(),
      },
      sha: faker.lorem.slug(1),
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    base: {
      label: faker.lorem.slug(1),
      ref: faker.lorem.slug(1),
      repo: {
        id: 42,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Team Environment',
        full_name: 'octocat/Hello-World',
        license: {
          key: 'mit',
          name: 'MIT License',
          url: 'https://api.github.com/licenses/mit',
          spdx_id: 'MIT',
          node_id: 'MDc6TGljZW5zZW1pdA==',
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: 'git:github.com/octocat/Hello-World.git',
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: 'git@github.com:octocat/Hello-World.git',
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: 'https://github.com/octocat/Hello-World.git',
        mirror_url: 'git:git.example.com/octocat/Hello-World',
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: 'https://svn.github.com/octocat/Hello-World',
        homepage: 'https://github.com',
        language: faker.lorem.slug(1),
        forks_count: 9,
        stargazers_count: 80,
        watchers_count: 80,
        size: 108,
        default_branch: 'master',
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: true,
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: true,
        has_projects: true,
        has_wiki: true,
        has_pages: faker.datatype.boolean(),
        has_downloads: true,
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        allow_rebase_merge: true,
        template_repository: {
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          name: faker.person.fullName(),
          full_name: faker.person.fullName(),
          owner: {
            login: faker.lorem.slug(1),
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.internet.url(),
            gists_url: faker.internet.url(),
            starred_url: faker.internet.url(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(1),
            site_admin: faker.datatype.boolean(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(1),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.internet.url(),
          assignees_url: faker.internet.url(),
          blobs_url: faker.internet.url(),
          branches_url: faker.internet.url(),
          collaborators_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          compare_url: faker.internet.url(),
          contents_url: faker.internet.url(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.internet.url(),
          git_refs_url: faker.internet.url(),
          git_tags_url: faker.internet.url(),
          git_url: faker.internet.url(),
          issue_comment_url: faker.internet.url(),
          issue_events_url: faker.internet.url(),
          issues_url: faker.internet.url(),
          keys_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.internet.url(),
          notifications_url: faker.internet.url(),
          pulls_url: faker.internet.url(),
          releases_url: faker.internet.url(),
          ssh_url: faker.internet.url(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.internet.url(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.internet.url(),
          clone_url: faker.internet.url(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          forks_count: faker.number.int({ min: undefined, max: undefined }),
          stargazers_count: faker.number.int({ min: undefined, max: undefined }),
          watchers_count: faker.number.int({ min: undefined, max: undefined }),
          size: faker.number.int({ min: undefined, max: undefined }),
          default_branch: faker.lorem.slug(1),
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: faker.datatype.boolean(),
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: faker.date.past(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: true,
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: true,
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        master_branch: faker.lorem.slug(1),
        starred_at: '"2020-07-09T00:17:42Z"',
        anonymous_access_enabled: faker.datatype.boolean(),
      },
      sha: faker.lorem.slug(1),
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    _links: {
      comments: {
        href: faker.lorem.slug(1),
      },
      commits: {
        href: faker.lorem.slug(1),
      },
      statuses: {
        href: faker.lorem.slug(1),
      },
      html: {
        href: faker.lorem.slug(1),
      },
      issue: {
        href: faker.lorem.slug(1),
      },
      review_comments: {
        href: faker.lorem.slug(1),
      },
      review_comment: {
        href: faker.lorem.slug(1),
      },
      self: {
        href: faker.lorem.slug(1),
      },
    },
    author_association: 'OWNER',
    auto_merge: {
      enabled_by: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      merge_method: faker.helpers.arrayElement(['merge', 'squash', 'rebase']),
      commit_title: faker.lorem.slug(1),
      commit_message: faker.lorem.slug(1),
    },
    draft: faker.datatype.boolean(),
  }));
}

export function getPullsList422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getPullsCreate201Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347',
    id: 1,
    node_id: 'MDExOlB1bGxSZXF1ZXN0MQ==',
    html_url: 'https://github.com/octocat/Hello-World/pull/1347',
    diff_url: 'https://github.com/octocat/Hello-World/pull/1347.diff',
    patch_url: 'https://github.com/octocat/Hello-World/pull/1347.patch',
    issue_url: 'https://api.github.com/repos/octocat/Hello-World/issues/1347',
    commits_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits',
    review_comments_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments',
    review_comment_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}',
    comments_url: 'https://api.github.com/repos/octocat/Hello-World/issues/1347/comments',
    statuses_url: 'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    number: 42,
    state: 'open',
    locked: true,
    title: 'Amazing new feature',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'Please pull these awesome changes',
    labels: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      name: faker.person.fullName(),
      description: faker.lorem.slug(1),
      color: faker.lorem.slug(1),
      default: faker.datatype.boolean(),
    })),
    milestone: {
      url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
      html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
      labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
      id: 1002604,
      node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
      number: 42,
      state: 'open',
      title: 'v1.0',
      description: 'Tracking milestone for version 1.0',
      creator: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      open_issues: 4,
      closed_issues: 8,
      created_at: '2011-04-10T20:09:31Z',
      updated_at: '2014-03-03T18:58:10Z',
      closed_at: '2013-02-12T13:22:01Z',
      due_on: '2012-10-09T23:39:01Z',
    },
    active_lock_reason: 'too heated',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:01:12Z',
    closed_at: '2011-01-26T19:01:12Z',
    merged_at: '2011-01-26T19:01:12Z',
    merge_commit_sha: 'e5bd3914e2e596debea16f433f57875b5b90bcd6',
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    requested_reviewers: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    requested_teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    })),
    head: {
      label: faker.lorem.slug(1),
      ref: faker.lorem.slug(1),
      repo: {
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        fork: faker.datatype.boolean(),
        forks_url: faker.internet.url(),
        full_name: faker.person.fullName(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        html_url: faker.internet.url(),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        name: faker.person.fullName(),
        notifications_url: faker.internet.url(),
        owner: {
          avatar_url: faker.internet.url(),
          events_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          html_url: faker.internet.url(),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          login: faker.lorem.slug(1),
          organizations_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          site_admin: faker.datatype.boolean(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          url: faker.internet.url(),
        },
        private: faker.datatype.boolean(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        url: faker.internet.url(),
        clone_url: faker.internet.url(),
        default_branch: faker.lorem.slug(1),
        forks: faker.number.int({ min: undefined, max: undefined }),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        git_url: faker.internet.url(),
        has_downloads: faker.datatype.boolean(),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_discussions: faker.datatype.boolean(),
        homepage: faker.internet.url(),
        language: faker.lorem.slug(1),
        master_branch: faker.lorem.slug(1),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        mirror_url: faker.internet.url(),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_merge_commit: faker.datatype.boolean(),
        allow_squash_merge: faker.datatype.boolean(),
        allow_rebase_merge: faker.datatype.boolean(),
        license: {
          key: faker.lorem.slug(1),
          name: faker.person.fullName(),
          url: faker.internet.url(),
          spdx_id: faker.lorem.slug(1),
          node_id: faker.lorem.slug(1),
        },
        pushed_at: faker.date.past(),
        size: faker.number.int({ min: undefined, max: undefined }),
        ssh_url: faker.internet.url(),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        svn_url: faker.internet.url(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        allow_forking: faker.datatype.boolean(),
        is_template: faker.datatype.boolean(),
      },
      sha: faker.lorem.slug(1),
      user: {
        avatar_url: faker.internet.url(),
        events_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        html_url: faker.internet.url(),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        login: faker.lorem.slug(1),
        organizations_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        site_admin: faker.datatype.boolean(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        url: faker.internet.url(),
      },
    },
    base: {
      label: faker.lorem.slug(1),
      ref: faker.lorem.slug(1),
      repo: {
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        fork: faker.datatype.boolean(),
        forks_url: faker.internet.url(),
        full_name: faker.person.fullName(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        html_url: faker.internet.url(),
        id: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        node_id: faker.lorem.slug(1),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        name: faker.person.fullName(),
        notifications_url: faker.internet.url(),
        owner: {
          avatar_url: faker.internet.url(),
          events_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          html_url: faker.internet.url(),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          login: faker.lorem.slug(1),
          organizations_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          site_admin: faker.datatype.boolean(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          url: faker.internet.url(),
        },
        private: faker.datatype.boolean(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        url: faker.internet.url(),
        clone_url: faker.internet.url(),
        default_branch: faker.lorem.slug(1),
        forks: faker.number.int({ min: undefined, max: undefined }),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        git_url: faker.internet.url(),
        has_downloads: faker.datatype.boolean(),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_discussions: faker.datatype.boolean(),
        homepage: faker.internet.url(),
        language: faker.lorem.slug(1),
        master_branch: faker.lorem.slug(1),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        mirror_url: faker.internet.url(),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_merge_commit: faker.datatype.boolean(),
        allow_squash_merge: faker.datatype.boolean(),
        allow_rebase_merge: faker.datatype.boolean(),
        license: {
          key: 'mit',
          name: 'MIT License',
          url: 'https://api.github.com/licenses/mit',
          spdx_id: 'MIT',
          node_id: 'MDc6TGljZW5zZW1pdA==',
          html_url: faker.internet.url(),
        },
        pushed_at: faker.date.past(),
        size: faker.number.int({ min: undefined, max: undefined }),
        ssh_url: faker.internet.url(),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        svn_url: faker.internet.url(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        allow_forking: faker.datatype.boolean(),
      },
      sha: faker.lorem.slug(1),
      user: {
        avatar_url: faker.internet.url(),
        events_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        html_url: faker.internet.url(),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        login: faker.lorem.slug(1),
        organizations_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        site_admin: faker.datatype.boolean(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        url: faker.internet.url(),
      },
    },
    _links: {
      comments: {
        href: faker.lorem.slug(1),
      },
      commits: {
        href: faker.lorem.slug(1),
      },
      statuses: {
        href: faker.lorem.slug(1),
      },
      html: {
        href: faker.lorem.slug(1),
      },
      issue: {
        href: faker.lorem.slug(1),
      },
      review_comments: {
        href: faker.lorem.slug(1),
      },
      review_comment: {
        href: faker.lorem.slug(1),
      },
      self: {
        href: faker.lorem.slug(1),
      },
    },
    author_association: 'OWNER',
    auto_merge: {
      enabled_by: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      merge_method: faker.helpers.arrayElement(['merge', 'squash', 'rebase']),
      commit_title: faker.lorem.slug(1),
      commit_message: faker.lorem.slug(1),
    },
    draft: faker.datatype.boolean(),
    merged: faker.datatype.boolean(),
    mergeable: true,
    rebaseable: true,
    mergeable_state: 'clean',
    merged_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    comments: 10,
    review_comments: faker.number.int({ min: undefined, max: undefined }),
    maintainer_can_modify: true,
    commits: 3,
    additions: 100,
    deletions: 3,
    changed_files: 5,
  };
}

export function getPullsCreate403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsCreate422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getPullsListReviewCommentsForRepo200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
    pull_request_review_id: 42,
    id: 1,
    node_id: 'MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw',
    diff_hunk: '@@ -16,33 +16,40 @@ public class Connection : IConnection...',
    path: 'config/database.yaml',
    position: 1,
    original_position: 4,
    commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
    original_commit_id: '9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840',
    in_reply_to_id: 8,
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'We should probably include a check for null values here.',
    created_at: '2011-04-14T16:00:49Z',
    updated_at: '2011-04-14T16:00:49Z',
    html_url: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
    pull_request_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
    author_association: 'OWNER',
    _links: {
      self: {
        href: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
      },
      html: {
        href: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
      },
      pull_request: {
        href: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
      },
    },
    start_line: 2,
    original_start_line: 2,
    start_side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
    line: 2,
    original_line: 2,
    side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
    body_html: '"<p>comment body</p>"',
    body_text: '"comment body"',
  }));
}

export function getPullsGetReviewComment200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
    pull_request_review_id: 42,
    id: 1,
    node_id: 'MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw',
    diff_hunk: '@@ -16,33 +16,40 @@ public class Connection : IConnection...',
    path: 'config/database.yaml',
    position: 1,
    original_position: 4,
    commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
    original_commit_id: '9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840',
    in_reply_to_id: 8,
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'We should probably include a check for null values here.',
    created_at: '2011-04-14T16:00:49Z',
    updated_at: '2011-04-14T16:00:49Z',
    html_url: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
    pull_request_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
    author_association: 'OWNER',
    _links: {
      self: {
        href: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
      },
      html: {
        href: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
      },
      pull_request: {
        href: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
      },
    },
    start_line: 2,
    original_start_line: 2,
    start_side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
    line: 2,
    original_line: 2,
    side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
    body_html: '"<p>comment body</p>"',
    body_text: '"comment body"',
  };
}

export function getPullsGetReviewComment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsUpdateReviewComment200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
    pull_request_review_id: 42,
    id: 1,
    node_id: 'MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw',
    diff_hunk: '@@ -16,33 +16,40 @@ public class Connection : IConnection...',
    path: 'config/database.yaml',
    position: 1,
    original_position: 4,
    commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
    original_commit_id: '9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840',
    in_reply_to_id: 8,
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'We should probably include a check for null values here.',
    created_at: '2011-04-14T16:00:49Z',
    updated_at: '2011-04-14T16:00:49Z',
    html_url: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
    pull_request_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
    author_association: 'OWNER',
    _links: {
      self: {
        href: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
      },
      html: {
        href: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
      },
      pull_request: {
        href: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
      },
    },
    start_line: 2,
    original_start_line: 2,
    start_side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
    line: 2,
    original_line: 2,
    side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
    body_html: '"<p>comment body</p>"',
    body_text: '"comment body"',
  };
}

export function getPullsDeleteReviewComment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReactionsListForPullRequestReviewComment200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  }));
}

export function getReactionsListForPullRequestReviewComment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReactionsCreateForPullRequestReviewComment200Response() {
  return {
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  };
}

export function getReactionsCreateForPullRequestReviewComment201Response() {
  return {
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  };
}

export function getReactionsCreateForPullRequestReviewComment422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getPullsGet200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347',
    id: 1,
    node_id: 'MDExOlB1bGxSZXF1ZXN0MQ==',
    html_url: 'https://github.com/octocat/Hello-World/pull/1347',
    diff_url: 'https://github.com/octocat/Hello-World/pull/1347.diff',
    patch_url: 'https://github.com/octocat/Hello-World/pull/1347.patch',
    issue_url: 'https://api.github.com/repos/octocat/Hello-World/issues/1347',
    commits_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits',
    review_comments_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments',
    review_comment_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}',
    comments_url: 'https://api.github.com/repos/octocat/Hello-World/issues/1347/comments',
    statuses_url: 'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    number: 42,
    state: 'open',
    locked: true,
    title: 'Amazing new feature',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'Please pull these awesome changes',
    labels: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      name: faker.person.fullName(),
      description: faker.lorem.slug(1),
      color: faker.lorem.slug(1),
      default: faker.datatype.boolean(),
    })),
    milestone: {
      url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
      html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
      labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
      id: 1002604,
      node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
      number: 42,
      state: 'open',
      title: 'v1.0',
      description: 'Tracking milestone for version 1.0',
      creator: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      open_issues: 4,
      closed_issues: 8,
      created_at: '2011-04-10T20:09:31Z',
      updated_at: '2014-03-03T18:58:10Z',
      closed_at: '2013-02-12T13:22:01Z',
      due_on: '2012-10-09T23:39:01Z',
    },
    active_lock_reason: 'too heated',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:01:12Z',
    closed_at: '2011-01-26T19:01:12Z',
    merged_at: '2011-01-26T19:01:12Z',
    merge_commit_sha: 'e5bd3914e2e596debea16f433f57875b5b90bcd6',
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    requested_reviewers: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    requested_teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    })),
    head: {
      label: faker.lorem.slug(1),
      ref: faker.lorem.slug(1),
      repo: {
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        fork: faker.datatype.boolean(),
        forks_url: faker.internet.url(),
        full_name: faker.person.fullName(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        html_url: faker.internet.url(),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        name: faker.person.fullName(),
        notifications_url: faker.internet.url(),
        owner: {
          avatar_url: faker.internet.url(),
          events_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          html_url: faker.internet.url(),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          login: faker.lorem.slug(1),
          organizations_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          site_admin: faker.datatype.boolean(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          url: faker.internet.url(),
        },
        private: faker.datatype.boolean(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        url: faker.internet.url(),
        clone_url: faker.internet.url(),
        default_branch: faker.lorem.slug(1),
        forks: faker.number.int({ min: undefined, max: undefined }),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        git_url: faker.internet.url(),
        has_downloads: faker.datatype.boolean(),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_discussions: faker.datatype.boolean(),
        homepage: faker.internet.url(),
        language: faker.lorem.slug(1),
        master_branch: faker.lorem.slug(1),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        mirror_url: faker.internet.url(),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_merge_commit: faker.datatype.boolean(),
        allow_squash_merge: faker.datatype.boolean(),
        allow_rebase_merge: faker.datatype.boolean(),
        license: {
          key: faker.lorem.slug(1),
          name: faker.person.fullName(),
          url: faker.internet.url(),
          spdx_id: faker.lorem.slug(1),
          node_id: faker.lorem.slug(1),
        },
        pushed_at: faker.date.past(),
        size: faker.number.int({ min: undefined, max: undefined }),
        ssh_url: faker.internet.url(),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        svn_url: faker.internet.url(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        allow_forking: faker.datatype.boolean(),
        is_template: faker.datatype.boolean(),
      },
      sha: faker.lorem.slug(1),
      user: {
        avatar_url: faker.internet.url(),
        events_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        html_url: faker.internet.url(),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        login: faker.lorem.slug(1),
        organizations_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        site_admin: faker.datatype.boolean(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        url: faker.internet.url(),
      },
    },
    base: {
      label: faker.lorem.slug(1),
      ref: faker.lorem.slug(1),
      repo: {
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        fork: faker.datatype.boolean(),
        forks_url: faker.internet.url(),
        full_name: faker.person.fullName(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        html_url: faker.internet.url(),
        id: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        node_id: faker.lorem.slug(1),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        name: faker.person.fullName(),
        notifications_url: faker.internet.url(),
        owner: {
          avatar_url: faker.internet.url(),
          events_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          html_url: faker.internet.url(),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          login: faker.lorem.slug(1),
          organizations_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          site_admin: faker.datatype.boolean(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          url: faker.internet.url(),
        },
        private: faker.datatype.boolean(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        url: faker.internet.url(),
        clone_url: faker.internet.url(),
        default_branch: faker.lorem.slug(1),
        forks: faker.number.int({ min: undefined, max: undefined }),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        git_url: faker.internet.url(),
        has_downloads: faker.datatype.boolean(),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_discussions: faker.datatype.boolean(),
        homepage: faker.internet.url(),
        language: faker.lorem.slug(1),
        master_branch: faker.lorem.slug(1),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        mirror_url: faker.internet.url(),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_merge_commit: faker.datatype.boolean(),
        allow_squash_merge: faker.datatype.boolean(),
        allow_rebase_merge: faker.datatype.boolean(),
        license: {
          key: 'mit',
          name: 'MIT License',
          url: 'https://api.github.com/licenses/mit',
          spdx_id: 'MIT',
          node_id: 'MDc6TGljZW5zZW1pdA==',
          html_url: faker.internet.url(),
        },
        pushed_at: faker.date.past(),
        size: faker.number.int({ min: undefined, max: undefined }),
        ssh_url: faker.internet.url(),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        svn_url: faker.internet.url(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        allow_forking: faker.datatype.boolean(),
      },
      sha: faker.lorem.slug(1),
      user: {
        avatar_url: faker.internet.url(),
        events_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        html_url: faker.internet.url(),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        login: faker.lorem.slug(1),
        organizations_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        site_admin: faker.datatype.boolean(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        url: faker.internet.url(),
      },
    },
    _links: {
      comments: {
        href: faker.lorem.slug(1),
      },
      commits: {
        href: faker.lorem.slug(1),
      },
      statuses: {
        href: faker.lorem.slug(1),
      },
      html: {
        href: faker.lorem.slug(1),
      },
      issue: {
        href: faker.lorem.slug(1),
      },
      review_comments: {
        href: faker.lorem.slug(1),
      },
      review_comment: {
        href: faker.lorem.slug(1),
      },
      self: {
        href: faker.lorem.slug(1),
      },
    },
    author_association: 'OWNER',
    auto_merge: {
      enabled_by: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      merge_method: faker.helpers.arrayElement(['merge', 'squash', 'rebase']),
      commit_title: faker.lorem.slug(1),
      commit_message: faker.lorem.slug(1),
    },
    draft: faker.datatype.boolean(),
    merged: faker.datatype.boolean(),
    mergeable: true,
    rebaseable: true,
    mergeable_state: 'clean',
    merged_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    comments: 10,
    review_comments: faker.number.int({ min: undefined, max: undefined }),
    maintainer_can_modify: true,
    commits: 3,
    additions: 100,
    deletions: 3,
    changed_files: 5,
  };
}

export function getPullsGet404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsGet500Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsGet503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getPullsUpdate200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347',
    id: 1,
    node_id: 'MDExOlB1bGxSZXF1ZXN0MQ==',
    html_url: 'https://github.com/octocat/Hello-World/pull/1347',
    diff_url: 'https://github.com/octocat/Hello-World/pull/1347.diff',
    patch_url: 'https://github.com/octocat/Hello-World/pull/1347.patch',
    issue_url: 'https://api.github.com/repos/octocat/Hello-World/issues/1347',
    commits_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits',
    review_comments_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments',
    review_comment_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}',
    comments_url: 'https://api.github.com/repos/octocat/Hello-World/issues/1347/comments',
    statuses_url: 'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    number: 42,
    state: 'open',
    locked: true,
    title: 'Amazing new feature',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'Please pull these awesome changes',
    labels: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      name: faker.person.fullName(),
      description: faker.lorem.slug(1),
      color: faker.lorem.slug(1),
      default: faker.datatype.boolean(),
    })),
    milestone: {
      url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
      html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
      labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
      id: 1002604,
      node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
      number: 42,
      state: 'open',
      title: 'v1.0',
      description: 'Tracking milestone for version 1.0',
      creator: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      open_issues: 4,
      closed_issues: 8,
      created_at: '2011-04-10T20:09:31Z',
      updated_at: '2014-03-03T18:58:10Z',
      closed_at: '2013-02-12T13:22:01Z',
      due_on: '2012-10-09T23:39:01Z',
    },
    active_lock_reason: 'too heated',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:01:12Z',
    closed_at: '2011-01-26T19:01:12Z',
    merged_at: '2011-01-26T19:01:12Z',
    merge_commit_sha: 'e5bd3914e2e596debea16f433f57875b5b90bcd6',
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    requested_reviewers: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    requested_teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    })),
    head: {
      label: faker.lorem.slug(1),
      ref: faker.lorem.slug(1),
      repo: {
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        fork: faker.datatype.boolean(),
        forks_url: faker.internet.url(),
        full_name: faker.person.fullName(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        html_url: faker.internet.url(),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        name: faker.person.fullName(),
        notifications_url: faker.internet.url(),
        owner: {
          avatar_url: faker.internet.url(),
          events_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          html_url: faker.internet.url(),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          login: faker.lorem.slug(1),
          organizations_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          site_admin: faker.datatype.boolean(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          url: faker.internet.url(),
        },
        private: faker.datatype.boolean(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        url: faker.internet.url(),
        clone_url: faker.internet.url(),
        default_branch: faker.lorem.slug(1),
        forks: faker.number.int({ min: undefined, max: undefined }),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        git_url: faker.internet.url(),
        has_downloads: faker.datatype.boolean(),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_discussions: faker.datatype.boolean(),
        homepage: faker.internet.url(),
        language: faker.lorem.slug(1),
        master_branch: faker.lorem.slug(1),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        mirror_url: faker.internet.url(),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_merge_commit: faker.datatype.boolean(),
        allow_squash_merge: faker.datatype.boolean(),
        allow_rebase_merge: faker.datatype.boolean(),
        license: {
          key: faker.lorem.slug(1),
          name: faker.person.fullName(),
          url: faker.internet.url(),
          spdx_id: faker.lorem.slug(1),
          node_id: faker.lorem.slug(1),
        },
        pushed_at: faker.date.past(),
        size: faker.number.int({ min: undefined, max: undefined }),
        ssh_url: faker.internet.url(),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        svn_url: faker.internet.url(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        allow_forking: faker.datatype.boolean(),
        is_template: faker.datatype.boolean(),
      },
      sha: faker.lorem.slug(1),
      user: {
        avatar_url: faker.internet.url(),
        events_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        html_url: faker.internet.url(),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        login: faker.lorem.slug(1),
        organizations_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        site_admin: faker.datatype.boolean(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        url: faker.internet.url(),
      },
    },
    base: {
      label: faker.lorem.slug(1),
      ref: faker.lorem.slug(1),
      repo: {
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        fork: faker.datatype.boolean(),
        forks_url: faker.internet.url(),
        full_name: faker.person.fullName(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        html_url: faker.internet.url(),
        id: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        node_id: faker.lorem.slug(1),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        name: faker.person.fullName(),
        notifications_url: faker.internet.url(),
        owner: {
          avatar_url: faker.internet.url(),
          events_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          html_url: faker.internet.url(),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          login: faker.lorem.slug(1),
          organizations_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          site_admin: faker.datatype.boolean(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          url: faker.internet.url(),
        },
        private: faker.datatype.boolean(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        url: faker.internet.url(),
        clone_url: faker.internet.url(),
        default_branch: faker.lorem.slug(1),
        forks: faker.number.int({ min: undefined, max: undefined }),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        git_url: faker.internet.url(),
        has_downloads: faker.datatype.boolean(),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_discussions: faker.datatype.boolean(),
        homepage: faker.internet.url(),
        language: faker.lorem.slug(1),
        master_branch: faker.lorem.slug(1),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        mirror_url: faker.internet.url(),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_merge_commit: faker.datatype.boolean(),
        allow_squash_merge: faker.datatype.boolean(),
        allow_rebase_merge: faker.datatype.boolean(),
        license: {
          key: 'mit',
          name: 'MIT License',
          url: 'https://api.github.com/licenses/mit',
          spdx_id: 'MIT',
          node_id: 'MDc6TGljZW5zZW1pdA==',
          html_url: faker.internet.url(),
        },
        pushed_at: faker.date.past(),
        size: faker.number.int({ min: undefined, max: undefined }),
        ssh_url: faker.internet.url(),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        svn_url: faker.internet.url(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        allow_forking: faker.datatype.boolean(),
      },
      sha: faker.lorem.slug(1),
      user: {
        avatar_url: faker.internet.url(),
        events_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        html_url: faker.internet.url(),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        login: faker.lorem.slug(1),
        organizations_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        site_admin: faker.datatype.boolean(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        url: faker.internet.url(),
      },
    },
    _links: {
      comments: {
        href: faker.lorem.slug(1),
      },
      commits: {
        href: faker.lorem.slug(1),
      },
      statuses: {
        href: faker.lorem.slug(1),
      },
      html: {
        href: faker.lorem.slug(1),
      },
      issue: {
        href: faker.lorem.slug(1),
      },
      review_comments: {
        href: faker.lorem.slug(1),
      },
      review_comment: {
        href: faker.lorem.slug(1),
      },
      self: {
        href: faker.lorem.slug(1),
      },
    },
    author_association: 'OWNER',
    auto_merge: {
      enabled_by: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      merge_method: faker.helpers.arrayElement(['merge', 'squash', 'rebase']),
      commit_title: faker.lorem.slug(1),
      commit_message: faker.lorem.slug(1),
    },
    draft: faker.datatype.boolean(),
    merged: faker.datatype.boolean(),
    mergeable: true,
    rebaseable: true,
    mergeable_state: 'clean',
    merged_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    comments: 10,
    review_comments: faker.number.int({ min: undefined, max: undefined }),
    maintainer_can_modify: true,
    commits: 3,
    additions: 100,
    deletions: 3,
    changed_files: 5,
  };
}

export function getPullsUpdate403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsUpdate422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getPullsListReviewComments200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
    pull_request_review_id: 42,
    id: 1,
    node_id: 'MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw',
    diff_hunk: '@@ -16,33 +16,40 @@ public class Connection : IConnection...',
    path: 'config/database.yaml',
    position: 1,
    original_position: 4,
    commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
    original_commit_id: '9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840',
    in_reply_to_id: 8,
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'We should probably include a check for null values here.',
    created_at: '2011-04-14T16:00:49Z',
    updated_at: '2011-04-14T16:00:49Z',
    html_url: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
    pull_request_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
    author_association: 'OWNER',
    _links: {
      self: {
        href: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
      },
      html: {
        href: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
      },
      pull_request: {
        href: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
      },
    },
    start_line: 2,
    original_start_line: 2,
    start_side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
    line: 2,
    original_line: 2,
    side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
    body_html: '"<p>comment body</p>"',
    body_text: '"comment body"',
  }));
}

export function getPullsCreateReviewComment201Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
    pull_request_review_id: 42,
    id: 1,
    node_id: 'MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw',
    diff_hunk: '@@ -16,33 +16,40 @@ public class Connection : IConnection...',
    path: 'config/database.yaml',
    position: 1,
    original_position: 4,
    commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
    original_commit_id: '9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840',
    in_reply_to_id: 8,
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'We should probably include a check for null values here.',
    created_at: '2011-04-14T16:00:49Z',
    updated_at: '2011-04-14T16:00:49Z',
    html_url: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
    pull_request_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
    author_association: 'OWNER',
    _links: {
      self: {
        href: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
      },
      html: {
        href: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
      },
      pull_request: {
        href: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
      },
    },
    start_line: 2,
    original_start_line: 2,
    start_side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
    line: 2,
    original_line: 2,
    side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
    body_html: '"<p>comment body</p>"',
    body_text: '"comment body"',
  };
}

export function getPullsCreateReviewComment403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsCreateReviewComment422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getPullsCreateReplyForReviewComment201Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
    pull_request_review_id: 42,
    id: 1,
    node_id: 'MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw',
    diff_hunk: '@@ -16,33 +16,40 @@ public class Connection : IConnection...',
    path: 'config/database.yaml',
    position: 1,
    original_position: 4,
    commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
    original_commit_id: '9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840',
    in_reply_to_id: 8,
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'We should probably include a check for null values here.',
    created_at: '2011-04-14T16:00:49Z',
    updated_at: '2011-04-14T16:00:49Z',
    html_url: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
    pull_request_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
    author_association: 'OWNER',
    _links: {
      self: {
        href: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
      },
      html: {
        href: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
      },
      pull_request: {
        href: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
      },
    },
    start_line: 2,
    original_start_line: 2,
    start_side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
    line: 2,
    original_line: 2,
    side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
    body_html: '"<p>comment body</p>"',
    body_text: '"comment body"',
  };
}

export function getPullsCreateReplyForReviewComment404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsListCommits200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
    node_id: 'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==',
    html_url: 'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    comments_url:
      'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
    commit: {
      url: 'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
      author: {
        name: '"Chris Wanstrath"',
        email: '"chris@ozmm.org"',
        date: '"2007-10-29T02:42:39.000-07:00"',
      },
      committer: {
        name: '"Chris Wanstrath"',
        email: '"chris@ozmm.org"',
        date: '"2007-10-29T02:42:39.000-07:00"',
      },
      message: 'Fix all the bugs',
      comment_count: faker.number.int({ min: undefined, max: undefined }),
      tree: {
        sha: '827efc6d56897b048c772eb4087f854f46256132',
        url: 'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
      },
      verification: {
        verified: faker.datatype.boolean(),
        reason: faker.lorem.slug(1),
        payload: faker.lorem.slug(1),
        signature: faker.lorem.slug(1),
      },
    },
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    committer: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    parents: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      sha: '7638417db6d59f3c431d3e1f261cc637155684cd',
      url: 'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
      html_url: 'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
    })),
    stats: {
      additions: faker.number.int({ min: undefined, max: undefined }),
      deletions: faker.number.int({ min: undefined, max: undefined }),
      total: faker.number.int({ min: undefined, max: undefined }),
    },
    files: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
      filename: 'file1.txt',
      status: 'added',
      additions: 103,
      deletions: 21,
      changes: 124,
      blob_url: 'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
      raw_url: 'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
      contents_url:
        'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
      patch: '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
      previous_filename: 'file.txt',
    })),
  }));
}

export function getPullsListFiles200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    sha: 'bbcd538c8e72b8c175046e27cc8f907076331401',
    filename: 'file1.txt',
    status: 'added',
    additions: 103,
    deletions: 21,
    changes: 124,
    blob_url: 'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
    raw_url: 'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
    contents_url:
      'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
    patch: '@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test',
    previous_filename: 'file.txt',
  }));
}

export function getPullsListFiles422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getPullsListFiles500Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsListFiles503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getPullsMerge200Response() {
  return {
    sha: faker.lorem.slug(1),
    merged: faker.datatype.boolean(),
    message: faker.lorem.slug(1),
  };
}

export function getPullsMerge403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsMerge404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsMerge405Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getPullsMerge409Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getPullsMerge422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getPullsListRequestedReviewers200Response() {
  return {
    users: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      slug: faker.lorem.slug(1),
      description: faker.lorem.slug(1),
      privacy: faker.lorem.slug(1),
      permission: faker.lorem.slug(1),
      permissions: {
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        admin: faker.datatype.boolean(),
      },
      url: faker.internet.url(),
      html_url: 'https://github.com/orgs/rails/teams/core',
      members_url: faker.internet.url(),
      repositories_url: faker.internet.url(),
      parent: {
        id: 1,
        node_id: 'MDQ6VGVhbTE=',
        url: 'https://api.github.com/organizations/1/team/1',
        members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
        name: 'Justice League',
        description: 'A great team.',
        permission: 'admin',
        privacy: 'closed',
        html_url: 'https://github.com/orgs/rails/teams/core',
        repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
        slug: 'justice-league',
        ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
      },
    })),
  };
}

export function getPullsRequestReviewers201Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347',
    id: 1,
    node_id: 'MDExOlB1bGxSZXF1ZXN0MQ==',
    html_url: 'https://github.com/octocat/Hello-World/pull/1347',
    diff_url: 'https://github.com/octocat/Hello-World/pull/1347.diff',
    patch_url: 'https://github.com/octocat/Hello-World/pull/1347.patch',
    issue_url: 'https://api.github.com/repos/octocat/Hello-World/issues/1347',
    commits_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits',
    review_comments_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments',
    review_comment_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}',
    comments_url: 'https://api.github.com/repos/octocat/Hello-World/issues/1347/comments',
    statuses_url: 'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    number: 1347,
    state: 'open',
    locked: true,
    title: 'new-feature',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'Please pull these awesome changes',
    labels: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      name: faker.person.fullName(),
      description: faker.lorem.slug(1),
      color: faker.lorem.slug(1),
      default: faker.datatype.boolean(),
    })),
    milestone: {
      url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
      html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
      labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
      id: 1002604,
      node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
      number: 42,
      state: 'open',
      title: 'v1.0',
      description: 'Tracking milestone for version 1.0',
      creator: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      open_issues: 4,
      closed_issues: 8,
      created_at: '2011-04-10T20:09:31Z',
      updated_at: '2014-03-03T18:58:10Z',
      closed_at: '2013-02-12T13:22:01Z',
      due_on: '2012-10-09T23:39:01Z',
    },
    active_lock_reason: 'too heated',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:01:12Z',
    closed_at: '2011-01-26T19:01:12Z',
    merged_at: '2011-01-26T19:01:12Z',
    merge_commit_sha: 'e5bd3914e2e596debea16f433f57875b5b90bcd6',
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    requested_reviewers: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    requested_teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      slug: faker.lorem.slug(1),
      description: faker.lorem.slug(1),
      privacy: faker.lorem.slug(1),
      permission: faker.lorem.slug(1),
      permissions: {
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        admin: faker.datatype.boolean(),
      },
      url: faker.internet.url(),
      html_url: 'https://github.com/orgs/rails/teams/core',
      members_url: faker.internet.url(),
      repositories_url: faker.internet.url(),
      parent: {
        id: 1,
        node_id: 'MDQ6VGVhbTE=',
        url: 'https://api.github.com/organizations/1/team/1',
        members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
        name: 'Justice League',
        description: 'A great team.',
        permission: 'admin',
        privacy: 'closed',
        html_url: 'https://github.com/orgs/rails/teams/core',
        repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
        slug: 'justice-league',
        ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
      },
    })),
    head: {
      label: faker.lorem.slug(1),
      ref: faker.lorem.slug(1),
      repo: {
        id: 42,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Team Environment',
        full_name: 'octocat/Hello-World',
        license: {
          key: 'mit',
          name: 'MIT License',
          url: 'https://api.github.com/licenses/mit',
          spdx_id: 'MIT',
          node_id: 'MDc6TGljZW5zZW1pdA==',
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: 'git:github.com/octocat/Hello-World.git',
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: 'git@github.com:octocat/Hello-World.git',
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: 'https://github.com/octocat/Hello-World.git',
        mirror_url: 'git:git.example.com/octocat/Hello-World',
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: 'https://svn.github.com/octocat/Hello-World',
        homepage: 'https://github.com',
        language: faker.lorem.slug(1),
        forks_count: 9,
        stargazers_count: 80,
        watchers_count: 80,
        size: 108,
        default_branch: 'master',
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: true,
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: true,
        has_projects: true,
        has_wiki: true,
        has_pages: faker.datatype.boolean(),
        has_downloads: true,
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        allow_rebase_merge: true,
        template_repository: {
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          name: faker.person.fullName(),
          full_name: faker.person.fullName(),
          owner: {
            login: faker.lorem.slug(1),
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.internet.url(),
            gists_url: faker.internet.url(),
            starred_url: faker.internet.url(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(1),
            site_admin: faker.datatype.boolean(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(1),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.internet.url(),
          assignees_url: faker.internet.url(),
          blobs_url: faker.internet.url(),
          branches_url: faker.internet.url(),
          collaborators_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          compare_url: faker.internet.url(),
          contents_url: faker.internet.url(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.internet.url(),
          git_refs_url: faker.internet.url(),
          git_tags_url: faker.internet.url(),
          git_url: faker.internet.url(),
          issue_comment_url: faker.internet.url(),
          issue_events_url: faker.internet.url(),
          issues_url: faker.internet.url(),
          keys_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.internet.url(),
          notifications_url: faker.internet.url(),
          pulls_url: faker.internet.url(),
          releases_url: faker.internet.url(),
          ssh_url: faker.internet.url(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.internet.url(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.internet.url(),
          clone_url: faker.internet.url(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          forks_count: faker.number.int({ min: undefined, max: undefined }),
          stargazers_count: faker.number.int({ min: undefined, max: undefined }),
          watchers_count: faker.number.int({ min: undefined, max: undefined }),
          size: faker.number.int({ min: undefined, max: undefined }),
          default_branch: faker.lorem.slug(1),
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: faker.datatype.boolean(),
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: faker.date.past(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: true,
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: true,
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        master_branch: faker.lorem.slug(1),
        starred_at: '"2020-07-09T00:17:42Z"',
        anonymous_access_enabled: faker.datatype.boolean(),
      },
      sha: faker.lorem.slug(1),
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    base: {
      label: faker.lorem.slug(1),
      ref: faker.lorem.slug(1),
      repo: {
        id: 42,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Team Environment',
        full_name: 'octocat/Hello-World',
        license: {
          key: 'mit',
          name: 'MIT License',
          url: 'https://api.github.com/licenses/mit',
          spdx_id: 'MIT',
          node_id: 'MDc6TGljZW5zZW1pdA==',
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: 'git:github.com/octocat/Hello-World.git',
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: 'git@github.com:octocat/Hello-World.git',
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: 'https://github.com/octocat/Hello-World.git',
        mirror_url: 'git:git.example.com/octocat/Hello-World',
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: 'https://svn.github.com/octocat/Hello-World',
        homepage: 'https://github.com',
        language: faker.lorem.slug(1),
        forks_count: 9,
        stargazers_count: 80,
        watchers_count: 80,
        size: 108,
        default_branch: 'master',
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: true,
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: true,
        has_projects: true,
        has_wiki: true,
        has_pages: faker.datatype.boolean(),
        has_downloads: true,
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        allow_rebase_merge: true,
        template_repository: {
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          name: faker.person.fullName(),
          full_name: faker.person.fullName(),
          owner: {
            login: faker.lorem.slug(1),
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.internet.url(),
            gists_url: faker.internet.url(),
            starred_url: faker.internet.url(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(1),
            site_admin: faker.datatype.boolean(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(1),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.internet.url(),
          assignees_url: faker.internet.url(),
          blobs_url: faker.internet.url(),
          branches_url: faker.internet.url(),
          collaborators_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          compare_url: faker.internet.url(),
          contents_url: faker.internet.url(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.internet.url(),
          git_refs_url: faker.internet.url(),
          git_tags_url: faker.internet.url(),
          git_url: faker.internet.url(),
          issue_comment_url: faker.internet.url(),
          issue_events_url: faker.internet.url(),
          issues_url: faker.internet.url(),
          keys_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.internet.url(),
          notifications_url: faker.internet.url(),
          pulls_url: faker.internet.url(),
          releases_url: faker.internet.url(),
          ssh_url: faker.internet.url(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.internet.url(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.internet.url(),
          clone_url: faker.internet.url(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          forks_count: faker.number.int({ min: undefined, max: undefined }),
          stargazers_count: faker.number.int({ min: undefined, max: undefined }),
          watchers_count: faker.number.int({ min: undefined, max: undefined }),
          size: faker.number.int({ min: undefined, max: undefined }),
          default_branch: faker.lorem.slug(1),
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: faker.datatype.boolean(),
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: faker.date.past(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: true,
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: true,
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        master_branch: faker.lorem.slug(1),
        starred_at: '"2020-07-09T00:17:42Z"',
        anonymous_access_enabled: faker.datatype.boolean(),
      },
      sha: faker.lorem.slug(1),
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    _links: {
      comments: {
        href: faker.lorem.slug(1),
      },
      commits: {
        href: faker.lorem.slug(1),
      },
      statuses: {
        href: faker.lorem.slug(1),
      },
      html: {
        href: faker.lorem.slug(1),
      },
      issue: {
        href: faker.lorem.slug(1),
      },
      review_comments: {
        href: faker.lorem.slug(1),
      },
      review_comment: {
        href: faker.lorem.slug(1),
      },
      self: {
        href: faker.lorem.slug(1),
      },
    },
    author_association: 'OWNER',
    auto_merge: {
      enabled_by: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      merge_method: faker.helpers.arrayElement(['merge', 'squash', 'rebase']),
      commit_title: faker.lorem.slug(1),
      commit_message: faker.lorem.slug(1),
    },
    draft: faker.datatype.boolean(),
  };
}

export function getPullsRequestReviewers403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsRemoveRequestedReviewers200Response() {
  return {
    url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347',
    id: 1,
    node_id: 'MDExOlB1bGxSZXF1ZXN0MQ==',
    html_url: 'https://github.com/octocat/Hello-World/pull/1347',
    diff_url: 'https://github.com/octocat/Hello-World/pull/1347.diff',
    patch_url: 'https://github.com/octocat/Hello-World/pull/1347.patch',
    issue_url: 'https://api.github.com/repos/octocat/Hello-World/issues/1347',
    commits_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits',
    review_comments_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments',
    review_comment_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}',
    comments_url: 'https://api.github.com/repos/octocat/Hello-World/issues/1347/comments',
    statuses_url: 'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    number: 1347,
    state: 'open',
    locked: true,
    title: 'new-feature',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'Please pull these awesome changes',
    labels: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      name: faker.person.fullName(),
      description: faker.lorem.slug(1),
      color: faker.lorem.slug(1),
      default: faker.datatype.boolean(),
    })),
    milestone: {
      url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
      html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
      labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
      id: 1002604,
      node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
      number: 42,
      state: 'open',
      title: 'v1.0',
      description: 'Tracking milestone for version 1.0',
      creator: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      open_issues: 4,
      closed_issues: 8,
      created_at: '2011-04-10T20:09:31Z',
      updated_at: '2014-03-03T18:58:10Z',
      closed_at: '2013-02-12T13:22:01Z',
      due_on: '2012-10-09T23:39:01Z',
    },
    active_lock_reason: 'too heated',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:01:12Z',
    closed_at: '2011-01-26T19:01:12Z',
    merged_at: '2011-01-26T19:01:12Z',
    merge_commit_sha: 'e5bd3914e2e596debea16f433f57875b5b90bcd6',
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    requested_reviewers: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    requested_teams: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      slug: faker.lorem.slug(1),
      description: faker.lorem.slug(1),
      privacy: faker.lorem.slug(1),
      permission: faker.lorem.slug(1),
      permissions: {
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        admin: faker.datatype.boolean(),
      },
      url: faker.internet.url(),
      html_url: 'https://github.com/orgs/rails/teams/core',
      members_url: faker.internet.url(),
      repositories_url: faker.internet.url(),
      parent: {
        id: 1,
        node_id: 'MDQ6VGVhbTE=',
        url: 'https://api.github.com/organizations/1/team/1',
        members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
        name: 'Justice League',
        description: 'A great team.',
        permission: 'admin',
        privacy: 'closed',
        html_url: 'https://github.com/orgs/rails/teams/core',
        repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
        slug: 'justice-league',
        ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
      },
    })),
    head: {
      label: faker.lorem.slug(1),
      ref: faker.lorem.slug(1),
      repo: {
        id: 42,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Team Environment',
        full_name: 'octocat/Hello-World',
        license: {
          key: 'mit',
          name: 'MIT License',
          url: 'https://api.github.com/licenses/mit',
          spdx_id: 'MIT',
          node_id: 'MDc6TGljZW5zZW1pdA==',
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: 'git:github.com/octocat/Hello-World.git',
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: 'git@github.com:octocat/Hello-World.git',
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: 'https://github.com/octocat/Hello-World.git',
        mirror_url: 'git:git.example.com/octocat/Hello-World',
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: 'https://svn.github.com/octocat/Hello-World',
        homepage: 'https://github.com',
        language: faker.lorem.slug(1),
        forks_count: 9,
        stargazers_count: 80,
        watchers_count: 80,
        size: 108,
        default_branch: 'master',
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: true,
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: true,
        has_projects: true,
        has_wiki: true,
        has_pages: faker.datatype.boolean(),
        has_downloads: true,
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        allow_rebase_merge: true,
        template_repository: {
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          name: faker.person.fullName(),
          full_name: faker.person.fullName(),
          owner: {
            login: faker.lorem.slug(1),
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.internet.url(),
            gists_url: faker.internet.url(),
            starred_url: faker.internet.url(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(1),
            site_admin: faker.datatype.boolean(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(1),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.internet.url(),
          assignees_url: faker.internet.url(),
          blobs_url: faker.internet.url(),
          branches_url: faker.internet.url(),
          collaborators_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          compare_url: faker.internet.url(),
          contents_url: faker.internet.url(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.internet.url(),
          git_refs_url: faker.internet.url(),
          git_tags_url: faker.internet.url(),
          git_url: faker.internet.url(),
          issue_comment_url: faker.internet.url(),
          issue_events_url: faker.internet.url(),
          issues_url: faker.internet.url(),
          keys_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.internet.url(),
          notifications_url: faker.internet.url(),
          pulls_url: faker.internet.url(),
          releases_url: faker.internet.url(),
          ssh_url: faker.internet.url(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.internet.url(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.internet.url(),
          clone_url: faker.internet.url(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          forks_count: faker.number.int({ min: undefined, max: undefined }),
          stargazers_count: faker.number.int({ min: undefined, max: undefined }),
          watchers_count: faker.number.int({ min: undefined, max: undefined }),
          size: faker.number.int({ min: undefined, max: undefined }),
          default_branch: faker.lorem.slug(1),
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: faker.datatype.boolean(),
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: faker.date.past(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: true,
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: true,
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        master_branch: faker.lorem.slug(1),
        starred_at: '"2020-07-09T00:17:42Z"',
        anonymous_access_enabled: faker.datatype.boolean(),
      },
      sha: faker.lorem.slug(1),
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    base: {
      label: faker.lorem.slug(1),
      ref: faker.lorem.slug(1),
      repo: {
        id: 42,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Team Environment',
        full_name: 'octocat/Hello-World',
        license: {
          key: 'mit',
          name: 'MIT License',
          url: 'https://api.github.com/licenses/mit',
          spdx_id: 'MIT',
          node_id: 'MDc6TGljZW5zZW1pdA==',
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: 'git:github.com/octocat/Hello-World.git',
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: 'git@github.com:octocat/Hello-World.git',
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: 'https://github.com/octocat/Hello-World.git',
        mirror_url: 'git:git.example.com/octocat/Hello-World',
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: 'https://svn.github.com/octocat/Hello-World',
        homepage: 'https://github.com',
        language: faker.lorem.slug(1),
        forks_count: 9,
        stargazers_count: 80,
        watchers_count: 80,
        size: 108,
        default_branch: 'master',
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: true,
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: true,
        has_projects: true,
        has_wiki: true,
        has_pages: faker.datatype.boolean(),
        has_downloads: true,
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        allow_rebase_merge: true,
        template_repository: {
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          name: faker.person.fullName(),
          full_name: faker.person.fullName(),
          owner: {
            login: faker.lorem.slug(1),
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.internet.url(),
            gists_url: faker.internet.url(),
            starred_url: faker.internet.url(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(1),
            site_admin: faker.datatype.boolean(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(1),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.internet.url(),
          assignees_url: faker.internet.url(),
          blobs_url: faker.internet.url(),
          branches_url: faker.internet.url(),
          collaborators_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          compare_url: faker.internet.url(),
          contents_url: faker.internet.url(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.internet.url(),
          git_refs_url: faker.internet.url(),
          git_tags_url: faker.internet.url(),
          git_url: faker.internet.url(),
          issue_comment_url: faker.internet.url(),
          issue_events_url: faker.internet.url(),
          issues_url: faker.internet.url(),
          keys_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.internet.url(),
          notifications_url: faker.internet.url(),
          pulls_url: faker.internet.url(),
          releases_url: faker.internet.url(),
          ssh_url: faker.internet.url(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.internet.url(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.internet.url(),
          clone_url: faker.internet.url(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          forks_count: faker.number.int({ min: undefined, max: undefined }),
          stargazers_count: faker.number.int({ min: undefined, max: undefined }),
          watchers_count: faker.number.int({ min: undefined, max: undefined }),
          size: faker.number.int({ min: undefined, max: undefined }),
          default_branch: faker.lorem.slug(1),
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: faker.datatype.boolean(),
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: faker.date.past(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: true,
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: true,
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        master_branch: faker.lorem.slug(1),
        starred_at: '"2020-07-09T00:17:42Z"',
        anonymous_access_enabled: faker.datatype.boolean(),
      },
      sha: faker.lorem.slug(1),
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    },
    _links: {
      comments: {
        href: faker.lorem.slug(1),
      },
      commits: {
        href: faker.lorem.slug(1),
      },
      statuses: {
        href: faker.lorem.slug(1),
      },
      html: {
        href: faker.lorem.slug(1),
      },
      issue: {
        href: faker.lorem.slug(1),
      },
      review_comments: {
        href: faker.lorem.slug(1),
      },
      review_comment: {
        href: faker.lorem.slug(1),
      },
      self: {
        href: faker.lorem.slug(1),
      },
    },
    author_association: 'OWNER',
    auto_merge: {
      enabled_by: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      merge_method: faker.helpers.arrayElement(['merge', 'squash', 'rebase']),
      commit_title: faker.lorem.slug(1),
      commit_message: faker.lorem.slug(1),
    },
    draft: faker.datatype.boolean(),
  };
}

export function getPullsRemoveRequestedReviewers422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getPullsListReviews200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 42,
    node_id: 'MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'This looks great.',
    state: 'CHANGES_REQUESTED',
    html_url: 'https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80',
    pull_request_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/12',
    _links: {
      html: {
        href: faker.lorem.slug(1),
      },
      pull_request: {
        href: faker.lorem.slug(1),
      },
    },
    submitted_at: faker.date.past(),
    commit_id: '54bb654c9e6025347f57900a4a5c2313a96b8035',
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    author_association: 'OWNER',
  }));
}

export function getPullsCreateReview200Response() {
  return {
    id: 42,
    node_id: 'MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'This looks great.',
    state: 'CHANGES_REQUESTED',
    html_url: 'https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80',
    pull_request_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/12',
    _links: {
      html: {
        href: faker.lorem.slug(1),
      },
      pull_request: {
        href: faker.lorem.slug(1),
      },
    },
    submitted_at: faker.date.past(),
    commit_id: '54bb654c9e6025347f57900a4a5c2313a96b8035',
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    author_association: 'OWNER',
  };
}

export function getPullsCreateReview403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsCreateReview422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getPullsGetReview200Response() {
  return {
    id: 42,
    node_id: 'MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'This looks great.',
    state: 'CHANGES_REQUESTED',
    html_url: 'https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80',
    pull_request_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/12',
    _links: {
      html: {
        href: faker.lorem.slug(1),
      },
      pull_request: {
        href: faker.lorem.slug(1),
      },
    },
    submitted_at: faker.date.past(),
    commit_id: '54bb654c9e6025347f57900a4a5c2313a96b8035',
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    author_association: 'OWNER',
  };
}

export function getPullsGetReview404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsUpdateReview200Response() {
  return {
    id: 42,
    node_id: 'MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'This looks great.',
    state: 'CHANGES_REQUESTED',
    html_url: 'https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80',
    pull_request_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/12',
    _links: {
      html: {
        href: faker.lorem.slug(1),
      },
      pull_request: {
        href: faker.lorem.slug(1),
      },
    },
    submitted_at: faker.date.past(),
    commit_id: '54bb654c9e6025347f57900a4a5c2313a96b8035',
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    author_association: 'OWNER',
  };
}

export function getPullsUpdateReview422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getPullsDeletePendingReview200Response() {
  return {
    id: 42,
    node_id: 'MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'This looks great.',
    state: 'CHANGES_REQUESTED',
    html_url: 'https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80',
    pull_request_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/12',
    _links: {
      html: {
        href: faker.lorem.slug(1),
      },
      pull_request: {
        href: faker.lorem.slug(1),
      },
    },
    submitted_at: faker.date.past(),
    commit_id: '54bb654c9e6025347f57900a4a5c2313a96b8035',
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    author_association: 'OWNER',
  };
}

export function getPullsDeletePendingReview404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsDeletePendingReview422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getPullsListCommentsForReview200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
    pull_request_review_id: 42,
    id: 10,
    node_id: 'MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw',
    diff_hunk: '@@ -16,33 +16,40 @@ public class Connection : IConnection...',
    path: 'file1.txt',
    position: 1,
    original_position: 4,
    commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
    original_commit_id: '9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840',
    in_reply_to_id: 8,
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'Great stuff',
    created_at: '2011-04-14T16:00:49Z',
    updated_at: '2011-04-14T16:00:49Z',
    html_url: 'https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
    pull_request_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/1',
    author_association: 'OWNER',
    _links: {
      self: {
        href: faker.lorem.slug(1),
      },
      html: {
        href: faker.lorem.slug(1),
      },
      pull_request: {
        href: faker.lorem.slug(1),
      },
    },
    body_text: faker.lorem.slug(1),
    body_html: faker.lorem.slug(1),
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
    side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
    start_side: faker.helpers.arrayElement(['LEFT', 'RIGHT']),
    line: 2,
    original_line: 2,
    start_line: 2,
    original_start_line: 2,
  }));
}

export function getPullsListCommentsForReview404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsDismissReview200Response() {
  return {
    id: 42,
    node_id: 'MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'This looks great.',
    state: 'CHANGES_REQUESTED',
    html_url: 'https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80',
    pull_request_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/12',
    _links: {
      html: {
        href: faker.lorem.slug(1),
      },
      pull_request: {
        href: faker.lorem.slug(1),
      },
    },
    submitted_at: faker.date.past(),
    commit_id: '54bb654c9e6025347f57900a4a5c2313a96b8035',
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    author_association: 'OWNER',
  };
}

export function getPullsDismissReview404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsDismissReview422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getPullsSubmitReview200Response() {
  return {
    id: 42,
    node_id: 'MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'This looks great.',
    state: 'CHANGES_REQUESTED',
    html_url: 'https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80',
    pull_request_url: 'https://api.github.com/repos/octocat/Hello-World/pulls/12',
    _links: {
      html: {
        href: faker.lorem.slug(1),
      },
      pull_request: {
        href: faker.lorem.slug(1),
      },
    },
    submitted_at: faker.date.past(),
    commit_id: '54bb654c9e6025347f57900a4a5c2313a96b8035',
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    author_association: 'OWNER',
  };
}

export function getPullsSubmitReview403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsSubmitReview404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsSubmitReview422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getPullsUpdateBranch202Response() {
  return {
    message: faker.lorem.slug(1),
    url: faker.internet.url(),
  };
}

export function getPullsUpdateBranch403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getPullsUpdateBranch422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetReadme200Response() {
  return {
    type: faker.helpers.arrayElement(['file']),
    encoding: faker.lorem.slug(1),
    size: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    path: faker.lorem.slug(1),
    content: faker.lorem.slug(1),
    sha: faker.lorem.slug(1),
    url: faker.internet.url(),
    git_url: faker.internet.url(),
    html_url: faker.internet.url(),
    download_url: faker.internet.url(),
    _links: {
      git: faker.internet.url(),
      html: faker.internet.url(),
      self: faker.internet.url(),
    },
    target: '"actual/actual.md"',
    submodule_git_url: '"git://example.com/defunkt/dotjs.git"',
  };
}

export function getReposGetReadme404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetReadme422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetReadmeInDirectory200Response() {
  return {
    type: faker.helpers.arrayElement(['file']),
    encoding: faker.lorem.slug(1),
    size: faker.number.int({ min: undefined, max: undefined }),
    name: faker.person.fullName(),
    path: faker.lorem.slug(1),
    content: faker.lorem.slug(1),
    sha: faker.lorem.slug(1),
    url: faker.internet.url(),
    git_url: faker.internet.url(),
    html_url: faker.internet.url(),
    download_url: faker.internet.url(),
    _links: {
      git: faker.internet.url(),
      html: faker.internet.url(),
      self: faker.internet.url(),
    },
    target: '"actual/actual.md"',
    submodule_git_url: '"git://example.com/defunkt/dotjs.git"',
  };
}

export function getReposGetReadmeInDirectory404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetReadmeInDirectory422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposListReleases200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    assets_url: faker.internet.url(),
    upload_url: faker.internet.url(),
    tarball_url: faker.internet.url(),
    zipball_url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    tag_name: 'v1.0.0',
    target_commitish: 'master',
    name: faker.person.fullName(),
    body: faker.lorem.slug(1),
    draft: faker.datatype.boolean(),
    prerelease: faker.datatype.boolean(),
    created_at: faker.date.past(),
    published_at: faker.date.past(),
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assets: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      url: faker.internet.url(),
      browser_download_url: faker.internet.url(),
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: 'Team Environment',
      label: faker.lorem.slug(1),
      state: faker.helpers.arrayElement(['uploaded', 'open']),
      content_type: faker.lorem.slug(1),
      size: faker.number.int({ min: undefined, max: undefined }),
      download_count: faker.number.int({ min: undefined, max: undefined }),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      uploader: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    })),
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    mentions_count: faker.number.int({ min: undefined, max: undefined }),
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  }));
}

export function getReposListReleases404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateRelease201Response() {
  return {
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    assets_url: faker.internet.url(),
    upload_url: faker.internet.url(),
    tarball_url: faker.internet.url(),
    zipball_url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    tag_name: 'v1.0.0',
    target_commitish: 'master',
    name: faker.person.fullName(),
    body: faker.lorem.slug(1),
    draft: faker.datatype.boolean(),
    prerelease: faker.datatype.boolean(),
    created_at: faker.date.past(),
    published_at: faker.date.past(),
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assets: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      url: faker.internet.url(),
      browser_download_url: faker.internet.url(),
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: 'Team Environment',
      label: faker.lorem.slug(1),
      state: faker.helpers.arrayElement(['uploaded', 'open']),
      content_type: faker.lorem.slug(1),
      size: faker.number.int({ min: undefined, max: undefined }),
      download_count: faker.number.int({ min: undefined, max: undefined }),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      uploader: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    })),
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    mentions_count: faker.number.int({ min: undefined, max: undefined }),
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getReposCreateRelease422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetReleaseAsset200Response() {
  return {
    url: faker.internet.url(),
    browser_download_url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    name: 'Team Environment',
    label: faker.lorem.slug(1),
    state: faker.helpers.arrayElement(['uploaded', 'open']),
    content_type: faker.lorem.slug(1),
    size: faker.number.int({ min: undefined, max: undefined }),
    download_count: faker.number.int({ min: undefined, max: undefined }),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    uploader: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
  };
}

export function getReposGetReleaseAsset404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposUpdateReleaseAsset200Response() {
  return {
    url: faker.internet.url(),
    browser_download_url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    name: 'Team Environment',
    label: faker.lorem.slug(1),
    state: faker.helpers.arrayElement(['uploaded', 'open']),
    content_type: faker.lorem.slug(1),
    size: faker.number.int({ min: undefined, max: undefined }),
    download_count: faker.number.int({ min: undefined, max: undefined }),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    uploader: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
  };
}

export function getReposGenerateReleaseNotes200Response() {
  return {
    name: 'Release v1.0.0 is now available!',
    body: faker.lorem.slug(1),
  };
}

export function getReposGenerateReleaseNotes404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetLatestRelease200Response() {
  return {
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    assets_url: faker.internet.url(),
    upload_url: faker.internet.url(),
    tarball_url: faker.internet.url(),
    zipball_url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    tag_name: 'v1.0.0',
    target_commitish: 'master',
    name: faker.person.fullName(),
    body: faker.lorem.slug(1),
    draft: faker.datatype.boolean(),
    prerelease: faker.datatype.boolean(),
    created_at: faker.date.past(),
    published_at: faker.date.past(),
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assets: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      url: faker.internet.url(),
      browser_download_url: faker.internet.url(),
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: 'Team Environment',
      label: faker.lorem.slug(1),
      state: faker.helpers.arrayElement(['uploaded', 'open']),
      content_type: faker.lorem.slug(1),
      size: faker.number.int({ min: undefined, max: undefined }),
      download_count: faker.number.int({ min: undefined, max: undefined }),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      uploader: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    })),
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    mentions_count: faker.number.int({ min: undefined, max: undefined }),
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getReposGetReleaseByTag200Response() {
  return {
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    assets_url: faker.internet.url(),
    upload_url: faker.internet.url(),
    tarball_url: faker.internet.url(),
    zipball_url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    tag_name: 'v1.0.0',
    target_commitish: 'master',
    name: faker.person.fullName(),
    body: faker.lorem.slug(1),
    draft: faker.datatype.boolean(),
    prerelease: faker.datatype.boolean(),
    created_at: faker.date.past(),
    published_at: faker.date.past(),
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assets: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      url: faker.internet.url(),
      browser_download_url: faker.internet.url(),
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: 'Team Environment',
      label: faker.lorem.slug(1),
      state: faker.helpers.arrayElement(['uploaded', 'open']),
      content_type: faker.lorem.slug(1),
      size: faker.number.int({ min: undefined, max: undefined }),
      download_count: faker.number.int({ min: undefined, max: undefined }),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      uploader: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    })),
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    mentions_count: faker.number.int({ min: undefined, max: undefined }),
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getReposGetReleaseByTag404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetRelease200Response() {
  return {
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    assets_url: faker.internet.url(),
    upload_url: faker.internet.url(),
    tarball_url: faker.internet.url(),
    zipball_url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    tag_name: 'v1.0.0',
    target_commitish: 'master',
    name: faker.person.fullName(),
    body: faker.lorem.slug(1),
    draft: faker.datatype.boolean(),
    prerelease: faker.datatype.boolean(),
    created_at: faker.date.past(),
    published_at: faker.date.past(),
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assets: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      url: faker.internet.url(),
      browser_download_url: faker.internet.url(),
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: 'Team Environment',
      label: faker.lorem.slug(1),
      state: faker.helpers.arrayElement(['uploaded', 'open']),
      content_type: faker.lorem.slug(1),
      size: faker.number.int({ min: undefined, max: undefined }),
      download_count: faker.number.int({ min: undefined, max: undefined }),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      uploader: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    })),
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    mentions_count: faker.number.int({ min: undefined, max: undefined }),
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getReposGetRelease404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposUpdateRelease200Response() {
  return {
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    assets_url: faker.internet.url(),
    upload_url: faker.internet.url(),
    tarball_url: faker.internet.url(),
    zipball_url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    tag_name: 'v1.0.0',
    target_commitish: 'master',
    name: faker.person.fullName(),
    body: faker.lorem.slug(1),
    draft: faker.datatype.boolean(),
    prerelease: faker.datatype.boolean(),
    created_at: faker.date.past(),
    published_at: faker.date.past(),
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assets: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      url: faker.internet.url(),
      browser_download_url: faker.internet.url(),
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: 'Team Environment',
      label: faker.lorem.slug(1),
      state: faker.helpers.arrayElement(['uploaded', 'open']),
      content_type: faker.lorem.slug(1),
      size: faker.number.int({ min: undefined, max: undefined }),
      download_count: faker.number.int({ min: undefined, max: undefined }),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      uploader: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    })),
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    mentions_count: faker.number.int({ min: undefined, max: undefined }),
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getReposListReleaseAssets200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: faker.internet.url(),
    browser_download_url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    name: 'Team Environment',
    label: faker.lorem.slug(1),
    state: faker.helpers.arrayElement(['uploaded', 'open']),
    content_type: faker.lorem.slug(1),
    size: faker.number.int({ min: undefined, max: undefined }),
    download_count: faker.number.int({ min: undefined, max: undefined }),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    uploader: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
  }));
}

export function getReposUploadReleaseAsset201Response() {
  return {
    url: faker.internet.url(),
    browser_download_url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    name: 'Team Environment',
    label: faker.lorem.slug(1),
    state: faker.helpers.arrayElement(['uploaded', 'open']),
    content_type: faker.lorem.slug(1),
    size: faker.number.int({ min: undefined, max: undefined }),
    download_count: faker.number.int({ min: undefined, max: undefined }),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    uploader: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
  };
}

export function getReactionsListForRelease200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  }));
}

export function getReactionsListForRelease404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReactionsCreateForRelease200Response() {
  return {
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  };
}

export function getReactionsCreateForRelease201Response() {
  return {
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  };
}

export function getReactionsCreateForRelease422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getSecretScanningListAlertsForRepo200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    number: faker.number.int({ min: undefined, max: undefined }),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    locations_url: faker.internet.url(),
    state: faker.helpers.arrayElement(['open', 'resolved']),
    resolution: faker.helpers.arrayElement([null, 'false_positive', 'wont_fix', 'revoked', 'used_in_tests']),
    resolved_at: faker.date.past(),
    resolved_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    secret_type: faker.lorem.slug(1),
    secret: faker.lorem.slug(1),
  }));
}

export function getSecretScanningListAlertsForRepo503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getSecretScanningGetAlert200Response() {
  return {
    number: faker.number.int({ min: undefined, max: undefined }),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    locations_url: faker.internet.url(),
    state: faker.helpers.arrayElement(['open', 'resolved']),
    resolution: faker.helpers.arrayElement([null, 'false_positive', 'wont_fix', 'revoked', 'used_in_tests']),
    resolved_at: faker.date.past(),
    resolved_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    secret_type: faker.lorem.slug(1),
    secret: faker.lorem.slug(1),
  };
}

export function getSecretScanningGetAlert503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getSecretScanningUpdateAlert200Response() {
  return {
    number: faker.number.int({ min: undefined, max: undefined }),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    locations_url: faker.internet.url(),
    state: faker.helpers.arrayElement(['open', 'resolved']),
    resolution: faker.helpers.arrayElement([null, 'false_positive', 'wont_fix', 'revoked', 'used_in_tests']),
    resolved_at: faker.date.past(),
    resolved_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    secret_type: faker.lorem.slug(1),
    secret: faker.lorem.slug(1),
  };
}

export function getSecretScanningUpdateAlert503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getSecretScanningListLocationsForAlert200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    type: 'commit',
    details: faker.helpers.arrayElement([
      {
        path: '/example/secrets.txt',
        start_line: faker.number.int({ min: undefined, max: undefined }),
        end_line: faker.number.int({ min: undefined, max: undefined }),
        start_column: faker.number.int({ min: undefined, max: undefined }),
        end_column: faker.number.int({ min: undefined, max: undefined }),
        blob_sha: 'af5626b4a114abcb82d63db7c8082c3c4756e51b',
        blob_url: faker.internet.url(),
        commit_sha: 'af5626b4a114abcb82d63db7c8082c3c4756e51b',
        commit_url: faker.internet.url(),
      },
    ]),
  }));
}

export function getSecretScanningListLocationsForAlert503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getActivityListStargazersForRepo200Response() {
  return faker.helpers.arrayElement([
    [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      starred_at: faker.date.past(),
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
    })),
  ]);
}

export function getActivityListStargazersForRepo422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposGetCodeFrequencyStats200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
    [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
      faker.number.int({ min: undefined, max: undefined })
    )
  );
}

export function getReposGetCodeFrequencyStats202Response() {
  return {};
}

export function getReposGetCommitActivityStats200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    days: [0, 3, 26, 20, 39, 1, 0],
    total: 89,
    week: 1336280400,
  }));
}

export function getReposGetCommitActivityStats202Response() {
  return {};
}

export function getReposGetContributorsStats200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    total: 135,
    weeks: [{ w: '1367712000', a: 6898, d: 77, c: 10 }],
  }));
}

export function getReposGetContributorsStats202Response() {
  return {};
}

export function getReposGetParticipationStats200Response() {
  return {
    all: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
      faker.number.int({ min: undefined, max: undefined })
    ),
    owner: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
      faker.number.int({ min: undefined, max: undefined })
    ),
  };
}

export function getReposGetParticipationStats404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposGetPunchCardStats200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
    [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
      faker.number.int({ min: undefined, max: undefined })
    )
  );
}

export function getReposCreateCommitStatus201Response() {
  return {
    url: faker.internet.url(),
    avatar_url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    state: faker.lorem.slug(1),
    description: faker.lorem.slug(1),
    target_url: faker.internet.url(),
    context: faker.lorem.slug(1),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
  };
}

export function getActivityListWatchersForRepo200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  }));
}

export function getActivityGetRepoSubscription200Response() {
  return {
    subscribed: true,
    ignored: faker.datatype.boolean(),
    reason: faker.lorem.slug(1),
    created_at: '2012-10-06T21:34:12Z',
    url: 'https://api.github.com/repos/octocat/example/subscription',
    repository_url: 'https://api.github.com/repos/octocat/example',
  };
}

export function getActivityGetRepoSubscription403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivitySetRepoSubscription200Response() {
  return {
    subscribed: true,
    ignored: faker.datatype.boolean(),
    reason: faker.lorem.slug(1),
    created_at: '2012-10-06T21:34:12Z',
    url: 'https://api.github.com/repos/octocat/example/subscription',
    repository_url: 'https://api.github.com/repos/octocat/example',
  };
}

export function getReposListTags200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: 'v0.1',
    commit: {
      sha: faker.lorem.slug(1),
      url: faker.internet.url(),
    },
    zipball_url: 'https://github.com/octocat/Hello-World/zipball/v0.1',
    tarball_url: 'https://github.com/octocat/Hello-World/tarball/v0.1',
    node_id: faker.lorem.slug(1),
  }));
}

export function getReposListTeams200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    name: faker.person.fullName(),
    slug: faker.lorem.slug(1),
    description: faker.lorem.slug(1),
    privacy: faker.lorem.slug(1),
    permission: faker.lorem.slug(1),
    permissions: {
      pull: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      admin: faker.datatype.boolean(),
    },
    url: faker.internet.url(),
    html_url: 'https://github.com/orgs/rails/teams/core',
    members_url: faker.internet.url(),
    repositories_url: faker.internet.url(),
    parent: {
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    },
  }));
}

export function getReposGetAllTopics200Response() {
  return {
    names: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getReposGetAllTopics404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposReplaceAllTopics200Response() {
  return {
    names: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getReposReplaceAllTopics404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposReplaceAllTopics422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getReposTransfer202Response() {
  return {
    id: 1296269,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Hello-World',
    full_name: 'octocat/Hello-World',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: faker.internet.url(),
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: faker.internet.url(),
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: faker.internet.url(),
    mirror_url: faker.internet.url(),
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: faker.internet.url(),
    homepage: faker.lorem.slug(1),
    language: faker.lorem.slug(1),
    forks_count: faker.number.int({ min: undefined, max: undefined }),
    stargazers_count: faker.number.int({ min: undefined, max: undefined }),
    watchers_count: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    default_branch: faker.lorem.slug(1),
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: faker.datatype.boolean(),
    topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    has_issues: faker.datatype.boolean(),
    has_projects: faker.datatype.boolean(),
    has_wiki: faker.datatype.boolean(),
    has_pages: faker.datatype.boolean(),
    has_downloads: faker.datatype.boolean(),
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: faker.lorem.slug(1),
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    permissions: {
      admin: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
    },
    temp_clone_token: faker.lorem.slug(1),
    delete_branch_on_merge: faker.datatype.boolean(),
    subscribers_count: faker.number.int({ min: undefined, max: undefined }),
    network_count: faker.number.int({ min: undefined, max: undefined }),
    code_of_conduct: {
      key: 'contributor_covenant',
      name: 'Contributor Covenant',
      url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
      body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
      html_url: faker.internet.url(),
    },
    license: {
      key: faker.lorem.slug(1),
      name: faker.person.fullName(),
      spdx_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      node_id: faker.lorem.slug(1),
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    allow_forking: faker.datatype.boolean(),
  };
}

export function getReposCreateUsingTemplate201Response() {
  return {
    id: 42,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Team Environment',
    full_name: 'octocat/Hello-World',
    license: {
      key: 'mit',
      name: 'MIT License',
      url: 'https://api.github.com/licenses/mit',
      spdx_id: 'MIT',
      node_id: 'MDc6TGljZW5zZW1pdA==',
      html_url: faker.internet.url(),
    },
    organization: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    permissions: {
      admin: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
    },
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: 'git:github.com/octocat/Hello-World.git',
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: 'git@github.com:octocat/Hello-World.git',
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: 'https://github.com/octocat/Hello-World.git',
    mirror_url: 'git:git.example.com/octocat/Hello-World',
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: 'https://svn.github.com/octocat/Hello-World',
    homepage: 'https://github.com',
    language: faker.lorem.slug(1),
    forks_count: 9,
    stargazers_count: 80,
    watchers_count: 80,
    size: 108,
    default_branch: 'master',
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: true,
    topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    has_issues: true,
    has_projects: true,
    has_wiki: true,
    has_pages: faker.datatype.boolean(),
    has_downloads: true,
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: faker.lorem.slug(1),
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    allow_rebase_merge: true,
    template_repository: {
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      full_name: faker.person.fullName(),
      owner: {
        login: faker.lorem.slug(1),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        site_admin: faker.datatype.boolean(),
      },
      private: faker.datatype.boolean(),
      html_url: faker.internet.url(),
      description: faker.lorem.slug(1),
      fork: faker.datatype.boolean(),
      url: faker.internet.url(),
      archive_url: faker.internet.url(),
      assignees_url: faker.internet.url(),
      blobs_url: faker.internet.url(),
      branches_url: faker.internet.url(),
      collaborators_url: faker.internet.url(),
      comments_url: faker.internet.url(),
      commits_url: faker.internet.url(),
      compare_url: faker.internet.url(),
      contents_url: faker.internet.url(),
      contributors_url: faker.internet.url(),
      deployments_url: faker.internet.url(),
      downloads_url: faker.internet.url(),
      events_url: faker.internet.url(),
      forks_url: faker.internet.url(),
      git_commits_url: faker.internet.url(),
      git_refs_url: faker.internet.url(),
      git_tags_url: faker.internet.url(),
      git_url: faker.internet.url(),
      issue_comment_url: faker.internet.url(),
      issue_events_url: faker.internet.url(),
      issues_url: faker.internet.url(),
      keys_url: faker.internet.url(),
      labels_url: faker.internet.url(),
      languages_url: faker.internet.url(),
      merges_url: faker.internet.url(),
      milestones_url: faker.internet.url(),
      notifications_url: faker.internet.url(),
      pulls_url: faker.internet.url(),
      releases_url: faker.internet.url(),
      ssh_url: faker.internet.url(),
      stargazers_url: faker.internet.url(),
      statuses_url: faker.internet.url(),
      subscribers_url: faker.internet.url(),
      subscription_url: faker.internet.url(),
      tags_url: faker.internet.url(),
      teams_url: faker.internet.url(),
      trees_url: faker.internet.url(),
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: faker.internet.url(),
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: faker.date.past(),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      allow_rebase_merge: faker.datatype.boolean(),
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: faker.datatype.boolean(),
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
    },
    temp_clone_token: faker.lorem.slug(1),
    allow_squash_merge: true,
    allow_auto_merge: faker.datatype.boolean(),
    delete_branch_on_merge: faker.datatype.boolean(),
    allow_update_branch: faker.datatype.boolean(),
    allow_merge_commit: true,
    allow_forking: faker.datatype.boolean(),
    subscribers_count: faker.number.int({ min: undefined, max: undefined }),
    network_count: faker.number.int({ min: undefined, max: undefined }),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    master_branch: faker.lorem.slug(1),
    starred_at: '"2020-07-09T00:17:42Z"',
    anonymous_access_enabled: faker.datatype.boolean(),
  };
}

export function getReposListPublic200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1296269,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Hello-World',
    full_name: 'octocat/Hello-World',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: faker.internet.url(),
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: faker.internet.url(),
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: faker.internet.url(),
    mirror_url: faker.internet.url(),
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: faker.internet.url(),
    homepage: faker.lorem.slug(1),
    language: faker.lorem.slug(1),
    forks_count: faker.number.int({ min: undefined, max: undefined }),
    stargazers_count: faker.number.int({ min: undefined, max: undefined }),
    watchers_count: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    default_branch: faker.lorem.slug(1),
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: faker.datatype.boolean(),
    topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    has_issues: faker.datatype.boolean(),
    has_projects: faker.datatype.boolean(),
    has_wiki: faker.datatype.boolean(),
    has_pages: faker.datatype.boolean(),
    has_downloads: faker.datatype.boolean(),
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: faker.lorem.slug(1),
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    permissions: {
      admin: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
    },
    temp_clone_token: faker.lorem.slug(1),
    delete_branch_on_merge: faker.datatype.boolean(),
    subscribers_count: faker.number.int({ min: undefined, max: undefined }),
    network_count: faker.number.int({ min: undefined, max: undefined }),
    code_of_conduct: {
      key: 'contributor_covenant',
      name: 'Contributor Covenant',
      url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
      body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
      html_url: faker.internet.url(),
    },
    license: {
      key: faker.lorem.slug(1),
      name: faker.person.fullName(),
      spdx_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      node_id: faker.lorem.slug(1),
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    allow_forking: faker.datatype.boolean(),
  }));
}

export function getReposListPublic422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getActionsListEnvironmentSecrets200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    secrets: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: 'SECRET_TOKEN',
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
    })),
  };
}

export function getActionsGetEnvironmentPublicKey200Response() {
  return {
    key_id: '1234567',
    key: 'hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=',
    id: 2,
    url: 'https://api.github.com/user/keys/2',
    title: 'ssh-rsa AAAAB3NzaC1yc2EAAA',
    created_at: '2011-01-26T19:01:12Z',
  };
}

export function getActionsGetEnvironmentSecret200Response() {
  return {
    name: 'SECRET_TOKEN',
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
  };
}

export function getActionsCreateOrUpdateEnvironmentSecret201Response() {
  return {};
}

export function getSearchCode200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    incomplete_results: faker.datatype.boolean(),
    items: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      path: faker.lorem.slug(1),
      sha: faker.lorem.slug(1),
      url: faker.internet.url(),
      git_url: faker.internet.url(),
      html_url: faker.internet.url(),
      repository: {
        id: 1296269,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Hello-World',
        full_name: 'octocat/Hello-World',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: faker.internet.url(),
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: faker.internet.url(),
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        temp_clone_token: faker.lorem.slug(1),
        delete_branch_on_merge: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        code_of_conduct: {
          key: 'contributor_covenant',
          name: 'Contributor Covenant',
          url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
          body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
          html_url: faker.internet.url(),
        },
        license: {
          key: faker.lorem.slug(1),
          name: faker.person.fullName(),
          spdx_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          node_id: faker.lorem.slug(1),
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        allow_forking: faker.datatype.boolean(),
      },
      score: faker.number.int({ min: undefined, max: undefined }),
      file_size: faker.number.int({ min: undefined, max: undefined }),
      language: faker.lorem.slug(1),
      last_modified_at: faker.date.past(),
      line_numbers: ['73..77', '77..78'],
      text_matches: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        object_url: faker.internet.url(),
        object_type: faker.lorem.slug(1),
        property: faker.lorem.slug(1),
        fragment: faker.lorem.slug(1),
        matches: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          text: faker.lorem.slug(1),
          indices: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.number.int({ min: undefined, max: undefined })
          ),
        })),
      })),
    })),
  };
}

export function getSearchCode403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getSearchCode422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getSearchCode503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getSearchCommits200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    incomplete_results: faker.datatype.boolean(),
    items: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      url: faker.internet.url(),
      sha: faker.lorem.slug(1),
      html_url: faker.internet.url(),
      comments_url: faker.internet.url(),
      commit: {
        author: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          date: faker.date.past(),
        },
        committer: {
          name: '"Chris Wanstrath"',
          email: '"chris@ozmm.org"',
          date: '"2007-10-29T02:42:39.000-07:00"',
        },
        comment_count: faker.number.int({ min: undefined, max: undefined }),
        message: faker.lorem.slug(1),
        tree: {
          sha: faker.lorem.slug(1),
          url: faker.internet.url(),
        },
        url: faker.internet.url(),
        verification: {
          verified: faker.datatype.boolean(),
          reason: faker.lorem.slug(1),
          payload: faker.lorem.slug(1),
          signature: faker.lorem.slug(1),
        },
      },
      author: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      committer: {
        name: '"Chris Wanstrath"',
        email: '"chris@ozmm.org"',
        date: '"2007-10-29T02:42:39.000-07:00"',
      },
      parents: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        sha: faker.lorem.slug(1),
      })),
      repository: {
        id: 1296269,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Hello-World',
        full_name: 'octocat/Hello-World',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: faker.internet.url(),
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: faker.internet.url(),
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        temp_clone_token: faker.lorem.slug(1),
        delete_branch_on_merge: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        code_of_conduct: {
          key: 'contributor_covenant',
          name: 'Contributor Covenant',
          url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
          body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
          html_url: faker.internet.url(),
        },
        license: {
          key: faker.lorem.slug(1),
          name: faker.person.fullName(),
          spdx_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          node_id: faker.lorem.slug(1),
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        allow_forking: faker.datatype.boolean(),
      },
      score: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      text_matches: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        object_url: faker.internet.url(),
        object_type: faker.lorem.slug(1),
        property: faker.lorem.slug(1),
        fragment: faker.lorem.slug(1),
        matches: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          text: faker.lorem.slug(1),
          indices: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.number.int({ min: undefined, max: undefined })
          ),
        })),
      })),
    })),
  };
}

export function getSearchIssuesAndPullRequests200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    incomplete_results: faker.datatype.boolean(),
    items: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      url: faker.internet.url(),
      repository_url: faker.internet.url(),
      labels_url: faker.internet.url(),
      comments_url: faker.internet.url(),
      events_url: faker.internet.url(),
      html_url: faker.internet.url(),
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      number: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      locked: faker.datatype.boolean(),
      active_lock_reason: faker.lorem.slug(1),
      assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      })),
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      labels: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        name: faker.person.fullName(),
        color: faker.lorem.slug(1),
        default: faker.datatype.boolean(),
        description: faker.lorem.slug(1),
      })),
      state: faker.lorem.slug(1),
      state_reason: faker.lorem.slug(1),
      assignee: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      milestone: {
        url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
        html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
        labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
        id: 1002604,
        node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
        number: 42,
        state: 'open',
        title: 'v1.0',
        description: 'Tracking milestone for version 1.0',
        creator: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        open_issues: 4,
        closed_issues: 8,
        created_at: '2011-04-10T20:09:31Z',
        updated_at: '2014-03-03T18:58:10Z',
        closed_at: '2013-02-12T13:22:01Z',
        due_on: '2012-10-09T23:39:01Z',
      },
      comments: faker.number.int({ min: undefined, max: undefined }),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      closed_at: faker.date.past(),
      text_matches: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        object_url: faker.internet.url(),
        object_type: faker.lorem.slug(1),
        property: faker.lorem.slug(1),
        fragment: faker.lorem.slug(1),
        matches: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          text: faker.lorem.slug(1),
          indices: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.number.int({ min: undefined, max: undefined })
          ),
        })),
      })),
      pull_request: {
        merged_at: faker.date.past(),
        diff_url: faker.internet.url(),
        html_url: faker.internet.url(),
        patch_url: faker.internet.url(),
        url: faker.internet.url(),
      },
      body: faker.lorem.slug(1),
      score: faker.number.int({ min: undefined, max: undefined }),
      author_association: 'OWNER',
      draft: faker.datatype.boolean(),
      repository: {
        id: 42,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Team Environment',
        full_name: 'octocat/Hello-World',
        license: {
          key: 'mit',
          name: 'MIT License',
          url: 'https://api.github.com/licenses/mit',
          spdx_id: 'MIT',
          node_id: 'MDc6TGljZW5zZW1pdA==',
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: 'git:github.com/octocat/Hello-World.git',
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: 'git@github.com:octocat/Hello-World.git',
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: 'https://github.com/octocat/Hello-World.git',
        mirror_url: 'git:git.example.com/octocat/Hello-World',
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: 'https://svn.github.com/octocat/Hello-World',
        homepage: 'https://github.com',
        language: faker.lorem.slug(1),
        forks_count: 9,
        stargazers_count: 80,
        watchers_count: 80,
        size: 108,
        default_branch: 'master',
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: true,
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: true,
        has_projects: true,
        has_wiki: true,
        has_pages: faker.datatype.boolean(),
        has_downloads: true,
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        allow_rebase_merge: true,
        template_repository: {
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          name: faker.person.fullName(),
          full_name: faker.person.fullName(),
          owner: {
            login: faker.lorem.slug(1),
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.internet.url(),
            gists_url: faker.internet.url(),
            starred_url: faker.internet.url(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(1),
            site_admin: faker.datatype.boolean(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(1),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.internet.url(),
          assignees_url: faker.internet.url(),
          blobs_url: faker.internet.url(),
          branches_url: faker.internet.url(),
          collaborators_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          compare_url: faker.internet.url(),
          contents_url: faker.internet.url(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.internet.url(),
          git_refs_url: faker.internet.url(),
          git_tags_url: faker.internet.url(),
          git_url: faker.internet.url(),
          issue_comment_url: faker.internet.url(),
          issue_events_url: faker.internet.url(),
          issues_url: faker.internet.url(),
          keys_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.internet.url(),
          notifications_url: faker.internet.url(),
          pulls_url: faker.internet.url(),
          releases_url: faker.internet.url(),
          ssh_url: faker.internet.url(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.internet.url(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.internet.url(),
          clone_url: faker.internet.url(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          forks_count: faker.number.int({ min: undefined, max: undefined }),
          stargazers_count: faker.number.int({ min: undefined, max: undefined }),
          watchers_count: faker.number.int({ min: undefined, max: undefined }),
          size: faker.number.int({ min: undefined, max: undefined }),
          default_branch: faker.lorem.slug(1),
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: faker.datatype.boolean(),
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: faker.date.past(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: true,
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: true,
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        master_branch: faker.lorem.slug(1),
        starred_at: '"2020-07-09T00:17:42Z"',
        anonymous_access_enabled: faker.datatype.boolean(),
      },
      body_html: faker.lorem.slug(1),
      body_text: faker.lorem.slug(1),
      timeline_url: faker.internet.url(),
      performed_via_github_app: {
        id: 37,
        slug: 'probot-owners',
        node_id: 'MDExOkludGVncmF0aW9uMQ==',
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        name: 'Probot Owners',
        description: 'The description of the app.',
        external_url: 'https://example.com',
        html_url: 'https://github.com/apps/super-ci',
        created_at: '2017-07-08T16:18:44-04:00',
        updated_at: '2017-07-08T16:18:44-04:00',
        permissions: { issues: 'read', deployments: 'write' },
        events: ['label', 'deployment'],
        installations_count: 5,
        client_id: '"Iv1.25b5d1e65ffc4022"',
        client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
        webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
        pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
      },
      reactions: {
        url: faker.internet.url(),
        total_count: faker.number.int({ min: undefined, max: undefined }),
        '+1': faker.number.int({ min: undefined, max: undefined }),
        '-1': faker.number.int({ min: undefined, max: undefined }),
        laugh: faker.number.int({ min: undefined, max: undefined }),
        confused: faker.number.int({ min: undefined, max: undefined }),
        heart: faker.number.int({ min: undefined, max: undefined }),
        hooray: faker.number.int({ min: undefined, max: undefined }),
        eyes: faker.number.int({ min: undefined, max: undefined }),
        rocket: faker.number.int({ min: undefined, max: undefined }),
      },
    })),
  };
}

export function getSearchIssuesAndPullRequests403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getSearchIssuesAndPullRequests422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getSearchIssuesAndPullRequests503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getSearchLabels200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    incomplete_results: faker.datatype.boolean(),
    items: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      name: faker.person.fullName(),
      color: faker.lorem.slug(1),
      default: faker.datatype.boolean(),
      description: faker.lorem.slug(1),
      score: faker.number.int({ min: undefined, max: undefined }),
      text_matches: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        object_url: faker.internet.url(),
        object_type: faker.lorem.slug(1),
        property: faker.lorem.slug(1),
        fragment: faker.lorem.slug(1),
        matches: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          text: faker.lorem.slug(1),
          indices: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.number.int({ min: undefined, max: undefined })
          ),
        })),
      })),
    })),
  };
}

export function getSearchLabels403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getSearchLabels404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getSearchLabels422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getSearchRepos200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    incomplete_results: faker.datatype.boolean(),
    items: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      full_name: faker.person.fullName(),
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: faker.internet.url(),
      description: faker.lorem.slug(1),
      fork: faker.datatype.boolean(),
      url: faker.internet.url(),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      pushed_at: faker.date.past(),
      homepage: faker.internet.url(),
      size: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      default_branch: faker.lorem.slug(1),
      score: faker.number.int({ min: undefined, max: undefined }),
      forks_url: faker.internet.url(),
      keys_url: faker.internet.url(),
      collaborators_url: faker.internet.url(),
      teams_url: faker.internet.url(),
      hooks_url: faker.internet.url(),
      issue_events_url: faker.internet.url(),
      events_url: faker.internet.url(),
      assignees_url: faker.internet.url(),
      branches_url: faker.internet.url(),
      tags_url: faker.internet.url(),
      blobs_url: faker.internet.url(),
      git_tags_url: faker.internet.url(),
      git_refs_url: faker.internet.url(),
      trees_url: faker.internet.url(),
      statuses_url: faker.internet.url(),
      languages_url: faker.internet.url(),
      stargazers_url: faker.internet.url(),
      contributors_url: faker.internet.url(),
      subscribers_url: faker.internet.url(),
      subscription_url: faker.internet.url(),
      commits_url: faker.internet.url(),
      git_commits_url: faker.internet.url(),
      comments_url: faker.internet.url(),
      issue_comment_url: faker.internet.url(),
      contents_url: faker.internet.url(),
      compare_url: faker.internet.url(),
      merges_url: faker.internet.url(),
      archive_url: faker.internet.url(),
      downloads_url: faker.internet.url(),
      issues_url: faker.internet.url(),
      pulls_url: faker.internet.url(),
      milestones_url: faker.internet.url(),
      notifications_url: faker.internet.url(),
      labels_url: faker.internet.url(),
      releases_url: faker.internet.url(),
      deployments_url: faker.internet.url(),
      git_url: faker.internet.url(),
      ssh_url: faker.internet.url(),
      clone_url: faker.internet.url(),
      svn_url: faker.internet.url(),
      forks: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      mirror_url: faker.internet.url(),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      text_matches: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        object_url: faker.internet.url(),
        object_type: faker.lorem.slug(1),
        property: faker.lorem.slug(1),
        fragment: faker.lorem.slug(1),
        matches: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          text: faker.lorem.slug(1),
          indices: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.number.int({ min: undefined, max: undefined })
          ),
        })),
      })),
      temp_clone_token: faker.lorem.slug(1),
      allow_merge_commit: faker.datatype.boolean(),
      allow_squash_merge: faker.datatype.boolean(),
      allow_rebase_merge: faker.datatype.boolean(),
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_forking: faker.datatype.boolean(),
      is_template: faker.datatype.boolean(),
    })),
  };
}

export function getSearchRepos422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getSearchRepos503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getSearchTopics200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    incomplete_results: faker.datatype.boolean(),
    items: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      display_name: faker.person.fullName(),
      short_description: faker.lorem.slug(1),
      description: faker.lorem.slug(1),
      created_by: faker.lorem.slug(1),
      released: faker.lorem.slug(1),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      featured: faker.datatype.boolean(),
      curated: faker.datatype.boolean(),
      score: faker.number.int({ min: undefined, max: undefined }),
      repository_count: faker.number.int({ min: undefined, max: undefined }),
      logo_url: faker.internet.url(),
      text_matches: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        object_url: faker.internet.url(),
        object_type: faker.lorem.slug(1),
        property: faker.lorem.slug(1),
        fragment: faker.lorem.slug(1),
        matches: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          text: faker.lorem.slug(1),
          indices: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.number.int({ min: undefined, max: undefined })
          ),
        })),
      })),
      related: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        topic_relation: {
          id: faker.number.int({ min: undefined, max: undefined }),
          name: faker.person.fullName(),
          topic_id: faker.number.int({ min: undefined, max: undefined }),
          relation_type: faker.lorem.slug(1),
        },
      })),
      aliases: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        topic_relation: {
          id: faker.number.int({ min: undefined, max: undefined }),
          name: faker.person.fullName(),
          topic_id: faker.number.int({ min: undefined, max: undefined }),
          relation_type: faker.lorem.slug(1),
        },
      })),
    })),
  };
}

export function getSearchUsers200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    incomplete_results: faker.datatype.boolean(),
    items: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      login: faker.lorem.slug(1),
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      avatar_url: faker.internet.url(),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
      followers_url: faker.internet.url(),
      subscriptions_url: faker.internet.url(),
      organizations_url: faker.internet.url(),
      repos_url: faker.internet.url(),
      received_events_url: faker.internet.url(),
      type: faker.lorem.slug(1),
      score: faker.number.int({ min: undefined, max: undefined }),
      following_url: faker.internet.url(),
      gists_url: faker.internet.url(),
      starred_url: faker.internet.url(),
      events_url: faker.internet.url(),
      public_repos: faker.number.int({ min: undefined, max: undefined }),
      public_gists: faker.number.int({ min: undefined, max: undefined }),
      followers: faker.number.int({ min: undefined, max: undefined }),
      following: faker.number.int({ min: undefined, max: undefined }),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      name: faker.person.fullName(),
      bio: faker.lorem.slug(1),
      email: faker.internet.email(),
      location: faker.lorem.slug(1),
      site_admin: faker.datatype.boolean(),
      hireable: faker.datatype.boolean(),
      text_matches: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        object_url: faker.internet.url(),
        object_type: faker.lorem.slug(1),
        property: faker.lorem.slug(1),
        fragment: faker.lorem.slug(1),
        matches: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          text: faker.lorem.slug(1),
          indices: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.number.int({ min: undefined, max: undefined })
          ),
        })),
      })),
      blog: faker.lorem.slug(1),
      company: faker.lorem.slug(1),
      suspended_at: faker.date.past(),
    })),
  };
}

export function getSearchUsers422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getSearchUsers503Response() {
  return {
    code: faker.lorem.slug(1),
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getEnterpriseAdminGetConfigurationStatus200Response() {
  return {
    status: faker.lorem.slug(1),
    progress: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      status: faker.lorem.slug(1),
      key: faker.lorem.slug(1),
    })),
  };
}

export function getEnterpriseAdminGetMaintenanceStatus200Response() {
  return {
    status: faker.lorem.slug(1),
    scheduled_time: faker.lorem.slug(1),
    connection_services: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      number: faker.number.int({ min: undefined, max: undefined }),
    })),
  };
}

export function getEnterpriseAdminEnableOrDisableMaintenanceMode200Response() {
  return {
    status: faker.lorem.slug(1),
    scheduled_time: faker.lorem.slug(1),
    connection_services: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      number: faker.number.int({ min: undefined, max: undefined }),
    })),
  };
}

export function getEnterpriseAdminGetSettings200Response() {
  return {
    enterprise: {
      private_mode: faker.datatype.boolean(),
      public_pages: faker.datatype.boolean(),
      subdomain_isolation: faker.datatype.boolean(),
      signup_enabled: faker.datatype.boolean(),
      github_hostname: faker.person.fullName(),
      identicons_host: faker.lorem.slug(1),
      http_proxy: faker.lorem.slug(1),
      auth_mode: faker.lorem.slug(1),
      expire_sessions: faker.datatype.boolean(),
      admin_password: faker.lorem.slug(1),
      configuration_id: faker.number.int({ min: undefined, max: undefined }),
      configuration_run_count: faker.number.int({ min: undefined, max: undefined }),
      avatar: {
        enabled: faker.datatype.boolean(),
        uri: faker.lorem.slug(1),
      },
      customer: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        uuid: faker.lorem.slug(1),
        secret_key_data: faker.lorem.slug(1),
        public_key_data: faker.lorem.slug(1),
      },
      license: {
        seats: faker.number.int({ min: undefined, max: undefined }),
        evaluation: faker.datatype.boolean(),
        perpetual: faker.datatype.boolean(),
        unlimited_seating: faker.datatype.boolean(),
        support_key: faker.lorem.slug(1),
        ssh_allowed: faker.datatype.boolean(),
        cluster_support: faker.datatype.boolean(),
        expire_at: faker.date.past(),
      },
      github_ssl: {
        enabled: faker.datatype.boolean(),
        cert: faker.lorem.slug(1),
        key: faker.lorem.slug(1),
      },
      ldap: {
        host: faker.lorem.slug(1),
        port: faker.number.int({ min: undefined, max: undefined }),
        base: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
        uid: faker.lorem.slug(1),
        bind_dn: faker.lorem.slug(1),
        password: faker.lorem.slug(1),
        method: faker.lorem.slug(1),
        search_strategy: faker.lorem.slug(1),
        user_groups: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
        admin_group: faker.lorem.slug(1),
        virtual_attribute_enabled: faker.datatype.boolean(),
        recursive_group_search: faker.datatype.boolean(),
        posix_support: faker.datatype.boolean(),
        user_sync_emails: faker.datatype.boolean(),
        user_sync_keys: faker.datatype.boolean(),
        user_sync_interval: faker.number.int({ min: undefined, max: undefined }),
        team_sync_interval: faker.number.int({ min: undefined, max: undefined }),
        sync_enabled: faker.datatype.boolean(),
        reconciliation: {
          user: faker.lorem.slug(1),
          org: faker.lorem.slug(1),
        },
        profile: {
          uid: faker.lorem.slug(1),
          name: faker.person.fullName(),
          mail: faker.lorem.slug(1),
          key: faker.lorem.slug(1),
        },
      },
      cas: {
        url: faker.internet.url(),
      },
      saml: {
        sso_url: faker.internet.url(),
        certificate: faker.lorem.slug(1),
        certificate_path: faker.lorem.slug(1),
        issuer: faker.lorem.slug(1),
        idp_initiated_sso: faker.datatype.boolean(),
        disable_admin_demote: faker.datatype.boolean(),
      },
      github_oauth: {
        client_id: faker.lorem.slug(1),
        client_secret: faker.lorem.slug(1),
        organization_name: faker.person.fullName(),
        organization_team: faker.lorem.slug(1),
      },
      smtp: {
        enabled: faker.datatype.boolean(),
        address: faker.lorem.slug(1),
        authentication: faker.lorem.slug(1),
        port: faker.lorem.slug(1),
        domain: faker.lorem.slug(1),
        username: faker.person.fullName(),
        user_name: faker.person.fullName(),
        enable_starttls_auto: faker.datatype.boolean(),
        password: faker.lorem.slug(1),
        'discard-to-noreply-address': faker.datatype.boolean(),
        support_address: faker.lorem.slug(1),
        support_address_type: faker.lorem.slug(1),
        noreply_address: faker.lorem.slug(1),
      },
      ntp: {
        primary_server: faker.lorem.slug(1),
        secondary_server: faker.lorem.slug(1),
      },
      timezone: faker.lorem.slug(1),
      snmp: {
        enabled: faker.datatype.boolean(),
        community: faker.lorem.slug(1),
      },
      syslog: {
        enabled: faker.datatype.boolean(),
        server: faker.lorem.slug(1),
        protocol_name: faker.person.fullName(),
      },
      assets: faker.lorem.slug(1),
      pages: {
        enabled: faker.datatype.boolean(),
      },
      collectd: {
        enabled: faker.datatype.boolean(),
        server: faker.lorem.slug(1),
        port: faker.number.int({ min: undefined, max: undefined }),
        encryption: faker.lorem.slug(1),
        username: faker.person.fullName(),
        password: faker.lorem.slug(1),
      },
      mapping: {
        enabled: faker.datatype.boolean(),
        tileserver: faker.lorem.slug(1),
        basemap: faker.lorem.slug(1),
        token: faker.lorem.slug(1),
      },
      load_balancer: faker.lorem.slug(1),
    },
    run_list: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getEnterpriseAdminGetAllAuthorizedSshKeys200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    key: faker.lorem.slug(1),
    'pretty-print': faker.lorem.slug(1),
  }));
}

export function getEnterpriseAdminAddAuthorizedSshKey201Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    key: faker.lorem.slug(1),
    'pretty-print': faker.lorem.slug(1),
  }));
}

export function getEnterpriseAdminRemoveAuthorizedSshKey200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    key: faker.lorem.slug(1),
    'pretty-print': faker.lorem.slug(1),
  }));
}

export function getTeamsGetLegacy200Response() {
  return {
    id: 42,
    node_id: 'MDQ6VGVhbTE=',
    url: 'https://api.github.com/organizations/1/team/1',
    html_url: 'https://github.com/orgs/rails/teams/core',
    name: 'Developers',
    slug: 'justice-league',
    description: 'A great team.',
    privacy: 'closed',
    permission: 'push',
    members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
    repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
    parent: {
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    },
    members_count: 3,
    repos_count: 10,
    created_at: '2017-07-14T16:53:42Z',
    updated_at: '2017-08-17T12:37:15Z',
    organization: {
      login: 'github',
      id: 1,
      node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
      url: 'https://api.github.com/orgs/github',
      repos_url: 'https://api.github.com/orgs/github/repos',
      events_url: 'https://api.github.com/orgs/github/events',
      hooks_url: 'https://api.github.com/orgs/github/hooks',
      issues_url: 'https://api.github.com/orgs/github/issues',
      members_url: 'https://api.github.com/orgs/github/members{/member}',
      public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      description: 'A great organization',
      name: 'github',
      company: 'GitHub',
      blog: 'https://github.com/blog',
      location: 'San Francisco',
      email: 'octocat@github.com',
      twitter_username: 'github',
      is_verified: true,
      has_organization_projects: true,
      has_repository_projects: true,
      public_repos: 2,
      public_gists: 1,
      followers: 20,
      following: faker.number.int({ min: undefined, max: undefined }),
      html_url: 'https://github.com/octocat',
      created_at: '2008-01-14T04:33:35Z',
      type: 'Organization',
      total_private_repos: 100,
      owned_private_repos: 100,
      private_gists: 81,
      disk_usage: 10000,
      collaborators: 8,
      billing_email: 'org@example.com',
      plan: {
        name: faker.person.fullName(),
        space: faker.number.int({ min: undefined, max: undefined }),
        private_repos: faker.number.int({ min: undefined, max: undefined }),
        filled_seats: faker.number.int({ min: undefined, max: undefined }),
        seats: faker.number.int({ min: undefined, max: undefined }),
      },
      default_repository_permission: faker.lorem.slug(1),
      members_can_create_repositories: true,
      two_factor_requirement_enabled: true,
      members_allowed_repository_creation_type: 'all',
      members_can_create_public_repositories: true,
      members_can_create_private_repositories: true,
      members_can_create_internal_repositories: true,
      members_can_create_pages: true,
      members_can_create_public_pages: true,
      members_can_create_private_pages: true,
      updated_at: faker.date.past(),
    },
    ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
  };
}

export function getTeamsGetLegacy404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsUpdateLegacy200Response() {
  return {
    id: 42,
    node_id: 'MDQ6VGVhbTE=',
    url: 'https://api.github.com/organizations/1/team/1',
    html_url: 'https://github.com/orgs/rails/teams/core',
    name: 'Developers',
    slug: 'justice-league',
    description: 'A great team.',
    privacy: 'closed',
    permission: 'push',
    members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
    repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
    parent: {
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    },
    members_count: 3,
    repos_count: 10,
    created_at: '2017-07-14T16:53:42Z',
    updated_at: '2017-08-17T12:37:15Z',
    organization: {
      login: 'github',
      id: 1,
      node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
      url: 'https://api.github.com/orgs/github',
      repos_url: 'https://api.github.com/orgs/github/repos',
      events_url: 'https://api.github.com/orgs/github/events',
      hooks_url: 'https://api.github.com/orgs/github/hooks',
      issues_url: 'https://api.github.com/orgs/github/issues',
      members_url: 'https://api.github.com/orgs/github/members{/member}',
      public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      description: 'A great organization',
      name: 'github',
      company: 'GitHub',
      blog: 'https://github.com/blog',
      location: 'San Francisco',
      email: 'octocat@github.com',
      twitter_username: 'github',
      is_verified: true,
      has_organization_projects: true,
      has_repository_projects: true,
      public_repos: 2,
      public_gists: 1,
      followers: 20,
      following: faker.number.int({ min: undefined, max: undefined }),
      html_url: 'https://github.com/octocat',
      created_at: '2008-01-14T04:33:35Z',
      type: 'Organization',
      total_private_repos: 100,
      owned_private_repos: 100,
      private_gists: 81,
      disk_usage: 10000,
      collaborators: 8,
      billing_email: 'org@example.com',
      plan: {
        name: faker.person.fullName(),
        space: faker.number.int({ min: undefined, max: undefined }),
        private_repos: faker.number.int({ min: undefined, max: undefined }),
        filled_seats: faker.number.int({ min: undefined, max: undefined }),
        seats: faker.number.int({ min: undefined, max: undefined }),
      },
      default_repository_permission: faker.lorem.slug(1),
      members_can_create_repositories: true,
      two_factor_requirement_enabled: true,
      members_allowed_repository_creation_type: 'all',
      members_can_create_public_repositories: true,
      members_can_create_private_repositories: true,
      members_can_create_internal_repositories: true,
      members_can_create_pages: true,
      members_can_create_public_pages: true,
      members_can_create_private_pages: true,
      updated_at: faker.date.past(),
    },
    ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
  };
}

export function getTeamsUpdateLegacy201Response() {
  return {
    id: 42,
    node_id: 'MDQ6VGVhbTE=',
    url: 'https://api.github.com/organizations/1/team/1',
    html_url: 'https://github.com/orgs/rails/teams/core',
    name: 'Developers',
    slug: 'justice-league',
    description: 'A great team.',
    privacy: 'closed',
    permission: 'push',
    members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
    repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
    parent: {
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    },
    members_count: 3,
    repos_count: 10,
    created_at: '2017-07-14T16:53:42Z',
    updated_at: '2017-08-17T12:37:15Z',
    organization: {
      login: 'github',
      id: 1,
      node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
      url: 'https://api.github.com/orgs/github',
      repos_url: 'https://api.github.com/orgs/github/repos',
      events_url: 'https://api.github.com/orgs/github/events',
      hooks_url: 'https://api.github.com/orgs/github/hooks',
      issues_url: 'https://api.github.com/orgs/github/issues',
      members_url: 'https://api.github.com/orgs/github/members{/member}',
      public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      description: 'A great organization',
      name: 'github',
      company: 'GitHub',
      blog: 'https://github.com/blog',
      location: 'San Francisco',
      email: 'octocat@github.com',
      twitter_username: 'github',
      is_verified: true,
      has_organization_projects: true,
      has_repository_projects: true,
      public_repos: 2,
      public_gists: 1,
      followers: 20,
      following: faker.number.int({ min: undefined, max: undefined }),
      html_url: 'https://github.com/octocat',
      created_at: '2008-01-14T04:33:35Z',
      type: 'Organization',
      total_private_repos: 100,
      owned_private_repos: 100,
      private_gists: 81,
      disk_usage: 10000,
      collaborators: 8,
      billing_email: 'org@example.com',
      plan: {
        name: faker.person.fullName(),
        space: faker.number.int({ min: undefined, max: undefined }),
        private_repos: faker.number.int({ min: undefined, max: undefined }),
        filled_seats: faker.number.int({ min: undefined, max: undefined }),
        seats: faker.number.int({ min: undefined, max: undefined }),
      },
      default_repository_permission: faker.lorem.slug(1),
      members_can_create_repositories: true,
      two_factor_requirement_enabled: true,
      members_allowed_repository_creation_type: 'all',
      members_can_create_public_repositories: true,
      members_can_create_private_repositories: true,
      members_can_create_internal_repositories: true,
      members_can_create_pages: true,
      members_can_create_public_pages: true,
      members_can_create_private_pages: true,
      updated_at: faker.date.past(),
    },
    ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
  };
}

export function getTeamsUpdateLegacy403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsUpdateLegacy404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsUpdateLegacy422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getTeamsDeleteLegacy404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsDeleteLegacy422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getTeamsListDiscussionsLegacy200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'Please suggest improvements to our workflow in comments.',
    body_html: '<p>Hi! This is an area for us to collaborate as a team</p>',
    body_version: '0307116bbf7ced493b8d8a346c650b71',
    comments_count: faker.number.int({ min: undefined, max: undefined }),
    comments_url: 'https://api.github.com/organizations/1/team/2343027/discussions/1/comments',
    created_at: '2018-01-25T18:56:31Z',
    last_edited_at: faker.date.past(),
    html_url: 'https://github.com/orgs/github/teams/justice-league/discussions/1',
    node_id: 'MDE0OlRlYW1EaXNjdXNzaW9uMQ==',
    number: 42,
    pinned: true,
    private: true,
    team_url: 'https://api.github.com/organizations/1/team/2343027',
    title: 'How can we improve our workflow?',
    updated_at: '2018-01-25T18:56:31Z',
    url: 'https://api.github.com/organizations/1/team/2343027/discussions/1',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  }));
}

export function getTeamsCreateDiscussionLegacy201Response() {
  return {
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'Please suggest improvements to our workflow in comments.',
    body_html: '<p>Hi! This is an area for us to collaborate as a team</p>',
    body_version: '0307116bbf7ced493b8d8a346c650b71',
    comments_count: faker.number.int({ min: undefined, max: undefined }),
    comments_url: 'https://api.github.com/organizations/1/team/2343027/discussions/1/comments',
    created_at: '2018-01-25T18:56:31Z',
    last_edited_at: faker.date.past(),
    html_url: 'https://github.com/orgs/github/teams/justice-league/discussions/1',
    node_id: 'MDE0OlRlYW1EaXNjdXNzaW9uMQ==',
    number: 42,
    pinned: true,
    private: true,
    team_url: 'https://api.github.com/organizations/1/team/2343027',
    title: 'How can we improve our workflow?',
    updated_at: '2018-01-25T18:56:31Z',
    url: 'https://api.github.com/organizations/1/team/2343027/discussions/1',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getTeamsGetDiscussionLegacy200Response() {
  return {
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'Please suggest improvements to our workflow in comments.',
    body_html: '<p>Hi! This is an area for us to collaborate as a team</p>',
    body_version: '0307116bbf7ced493b8d8a346c650b71',
    comments_count: faker.number.int({ min: undefined, max: undefined }),
    comments_url: 'https://api.github.com/organizations/1/team/2343027/discussions/1/comments',
    created_at: '2018-01-25T18:56:31Z',
    last_edited_at: faker.date.past(),
    html_url: 'https://github.com/orgs/github/teams/justice-league/discussions/1',
    node_id: 'MDE0OlRlYW1EaXNjdXNzaW9uMQ==',
    number: 42,
    pinned: true,
    private: true,
    team_url: 'https://api.github.com/organizations/1/team/2343027',
    title: 'How can we improve our workflow?',
    updated_at: '2018-01-25T18:56:31Z',
    url: 'https://api.github.com/organizations/1/team/2343027/discussions/1',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getTeamsUpdateDiscussionLegacy200Response() {
  return {
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'Please suggest improvements to our workflow in comments.',
    body_html: '<p>Hi! This is an area for us to collaborate as a team</p>',
    body_version: '0307116bbf7ced493b8d8a346c650b71',
    comments_count: faker.number.int({ min: undefined, max: undefined }),
    comments_url: 'https://api.github.com/organizations/1/team/2343027/discussions/1/comments',
    created_at: '2018-01-25T18:56:31Z',
    last_edited_at: faker.date.past(),
    html_url: 'https://github.com/orgs/github/teams/justice-league/discussions/1',
    node_id: 'MDE0OlRlYW1EaXNjdXNzaW9uMQ==',
    number: 42,
    pinned: true,
    private: true,
    team_url: 'https://api.github.com/organizations/1/team/2343027',
    title: 'How can we improve our workflow?',
    updated_at: '2018-01-25T18:56:31Z',
    url: 'https://api.github.com/organizations/1/team/2343027/discussions/1',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getTeamsListDiscussionCommentsLegacy200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'I agree with this suggestion.',
    body_html: '<p>Do you like apples?</p>',
    body_version: '0307116bbf7ced493b8d8a346c650b71',
    created_at: '2018-01-15T23:53:58Z',
    last_edited_at: faker.date.past(),
    discussion_url: 'https://api.github.com/organizations/1/team/2403582/discussions/1',
    html_url: 'https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1',
    node_id: 'MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=',
    number: 42,
    updated_at: '2018-01-15T23:53:58Z',
    url: 'https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  }));
}

export function getTeamsCreateDiscussionCommentLegacy201Response() {
  return {
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'I agree with this suggestion.',
    body_html: '<p>Do you like apples?</p>',
    body_version: '0307116bbf7ced493b8d8a346c650b71',
    created_at: '2018-01-15T23:53:58Z',
    last_edited_at: faker.date.past(),
    discussion_url: 'https://api.github.com/organizations/1/team/2403582/discussions/1',
    html_url: 'https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1',
    node_id: 'MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=',
    number: 42,
    updated_at: '2018-01-15T23:53:58Z',
    url: 'https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getTeamsGetDiscussionCommentLegacy200Response() {
  return {
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'I agree with this suggestion.',
    body_html: '<p>Do you like apples?</p>',
    body_version: '0307116bbf7ced493b8d8a346c650b71',
    created_at: '2018-01-15T23:53:58Z',
    last_edited_at: faker.date.past(),
    discussion_url: 'https://api.github.com/organizations/1/team/2403582/discussions/1',
    html_url: 'https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1',
    node_id: 'MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=',
    number: 42,
    updated_at: '2018-01-15T23:53:58Z',
    url: 'https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getTeamsUpdateDiscussionCommentLegacy200Response() {
  return {
    author: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body: 'I agree with this suggestion.',
    body_html: '<p>Do you like apples?</p>',
    body_version: '0307116bbf7ced493b8d8a346c650b71',
    created_at: '2018-01-15T23:53:58Z',
    last_edited_at: faker.date.past(),
    discussion_url: 'https://api.github.com/organizations/1/team/2403582/discussions/1',
    html_url: 'https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1',
    node_id: 'MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=',
    number: 42,
    updated_at: '2018-01-15T23:53:58Z',
    url: 'https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getReactionsListForTeamDiscussionCommentLegacy200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  }));
}

export function getReactionsCreateForTeamDiscussionCommentLegacy201Response() {
  return {
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  };
}

export function getReactionsListForTeamDiscussionLegacy200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  }));
}

export function getReactionsCreateForTeamDiscussionLegacy201Response() {
  return {
    id: 1,
    node_id: 'MDg6UmVhY3Rpb24x',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    content: 'heart',
    created_at: '2016-05-20T20:09:31Z',
  };
}

export function getTeamsListMembersLegacy200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  }));
}

export function getTeamsListMembersLegacy404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsAddMemberLegacy403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsGetMembershipForUserLegacy200Response() {
  return {
    url: faker.internet.url(),
    role: 'member',
    state: faker.helpers.arrayElement(['active', 'pending']),
  };
}

export function getTeamsGetMembershipForUserLegacy404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsAddOrUpdateMembershipForUserLegacy200Response() {
  return {
    url: faker.internet.url(),
    role: 'member',
    state: faker.helpers.arrayElement(['active', 'pending']),
  };
}

export function getTeamsAddOrUpdateMembershipForUserLegacy404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsListProjectsLegacy200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    owner_url: faker.internet.url(),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    columns_url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    name: faker.person.fullName(),
    body: faker.lorem.slug(1),
    number: faker.number.int({ min: undefined, max: undefined }),
    state: faker.lorem.slug(1),
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    organization_permission: faker.lorem.slug(1),
    private: faker.datatype.boolean(),
    permissions: {
      read: faker.datatype.boolean(),
      write: faker.datatype.boolean(),
      admin: faker.datatype.boolean(),
    },
  }));
}

export function getTeamsListProjectsLegacy404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsCheckPermissionsForProjectLegacy200Response() {
  return {
    owner_url: faker.internet.url(),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    columns_url: faker.internet.url(),
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    name: faker.person.fullName(),
    body: faker.lorem.slug(1),
    number: faker.number.int({ min: undefined, max: undefined }),
    state: faker.lorem.slug(1),
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    organization_permission: faker.lorem.slug(1),
    private: faker.datatype.boolean(),
    permissions: {
      read: faker.datatype.boolean(),
      write: faker.datatype.boolean(),
      admin: faker.datatype.boolean(),
    },
  };
}

export function getTeamsAddOrUpdateProjectPermissionsLegacy403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
  };
}

export function getTeamsAddOrUpdateProjectPermissionsLegacy404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsAddOrUpdateProjectPermissionsLegacy422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getTeamsRemoveProjectLegacy404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsRemoveProjectLegacy422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getTeamsListReposLegacy200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1296269,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Hello-World',
    full_name: 'octocat/Hello-World',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: faker.internet.url(),
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: faker.internet.url(),
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: faker.internet.url(),
    mirror_url: faker.internet.url(),
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: faker.internet.url(),
    homepage: faker.lorem.slug(1),
    language: faker.lorem.slug(1),
    forks_count: faker.number.int({ min: undefined, max: undefined }),
    stargazers_count: faker.number.int({ min: undefined, max: undefined }),
    watchers_count: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    default_branch: faker.lorem.slug(1),
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: faker.datatype.boolean(),
    topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    has_issues: faker.datatype.boolean(),
    has_projects: faker.datatype.boolean(),
    has_wiki: faker.datatype.boolean(),
    has_pages: faker.datatype.boolean(),
    has_downloads: faker.datatype.boolean(),
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: faker.lorem.slug(1),
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    permissions: {
      admin: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
    },
    temp_clone_token: faker.lorem.slug(1),
    delete_branch_on_merge: faker.datatype.boolean(),
    subscribers_count: faker.number.int({ min: undefined, max: undefined }),
    network_count: faker.number.int({ min: undefined, max: undefined }),
    code_of_conduct: {
      key: 'contributor_covenant',
      name: 'Contributor Covenant',
      url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
      body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
      html_url: faker.internet.url(),
    },
    license: {
      key: faker.lorem.slug(1),
      name: faker.person.fullName(),
      spdx_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      node_id: faker.lorem.slug(1),
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    allow_forking: faker.datatype.boolean(),
  }));
}

export function getTeamsListReposLegacy404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsCheckPermissionsForRepoLegacy200Response() {
  return {
    id: 42,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Team Environment',
    full_name: 'octocat/Hello-World',
    license: {
      key: 'mit',
      name: 'MIT License',
      url: 'https://api.github.com/licenses/mit',
      spdx_id: 'MIT',
      node_id: 'MDc6TGljZW5zZW1pdA==',
      html_url: faker.internet.url(),
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    permissions: {
      admin: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
    },
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: 'git:github.com/octocat/Hello-World.git',
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: 'git@github.com:octocat/Hello-World.git',
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: 'https://github.com/octocat/Hello-World.git',
    mirror_url: 'git:git.example.com/octocat/Hello-World',
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: 'https://svn.github.com/octocat/Hello-World',
    homepage: 'https://github.com',
    language: faker.lorem.slug(1),
    forks_count: 9,
    stargazers_count: 80,
    watchers_count: 80,
    size: 108,
    default_branch: 'master',
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: true,
    topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    has_issues: true,
    has_projects: true,
    has_wiki: true,
    has_pages: faker.datatype.boolean(),
    has_downloads: true,
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: faker.lorem.slug(1),
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    allow_rebase_merge: true,
    template_repository: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    temp_clone_token: faker.lorem.slug(1),
    allow_squash_merge: true,
    allow_auto_merge: faker.datatype.boolean(),
    delete_branch_on_merge: faker.datatype.boolean(),
    allow_merge_commit: true,
    allow_forking: faker.datatype.boolean(),
    subscribers_count: faker.number.int({ min: undefined, max: undefined }),
    network_count: faker.number.int({ min: undefined, max: undefined }),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    master_branch: faker.lorem.slug(1),
  };
}

export function getTeamsAddOrUpdateRepoPermissionsLegacy403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsAddOrUpdateRepoPermissionsLegacy422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getTeamsListChildLegacy200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    name: faker.person.fullName(),
    slug: faker.lorem.slug(1),
    description: faker.lorem.slug(1),
    privacy: faker.lorem.slug(1),
    permission: faker.lorem.slug(1),
    permissions: {
      pull: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      admin: faker.datatype.boolean(),
    },
    url: faker.internet.url(),
    html_url: 'https://github.com/orgs/rails/teams/core',
    members_url: faker.internet.url(),
    repositories_url: faker.internet.url(),
    parent: {
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    },
  }));
}

export function getTeamsListChildLegacy403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsListChildLegacy404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsListChildLegacy422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getUsersGetAuthenticated200Response() {
  return faker.helpers.arrayElement([
    {
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      name: 'monalisa octocat',
      company: 'GitHub',
      blog: 'https://github.com/blog',
      location: 'San Francisco',
      email: 'octocat@github.com',
      hireable: faker.datatype.boolean(),
      bio: 'There once was...',
      twitter_username: 'monalisa',
      public_repos: 2,
      public_gists: 1,
      followers: 20,
      following: faker.number.int({ min: undefined, max: undefined }),
      created_at: '2008-01-14T04:33:35Z',
      updated_at: '2008-01-14T04:33:35Z',
      private_gists: 81,
      total_private_repos: 100,
      owned_private_repos: 100,
      disk_usage: 10000,
      collaborators: 8,
      two_factor_authentication: true,
      plan: {
        collaborators: faker.number.int({ min: undefined, max: undefined }),
        name: faker.person.fullName(),
        space: faker.number.int({ min: undefined, max: undefined }),
        private_repos: faker.number.int({ min: undefined, max: undefined }),
      },
      suspended_at: faker.date.past(),
      business_plus: faker.datatype.boolean(),
      ldap_dn: faker.lorem.slug(1),
    },
    {
      login: faker.lorem.slug(1),
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      avatar_url: faker.internet.url(),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
      followers_url: faker.internet.url(),
      following_url: faker.internet.url(),
      gists_url: faker.internet.url(),
      starred_url: faker.internet.url(),
      subscriptions_url: faker.internet.url(),
      organizations_url: faker.internet.url(),
      repos_url: faker.internet.url(),
      events_url: faker.internet.url(),
      received_events_url: faker.internet.url(),
      type: faker.lorem.slug(1),
      site_admin: faker.datatype.boolean(),
      name: faker.person.fullName(),
      company: faker.lorem.slug(1),
      blog: faker.lorem.slug(1),
      location: faker.lorem.slug(1),
      email: faker.internet.email(),
      hireable: faker.datatype.boolean(),
      bio: faker.lorem.slug(1),
      twitter_username: faker.person.fullName(),
      public_repos: faker.number.int({ min: undefined, max: undefined }),
      public_gists: faker.number.int({ min: undefined, max: undefined }),
      followers: faker.number.int({ min: undefined, max: undefined }),
      following: faker.number.int({ min: undefined, max: undefined }),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      plan: {
        collaborators: faker.number.int({ min: undefined, max: undefined }),
        name: faker.person.fullName(),
        space: faker.number.int({ min: undefined, max: undefined }),
        private_repos: faker.number.int({ min: undefined, max: undefined }),
      },
      suspended_at: faker.date.past(),
      private_gists: 1,
      total_private_repos: 2,
      owned_private_repos: 2,
      disk_usage: 1,
      collaborators: 3,
    },
  ]);
}

export function getUsersGetAuthenticated401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersGetAuthenticated403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersUpdateAuthenticated200Response() {
  return {
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    name: 'monalisa octocat',
    company: 'GitHub',
    blog: 'https://github.com/blog',
    location: 'San Francisco',
    email: 'octocat@github.com',
    hireable: faker.datatype.boolean(),
    bio: 'There once was...',
    twitter_username: 'monalisa',
    public_repos: 2,
    public_gists: 1,
    followers: 20,
    following: faker.number.int({ min: undefined, max: undefined }),
    created_at: '2008-01-14T04:33:35Z',
    updated_at: '2008-01-14T04:33:35Z',
    private_gists: 81,
    total_private_repos: 100,
    owned_private_repos: 100,
    disk_usage: 10000,
    collaborators: 8,
    two_factor_authentication: true,
    plan: {
      collaborators: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      space: faker.number.int({ min: undefined, max: undefined }),
      private_repos: faker.number.int({ min: undefined, max: undefined }),
    },
    suspended_at: faker.date.past(),
    business_plus: faker.datatype.boolean(),
    ldap_dn: faker.lorem.slug(1),
  };
}

export function getUsersUpdateAuthenticated401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersUpdateAuthenticated403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersUpdateAuthenticated404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersUpdateAuthenticated422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getUsersListEmailsForAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    email: 'octocat@github.com',
    primary: true,
    verified: true,
    visibility: 'public',
  }));
}

export function getUsersListEmailsForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersListEmailsForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersListEmailsForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersAddEmailForAuthenticatedUser201Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    email: 'octocat@github.com',
    primary: true,
    verified: true,
    visibility: 'public',
  }));
}

export function getUsersAddEmailForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersAddEmailForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersAddEmailForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersAddEmailForAuthenticatedUser422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getUsersDeleteEmailForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersDeleteEmailForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersDeleteEmailForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersDeleteEmailForAuthenticatedUser422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getUsersListFollowersForAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  }));
}

export function getUsersListFollowersForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersListFollowersForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersListFollowedByAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  }));
}

export function getUsersListFollowedByAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersListFollowedByAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersCheckPersonIsFollowedByAuthenticated401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersCheckPersonIsFollowedByAuthenticated403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersCheckPersonIsFollowedByAuthenticated404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersFollow401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersFollow403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersFollow404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersUnfollow401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersUnfollow403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersUnfollow404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersListGpgKeysForAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 3,
    primary_key_id: faker.number.int({ min: undefined, max: undefined }),
    key_id: '3262EFF25BA0D270',
    public_key: 'xsBNBFayYZ...',
    emails: [{ email: 'octocat@users.noreply.github.com', verified: true }],
    subkeys: [
      {
        id: 4,
        primary_key_id: 3,
        key_id: '4A595D4C72EE49C7',
        public_key: 'zsBNBFayYZ...',
        emails: [],
        subkeys: [],
        can_sign: false,
        can_encrypt_comms: true,
        can_encrypt_storage: true,
        can_certify: false,
        created_at: '2016-03-24T11:31:04-06:00',
        expires_at: null,
      },
    ],
    can_sign: true,
    can_encrypt_comms: faker.datatype.boolean(),
    can_encrypt_storage: faker.datatype.boolean(),
    can_certify: true,
    created_at: '2016-03-24T11:31:04-06:00',
    expires_at: faker.date.past(),
    raw_key: faker.lorem.slug(1),
  }));
}

export function getUsersListGpgKeysForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersListGpgKeysForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersListGpgKeysForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersCreateGpgKeyForAuthenticatedUser201Response() {
  return {
    id: 3,
    primary_key_id: faker.number.int({ min: undefined, max: undefined }),
    key_id: '3262EFF25BA0D270',
    public_key: 'xsBNBFayYZ...',
    emails: [{ email: 'octocat@users.noreply.github.com', verified: true }],
    subkeys: [
      {
        id: 4,
        primary_key_id: 3,
        key_id: '4A595D4C72EE49C7',
        public_key: 'zsBNBFayYZ...',
        emails: [],
        subkeys: [],
        can_sign: false,
        can_encrypt_comms: true,
        can_encrypt_storage: true,
        can_certify: false,
        created_at: '2016-03-24T11:31:04-06:00',
        expires_at: null,
      },
    ],
    can_sign: true,
    can_encrypt_comms: faker.datatype.boolean(),
    can_encrypt_storage: faker.datatype.boolean(),
    can_certify: true,
    created_at: '2016-03-24T11:31:04-06:00',
    expires_at: faker.date.past(),
    raw_key: faker.lorem.slug(1),
  };
}

export function getUsersCreateGpgKeyForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersCreateGpgKeyForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersCreateGpgKeyForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersCreateGpgKeyForAuthenticatedUser422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getUsersGetGpgKeyForAuthenticatedUser200Response() {
  return {
    id: 3,
    primary_key_id: faker.number.int({ min: undefined, max: undefined }),
    key_id: '3262EFF25BA0D270',
    public_key: 'xsBNBFayYZ...',
    emails: [{ email: 'octocat@users.noreply.github.com', verified: true }],
    subkeys: [
      {
        id: 4,
        primary_key_id: 3,
        key_id: '4A595D4C72EE49C7',
        public_key: 'zsBNBFayYZ...',
        emails: [],
        subkeys: [],
        can_sign: false,
        can_encrypt_comms: true,
        can_encrypt_storage: true,
        can_certify: false,
        created_at: '2016-03-24T11:31:04-06:00',
        expires_at: null,
      },
    ],
    can_sign: true,
    can_encrypt_comms: faker.datatype.boolean(),
    can_encrypt_storage: faker.datatype.boolean(),
    can_certify: true,
    created_at: '2016-03-24T11:31:04-06:00',
    expires_at: faker.date.past(),
    raw_key: faker.lorem.slug(1),
  };
}

export function getUsersGetGpgKeyForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersGetGpgKeyForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersGetGpgKeyForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersDeleteGpgKeyForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersDeleteGpgKeyForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersDeleteGpgKeyForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersDeleteGpgKeyForAuthenticatedUser422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getAppsListInstallationsForAuthenticatedUser200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    installations: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 1,
      account: faker.helpers.arrayElement([
        {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        {
          description: faker.lorem.slug(1),
          html_url: 'https://github.com/enterprises/octo-business',
          website_url: faker.internet.url(),
          id: 42,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Octo Business',
          slug: 'octo-business',
          created_at: '2019-01-26T19:01:12Z',
          updated_at: '2019-01-26T19:14:43Z',
          avatar_url: faker.internet.url(),
        },
      ]),
      repository_selection: faker.helpers.arrayElement(['all', 'selected']),
      access_tokens_url: 'https://api.github.com/installations/1/access_tokens',
      repositories_url: 'https://api.github.com/installation/repositories',
      html_url: 'https://github.com/organizations/github/settings/installations/1',
      app_id: 1,
      target_id: faker.number.int({ min: undefined, max: undefined }),
      target_type: 'Organization',
      permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
      events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      single_file_name: 'config.yaml',
      has_multiple_single_files: true,
      single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
      app_slug: 'github-actions',
      suspended_by: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      suspended_at: faker.date.past(),
      contact_email: '"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"',
    })),
  };
}

export function getAppsListInstallationsForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsListInstallationsForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsListInstallationReposForAuthenticatedUser200Response() {
  return {
    total_count: faker.number.int({ min: undefined, max: undefined }),
    repository_selection: faker.lorem.slug(1),
    repositories: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    })),
  };
}

export function getAppsListInstallationReposForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsListInstallationReposForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsAddRepoToInstallationForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsAddRepoToInstallationForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsRemoveRepoFromInstallationForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getAppsRemoveRepoFromInstallationForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getIssuesListForAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    node_id: faker.lorem.slug(1),
    url: 'https://api.github.com/repositories/42/issues/1',
    repository_url: faker.internet.url(),
    labels_url: faker.internet.url(),
    comments_url: faker.internet.url(),
    events_url: faker.internet.url(),
    html_url: faker.internet.url(),
    number: 42,
    state: 'open',
    state_reason: 'not_planned',
    title: 'Widget creation fails in Safari on OS X 10.8',
    body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    labels: ['bug', 'registration'],
    assignee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    })),
    milestone: {
      url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
      html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
      labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
      id: 1002604,
      node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
      number: 42,
      state: 'open',
      title: 'v1.0',
      description: 'Tracking milestone for version 1.0',
      creator: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      open_issues: 4,
      closed_issues: 8,
      created_at: '2011-04-10T20:09:31Z',
      updated_at: '2014-03-03T18:58:10Z',
      closed_at: '2013-02-12T13:22:01Z',
      due_on: '2012-10-09T23:39:01Z',
    },
    locked: faker.datatype.boolean(),
    active_lock_reason: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    pull_request: {
      merged_at: faker.date.past(),
      diff_url: faker.internet.url(),
      html_url: faker.internet.url(),
      patch_url: faker.internet.url(),
      url: faker.internet.url(),
    },
    closed_at: faker.date.past(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    draft: faker.datatype.boolean(),
    closed_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    body_html: faker.lorem.slug(1),
    body_text: faker.lorem.slug(1),
    timeline_url: faker.internet.url(),
    repository: {
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    },
    performed_via_github_app: {
      id: 37,
      slug: 'probot-owners',
      node_id: 'MDExOkludGVncmF0aW9uMQ==',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      name: 'Probot Owners',
      description: 'The description of the app.',
      external_url: 'https://example.com',
      html_url: 'https://github.com/apps/super-ci',
      created_at: '2017-07-08T16:18:44-04:00',
      updated_at: '2017-07-08T16:18:44-04:00',
      permissions: { issues: 'read', deployments: 'write' },
      events: ['label', 'deployment'],
      installations_count: 5,
      client_id: '"Iv1.25b5d1e65ffc4022"',
      client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
      webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
      pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    },
    author_association: 'OWNER',
    reactions: {
      url: faker.internet.url(),
      total_count: faker.number.int({ min: undefined, max: undefined }),
      '+1': faker.number.int({ min: undefined, max: undefined }),
      '-1': faker.number.int({ min: undefined, max: undefined }),
      laugh: faker.number.int({ min: undefined, max: undefined }),
      confused: faker.number.int({ min: undefined, max: undefined }),
      heart: faker.number.int({ min: undefined, max: undefined }),
      hooray: faker.number.int({ min: undefined, max: undefined }),
      eyes: faker.number.int({ min: undefined, max: undefined }),
      rocket: faker.number.int({ min: undefined, max: undefined }),
    },
  }));
}

export function getIssuesListForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersListPublicSshKeysForAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    key: faker.lorem.slug(1),
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    title: faker.lorem.slug(1),
    created_at: faker.date.past(),
    verified: faker.datatype.boolean(),
    read_only: faker.datatype.boolean(),
  }));
}

export function getUsersListPublicSshKeysForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersListPublicSshKeysForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersListPublicSshKeysForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersCreatePublicSshKeyForAuthenticatedUser201Response() {
  return {
    key: faker.lorem.slug(1),
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    title: faker.lorem.slug(1),
    created_at: faker.date.past(),
    verified: faker.datatype.boolean(),
    read_only: faker.datatype.boolean(),
  };
}

export function getUsersCreatePublicSshKeyForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersCreatePublicSshKeyForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersCreatePublicSshKeyForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersCreatePublicSshKeyForAuthenticatedUser422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getUsersGetPublicSshKeyForAuthenticatedUser200Response() {
  return {
    key: faker.lorem.slug(1),
    id: faker.number.int({ min: undefined, max: undefined }),
    url: faker.internet.url(),
    title: faker.lorem.slug(1),
    created_at: faker.date.past(),
    verified: faker.datatype.boolean(),
    read_only: faker.datatype.boolean(),
  };
}

export function getUsersGetPublicSshKeyForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersGetPublicSshKeyForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersGetPublicSshKeyForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersDeletePublicSshKeyForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersDeletePublicSshKeyForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersDeletePublicSshKeyForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsListMembershipsForAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: 'https://api.github.com/orgs/octocat/memberships/defunkt',
    state: 'active',
    role: 'admin',
    organization_url: 'https://api.github.com/orgs/octocat',
    organization: {
      login: 'github',
      id: 1,
      node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
      url: 'https://api.github.com/orgs/github',
      repos_url: 'https://api.github.com/orgs/github/repos',
      events_url: 'https://api.github.com/orgs/github/events',
      hooks_url: 'https://api.github.com/orgs/github/hooks',
      issues_url: 'https://api.github.com/orgs/github/issues',
      members_url: 'https://api.github.com/orgs/github/members{/member}',
      public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      description: 'A great organization',
    },
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    permissions: {
      can_create_repository: faker.datatype.boolean(),
    },
  }));
}

export function getOrgsListMembershipsForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsListMembershipsForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsListMembershipsForAuthenticatedUser422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getOrgsGetMembershipForAuthenticatedUser200Response() {
  return {
    url: 'https://api.github.com/orgs/octocat/memberships/defunkt',
    state: 'active',
    role: 'admin',
    organization_url: 'https://api.github.com/orgs/octocat',
    organization: {
      login: 'github',
      id: 1,
      node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
      url: 'https://api.github.com/orgs/github',
      repos_url: 'https://api.github.com/orgs/github/repos',
      events_url: 'https://api.github.com/orgs/github/events',
      hooks_url: 'https://api.github.com/orgs/github/hooks',
      issues_url: 'https://api.github.com/orgs/github/issues',
      members_url: 'https://api.github.com/orgs/github/members{/member}',
      public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      description: 'A great organization',
    },
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    permissions: {
      can_create_repository: faker.datatype.boolean(),
    },
  };
}

export function getOrgsGetMembershipForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsGetMembershipForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsUpdateMembershipForAuthenticatedUser200Response() {
  return {
    url: 'https://api.github.com/orgs/octocat/memberships/defunkt',
    state: 'active',
    role: 'admin',
    organization_url: 'https://api.github.com/orgs/octocat',
    organization: {
      login: 'github',
      id: 1,
      node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
      url: 'https://api.github.com/orgs/github',
      repos_url: 'https://api.github.com/orgs/github/repos',
      events_url: 'https://api.github.com/orgs/github/events',
      hooks_url: 'https://api.github.com/orgs/github/hooks',
      issues_url: 'https://api.github.com/orgs/github/issues',
      members_url: 'https://api.github.com/orgs/github/members{/member}',
      public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      description: 'A great organization',
    },
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    permissions: {
      can_create_repository: faker.datatype.boolean(),
    },
  };
}

export function getOrgsUpdateMembershipForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsUpdateMembershipForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsUpdateMembershipForAuthenticatedUser422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getOrgsListForAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    login: 'github',
    id: 1,
    node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
    url: 'https://api.github.com/orgs/github',
    repos_url: 'https://api.github.com/orgs/github/repos',
    events_url: 'https://api.github.com/orgs/github/events',
    hooks_url: 'https://api.github.com/orgs/github/hooks',
    issues_url: 'https://api.github.com/orgs/github/issues',
    members_url: 'https://api.github.com/orgs/github/members{/member}',
    public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    description: 'A great organization',
  }));
}

export function getOrgsListForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getOrgsListForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsCreateForAuthenticatedUser201Response() {
  return {
    owner_url: 'https://api.github.com/repos/api-playground/projects-test',
    url: 'https://api.github.com/projects/1002604',
    html_url: 'https://github.com/api-playground/projects-test/projects/12',
    columns_url: 'https://api.github.com/projects/1002604/columns',
    id: 1002604,
    node_id: 'MDc6UHJvamVjdDEwMDI2MDQ=',
    name: 'Week One Sprint',
    body: 'This project represents the sprint of the first week in January',
    number: 1,
    state: 'open',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2011-04-10T20:09:31Z',
    updated_at: '2014-03-03T18:58:10Z',
    organization_permission: faker.helpers.arrayElement(['read', 'write', 'admin', 'none']),
    private: faker.datatype.boolean(),
  };
}

export function getProjectsCreateForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsCreateForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getProjectsCreateForAuthenticatedUser422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
  };
}

export function getUsersListPublicEmailsForAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    email: 'octocat@github.com',
    primary: true,
    verified: true,
    visibility: 'public',
  }));
}

export function getUsersListPublicEmailsForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersListPublicEmailsForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersListPublicEmailsForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListForAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 42,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Team Environment',
    full_name: 'octocat/Hello-World',
    license: {
      key: 'mit',
      name: 'MIT License',
      url: 'https://api.github.com/licenses/mit',
      spdx_id: 'MIT',
      node_id: 'MDc6TGljZW5zZW1pdA==',
      html_url: faker.internet.url(),
    },
    organization: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    permissions: {
      admin: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
    },
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: 'git:github.com/octocat/Hello-World.git',
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: 'git@github.com:octocat/Hello-World.git',
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: 'https://github.com/octocat/Hello-World.git',
    mirror_url: 'git:git.example.com/octocat/Hello-World',
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: 'https://svn.github.com/octocat/Hello-World',
    homepage: 'https://github.com',
    language: faker.lorem.slug(1),
    forks_count: 9,
    stargazers_count: 80,
    watchers_count: 80,
    size: 108,
    default_branch: 'master',
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: true,
    topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    has_issues: true,
    has_projects: true,
    has_wiki: true,
    has_pages: faker.datatype.boolean(),
    has_downloads: true,
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: faker.lorem.slug(1),
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    allow_rebase_merge: true,
    template_repository: {
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      full_name: faker.person.fullName(),
      owner: {
        login: faker.lorem.slug(1),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        site_admin: faker.datatype.boolean(),
      },
      private: faker.datatype.boolean(),
      html_url: faker.internet.url(),
      description: faker.lorem.slug(1),
      fork: faker.datatype.boolean(),
      url: faker.internet.url(),
      archive_url: faker.internet.url(),
      assignees_url: faker.internet.url(),
      blobs_url: faker.internet.url(),
      branches_url: faker.internet.url(),
      collaborators_url: faker.internet.url(),
      comments_url: faker.internet.url(),
      commits_url: faker.internet.url(),
      compare_url: faker.internet.url(),
      contents_url: faker.internet.url(),
      contributors_url: faker.internet.url(),
      deployments_url: faker.internet.url(),
      downloads_url: faker.internet.url(),
      events_url: faker.internet.url(),
      forks_url: faker.internet.url(),
      git_commits_url: faker.internet.url(),
      git_refs_url: faker.internet.url(),
      git_tags_url: faker.internet.url(),
      git_url: faker.internet.url(),
      issue_comment_url: faker.internet.url(),
      issue_events_url: faker.internet.url(),
      issues_url: faker.internet.url(),
      keys_url: faker.internet.url(),
      labels_url: faker.internet.url(),
      languages_url: faker.internet.url(),
      merges_url: faker.internet.url(),
      milestones_url: faker.internet.url(),
      notifications_url: faker.internet.url(),
      pulls_url: faker.internet.url(),
      releases_url: faker.internet.url(),
      ssh_url: faker.internet.url(),
      stargazers_url: faker.internet.url(),
      statuses_url: faker.internet.url(),
      subscribers_url: faker.internet.url(),
      subscription_url: faker.internet.url(),
      tags_url: faker.internet.url(),
      teams_url: faker.internet.url(),
      trees_url: faker.internet.url(),
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: faker.internet.url(),
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: faker.date.past(),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      allow_rebase_merge: faker.datatype.boolean(),
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: faker.datatype.boolean(),
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
    },
    temp_clone_token: faker.lorem.slug(1),
    allow_squash_merge: true,
    allow_auto_merge: faker.datatype.boolean(),
    delete_branch_on_merge: faker.datatype.boolean(),
    allow_update_branch: faker.datatype.boolean(),
    allow_merge_commit: true,
    allow_forking: faker.datatype.boolean(),
    subscribers_count: faker.number.int({ min: undefined, max: undefined }),
    network_count: faker.number.int({ min: undefined, max: undefined }),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    master_branch: faker.lorem.slug(1),
    starred_at: '"2020-07-09T00:17:42Z"',
    anonymous_access_enabled: faker.datatype.boolean(),
  }));
}

export function getReposListForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListForAuthenticatedUser422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposCreateForAuthenticatedUser201Response() {
  return {
    id: 42,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Team Environment',
    full_name: 'octocat/Hello-World',
    license: {
      key: 'mit',
      name: 'MIT License',
      url: 'https://api.github.com/licenses/mit',
      spdx_id: 'MIT',
      node_id: 'MDc6TGljZW5zZW1pdA==',
      html_url: faker.internet.url(),
    },
    organization: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    permissions: {
      admin: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
    },
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: 'git:github.com/octocat/Hello-World.git',
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: 'git@github.com:octocat/Hello-World.git',
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: 'https://github.com/octocat/Hello-World.git',
    mirror_url: 'git:git.example.com/octocat/Hello-World',
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: 'https://svn.github.com/octocat/Hello-World',
    homepage: 'https://github.com',
    language: faker.lorem.slug(1),
    forks_count: 9,
    stargazers_count: 80,
    watchers_count: 80,
    size: 108,
    default_branch: 'master',
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: true,
    topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    has_issues: true,
    has_projects: true,
    has_wiki: true,
    has_pages: faker.datatype.boolean(),
    has_downloads: true,
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: faker.lorem.slug(1),
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    allow_rebase_merge: true,
    template_repository: {
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      full_name: faker.person.fullName(),
      owner: {
        login: faker.lorem.slug(1),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        site_admin: faker.datatype.boolean(),
      },
      private: faker.datatype.boolean(),
      html_url: faker.internet.url(),
      description: faker.lorem.slug(1),
      fork: faker.datatype.boolean(),
      url: faker.internet.url(),
      archive_url: faker.internet.url(),
      assignees_url: faker.internet.url(),
      blobs_url: faker.internet.url(),
      branches_url: faker.internet.url(),
      collaborators_url: faker.internet.url(),
      comments_url: faker.internet.url(),
      commits_url: faker.internet.url(),
      compare_url: faker.internet.url(),
      contents_url: faker.internet.url(),
      contributors_url: faker.internet.url(),
      deployments_url: faker.internet.url(),
      downloads_url: faker.internet.url(),
      events_url: faker.internet.url(),
      forks_url: faker.internet.url(),
      git_commits_url: faker.internet.url(),
      git_refs_url: faker.internet.url(),
      git_tags_url: faker.internet.url(),
      git_url: faker.internet.url(),
      issue_comment_url: faker.internet.url(),
      issue_events_url: faker.internet.url(),
      issues_url: faker.internet.url(),
      keys_url: faker.internet.url(),
      labels_url: faker.internet.url(),
      languages_url: faker.internet.url(),
      merges_url: faker.internet.url(),
      milestones_url: faker.internet.url(),
      notifications_url: faker.internet.url(),
      pulls_url: faker.internet.url(),
      releases_url: faker.internet.url(),
      ssh_url: faker.internet.url(),
      stargazers_url: faker.internet.url(),
      statuses_url: faker.internet.url(),
      subscribers_url: faker.internet.url(),
      subscription_url: faker.internet.url(),
      tags_url: faker.internet.url(),
      teams_url: faker.internet.url(),
      trees_url: faker.internet.url(),
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: faker.internet.url(),
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: faker.date.past(),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      allow_rebase_merge: faker.datatype.boolean(),
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: faker.datatype.boolean(),
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
    },
    temp_clone_token: faker.lorem.slug(1),
    allow_squash_merge: true,
    allow_auto_merge: faker.datatype.boolean(),
    delete_branch_on_merge: faker.datatype.boolean(),
    allow_update_branch: faker.datatype.boolean(),
    allow_merge_commit: true,
    allow_forking: faker.datatype.boolean(),
    subscribers_count: faker.number.int({ min: undefined, max: undefined }),
    network_count: faker.number.int({ min: undefined, max: undefined }),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    master_branch: faker.lorem.slug(1),
    starred_at: '"2020-07-09T00:17:42Z"',
    anonymous_access_enabled: faker.datatype.boolean(),
  };
}

export function getReposCreateForAuthenticatedUser400Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposCreateForAuthenticatedUser422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getReposListInvitationsForAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 42,
    repository: {
      id: 1296269,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Hello-World',
      full_name: 'octocat/Hello-World',
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: faker.internet.url(),
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: faker.internet.url(),
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      temp_clone_token: faker.lorem.slug(1),
      delete_branch_on_merge: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      code_of_conduct: {
        key: 'contributor_covenant',
        name: 'Contributor Covenant',
        url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
        body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
        html_url: faker.internet.url(),
      },
      license: {
        key: faker.lorem.slug(1),
        name: faker.person.fullName(),
        spdx_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        node_id: faker.lorem.slug(1),
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      allow_forking: faker.datatype.boolean(),
    },
    invitee: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    inviter: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    permissions: 'read',
    created_at: '2016-06-13T14:52:50-05:00',
    expired: faker.datatype.boolean(),
    url: 'https://api.github.com/user/repository-invitations/1',
    html_url: 'https://github.com/octocat/Hello-World/invitations',
    node_id: faker.lorem.slug(1),
  }));
}

export function getReposListInvitationsForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListInvitationsForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposListInvitationsForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposAcceptInvitationForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposAcceptInvitationForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposAcceptInvitationForAuthenticatedUser409Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposDeclineInvitationForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposDeclineInvitationForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getReposDeclineInvitationForAuthenticatedUser409Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityListReposStarredByAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 42,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Team Environment',
    full_name: 'octocat/Hello-World',
    license: {
      key: 'mit',
      name: 'MIT License',
      url: 'https://api.github.com/licenses/mit',
      spdx_id: 'MIT',
      node_id: 'MDc6TGljZW5zZW1pdA==',
      html_url: faker.internet.url(),
    },
    organization: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    permissions: {
      admin: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
    },
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: 'git:github.com/octocat/Hello-World.git',
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: 'git@github.com:octocat/Hello-World.git',
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: 'https://github.com/octocat/Hello-World.git',
    mirror_url: 'git:git.example.com/octocat/Hello-World',
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: 'https://svn.github.com/octocat/Hello-World',
    homepage: 'https://github.com',
    language: faker.lorem.slug(1),
    forks_count: 9,
    stargazers_count: 80,
    watchers_count: 80,
    size: 108,
    default_branch: 'master',
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: true,
    topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    has_issues: true,
    has_projects: true,
    has_wiki: true,
    has_pages: faker.datatype.boolean(),
    has_downloads: true,
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: faker.lorem.slug(1),
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    allow_rebase_merge: true,
    template_repository: {
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      name: faker.person.fullName(),
      full_name: faker.person.fullName(),
      owner: {
        login: faker.lorem.slug(1),
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(1),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.internet.url(),
        gists_url: faker.internet.url(),
        starred_url: faker.internet.url(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(1),
        site_admin: faker.datatype.boolean(),
      },
      private: faker.datatype.boolean(),
      html_url: faker.internet.url(),
      description: faker.lorem.slug(1),
      fork: faker.datatype.boolean(),
      url: faker.internet.url(),
      archive_url: faker.internet.url(),
      assignees_url: faker.internet.url(),
      blobs_url: faker.internet.url(),
      branches_url: faker.internet.url(),
      collaborators_url: faker.internet.url(),
      comments_url: faker.internet.url(),
      commits_url: faker.internet.url(),
      compare_url: faker.internet.url(),
      contents_url: faker.internet.url(),
      contributors_url: faker.internet.url(),
      deployments_url: faker.internet.url(),
      downloads_url: faker.internet.url(),
      events_url: faker.internet.url(),
      forks_url: faker.internet.url(),
      git_commits_url: faker.internet.url(),
      git_refs_url: faker.internet.url(),
      git_tags_url: faker.internet.url(),
      git_url: faker.internet.url(),
      issue_comment_url: faker.internet.url(),
      issue_events_url: faker.internet.url(),
      issues_url: faker.internet.url(),
      keys_url: faker.internet.url(),
      labels_url: faker.internet.url(),
      languages_url: faker.internet.url(),
      merges_url: faker.internet.url(),
      milestones_url: faker.internet.url(),
      notifications_url: faker.internet.url(),
      pulls_url: faker.internet.url(),
      releases_url: faker.internet.url(),
      ssh_url: faker.internet.url(),
      stargazers_url: faker.internet.url(),
      statuses_url: faker.internet.url(),
      subscribers_url: faker.internet.url(),
      subscription_url: faker.internet.url(),
      tags_url: faker.internet.url(),
      teams_url: faker.internet.url(),
      trees_url: faker.internet.url(),
      clone_url: faker.internet.url(),
      mirror_url: faker.internet.url(),
      hooks_url: faker.internet.url(),
      svn_url: faker.internet.url(),
      homepage: faker.lorem.slug(1),
      language: faker.lorem.slug(1),
      forks_count: faker.number.int({ min: undefined, max: undefined }),
      stargazers_count: faker.number.int({ min: undefined, max: undefined }),
      watchers_count: faker.number.int({ min: undefined, max: undefined }),
      size: faker.number.int({ min: undefined, max: undefined }),
      default_branch: faker.lorem.slug(1),
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: faker.datatype.boolean(),
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: faker.datatype.boolean(),
      has_projects: faker.datatype.boolean(),
      has_wiki: faker.datatype.boolean(),
      has_pages: faker.datatype.boolean(),
      has_downloads: faker.datatype.boolean(),
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: faker.date.past(),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      permissions: {
        admin: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
      },
      allow_rebase_merge: faker.datatype.boolean(),
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: faker.datatype.boolean(),
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
    },
    temp_clone_token: faker.lorem.slug(1),
    allow_squash_merge: true,
    allow_auto_merge: faker.datatype.boolean(),
    delete_branch_on_merge: faker.datatype.boolean(),
    allow_update_branch: faker.datatype.boolean(),
    allow_merge_commit: true,
    allow_forking: faker.datatype.boolean(),
    subscribers_count: faker.number.int({ min: undefined, max: undefined }),
    network_count: faker.number.int({ min: undefined, max: undefined }),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    master_branch: faker.lorem.slug(1),
    starred_at: '"2020-07-09T00:17:42Z"',
    anonymous_access_enabled: faker.datatype.boolean(),
  }));
}

export function getActivityListReposStarredByAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityListReposStarredByAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityCheckRepoIsStarredByAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityCheckRepoIsStarredByAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityCheckRepoIsStarredByAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityStarRepoForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityStarRepoForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityStarRepoForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityUnstarRepoForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityUnstarRepoForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityUnstarRepoForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityListWatchedReposForAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1296269,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Hello-World',
    full_name: 'octocat/Hello-World',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: faker.internet.url(),
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: faker.internet.url(),
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: faker.internet.url(),
    mirror_url: faker.internet.url(),
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: faker.internet.url(),
    homepage: faker.lorem.slug(1),
    language: faker.lorem.slug(1),
    forks_count: faker.number.int({ min: undefined, max: undefined }),
    stargazers_count: faker.number.int({ min: undefined, max: undefined }),
    watchers_count: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    default_branch: faker.lorem.slug(1),
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: faker.datatype.boolean(),
    topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    has_issues: faker.datatype.boolean(),
    has_projects: faker.datatype.boolean(),
    has_wiki: faker.datatype.boolean(),
    has_pages: faker.datatype.boolean(),
    has_downloads: faker.datatype.boolean(),
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: faker.lorem.slug(1),
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    permissions: {
      admin: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
    },
    temp_clone_token: faker.lorem.slug(1),
    delete_branch_on_merge: faker.datatype.boolean(),
    subscribers_count: faker.number.int({ min: undefined, max: undefined }),
    network_count: faker.number.int({ min: undefined, max: undefined }),
    code_of_conduct: {
      key: 'contributor_covenant',
      name: 'Contributor Covenant',
      url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
      body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
      html_url: faker.internet.url(),
    },
    license: {
      key: faker.lorem.slug(1),
      name: faker.person.fullName(),
      spdx_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      node_id: faker.lorem.slug(1),
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    allow_forking: faker.datatype.boolean(),
  }));
}

export function getActivityListWatchedReposForAuthenticatedUser401Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityListWatchedReposForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsListForAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 42,
    node_id: 'MDQ6VGVhbTE=',
    url: 'https://api.github.com/organizations/1/team/1',
    html_url: 'https://github.com/orgs/rails/teams/core',
    name: 'Developers',
    slug: 'justice-league',
    description: 'A great team.',
    privacy: 'closed',
    permission: 'push',
    members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
    repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
    parent: {
      id: 1,
      node_id: 'MDQ6VGVhbTE=',
      url: 'https://api.github.com/organizations/1/team/1',
      members_url: 'https://api.github.com/organizations/1/team/1/members{/member}',
      name: 'Justice League',
      description: 'A great team.',
      permission: 'admin',
      privacy: 'closed',
      html_url: 'https://github.com/orgs/rails/teams/core',
      repositories_url: 'https://api.github.com/organizations/1/team/1/repos',
      slug: 'justice-league',
      ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
    },
    members_count: 3,
    repos_count: 10,
    created_at: '2017-07-14T16:53:42Z',
    updated_at: '2017-08-17T12:37:15Z',
    organization: {
      login: 'github',
      id: 1,
      node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
      url: 'https://api.github.com/orgs/github',
      repos_url: 'https://api.github.com/orgs/github/repos',
      events_url: 'https://api.github.com/orgs/github/events',
      hooks_url: 'https://api.github.com/orgs/github/hooks',
      issues_url: 'https://api.github.com/orgs/github/issues',
      members_url: 'https://api.github.com/orgs/github/members{/member}',
      public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      description: 'A great organization',
      name: 'github',
      company: 'GitHub',
      blog: 'https://github.com/blog',
      location: 'San Francisco',
      email: 'octocat@github.com',
      twitter_username: 'github',
      is_verified: true,
      has_organization_projects: true,
      has_repository_projects: true,
      public_repos: 2,
      public_gists: 1,
      followers: 20,
      following: faker.number.int({ min: undefined, max: undefined }),
      html_url: 'https://github.com/octocat',
      created_at: '2008-01-14T04:33:35Z',
      type: 'Organization',
      total_private_repos: 100,
      owned_private_repos: 100,
      private_gists: 81,
      disk_usage: 10000,
      collaborators: 8,
      billing_email: 'org@example.com',
      plan: {
        name: faker.person.fullName(),
        space: faker.number.int({ min: undefined, max: undefined }),
        private_repos: faker.number.int({ min: undefined, max: undefined }),
        filled_seats: faker.number.int({ min: undefined, max: undefined }),
        seats: faker.number.int({ min: undefined, max: undefined }),
      },
      default_repository_permission: faker.lorem.slug(1),
      members_can_create_repositories: true,
      two_factor_requirement_enabled: true,
      members_allowed_repository_creation_type: 'all',
      members_can_create_public_repositories: true,
      members_can_create_private_repositories: true,
      members_can_create_internal_repositories: true,
      members_can_create_pages: true,
      members_can_create_public_pages: true,
      members_can_create_private_pages: true,
      updated_at: faker.date.past(),
    },
    ldap_dn: 'uid=example,ou=users,dc=github,dc=com',
  }));
}

export function getTeamsListForAuthenticatedUser403Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getTeamsListForAuthenticatedUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersList200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  }));
}

export function getUsersGetByUsername200Response() {
  return faker.helpers.arrayElement([
    {
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      name: 'monalisa octocat',
      company: 'GitHub',
      blog: 'https://github.com/blog',
      location: 'San Francisco',
      email: 'octocat@github.com',
      hireable: faker.datatype.boolean(),
      bio: 'There once was...',
      twitter_username: 'monalisa',
      public_repos: 2,
      public_gists: 1,
      followers: 20,
      following: faker.number.int({ min: undefined, max: undefined }),
      created_at: '2008-01-14T04:33:35Z',
      updated_at: '2008-01-14T04:33:35Z',
      private_gists: 81,
      total_private_repos: 100,
      owned_private_repos: 100,
      disk_usage: 10000,
      collaborators: 8,
      two_factor_authentication: true,
      plan: {
        collaborators: faker.number.int({ min: undefined, max: undefined }),
        name: faker.person.fullName(),
        space: faker.number.int({ min: undefined, max: undefined }),
        private_repos: faker.number.int({ min: undefined, max: undefined }),
      },
      suspended_at: faker.date.past(),
      business_plus: faker.datatype.boolean(),
      ldap_dn: faker.lorem.slug(1),
    },
    {
      login: faker.lorem.slug(1),
      id: faker.number.int({ min: undefined, max: undefined }),
      node_id: faker.lorem.slug(1),
      avatar_url: faker.internet.url(),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
      followers_url: faker.internet.url(),
      following_url: faker.internet.url(),
      gists_url: faker.internet.url(),
      starred_url: faker.internet.url(),
      subscriptions_url: faker.internet.url(),
      organizations_url: faker.internet.url(),
      repos_url: faker.internet.url(),
      events_url: faker.internet.url(),
      received_events_url: faker.internet.url(),
      type: faker.lorem.slug(1),
      site_admin: faker.datatype.boolean(),
      name: faker.person.fullName(),
      company: faker.lorem.slug(1),
      blog: faker.lorem.slug(1),
      location: faker.lorem.slug(1),
      email: faker.internet.email(),
      hireable: faker.datatype.boolean(),
      bio: faker.lorem.slug(1),
      twitter_username: faker.person.fullName(),
      public_repos: faker.number.int({ min: undefined, max: undefined }),
      public_gists: faker.number.int({ min: undefined, max: undefined }),
      followers: faker.number.int({ min: undefined, max: undefined }),
      following: faker.number.int({ min: undefined, max: undefined }),
      created_at: faker.date.past(),
      updated_at: faker.date.past(),
      plan: {
        collaborators: faker.number.int({ min: undefined, max: undefined }),
        name: faker.person.fullName(),
        space: faker.number.int({ min: undefined, max: undefined }),
        private_repos: faker.number.int({ min: undefined, max: undefined }),
      },
      suspended_at: faker.date.past(),
      private_gists: 1,
      total_private_repos: 2,
      owned_private_repos: 2,
      disk_usage: 1,
      collaborators: 3,
    },
  ]);
}

export function getUsersGetByUsername404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getActivityListEventsForAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.lorem.slug(1),
    type: faker.lorem.slug(1),
    actor: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    repo: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    org: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    payload: {
      action: faker.lorem.slug(1),
      issue: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/1',
        repository_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: 42,
        state: 'open',
        state_reason: 'not_planned',
        title: 'Widget creation fails in Safari on OS X 10.8',
        body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        labels: ['bug', 'registration'],
        assignee: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        })),
        milestone: {
          url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
          html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
          labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
          id: 1002604,
          node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
          number: 42,
          state: 'open',
          title: 'v1.0',
          description: 'Tracking milestone for version 1.0',
          creator: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          open_issues: 4,
          closed_issues: 8,
          created_at: '2011-04-10T20:09:31Z',
          updated_at: '2014-03-03T18:58:10Z',
          closed_at: '2013-02-12T13:22:01Z',
          due_on: '2012-10-09T23:39:01Z',
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(1),
        comments: faker.number.int({ min: undefined, max: undefined }),
        pull_request: {
          merged_at: faker.date.past(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        body_html: faker.lorem.slug(1),
        body_text: faker.lorem.slug(1),
        timeline_url: faker.internet.url(),
        repository: {
          id: 42,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Team Environment',
          full_name: 'octocat/Hello-World',
          license: {
            key: 'mit',
            name: 'MIT License',
            url: 'https://api.github.com/licenses/mit',
            spdx_id: 'MIT',
            node_id: 'MDc6TGljZW5zZW1pdA==',
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          forks: faker.number.int({ min: undefined, max: undefined }),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          private: faker.datatype.boolean(),
          html_url: 'https://github.com/octocat/Hello-World',
          description: 'This your first repo!',
          fork: faker.datatype.boolean(),
          url: 'https://api.github.com/repos/octocat/Hello-World',
          archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
          assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
          blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
          branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
          collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
          comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
          commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
          compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
          contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
          contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
          deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
          downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
          events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
          forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
          git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
          git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
          git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
          git_url: 'git:github.com/octocat/Hello-World.git',
          issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
          issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
          issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
          keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
          labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
          languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
          merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
          milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
          notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
          pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
          releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
          ssh_url: 'git@github.com:octocat/Hello-World.git',
          stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
          statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
          subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
          subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
          tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
          teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
          trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
          clone_url: 'https://github.com/octocat/Hello-World.git',
          mirror_url: 'git:git.example.com/octocat/Hello-World',
          hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
          svn_url: 'https://svn.github.com/octocat/Hello-World',
          homepage: 'https://github.com',
          language: faker.lorem.slug(1),
          forks_count: 9,
          stargazers_count: 80,
          watchers_count: 80,
          size: 108,
          default_branch: 'master',
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: true,
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: true,
          has_projects: true,
          has_wiki: true,
          has_pages: faker.datatype.boolean(),
          has_downloads: true,
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: '2011-01-26T19:06:43Z',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:14:43Z',
          allow_rebase_merge: true,
          template_repository: {
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            name: faker.person.fullName(),
            full_name: faker.person.fullName(),
            owner: {
              login: faker.lorem.slug(1),
              id: faker.number.int({ min: undefined, max: undefined }),
              node_id: faker.lorem.slug(1),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(1),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.internet.url(),
            assignees_url: faker.internet.url(),
            blobs_url: faker.internet.url(),
            branches_url: faker.internet.url(),
            collaborators_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            compare_url: faker.internet.url(),
            contents_url: faker.internet.url(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.internet.url(),
            git_refs_url: faker.internet.url(),
            git_tags_url: faker.internet.url(),
            git_url: faker.internet.url(),
            issue_comment_url: faker.internet.url(),
            issue_events_url: faker.internet.url(),
            issues_url: faker.internet.url(),
            keys_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.internet.url(),
            notifications_url: faker.internet.url(),
            pulls_url: faker.internet.url(),
            releases_url: faker.internet.url(),
            ssh_url: faker.internet.url(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.internet.url(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.internet.url(),
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.number.int({ min: undefined, max: undefined }),
            stargazers_count: faker.number.int({ min: undefined, max: undefined }),
            watchers_count: faker.number.int({ min: undefined, max: undefined }),
            size: faker.number.int({ min: undefined, max: undefined }),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.number.int({ min: undefined, max: undefined }),
            is_template: faker.datatype.boolean(),
            topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
              faker.lorem.slug(1)
            ),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.number.int({ min: undefined, max: undefined }),
            network_count: faker.number.int({ min: undefined, max: undefined }),
          },
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: true,
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: true,
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
          open_issues: faker.number.int({ min: undefined, max: undefined }),
          watchers: faker.number.int({ min: undefined, max: undefined }),
          master_branch: faker.lorem.slug(1),
          starred_at: '"2020-07-09T00:17:42Z"',
          anonymous_access_enabled: faker.datatype.boolean(),
        },
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        author_association: 'OWNER',
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      comment: {
        id: 42,
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/comments/1',
        body: 'What version of Safari were you using when you observed this bug?',
        body_text: faker.lorem.slug(1),
        body_html: faker.lorem.slug(1),
        html_url: faker.internet.url(),
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        created_at: '2011-04-14T16:00:49Z',
        updated_at: '2011-04-14T16:00:49Z',
        issue_url: faker.internet.url(),
        author_association: 'OWNER',
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      pages: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        page_name: faker.person.fullName(),
        title: faker.lorem.slug(1),
        summary: faker.lorem.slug(1),
        action: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        html_url: faker.internet.url(),
      })),
    },
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
  }));
}

export function getActivityListOrgEventsForAuthenticatedUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.lorem.slug(1),
    type: faker.lorem.slug(1),
    actor: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    repo: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    org: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    payload: {
      action: faker.lorem.slug(1),
      issue: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/1',
        repository_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: 42,
        state: 'open',
        state_reason: 'not_planned',
        title: 'Widget creation fails in Safari on OS X 10.8',
        body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        labels: ['bug', 'registration'],
        assignee: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        })),
        milestone: {
          url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
          html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
          labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
          id: 1002604,
          node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
          number: 42,
          state: 'open',
          title: 'v1.0',
          description: 'Tracking milestone for version 1.0',
          creator: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          open_issues: 4,
          closed_issues: 8,
          created_at: '2011-04-10T20:09:31Z',
          updated_at: '2014-03-03T18:58:10Z',
          closed_at: '2013-02-12T13:22:01Z',
          due_on: '2012-10-09T23:39:01Z',
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(1),
        comments: faker.number.int({ min: undefined, max: undefined }),
        pull_request: {
          merged_at: faker.date.past(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        body_html: faker.lorem.slug(1),
        body_text: faker.lorem.slug(1),
        timeline_url: faker.internet.url(),
        repository: {
          id: 42,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Team Environment',
          full_name: 'octocat/Hello-World',
          license: {
            key: 'mit',
            name: 'MIT License',
            url: 'https://api.github.com/licenses/mit',
            spdx_id: 'MIT',
            node_id: 'MDc6TGljZW5zZW1pdA==',
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          forks: faker.number.int({ min: undefined, max: undefined }),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          private: faker.datatype.boolean(),
          html_url: 'https://github.com/octocat/Hello-World',
          description: 'This your first repo!',
          fork: faker.datatype.boolean(),
          url: 'https://api.github.com/repos/octocat/Hello-World',
          archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
          assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
          blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
          branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
          collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
          comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
          commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
          compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
          contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
          contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
          deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
          downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
          events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
          forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
          git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
          git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
          git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
          git_url: 'git:github.com/octocat/Hello-World.git',
          issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
          issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
          issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
          keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
          labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
          languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
          merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
          milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
          notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
          pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
          releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
          ssh_url: 'git@github.com:octocat/Hello-World.git',
          stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
          statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
          subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
          subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
          tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
          teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
          trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
          clone_url: 'https://github.com/octocat/Hello-World.git',
          mirror_url: 'git:git.example.com/octocat/Hello-World',
          hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
          svn_url: 'https://svn.github.com/octocat/Hello-World',
          homepage: 'https://github.com',
          language: faker.lorem.slug(1),
          forks_count: 9,
          stargazers_count: 80,
          watchers_count: 80,
          size: 108,
          default_branch: 'master',
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: true,
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: true,
          has_projects: true,
          has_wiki: true,
          has_pages: faker.datatype.boolean(),
          has_downloads: true,
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: '2011-01-26T19:06:43Z',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:14:43Z',
          allow_rebase_merge: true,
          template_repository: {
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            name: faker.person.fullName(),
            full_name: faker.person.fullName(),
            owner: {
              login: faker.lorem.slug(1),
              id: faker.number.int({ min: undefined, max: undefined }),
              node_id: faker.lorem.slug(1),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(1),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.internet.url(),
            assignees_url: faker.internet.url(),
            blobs_url: faker.internet.url(),
            branches_url: faker.internet.url(),
            collaborators_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            compare_url: faker.internet.url(),
            contents_url: faker.internet.url(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.internet.url(),
            git_refs_url: faker.internet.url(),
            git_tags_url: faker.internet.url(),
            git_url: faker.internet.url(),
            issue_comment_url: faker.internet.url(),
            issue_events_url: faker.internet.url(),
            issues_url: faker.internet.url(),
            keys_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.internet.url(),
            notifications_url: faker.internet.url(),
            pulls_url: faker.internet.url(),
            releases_url: faker.internet.url(),
            ssh_url: faker.internet.url(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.internet.url(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.internet.url(),
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.number.int({ min: undefined, max: undefined }),
            stargazers_count: faker.number.int({ min: undefined, max: undefined }),
            watchers_count: faker.number.int({ min: undefined, max: undefined }),
            size: faker.number.int({ min: undefined, max: undefined }),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.number.int({ min: undefined, max: undefined }),
            is_template: faker.datatype.boolean(),
            topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
              faker.lorem.slug(1)
            ),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.number.int({ min: undefined, max: undefined }),
            network_count: faker.number.int({ min: undefined, max: undefined }),
          },
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: true,
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: true,
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
          open_issues: faker.number.int({ min: undefined, max: undefined }),
          watchers: faker.number.int({ min: undefined, max: undefined }),
          master_branch: faker.lorem.slug(1),
          starred_at: '"2020-07-09T00:17:42Z"',
          anonymous_access_enabled: faker.datatype.boolean(),
        },
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        author_association: 'OWNER',
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      comment: {
        id: 42,
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/comments/1',
        body: 'What version of Safari were you using when you observed this bug?',
        body_text: faker.lorem.slug(1),
        body_html: faker.lorem.slug(1),
        html_url: faker.internet.url(),
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        created_at: '2011-04-14T16:00:49Z',
        updated_at: '2011-04-14T16:00:49Z',
        issue_url: faker.internet.url(),
        author_association: 'OWNER',
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      pages: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        page_name: faker.person.fullName(),
        title: faker.lorem.slug(1),
        summary: faker.lorem.slug(1),
        action: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        html_url: faker.internet.url(),
      })),
    },
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
  }));
}

export function getActivityListPublicEventsForUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.lorem.slug(1),
    type: faker.lorem.slug(1),
    actor: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    repo: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    org: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    payload: {
      action: faker.lorem.slug(1),
      issue: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/1',
        repository_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: 42,
        state: 'open',
        state_reason: 'not_planned',
        title: 'Widget creation fails in Safari on OS X 10.8',
        body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        labels: ['bug', 'registration'],
        assignee: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        })),
        milestone: {
          url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
          html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
          labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
          id: 1002604,
          node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
          number: 42,
          state: 'open',
          title: 'v1.0',
          description: 'Tracking milestone for version 1.0',
          creator: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          open_issues: 4,
          closed_issues: 8,
          created_at: '2011-04-10T20:09:31Z',
          updated_at: '2014-03-03T18:58:10Z',
          closed_at: '2013-02-12T13:22:01Z',
          due_on: '2012-10-09T23:39:01Z',
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(1),
        comments: faker.number.int({ min: undefined, max: undefined }),
        pull_request: {
          merged_at: faker.date.past(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        body_html: faker.lorem.slug(1),
        body_text: faker.lorem.slug(1),
        timeline_url: faker.internet.url(),
        repository: {
          id: 42,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Team Environment',
          full_name: 'octocat/Hello-World',
          license: {
            key: 'mit',
            name: 'MIT License',
            url: 'https://api.github.com/licenses/mit',
            spdx_id: 'MIT',
            node_id: 'MDc6TGljZW5zZW1pdA==',
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          forks: faker.number.int({ min: undefined, max: undefined }),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          private: faker.datatype.boolean(),
          html_url: 'https://github.com/octocat/Hello-World',
          description: 'This your first repo!',
          fork: faker.datatype.boolean(),
          url: 'https://api.github.com/repos/octocat/Hello-World',
          archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
          assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
          blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
          branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
          collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
          comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
          commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
          compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
          contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
          contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
          deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
          downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
          events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
          forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
          git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
          git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
          git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
          git_url: 'git:github.com/octocat/Hello-World.git',
          issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
          issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
          issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
          keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
          labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
          languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
          merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
          milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
          notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
          pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
          releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
          ssh_url: 'git@github.com:octocat/Hello-World.git',
          stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
          statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
          subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
          subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
          tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
          teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
          trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
          clone_url: 'https://github.com/octocat/Hello-World.git',
          mirror_url: 'git:git.example.com/octocat/Hello-World',
          hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
          svn_url: 'https://svn.github.com/octocat/Hello-World',
          homepage: 'https://github.com',
          language: faker.lorem.slug(1),
          forks_count: 9,
          stargazers_count: 80,
          watchers_count: 80,
          size: 108,
          default_branch: 'master',
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: true,
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: true,
          has_projects: true,
          has_wiki: true,
          has_pages: faker.datatype.boolean(),
          has_downloads: true,
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: '2011-01-26T19:06:43Z',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:14:43Z',
          allow_rebase_merge: true,
          template_repository: {
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            name: faker.person.fullName(),
            full_name: faker.person.fullName(),
            owner: {
              login: faker.lorem.slug(1),
              id: faker.number.int({ min: undefined, max: undefined }),
              node_id: faker.lorem.slug(1),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(1),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.internet.url(),
            assignees_url: faker.internet.url(),
            blobs_url: faker.internet.url(),
            branches_url: faker.internet.url(),
            collaborators_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            compare_url: faker.internet.url(),
            contents_url: faker.internet.url(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.internet.url(),
            git_refs_url: faker.internet.url(),
            git_tags_url: faker.internet.url(),
            git_url: faker.internet.url(),
            issue_comment_url: faker.internet.url(),
            issue_events_url: faker.internet.url(),
            issues_url: faker.internet.url(),
            keys_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.internet.url(),
            notifications_url: faker.internet.url(),
            pulls_url: faker.internet.url(),
            releases_url: faker.internet.url(),
            ssh_url: faker.internet.url(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.internet.url(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.internet.url(),
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.number.int({ min: undefined, max: undefined }),
            stargazers_count: faker.number.int({ min: undefined, max: undefined }),
            watchers_count: faker.number.int({ min: undefined, max: undefined }),
            size: faker.number.int({ min: undefined, max: undefined }),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.number.int({ min: undefined, max: undefined }),
            is_template: faker.datatype.boolean(),
            topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
              faker.lorem.slug(1)
            ),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.number.int({ min: undefined, max: undefined }),
            network_count: faker.number.int({ min: undefined, max: undefined }),
          },
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: true,
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: true,
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
          open_issues: faker.number.int({ min: undefined, max: undefined }),
          watchers: faker.number.int({ min: undefined, max: undefined }),
          master_branch: faker.lorem.slug(1),
          starred_at: '"2020-07-09T00:17:42Z"',
          anonymous_access_enabled: faker.datatype.boolean(),
        },
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        author_association: 'OWNER',
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      comment: {
        id: 42,
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/comments/1',
        body: 'What version of Safari were you using when you observed this bug?',
        body_text: faker.lorem.slug(1),
        body_html: faker.lorem.slug(1),
        html_url: faker.internet.url(),
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        created_at: '2011-04-14T16:00:49Z',
        updated_at: '2011-04-14T16:00:49Z',
        issue_url: faker.internet.url(),
        author_association: 'OWNER',
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      pages: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        page_name: faker.person.fullName(),
        title: faker.lorem.slug(1),
        summary: faker.lorem.slug(1),
        action: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        html_url: faker.internet.url(),
      })),
    },
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
  }));
}

export function getUsersListFollowersForUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  }));
}

export function getUsersListFollowingForUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    login: 'octocat',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    gravatar_id: '41d064eb2195891e12d0413f63227ea7',
    url: 'https://api.github.com/users/octocat',
    html_url: 'https://github.com/octocat',
    followers_url: 'https://api.github.com/users/octocat/followers',
    following_url: 'https://api.github.com/users/octocat/following{/other_user}',
    gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
    organizations_url: 'https://api.github.com/users/octocat/orgs',
    repos_url: 'https://api.github.com/users/octocat/repos',
    events_url: 'https://api.github.com/users/octocat/events{/privacy}',
    received_events_url: 'https://api.github.com/users/octocat/received_events',
    type: 'User',
    site_admin: faker.datatype.boolean(),
    starred_at: '"2020-07-09T00:17:55Z"',
  }));
}

export function getGistsListForUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    url: faker.internet.url(),
    forks_url: faker.internet.url(),
    commits_url: faker.internet.url(),
    id: faker.lorem.slug(1),
    node_id: faker.lorem.slug(1),
    git_pull_url: faker.internet.url(),
    git_push_url: faker.internet.url(),
    html_url: faker.internet.url(),
    files: [...new Array(5).keys()]
      .map(_ => ({
        [faker.lorem.word()]: {
          filename: faker.person.fullName(),
          type: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          raw_url: faker.internet.url(),
          size: faker.number.int({ min: undefined, max: undefined }),
        },
      }))
      .reduce((acc, next) => Object.assign(acc, next), {}),
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    description: faker.lorem.slug(1),
    comments: faker.number.int({ min: undefined, max: undefined }),
    user: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    comments_url: faker.internet.url(),
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    truncated: faker.datatype.boolean(),
    forks: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
    history: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => null),
  }));
}

export function getGistsListForUser422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getUsersListGpgKeysForUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 3,
    primary_key_id: faker.number.int({ min: undefined, max: undefined }),
    key_id: '3262EFF25BA0D270',
    public_key: 'xsBNBFayYZ...',
    emails: [{ email: 'octocat@users.noreply.github.com', verified: true }],
    subkeys: [
      {
        id: 4,
        primary_key_id: 3,
        key_id: '4A595D4C72EE49C7',
        public_key: 'zsBNBFayYZ...',
        emails: [],
        subkeys: [],
        can_sign: false,
        can_encrypt_comms: true,
        can_encrypt_storage: true,
        can_certify: false,
        created_at: '2016-03-24T11:31:04-06:00',
        expires_at: null,
      },
    ],
    can_sign: true,
    can_encrypt_comms: faker.datatype.boolean(),
    can_encrypt_storage: faker.datatype.boolean(),
    can_certify: true,
    created_at: '2016-03-24T11:31:04-06:00',
    expires_at: faker.date.past(),
    raw_key: faker.lorem.slug(1),
  }));
}

export function getUsersGetContextForUser200Response() {
  return {
    contexts: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      message: faker.lorem.slug(1),
      octicon: faker.lorem.slug(1),
    })),
  };
}

export function getUsersGetContextForUser404Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    url: faker.internet.url(),
    status: faker.lorem.slug(1),
  };
}

export function getUsersGetContextForUser422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getAppsGetUserInstallation200Response() {
  return {
    id: 1,
    account: faker.helpers.arrayElement([
      {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      {
        description: faker.lorem.slug(1),
        html_url: 'https://github.com/enterprises/octo-business',
        website_url: faker.internet.url(),
        id: 42,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Octo Business',
        slug: 'octo-business',
        created_at: '2019-01-26T19:01:12Z',
        updated_at: '2019-01-26T19:14:43Z',
        avatar_url: faker.internet.url(),
      },
    ]),
    repository_selection: faker.helpers.arrayElement(['all', 'selected']),
    access_tokens_url: 'https://api.github.com/installations/1/access_tokens',
    repositories_url: 'https://api.github.com/installation/repositories',
    html_url: 'https://github.com/organizations/github/settings/installations/1',
    app_id: 1,
    target_id: faker.number.int({ min: undefined, max: undefined }),
    target_type: 'Organization',
    permissions: { contents: 'read', issues: 'read', deployments: 'write', single_file: 'read' },
    events: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    created_at: faker.date.past(),
    updated_at: faker.date.past(),
    single_file_name: 'config.yaml',
    has_multiple_single_files: true,
    single_file_paths: ['config.yml', '.github/issue_TEMPLATE.md'],
    app_slug: 'github-actions',
    suspended_by: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    suspended_at: faker.date.past(),
    contact_email: '"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"',
  };
}

export function getUsersListPublicKeysForUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    key: faker.lorem.slug(1),
  }));
}

export function getOrgsListForUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    login: 'github',
    id: 1,
    node_id: 'MDEyOk9yZ2FuaXphdGlvbjE=',
    url: 'https://api.github.com/orgs/github',
    repos_url: 'https://api.github.com/orgs/github/repos',
    events_url: 'https://api.github.com/orgs/github/events',
    hooks_url: 'https://api.github.com/orgs/github/hooks',
    issues_url: 'https://api.github.com/orgs/github/issues',
    members_url: 'https://api.github.com/orgs/github/members{/member}',
    public_members_url: 'https://api.github.com/orgs/github/public_members{/member}',
    avatar_url: 'https://github.com/images/error/octocat_happy.gif',
    description: 'A great organization',
  }));
}

export function getProjectsListForUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    owner_url: 'https://api.github.com/repos/api-playground/projects-test',
    url: 'https://api.github.com/projects/1002604',
    html_url: 'https://github.com/api-playground/projects-test/projects/12',
    columns_url: 'https://api.github.com/projects/1002604/columns',
    id: 1002604,
    node_id: 'MDc6UHJvamVjdDEwMDI2MDQ=',
    name: 'Week One Sprint',
    body: 'This project represents the sprint of the first week in January',
    number: 1,
    state: 'open',
    creator: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    created_at: '2011-04-10T20:09:31Z',
    updated_at: '2014-03-03T18:58:10Z',
    organization_permission: faker.helpers.arrayElement(['read', 'write', 'admin', 'none']),
    private: faker.datatype.boolean(),
  }));
}

export function getProjectsListForUser422Response() {
  return {
    message: faker.lorem.slug(1),
    documentation_url: faker.internet.url(),
    errors: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      resource: faker.lorem.slug(1),
      field: faker.lorem.slug(1),
      message: faker.lorem.slug(1),
      code: faker.lorem.slug(1),
      index: faker.number.int({ min: undefined, max: undefined }),
      value: faker.helpers.arrayElement([
        faker.lorem.slug(1),
        faker.number.int({ min: undefined, max: undefined }),
        [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      ]),
    })),
  };
}

export function getActivityListReceivedEventsForUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.lorem.slug(1),
    type: faker.lorem.slug(1),
    actor: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    repo: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    org: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    payload: {
      action: faker.lorem.slug(1),
      issue: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/1',
        repository_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: 42,
        state: 'open',
        state_reason: 'not_planned',
        title: 'Widget creation fails in Safari on OS X 10.8',
        body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        labels: ['bug', 'registration'],
        assignee: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        })),
        milestone: {
          url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
          html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
          labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
          id: 1002604,
          node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
          number: 42,
          state: 'open',
          title: 'v1.0',
          description: 'Tracking milestone for version 1.0',
          creator: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          open_issues: 4,
          closed_issues: 8,
          created_at: '2011-04-10T20:09:31Z',
          updated_at: '2014-03-03T18:58:10Z',
          closed_at: '2013-02-12T13:22:01Z',
          due_on: '2012-10-09T23:39:01Z',
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(1),
        comments: faker.number.int({ min: undefined, max: undefined }),
        pull_request: {
          merged_at: faker.date.past(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        body_html: faker.lorem.slug(1),
        body_text: faker.lorem.slug(1),
        timeline_url: faker.internet.url(),
        repository: {
          id: 42,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Team Environment',
          full_name: 'octocat/Hello-World',
          license: {
            key: 'mit',
            name: 'MIT License',
            url: 'https://api.github.com/licenses/mit',
            spdx_id: 'MIT',
            node_id: 'MDc6TGljZW5zZW1pdA==',
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          forks: faker.number.int({ min: undefined, max: undefined }),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          private: faker.datatype.boolean(),
          html_url: 'https://github.com/octocat/Hello-World',
          description: 'This your first repo!',
          fork: faker.datatype.boolean(),
          url: 'https://api.github.com/repos/octocat/Hello-World',
          archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
          assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
          blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
          branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
          collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
          comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
          commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
          compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
          contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
          contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
          deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
          downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
          events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
          forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
          git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
          git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
          git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
          git_url: 'git:github.com/octocat/Hello-World.git',
          issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
          issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
          issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
          keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
          labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
          languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
          merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
          milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
          notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
          pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
          releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
          ssh_url: 'git@github.com:octocat/Hello-World.git',
          stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
          statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
          subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
          subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
          tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
          teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
          trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
          clone_url: 'https://github.com/octocat/Hello-World.git',
          mirror_url: 'git:git.example.com/octocat/Hello-World',
          hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
          svn_url: 'https://svn.github.com/octocat/Hello-World',
          homepage: 'https://github.com',
          language: faker.lorem.slug(1),
          forks_count: 9,
          stargazers_count: 80,
          watchers_count: 80,
          size: 108,
          default_branch: 'master',
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: true,
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: true,
          has_projects: true,
          has_wiki: true,
          has_pages: faker.datatype.boolean(),
          has_downloads: true,
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: '2011-01-26T19:06:43Z',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:14:43Z',
          allow_rebase_merge: true,
          template_repository: {
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            name: faker.person.fullName(),
            full_name: faker.person.fullName(),
            owner: {
              login: faker.lorem.slug(1),
              id: faker.number.int({ min: undefined, max: undefined }),
              node_id: faker.lorem.slug(1),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(1),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.internet.url(),
            assignees_url: faker.internet.url(),
            blobs_url: faker.internet.url(),
            branches_url: faker.internet.url(),
            collaborators_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            compare_url: faker.internet.url(),
            contents_url: faker.internet.url(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.internet.url(),
            git_refs_url: faker.internet.url(),
            git_tags_url: faker.internet.url(),
            git_url: faker.internet.url(),
            issue_comment_url: faker.internet.url(),
            issue_events_url: faker.internet.url(),
            issues_url: faker.internet.url(),
            keys_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.internet.url(),
            notifications_url: faker.internet.url(),
            pulls_url: faker.internet.url(),
            releases_url: faker.internet.url(),
            ssh_url: faker.internet.url(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.internet.url(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.internet.url(),
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.number.int({ min: undefined, max: undefined }),
            stargazers_count: faker.number.int({ min: undefined, max: undefined }),
            watchers_count: faker.number.int({ min: undefined, max: undefined }),
            size: faker.number.int({ min: undefined, max: undefined }),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.number.int({ min: undefined, max: undefined }),
            is_template: faker.datatype.boolean(),
            topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
              faker.lorem.slug(1)
            ),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.number.int({ min: undefined, max: undefined }),
            network_count: faker.number.int({ min: undefined, max: undefined }),
          },
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: true,
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: true,
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
          open_issues: faker.number.int({ min: undefined, max: undefined }),
          watchers: faker.number.int({ min: undefined, max: undefined }),
          master_branch: faker.lorem.slug(1),
          starred_at: '"2020-07-09T00:17:42Z"',
          anonymous_access_enabled: faker.datatype.boolean(),
        },
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        author_association: 'OWNER',
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      comment: {
        id: 42,
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/comments/1',
        body: 'What version of Safari were you using when you observed this bug?',
        body_text: faker.lorem.slug(1),
        body_html: faker.lorem.slug(1),
        html_url: faker.internet.url(),
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        created_at: '2011-04-14T16:00:49Z',
        updated_at: '2011-04-14T16:00:49Z',
        issue_url: faker.internet.url(),
        author_association: 'OWNER',
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      pages: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        page_name: faker.person.fullName(),
        title: faker.lorem.slug(1),
        summary: faker.lorem.slug(1),
        action: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        html_url: faker.internet.url(),
      })),
    },
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
  }));
}

export function getActivityListReceivedPublicEventsForUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: faker.lorem.slug(1),
    type: faker.lorem.slug(1),
    actor: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    repo: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      url: faker.internet.url(),
    },
    org: {
      id: faker.number.int({ min: undefined, max: undefined }),
      login: faker.lorem.slug(1),
      display_login: faker.lorem.slug(1),
      gravatar_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      avatar_url: faker.internet.url(),
    },
    payload: {
      action: faker.lorem.slug(1),
      issue: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/1',
        repository_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: 42,
        state: 'open',
        state_reason: 'not_planned',
        title: 'Widget creation fails in Safari on OS X 10.8',
        body: 'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        labels: ['bug', 'registration'],
        assignee: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        assignees: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        })),
        milestone: {
          url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
          html_url: 'https://github.com/octocat/Hello-World/milestones/v1.0',
          labels_url: 'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels',
          id: 1002604,
          node_id: 'MDk6TWlsZXN0b25lMTAwMjYwNA==',
          number: 42,
          state: 'open',
          title: 'v1.0',
          description: 'Tracking milestone for version 1.0',
          creator: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          open_issues: 4,
          closed_issues: 8,
          created_at: '2011-04-10T20:09:31Z',
          updated_at: '2014-03-03T18:58:10Z',
          closed_at: '2013-02-12T13:22:01Z',
          due_on: '2012-10-09T23:39:01Z',
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(1),
        comments: faker.number.int({ min: undefined, max: undefined }),
        pull_request: {
          merged_at: faker.date.past(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        body_html: faker.lorem.slug(1),
        body_text: faker.lorem.slug(1),
        timeline_url: faker.internet.url(),
        repository: {
          id: 42,
          node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
          name: 'Team Environment',
          full_name: 'octocat/Hello-World',
          license: {
            key: 'mit',
            name: 'MIT License',
            url: 'https://api.github.com/licenses/mit',
            spdx_id: 'MIT',
            node_id: 'MDc6TGljZW5zZW1pdA==',
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          forks: faker.number.int({ min: undefined, max: undefined }),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          private: faker.datatype.boolean(),
          html_url: 'https://github.com/octocat/Hello-World',
          description: 'This your first repo!',
          fork: faker.datatype.boolean(),
          url: 'https://api.github.com/repos/octocat/Hello-World',
          archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
          assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
          blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
          branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
          collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
          comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
          commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
          compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
          contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
          contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
          deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
          downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
          events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
          forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
          git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
          git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
          git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
          git_url: 'git:github.com/octocat/Hello-World.git',
          issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
          issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
          issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
          keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
          labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
          languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
          merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
          milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
          notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
          pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
          releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
          ssh_url: 'git@github.com:octocat/Hello-World.git',
          stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
          statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
          subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
          subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
          tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
          teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
          trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
          clone_url: 'https://github.com/octocat/Hello-World.git',
          mirror_url: 'git:git.example.com/octocat/Hello-World',
          hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
          svn_url: 'https://svn.github.com/octocat/Hello-World',
          homepage: 'https://github.com',
          language: faker.lorem.slug(1),
          forks_count: 9,
          stargazers_count: 80,
          watchers_count: 80,
          size: 108,
          default_branch: 'master',
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: true,
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: true,
          has_projects: true,
          has_wiki: true,
          has_pages: faker.datatype.boolean(),
          has_downloads: true,
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: '2011-01-26T19:06:43Z',
          created_at: '2011-01-26T19:01:12Z',
          updated_at: '2011-01-26T19:14:43Z',
          allow_rebase_merge: true,
          template_repository: {
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            name: faker.person.fullName(),
            full_name: faker.person.fullName(),
            owner: {
              login: faker.lorem.slug(1),
              id: faker.number.int({ min: undefined, max: undefined }),
              node_id: faker.lorem.slug(1),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(1),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.internet.url(),
              gists_url: faker.internet.url(),
              starred_url: faker.internet.url(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(1),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(1),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.internet.url(),
            assignees_url: faker.internet.url(),
            blobs_url: faker.internet.url(),
            branches_url: faker.internet.url(),
            collaborators_url: faker.internet.url(),
            comments_url: faker.internet.url(),
            commits_url: faker.internet.url(),
            compare_url: faker.internet.url(),
            contents_url: faker.internet.url(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.internet.url(),
            git_refs_url: faker.internet.url(),
            git_tags_url: faker.internet.url(),
            git_url: faker.internet.url(),
            issue_comment_url: faker.internet.url(),
            issue_events_url: faker.internet.url(),
            issues_url: faker.internet.url(),
            keys_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.internet.url(),
            notifications_url: faker.internet.url(),
            pulls_url: faker.internet.url(),
            releases_url: faker.internet.url(),
            ssh_url: faker.internet.url(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.internet.url(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.internet.url(),
            clone_url: faker.internet.url(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.lorem.slug(1),
            language: faker.lorem.slug(1),
            forks_count: faker.number.int({ min: undefined, max: undefined }),
            stargazers_count: faker.number.int({ min: undefined, max: undefined }),
            watchers_count: faker.number.int({ min: undefined, max: undefined }),
            size: faker.number.int({ min: undefined, max: undefined }),
            default_branch: faker.lorem.slug(1),
            open_issues_count: faker.number.int({ min: undefined, max: undefined }),
            is_template: faker.datatype.boolean(),
            topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
              faker.lorem.slug(1)
            ),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(1),
            pushed_at: faker.date.past(),
            created_at: faker.date.past(),
            updated_at: faker.date.past(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(1),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.number.int({ min: undefined, max: undefined }),
            network_count: faker.number.int({ min: undefined, max: undefined }),
          },
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: true,
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: true,
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
          open_issues: faker.number.int({ min: undefined, max: undefined }),
          watchers: faker.number.int({ min: undefined, max: undefined }),
          master_branch: faker.lorem.slug(1),
          starred_at: '"2020-07-09T00:17:42Z"',
          anonymous_access_enabled: faker.datatype.boolean(),
        },
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        author_association: 'OWNER',
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      comment: {
        id: 42,
        node_id: faker.lorem.slug(1),
        url: 'https://api.github.com/repositories/42/issues/comments/1',
        body: 'What version of Safari were you using when you observed this bug?',
        body_text: faker.lorem.slug(1),
        body_html: faker.lorem.slug(1),
        html_url: faker.internet.url(),
        user: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        created_at: '2011-04-14T16:00:49Z',
        updated_at: '2011-04-14T16:00:49Z',
        issue_url: faker.internet.url(),
        author_association: 'OWNER',
        performed_via_github_app: {
          id: 37,
          slug: 'probot-owners',
          node_id: 'MDExOkludGVncmF0aW9uMQ==',
          owner: {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            login: 'octocat',
            id: 1,
            node_id: 'MDQ6VXNlcjE=',
            avatar_url: 'https://github.com/images/error/octocat_happy.gif',
            gravatar_id: '41d064eb2195891e12d0413f63227ea7',
            url: 'https://api.github.com/users/octocat',
            html_url: 'https://github.com/octocat',
            followers_url: 'https://api.github.com/users/octocat/followers',
            following_url: 'https://api.github.com/users/octocat/following{/other_user}',
            gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
            starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
            subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
            organizations_url: 'https://api.github.com/users/octocat/orgs',
            repos_url: 'https://api.github.com/users/octocat/repos',
            events_url: 'https://api.github.com/users/octocat/events{/privacy}',
            received_events_url: 'https://api.github.com/users/octocat/received_events',
            type: 'User',
            site_admin: faker.datatype.boolean(),
            starred_at: '"2020-07-09T00:17:55Z"',
          },
          name: 'Probot Owners',
          description: 'The description of the app.',
          external_url: 'https://example.com',
          html_url: 'https://github.com/apps/super-ci',
          created_at: '2017-07-08T16:18:44-04:00',
          updated_at: '2017-07-08T16:18:44-04:00',
          permissions: { issues: 'read', deployments: 'write' },
          events: ['label', 'deployment'],
          installations_count: 5,
          client_id: '"Iv1.25b5d1e65ffc4022"',
          client_secret: '"1d4b2097ac622ba702d19de498f005747a8b21d3"',
          webhook_secret: '"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"',
          pem: '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
        },
        reactions: {
          url: faker.internet.url(),
          total_count: faker.number.int({ min: undefined, max: undefined }),
          '+1': faker.number.int({ min: undefined, max: undefined }),
          '-1': faker.number.int({ min: undefined, max: undefined }),
          laugh: faker.number.int({ min: undefined, max: undefined }),
          confused: faker.number.int({ min: undefined, max: undefined }),
          heart: faker.number.int({ min: undefined, max: undefined }),
          hooray: faker.number.int({ min: undefined, max: undefined }),
          eyes: faker.number.int({ min: undefined, max: undefined }),
          rocket: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      pages: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
        page_name: faker.person.fullName(),
        title: faker.lorem.slug(1),
        summary: faker.lorem.slug(1),
        action: faker.lorem.slug(1),
        sha: faker.lorem.slug(1),
        html_url: faker.internet.url(),
      })),
    },
    public: faker.datatype.boolean(),
    created_at: faker.date.past(),
  }));
}

export function getReposListForUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1296269,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Hello-World',
    full_name: 'octocat/Hello-World',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: faker.internet.url(),
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: faker.internet.url(),
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: faker.internet.url(),
    mirror_url: faker.internet.url(),
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: faker.internet.url(),
    homepage: faker.lorem.slug(1),
    language: faker.lorem.slug(1),
    forks_count: faker.number.int({ min: undefined, max: undefined }),
    stargazers_count: faker.number.int({ min: undefined, max: undefined }),
    watchers_count: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    default_branch: faker.lorem.slug(1),
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: faker.datatype.boolean(),
    topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    has_issues: faker.datatype.boolean(),
    has_projects: faker.datatype.boolean(),
    has_wiki: faker.datatype.boolean(),
    has_pages: faker.datatype.boolean(),
    has_downloads: faker.datatype.boolean(),
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: faker.lorem.slug(1),
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    permissions: {
      admin: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
    },
    temp_clone_token: faker.lorem.slug(1),
    delete_branch_on_merge: faker.datatype.boolean(),
    subscribers_count: faker.number.int({ min: undefined, max: undefined }),
    network_count: faker.number.int({ min: undefined, max: undefined }),
    code_of_conduct: {
      key: 'contributor_covenant',
      name: 'Contributor Covenant',
      url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
      body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
      html_url: faker.internet.url(),
    },
    license: {
      key: faker.lorem.slug(1),
      name: faker.person.fullName(),
      spdx_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      node_id: faker.lorem.slug(1),
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    allow_forking: faker.datatype.boolean(),
  }));
}

export function getActivityListReposStarredByUser200Response() {
  return faker.helpers.arrayElement([
    [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      starred_at: faker.date.past(),
      repo: {
        id: 42,
        node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
        name: 'Team Environment',
        full_name: 'octocat/Hello-World',
        license: {
          key: 'mit',
          name: 'MIT License',
          url: 'https://api.github.com/licenses/mit',
          spdx_id: 'MIT',
          node_id: 'MDc6TGljZW5zZW1pdA==',
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        forks: faker.number.int({ min: undefined, max: undefined }),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.person.fullName(),
          email: faker.internet.email(),
          login: 'octocat',
          id: 1,
          node_id: 'MDQ6VXNlcjE=',
          avatar_url: 'https://github.com/images/error/octocat_happy.gif',
          gravatar_id: '41d064eb2195891e12d0413f63227ea7',
          url: 'https://api.github.com/users/octocat',
          html_url: 'https://github.com/octocat',
          followers_url: 'https://api.github.com/users/octocat/followers',
          following_url: 'https://api.github.com/users/octocat/following{/other_user}',
          gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
          starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
          subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
          organizations_url: 'https://api.github.com/users/octocat/orgs',
          repos_url: 'https://api.github.com/users/octocat/repos',
          events_url: 'https://api.github.com/users/octocat/events{/privacy}',
          received_events_url: 'https://api.github.com/users/octocat/received_events',
          type: 'User',
          site_admin: faker.datatype.boolean(),
          starred_at: '"2020-07-09T00:17:55Z"',
        },
        private: faker.datatype.boolean(),
        html_url: 'https://github.com/octocat/Hello-World',
        description: 'This your first repo!',
        fork: faker.datatype.boolean(),
        url: 'https://api.github.com/repos/octocat/Hello-World',
        archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
        assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
        blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
        branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
        collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
        comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
        commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
        compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
        contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
        contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
        deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
        downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
        events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
        forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
        git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
        git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
        git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
        git_url: 'git:github.com/octocat/Hello-World.git',
        issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
        issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
        issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
        keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
        labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
        languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
        merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
        milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
        notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
        pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
        releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
        ssh_url: 'git@github.com:octocat/Hello-World.git',
        stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
        statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
        subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
        subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
        tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
        teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
        trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
        clone_url: 'https://github.com/octocat/Hello-World.git',
        mirror_url: 'git:git.example.com/octocat/Hello-World',
        hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
        svn_url: 'https://svn.github.com/octocat/Hello-World',
        homepage: 'https://github.com',
        language: faker.lorem.slug(1),
        forks_count: 9,
        stargazers_count: 80,
        watchers_count: 80,
        size: 108,
        default_branch: 'master',
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: true,
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: true,
        has_projects: true,
        has_wiki: true,
        has_pages: faker.datatype.boolean(),
        has_downloads: true,
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: '2011-01-26T19:06:43Z',
        created_at: '2011-01-26T19:01:12Z',
        updated_at: '2011-01-26T19:14:43Z',
        allow_rebase_merge: true,
        template_repository: {
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          name: faker.person.fullName(),
          full_name: faker.person.fullName(),
          owner: {
            login: faker.lorem.slug(1),
            id: faker.number.int({ min: undefined, max: undefined }),
            node_id: faker.lorem.slug(1),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(1),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.internet.url(),
            gists_url: faker.internet.url(),
            starred_url: faker.internet.url(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(1),
            site_admin: faker.datatype.boolean(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(1),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.internet.url(),
          assignees_url: faker.internet.url(),
          blobs_url: faker.internet.url(),
          branches_url: faker.internet.url(),
          collaborators_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          compare_url: faker.internet.url(),
          contents_url: faker.internet.url(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.internet.url(),
          git_refs_url: faker.internet.url(),
          git_tags_url: faker.internet.url(),
          git_url: faker.internet.url(),
          issue_comment_url: faker.internet.url(),
          issue_events_url: faker.internet.url(),
          issues_url: faker.internet.url(),
          keys_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.internet.url(),
          notifications_url: faker.internet.url(),
          pulls_url: faker.internet.url(),
          releases_url: faker.internet.url(),
          ssh_url: faker.internet.url(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.internet.url(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.internet.url(),
          clone_url: faker.internet.url(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.lorem.slug(1),
          language: faker.lorem.slug(1),
          forks_count: faker.number.int({ min: undefined, max: undefined }),
          stargazers_count: faker.number.int({ min: undefined, max: undefined }),
          watchers_count: faker.number.int({ min: undefined, max: undefined }),
          size: faker.number.int({ min: undefined, max: undefined }),
          default_branch: faker.lorem.slug(1),
          open_issues_count: faker.number.int({ min: undefined, max: undefined }),
          is_template: faker.datatype.boolean(),
          topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
            faker.lorem.slug(1)
          ),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(1),
          pushed_at: faker.date.past(),
          created_at: faker.date.past(),
          updated_at: faker.date.past(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          temp_clone_token: faker.lorem.slug(1),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          subscribers_count: faker.number.int({ min: undefined, max: undefined }),
          network_count: faker.number.int({ min: undefined, max: undefined }),
        },
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: true,
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: true,
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
        open_issues: faker.number.int({ min: undefined, max: undefined }),
        watchers: faker.number.int({ min: undefined, max: undefined }),
        master_branch: faker.lorem.slug(1),
        starred_at: '"2020-07-09T00:17:42Z"',
        anonymous_access_enabled: faker.datatype.boolean(),
      },
    })),
    [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
      id: 42,
      node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
      name: 'Team Environment',
      full_name: 'octocat/Hello-World',
      license: {
        key: 'mit',
        name: 'MIT License',
        url: 'https://api.github.com/licenses/mit',
        spdx_id: 'MIT',
        node_id: 'MDc6TGljZW5zZW1pdA==',
        html_url: faker.internet.url(),
      },
      organization: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      forks: faker.number.int({ min: undefined, max: undefined }),
      permissions: {
        admin: faker.datatype.boolean(),
        pull: faker.datatype.boolean(),
        triage: faker.datatype.boolean(),
        push: faker.datatype.boolean(),
        maintain: faker.datatype.boolean(),
      },
      owner: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        login: 'octocat',
        id: 1,
        node_id: 'MDQ6VXNlcjE=',
        avatar_url: 'https://github.com/images/error/octocat_happy.gif',
        gravatar_id: '41d064eb2195891e12d0413f63227ea7',
        url: 'https://api.github.com/users/octocat',
        html_url: 'https://github.com/octocat',
        followers_url: 'https://api.github.com/users/octocat/followers',
        following_url: 'https://api.github.com/users/octocat/following{/other_user}',
        gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
        starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
        subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
        organizations_url: 'https://api.github.com/users/octocat/orgs',
        repos_url: 'https://api.github.com/users/octocat/repos',
        events_url: 'https://api.github.com/users/octocat/events{/privacy}',
        received_events_url: 'https://api.github.com/users/octocat/received_events',
        type: 'User',
        site_admin: faker.datatype.boolean(),
        starred_at: '"2020-07-09T00:17:55Z"',
      },
      private: faker.datatype.boolean(),
      html_url: 'https://github.com/octocat/Hello-World',
      description: 'This your first repo!',
      fork: faker.datatype.boolean(),
      url: 'https://api.github.com/repos/octocat/Hello-World',
      archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
      assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
      blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
      branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
      collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
      comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
      commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
      compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
      contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
      contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
      deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
      downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
      events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
      forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
      git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
      git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
      git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
      git_url: 'git:github.com/octocat/Hello-World.git',
      issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
      issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
      issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
      keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
      labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
      languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
      merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
      milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
      notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
      pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
      releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
      ssh_url: 'git@github.com:octocat/Hello-World.git',
      stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
      statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
      subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
      subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
      tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
      teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
      trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
      clone_url: 'https://github.com/octocat/Hello-World.git',
      mirror_url: 'git:git.example.com/octocat/Hello-World',
      hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
      svn_url: 'https://svn.github.com/octocat/Hello-World',
      homepage: 'https://github.com',
      language: faker.lorem.slug(1),
      forks_count: 9,
      stargazers_count: 80,
      watchers_count: 80,
      size: 108,
      default_branch: 'master',
      open_issues_count: faker.number.int({ min: undefined, max: undefined }),
      is_template: true,
      topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
      has_issues: true,
      has_projects: true,
      has_wiki: true,
      has_pages: faker.datatype.boolean(),
      has_downloads: true,
      archived: faker.datatype.boolean(),
      disabled: faker.datatype.boolean(),
      visibility: faker.lorem.slug(1),
      pushed_at: '2011-01-26T19:06:43Z',
      created_at: '2011-01-26T19:01:12Z',
      updated_at: '2011-01-26T19:14:43Z',
      allow_rebase_merge: true,
      template_repository: {
        id: faker.number.int({ min: undefined, max: undefined }),
        node_id: faker.lorem.slug(1),
        name: faker.person.fullName(),
        full_name: faker.person.fullName(),
        owner: {
          login: faker.lorem.slug(1),
          id: faker.number.int({ min: undefined, max: undefined }),
          node_id: faker.lorem.slug(1),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(1),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.internet.url(),
          gists_url: faker.internet.url(),
          starred_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(1),
          site_admin: faker.datatype.boolean(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(1),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.internet.url(),
        assignees_url: faker.internet.url(),
        blobs_url: faker.internet.url(),
        branches_url: faker.internet.url(),
        collaborators_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        compare_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.internet.url(),
        git_refs_url: faker.internet.url(),
        git_tags_url: faker.internet.url(),
        git_url: faker.internet.url(),
        issue_comment_url: faker.internet.url(),
        issue_events_url: faker.internet.url(),
        issues_url: faker.internet.url(),
        keys_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.internet.url(),
        notifications_url: faker.internet.url(),
        pulls_url: faker.internet.url(),
        releases_url: faker.internet.url(),
        ssh_url: faker.internet.url(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.internet.url(),
        clone_url: faker.internet.url(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.lorem.slug(1),
        language: faker.lorem.slug(1),
        forks_count: faker.number.int({ min: undefined, max: undefined }),
        stargazers_count: faker.number.int({ min: undefined, max: undefined }),
        watchers_count: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
        default_branch: faker.lorem.slug(1),
        open_issues_count: faker.number.int({ min: undefined, max: undefined }),
        is_template: faker.datatype.boolean(),
        topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ =>
          faker.lorem.slug(1)
        ),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(1),
        pushed_at: faker.date.past(),
        created_at: faker.date.past(),
        updated_at: faker.date.past(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        temp_clone_token: faker.lorem.slug(1),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_update_branch: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        subscribers_count: faker.number.int({ min: undefined, max: undefined }),
        network_count: faker.number.int({ min: undefined, max: undefined }),
      },
      temp_clone_token: faker.lorem.slug(1),
      allow_squash_merge: true,
      allow_auto_merge: faker.datatype.boolean(),
      delete_branch_on_merge: faker.datatype.boolean(),
      allow_update_branch: faker.datatype.boolean(),
      allow_merge_commit: true,
      allow_forking: faker.datatype.boolean(),
      subscribers_count: faker.number.int({ min: undefined, max: undefined }),
      network_count: faker.number.int({ min: undefined, max: undefined }),
      open_issues: faker.number.int({ min: undefined, max: undefined }),
      watchers: faker.number.int({ min: undefined, max: undefined }),
      master_branch: faker.lorem.slug(1),
      starred_at: '"2020-07-09T00:17:42Z"',
      anonymous_access_enabled: faker.datatype.boolean(),
    })),
  ]);
}

export function getActivityListReposWatchedByUser200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => ({
    id: 1296269,
    node_id: 'MDEwOlJlcG9zaXRvcnkxMjk2MjY5',
    name: 'Hello-World',
    full_name: 'octocat/Hello-World',
    owner: {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      login: 'octocat',
      id: 1,
      node_id: 'MDQ6VXNlcjE=',
      avatar_url: 'https://github.com/images/error/octocat_happy.gif',
      gravatar_id: '41d064eb2195891e12d0413f63227ea7',
      url: 'https://api.github.com/users/octocat',
      html_url: 'https://github.com/octocat',
      followers_url: 'https://api.github.com/users/octocat/followers',
      following_url: 'https://api.github.com/users/octocat/following{/other_user}',
      gists_url: 'https://api.github.com/users/octocat/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/octocat/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/octocat/subscriptions',
      organizations_url: 'https://api.github.com/users/octocat/orgs',
      repos_url: 'https://api.github.com/users/octocat/repos',
      events_url: 'https://api.github.com/users/octocat/events{/privacy}',
      received_events_url: 'https://api.github.com/users/octocat/received_events',
      type: 'User',
      site_admin: faker.datatype.boolean(),
      starred_at: '"2020-07-09T00:17:55Z"',
    },
    private: faker.datatype.boolean(),
    html_url: 'https://github.com/octocat/Hello-World',
    description: 'This your first repo!',
    fork: faker.datatype.boolean(),
    url: 'https://api.github.com/repos/octocat/Hello-World',
    archive_url: 'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}',
    assignees_url: 'http://api.github.com/repos/octocat/Hello-World/assignees{/user}',
    blobs_url: 'http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}',
    branches_url: 'http://api.github.com/repos/octocat/Hello-World/branches{/branch}',
    collaborators_url: 'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}',
    comments_url: 'http://api.github.com/repos/octocat/Hello-World/comments{/number}',
    commits_url: 'http://api.github.com/repos/octocat/Hello-World/commits{/sha}',
    compare_url: 'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}',
    contents_url: 'http://api.github.com/repos/octocat/Hello-World/contents/{+path}',
    contributors_url: 'http://api.github.com/repos/octocat/Hello-World/contributors',
    deployments_url: 'http://api.github.com/repos/octocat/Hello-World/deployments',
    downloads_url: 'http://api.github.com/repos/octocat/Hello-World/downloads',
    events_url: 'http://api.github.com/repos/octocat/Hello-World/events',
    forks_url: 'http://api.github.com/repos/octocat/Hello-World/forks',
    git_commits_url: 'http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}',
    git_refs_url: 'http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}',
    git_tags_url: 'http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}',
    git_url: faker.internet.url(),
    issue_comment_url: 'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}',
    issue_events_url: 'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}',
    issues_url: 'http://api.github.com/repos/octocat/Hello-World/issues{/number}',
    keys_url: 'http://api.github.com/repos/octocat/Hello-World/keys{/key_id}',
    labels_url: 'http://api.github.com/repos/octocat/Hello-World/labels{/name}',
    languages_url: 'http://api.github.com/repos/octocat/Hello-World/languages',
    merges_url: 'http://api.github.com/repos/octocat/Hello-World/merges',
    milestones_url: 'http://api.github.com/repos/octocat/Hello-World/milestones{/number}',
    notifications_url: 'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    pulls_url: 'http://api.github.com/repos/octocat/Hello-World/pulls{/number}',
    releases_url: 'http://api.github.com/repos/octocat/Hello-World/releases{/id}',
    ssh_url: faker.internet.url(),
    stargazers_url: 'http://api.github.com/repos/octocat/Hello-World/stargazers',
    statuses_url: 'http://api.github.com/repos/octocat/Hello-World/statuses/{sha}',
    subscribers_url: 'http://api.github.com/repos/octocat/Hello-World/subscribers',
    subscription_url: 'http://api.github.com/repos/octocat/Hello-World/subscription',
    tags_url: 'http://api.github.com/repos/octocat/Hello-World/tags',
    teams_url: 'http://api.github.com/repos/octocat/Hello-World/teams',
    trees_url: 'http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}',
    clone_url: faker.internet.url(),
    mirror_url: faker.internet.url(),
    hooks_url: 'http://api.github.com/repos/octocat/Hello-World/hooks',
    svn_url: faker.internet.url(),
    homepage: faker.lorem.slug(1),
    language: faker.lorem.slug(1),
    forks_count: faker.number.int({ min: undefined, max: undefined }),
    stargazers_count: faker.number.int({ min: undefined, max: undefined }),
    watchers_count: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    default_branch: faker.lorem.slug(1),
    open_issues_count: faker.number.int({ min: undefined, max: undefined }),
    is_template: faker.datatype.boolean(),
    topics: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(_ => faker.lorem.slug(1)),
    has_issues: faker.datatype.boolean(),
    has_projects: faker.datatype.boolean(),
    has_wiki: faker.datatype.boolean(),
    has_pages: faker.datatype.boolean(),
    has_downloads: faker.datatype.boolean(),
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    visibility: faker.lorem.slug(1),
    pushed_at: '2011-01-26T19:06:43Z',
    created_at: '2011-01-26T19:01:12Z',
    updated_at: '2011-01-26T19:14:43Z',
    permissions: {
      admin: faker.datatype.boolean(),
      maintain: faker.datatype.boolean(),
      push: faker.datatype.boolean(),
      triage: faker.datatype.boolean(),
      pull: faker.datatype.boolean(),
    },
    temp_clone_token: faker.lorem.slug(1),
    delete_branch_on_merge: faker.datatype.boolean(),
    subscribers_count: faker.number.int({ min: undefined, max: undefined }),
    network_count: faker.number.int({ min: undefined, max: undefined }),
    code_of_conduct: {
      key: 'contributor_covenant',
      name: 'Contributor Covenant',
      url: 'https://api.github.com/codes_of_conduct/contributor_covenant',
      body: "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
      html_url: faker.internet.url(),
    },
    license: {
      key: faker.lorem.slug(1),
      name: faker.person.fullName(),
      spdx_id: faker.lorem.slug(1),
      url: faker.internet.url(),
      node_id: faker.lorem.slug(1),
    },
    forks: faker.number.int({ min: undefined, max: undefined }),
    open_issues: faker.number.int({ min: undefined, max: undefined }),
    watchers: faker.number.int({ min: undefined, max: undefined }),
    allow_forking: faker.datatype.boolean(),
  }));
}

export function getMetaGetZen200Response() {
  return null;
}

// This configures a Service Worker with the given request handlers.
export const startWorker = () => {
  const worker = setupWorker(...handlers);
  worker.start();
};
