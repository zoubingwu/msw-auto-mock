// Vitest Snapshot v1

exports[`generate:mockTemplate > should include expected properties 1`] = `
"/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
import { HttpResponse, http } from \\"msw\\";
import { faker } from \\"@faker-js/faker\\";
import { setupWorker } from \\"msw/browser\\";

faker.seed(1);

const baseURL = \\"\\";
const MAX_ARRAY_LENGTH = 20;

let i = 0;
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
};

export const handlers = [
  http.get(\`\${baseURL}/test\`, () => {
    const resultArray = [[getGetTest200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
];

export function getGetTest200Response() {
  return {
    code: faker.helpers.arrayElement([200]),
    msg: faker.helpers.arrayElement([\\"success\\"]),
    data: {
      count: faker.number.int({ min: undefined, max: undefined }),
      rows: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        id: faker.number.int({ min: 1, max: undefined }),
        created_at: faker.date.past(),
        creator: {
          name: faker.person.fullName(),
        },
        name: faker.person.fullName(),
      })),
    },
  };
}

// This configures a Service Worker with the given request handlers.
export const startWorker = () => {
  const worker = setupWorker(...handlers);
  worker.start();
};
"
`;
